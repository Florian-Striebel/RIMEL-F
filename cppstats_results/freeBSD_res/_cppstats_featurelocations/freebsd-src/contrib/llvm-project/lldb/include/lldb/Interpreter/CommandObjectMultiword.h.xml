<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/CommandObjectMultiword.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_COMMANDOBJECTMULTIWORD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_COMMANDOBJECTMULTIWORD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/CommandObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>CommandObjectMultiword</name> <range>: <expr><name>public</name> <name>CommandObject</name> <block>{

<expr><name>friend</name> <name>class</name> <name>CommandInterpreter</name></expr>;
<expr><name>friend</name> <name>class</name> <name>CommandObjectSyntax</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>CommandObjectMultiword</name><argument_list>(<argument>CommandInterpreter &amp;interpreter</argument>, <argument>const char *name</argument>,
<argument>const char *help = nullptr</argument>,
<argument>const char *syntax = nullptr</argument>, <argument>uint32_t flags = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>CommandObjectMultiword</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsMultiwordObject</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>CommandObjectMultiword</name> <operator>*</operator><macro><name>GetAsMultiwordCommand</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>this</name></expr>;</return> }</block>

<name>bool</name> <macro><name>LoadSubCommand</name><argument_list>(<argument>llvm::StringRef cmd_name</argument>,
<argument>const lldb::CommandObjectSP &amp;command_obj</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GenerateHelpText</name><argument_list>(<argument>Stream &amp;output_stream</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <macro><name>GetSubcommandSP</name><argument_list>(<argument>llvm::StringRef sub_cmd</argument>,
<argument>StringList *matches = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>CommandObject</name> <operator>*</operator><macro><name>GetSubcommandObject</name><argument_list>(<argument>llvm::StringRef sub_cmd</argument>,
<argument>StringList *matches = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AproposAllSubCommands</name><argument_list>(<argument>llvm::StringRef prefix</argument>,
<argument>llvm::StringRef search_word</argument>,
<argument>StringList &amp;commands_found</argument>,
<argument>StringList &amp;commands_help</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>WantsRawCommandString</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>HandleCompletion</name><argument_list>(<argument>CompletionRequest &amp;request</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRepeatCommand</name><argument_list>(<argument>Args &amp;current_command_args</argument>,
<argument>uint32_t index</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>Execute</name><argument_list>(<argument>const char *args_string</argument>, <argument>CommandReturnObject &amp;result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsRemovable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>m_can_be_removed</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetRemovable</name><argument_list>(<argument>bool removable</argument>)</argument_list></macro> <block>{ <expr><name>m_can_be_removed</name> <operator>=</operator> <name>removable</name></expr>; }</block>

<name>protected</name><operator>:</operator>
<name>CommandObject</name><operator>::</operator><name>CommandMap</name> <operator>&amp;</operator><macro><name>GetSubcommandDictionary</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_subcommand_dict</name></expr>;</return>
}</block>

<name>CommandObject</name><operator>::</operator><name>CommandMap</name> <name>m_subcommand_dict</name></expr>;
<expr><name>bool</name> <name>m_can_be_removed</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CommandObjectProxy</name> <range>: <expr><name>public</name> <name>CommandObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>CommandObjectProxy</name><argument_list>(<argument>CommandInterpreter &amp;interpreter</argument>, <argument>const char *name</argument>,
<argument>const char *help = nullptr</argument>, <argument>const char *syntax = nullptr</argument>,
<argument>uint32_t flags = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>CommandObjectProxy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>virtual</name> <name>CommandObject</name> <operator>*</operator><call><name>GetProxyCommandObject</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetSyntax</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetHelp</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetHelpLong</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsRemovable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsMultiwordObject</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>CommandObjectMultiword</name> <operator>*</operator><macro><name>GetAsMultiwordCommand</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GenerateHelpText</name><argument_list>(<argument>Stream &amp;result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <macro><name>GetSubcommandSP</name><argument_list>(<argument>llvm::StringRef sub_cmd</argument>,
<argument>StringList *matches = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>CommandObject</name> <operator>*</operator><macro><name>GetSubcommandObject</name><argument_list>(<argument>llvm::StringRef sub_cmd</argument>,
<argument>StringList *matches = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AproposAllSubCommands</name><argument_list>(<argument>llvm::StringRef prefix</argument>,
<argument>llvm::StringRef search_word</argument>,
<argument>StringList &amp;commands_found</argument>,
<argument>StringList &amp;commands_help</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>LoadSubCommand</name><argument_list>(<argument>llvm::StringRef cmd_name</argument>,
<argument>const lldb::CommandObjectSP &amp;command_obj</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>WantsRawCommandString</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>WantsCompletion</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Options</name> <operator>*</operator><macro><name>GetOptions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>HandleCompletion</name><argument_list>(<argument>CompletionRequest &amp;request</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name>
<macro><name>HandleArgumentCompletion</name><argument_list>(<argument>CompletionRequest &amp;request</argument>,
<argument>OptionElementVector &amp;opt_element_vector</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRepeatCommand</name><argument_list>(<argument>Args &amp;current_command_args</argument>,
<argument>uint32_t index</argument>)</argument_list></macro> <name>override</name></expr>;




<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name> <call><name>GetUnsupportedError</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>Execute</name><argument_list>(<argument>const char *args_string</argument>, <argument>CommandReturnObject &amp;result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>

<name>friend</name> <name>class</name> <name>CommandInterpreter</name></expr>;
<expr><name>friend</name> <name>class</name> <name>CommandObjectSyntax</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
