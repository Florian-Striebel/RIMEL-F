<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/AddressRange.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_ADDRESSRANGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_ADDRESSRANGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SectionList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>AddressRange</name> <block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><call><name>AddressRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>















<macro><name>AddressRange</name><argument_list>(<argument>const lldb::SectionSP &amp;section</argument>, <argument>lldb::addr_t offset</argument>,
<argument>lldb::addr_t byte_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>














<macro><name>AddressRange</name><argument_list>(<argument>lldb::addr_t file_addr</argument>, <argument>lldb::addr_t byte_size</argument>,
<argument>const SectionList *section_list = nullptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>











<macro><name>AddressRange</name><argument_list>(<argument>const Address &amp;so_addr</argument>, <argument>lldb::addr_t byte_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<expr_stmt><expr><operator>~</operator><call><name>AddressRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>









<decl_stmt><decl><type><name>bool</name></type> <name>Contains</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






















<decl_stmt><decl><type><name>bool</name></type> <name>ContainsFileAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<decl_stmt><decl><type><name>bool</name></type> <name>ContainsFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<decl_stmt><decl><type><name>bool</name></type> <name>ContainsLoadAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>ContainsLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>













<function_decl><type><name>bool</name></type> <name>Extend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AddressRange</name> <modifier>&amp;</modifier></type><name>rhs_range</name></decl></parameter>)</parameter_list>;</function_decl>





















<decl_stmt><decl><type><name>bool</name></type>
<name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>Address</name><operator>::</operator><name>DumpStyle</name> <name>style</name></expr></argument>,
<argument><expr><name>Address</name><operator>::</operator><name>DumpStyle</name> <name>fallback_style</name> <operator>=</operator> <name>Address</name><operator>::</operator><name>DumpStyleInvalid</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<decl_stmt><decl><type><name>void</name></type> <name>DumpDebug</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<function><type><name>Address</name> <modifier>&amp;</modifier></type><name>GetBaseAddress</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_base_addr</name></expr>;</return> </block_content>}</block></function>





<expr_stmt><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><macro><name>GetBaseAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_base_addr</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_byte_size</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AddressRange</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>SetByteSize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>byte_size</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_byte_size</name> <operator>=</operator> <name>byte_size</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>Address</name></type> <name>m_base_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_byte_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
