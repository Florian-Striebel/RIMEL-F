<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/SourceManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_SOURCEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_SOURCEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Chrono.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>RegularExpression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>File</name> <block>{<block_content>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SourceManager</name><operator>::</operator><name>File</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator>
<specifier>const</specifier> <name>SourceManager</name><operator>::</operator><name>File</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>File</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>File</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>lldb::DebuggerSP debugger_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>File</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>UpdateIfNeeded</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>size_t</name></type> <name>DisplaySourceLines</name><argument_list>(<argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>column</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>context_before</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>context_after</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>FindLinesMatchingRegex</name><argument_list>(<argument><expr><name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>start_line</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>end_line</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>match_lines</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetLine</name><argument_list>(<argument><expr><name>uint32_t</name> <name>line_no</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetLineOffset</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>LineIsValid</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetFileSpec</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_file_spec</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetSourceMapModificationID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_source_map_mod_id</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PeekLineData</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetLineLength</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_newline_chars</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetNumLines</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<function_decl><type><name>bool</name></type> <name>CalculateLineOffsets</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file_spec_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file_spec</name></decl>;</decl_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>m_mod_time</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_source_map_mod_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <name>m_data_sp</name></expr>;</expr_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>LineOffsets</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>LineOffsets</name></type> <name>m_offsets</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DebuggerWP</name> <name>m_debugger_wp</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>CommonInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>, <parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>FileSP</name></expr>;</expr_stmt></typedef>




<decl_stmt><decl><type><name>class</name></type> <name>SourceFileCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SourceFileCache</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SourceFileCache</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>AddSourceFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSP</name> <modifier>&amp;</modifier></type><name>file_sp</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>FileSP</name></type> <name>FindSourceFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_file_cache</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>, <argument><expr><name>FileSP</name></expr></argument>&gt;</argument_list></name> <name>FileCache</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>FileCache</name></type> <name>m_file_cache</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<expr_stmt><expr><call><name>SourceManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name> <operator>&amp;</operator><name>debugger_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SourceManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SourceManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>FileSP</name></type> <name>GetLastFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>GetFile</name><argument_list>(<argument><expr><name>m_last_file_spec</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>size_t</name></type>
<name>DisplaySourceLinesWithLineNumbers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>context_before</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>context_after</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_line_cstr</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SymbolContextList</name> <modifier>*</modifier></type><name>bp_locs</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>DisplaySourceLinesWithLineNumbersUsingLastFile</name><parameter_list>(
<parameter><decl><type><name>uint32_t</name></type> <name>start_line</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>curr_line</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>column</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_line_cstr</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SymbolContextList</name> <modifier>*</modifier></type><name>bp_locs</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>DisplayMoreWithLineNumbers</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reverse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SymbolContextList</name> <modifier>*</modifier></type><name>bp_locs</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetDefaultFileAndLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetDefaultFileAndLine</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>DefaultFileAndLineSet</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>GetFile</name><argument_list>(<argument><expr><name>m_last_file_spec</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>FindLinesMatchingRegex</name><argument_list>(<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>start_line</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>end_line</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>match_lines</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>FileSP</name></type> <name>GetFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_last_file_spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_last_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_last_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_default_set</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetWP</name> <name>m_target_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DebuggerWP</name> <name>m_debugger_wp</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>SourceManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SourceManager</name><operator>::</operator><name>File</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>SourceManager</name><operator>::</operator><name>File</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
