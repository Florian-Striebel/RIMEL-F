<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/StreamBuffer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_STREAMBUFFER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_STREAMBUFFER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>N</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>StreamBuffer</name> <range>: <expr><name>public</name> <name>Stream</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StreamBuffer</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Stream</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>eByteOrderBig</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_packet</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<macro><name>StreamBuffer</name><argument_list>(<argument>uint32_t flags</argument>, <argument>uint32_t addr_size</argument>, <argument>lldb::ByteOrder byte_order</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stream</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>, <argument><expr><name>byte_order</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_packet</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>StreamBuffer</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>void</name> <macro><name>Flush</name><argument_list>()</argument_list></macro> <name>override</name> <block>{

}</block>

<name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>m_packet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>; }</block>





<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_packet</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_packet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>N</name></expr></argument>&gt;</argument_list></name> <name>m_packet</name></expr>;

<expr><name>size_t</name> <macro><name>WriteImpl</name><argument_list>(<argument>const void *s</argument>, <argument>size_t length</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_packet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name><operator>)</operator> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>length</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
