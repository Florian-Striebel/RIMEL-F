<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/FormatCache.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_FORMATCACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_FORMATCACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FormatCache</name> <block>{<block_content>
<label><name>private</name>:</label>
<struct>struct <name>Entry</name> <block>{
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>m_format_cached</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_summary_cached</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_synthetic_cached</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name> <name>m_format_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <name>m_summary_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name> <name>m_synthetic_sp</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Entry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>IsCached</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsFormatCached</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsSummaryCached</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsSyntheticCached</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Get</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Get</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Get</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>, <argument><expr><name>Entry</name></expr></argument>&gt;</argument_list></name> <name>CacheMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>CacheMap</name></type> <name>m_map</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_cache_hits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_cache_misses</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>Entry</name> <modifier>&amp;</modifier></type><name>GetEntry</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FormatCache</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ImplSP</name> <modifier>&amp;</modifier></type><name>format_impl_sp</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>ConstString</name> <name>type</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name> <operator>&amp;</operator><name>format_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>ConstString</name> <name>type</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator><name>summary_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>ConstString</name> <name>type</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name> <operator>&amp;</operator><name>synthetic_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>uint64_t</name></type> <name>GetCacheHits</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_cache_hits</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>GetCacheMisses</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_cache_misses</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
