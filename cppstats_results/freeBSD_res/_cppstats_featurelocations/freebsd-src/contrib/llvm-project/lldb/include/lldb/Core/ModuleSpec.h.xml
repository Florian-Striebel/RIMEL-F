<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/ModuleSpec.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_MODULESPEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_MODULESPEC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/FileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/PathMappingList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UUID.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Chrono.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleSpec</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ModuleSpec</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>m_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_platform_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_symbol_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_arch</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_uuid</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_object_name</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_source_mappings</name><argument_list>()</argument_list></macro> <expr><block>{}</block>




<macro><name>ModuleSpec</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>const UUID &amp;uuid = UUID()</argument>,
<argument>lldb::DataBufferSP data = lldb::DataBufferSP()</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_file</name><argument_list>(<argument><expr><name>file_spec</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_platform_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_symbol_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_arch</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_uuid</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_object_name</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_object_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_source_mappings</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<macro><name>m_data</name><argument_list>(<argument>data</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_object_size</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>GetByteSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>m_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_object_size</name> <operator>=</operator> <name>FileSystem</name><operator>::</operator><call><name>Instance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetByteSize</name><argument_list>(<argument><expr><name>file_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><call><name>ModuleSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_file</name><argument_list>(<argument><expr><name>file_spec</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_platform_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_symbol_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_arch</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_uuid</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_object_name</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_object_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_object_size</name><argument_list>(<argument><expr><name>FileSystem</name><operator>::</operator><call><name>Instance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetByteSize</name><argument_list>(<argument><expr><name>file_spec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_source_mappings</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>FileSpec</name> <operator>*</operator><macro><name>GetFileSpecPtr</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>(</operator><name>m_file</name> <operator>?</operator> <operator>&amp;</operator><name>m_file</name> <operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>*</operator><macro><name>GetFileSpecPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_file</name> <operator>?</operator> <operator>&amp;</operator><name>m_file</name> <operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetFileSpec</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_file</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>FileSpec</name> <modifier>*</modifier></type><name>GetPlatformFileSpecPtr</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>m_platform_file</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>m_platform_file</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>*</operator><macro><name>GetPlatformFileSpecPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_platform_file</name> <operator>?</operator> <operator>&amp;</operator><name>m_platform_file</name> <operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetPlatformFileSpec</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_platform_file</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetPlatformFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_platform_file</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>FileSpec</name> <modifier>*</modifier></type><name>GetSymbolFileSpecPtr</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>m_symbol_file</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>m_symbol_file</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>*</operator><macro><name>GetSymbolFileSpecPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_symbol_file</name> <operator>?</operator> <operator>&amp;</operator><name>m_symbol_file</name> <operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetSymbolFileSpec</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_symbol_file</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetSymbolFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_symbol_file</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ArchSpec</name> <modifier>*</modifier></type><name>GetArchitecturePtr</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name><name>m_arch</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>m_arch</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>*</operator><macro><name>GetArchitecturePtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name><name>m_arch</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>?</operator> <operator>&amp;</operator><name>m_arch</name> <operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>ArchSpec</name> <modifier>&amp;</modifier></type><name>GetArchitecture</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_arch</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><macro><name>GetArchitecture</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_arch</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>UUID</name> <modifier>*</modifier></type><name>GetUUIDPtr</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><ternary><condition><expr><call><name><name>m_uuid</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>m_uuid</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>UUID</name> <operator>*</operator><macro><name>GetUUIDPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name><name>m_uuid</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>?</operator> <operator>&amp;</operator><name>m_uuid</name> <operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>UUID</name> <modifier>&amp;</modifier></type><name>GetUUID</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_uuid</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>UUID</name> <operator>&amp;</operator><macro><name>GetUUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_uuid</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ConstString</name> <modifier>&amp;</modifier></type><name>GetObjectName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_object_name</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetObjectName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_object_name</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetObjectOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_object_offset</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetObjectOffset</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>object_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_object_offset</name> <operator>=</operator> <name>object_offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetObjectSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_object_size</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetObjectSize</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>object_size</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_object_size</name> <operator>=</operator> <name>object_size</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetObjectModificationTime</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_object_mod_time</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetObjectModificationTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_object_mod_time</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>PathMappingList</name> <operator>&amp;</operator><macro><name>GetSourceMappingList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_source_mappings</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <macro><name>GetData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_data</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_file</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_platform_file</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_symbol_file</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_arch</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_uuid</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_object_name</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_object_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m_object_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_source_mappings</name><operator>.</operator><name>Clear</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_object_mod_time</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><call><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m_platform_file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_symbol_file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>m_arch</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>m_uuid</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_object_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_object_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_object_mod_time</name> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><call><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>dumped_something</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">"file = '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strm</name> <operator>&lt;&lt;</operator> <name>m_file</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_platform_file</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">"platform_file = '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strm</name> <operator>&lt;&lt;</operator> <name>m_platform_file</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_symbol_file</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">"symbol_file = '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strm</name> <operator>&lt;&lt;</operator> <name>m_symbol_file</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>m_arch</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"arch = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_arch</name><operator>.</operator><name>DumpTriple</name></name><argument_list>(<argument><expr><call><name><name>strm</name><operator>.</operator><name>AsRawOstream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>m_uuid</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">"uuid = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_uuid</name><operator>.</operator><name>Dump</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_object_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"object_name = %s"</literal></expr></argument>, <argument><expr><call><name><name>m_object_name</name><operator>.</operator><name>GetCString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_object_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"object_offset = %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>m_object_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_object_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"object size = %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>m_object_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dumped_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_object_mod_time</name> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><call><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dumped_something</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>PutCString</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>Format</name></name><argument_list>(<argument><expr><literal type="string">"object_mod_time = {0:x+}"</literal></expr></argument>,
<argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><call><name>toTimeT</name><argument_list>(<argument><expr><name>m_object_mod_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Matches</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>match_module_spec</name></expr></argument>,
<argument><expr><name>bool</name> <name>exact_arch_match</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetUUIDPtr</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>match_module_spec</name><operator>.</operator><name>GetUUID</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>GetUUID</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetObjectName</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>match_module_spec</name><operator>.</operator><name>GetObjectName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>GetObjectName</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>FileSpec</name><operator>::</operator><call><name>Match</name><argument_list>(<argument><expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetFileSpec</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetFileSpec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetPlatformFileSpec</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name>FileSpec</name><operator>::</operator><call><name>Match</name><argument_list>(<argument><expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetPlatformFileSpec</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>GetPlatformFileSpec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetSymbolFileSpec</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name>FileSpec</name><operator>::</operator><call><name>Match</name><argument_list>(<argument><expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetSymbolFileSpec</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>GetSymbolFileSpec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetArchitecturePtr</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exact_arch_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetArchitecture</name><argument_list>()</argument_list></call><operator>.</operator><call><name>IsExactMatch</name><argument_list>(
<argument><expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetArchitecture</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetArchitecture</name><argument_list>()</argument_list></call><operator>.</operator><call><name>IsCompatibleMatch</name><argument_list>(
<argument><expr><call><name><name>match_module_spec</name><operator>.</operator><name>GetArchitecture</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_platform_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_symbol_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ArchSpec</name></type> <name>m_arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UUID</name></type> <name>m_uuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_object_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_object_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_object_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>m_object_mod_time</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>PathMappingList</name></type> <name>m_source_mappings</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <name>m_data</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleSpecList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ModuleSpecList</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_specs</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_mutex</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<call><name>ModuleSpecList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpecList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>m_specs</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_mutex</name><argument_list>()</argument_list></macro> <expr><block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>lhs_guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>rhs_guard</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_mutex</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>m_specs</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_specs</name></name></expr>;
}</block>

<operator>~</operator><call><name>ModuleSpecList</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>ModuleSpecList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ModuleSpecList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <operator>&amp;</operator><name>rhs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>lock</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>m_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>lhs_guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>adopt_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>rhs_guard</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_mutex</name></name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>adopt_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_specs</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_specs</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></init></decl></decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_specs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_specs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleSpec</name> <modifier>&amp;</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_specs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleSpecList</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>lhs_guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>rhs_guard</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_specs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>m_specs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>m_specs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>m_specs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>ModuleSpec</name> <modifier>&amp;</modifier></type><name>GetModuleSpecRefAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>m_specs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>GetModuleSpecAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>i</name></expr></argument>, <argument><expr><name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>m_specs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>module_spec</name> <operator>=</operator> <name><name>m_specs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>module_spec</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FindMatchingModuleSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>,
<argument><expr><name>ModuleSpec</name> <operator>&amp;</operator><name>match_module_spec</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exact_arch_match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>spec</name> <range>: <expr><name>m_specs</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>spec</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>module_spec</name></expr></argument>, <argument><expr><name>exact_arch_match</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match_module_spec</name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name><name>module_spec</name><operator>.</operator><name>GetArchitecturePtr</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exact_arch_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>spec</name> <range>: <expr><name>m_specs</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>spec</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>module_spec</name></expr></argument>, <argument><expr><name>exact_arch_match</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match_module_spec</name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>match_module_spec</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FindMatchingModuleSpecs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>,
<argument><expr><name>ModuleSpecList</name> <operator>&amp;</operator><name>matching_list</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exact_arch_match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>initial_match_count</name> <init>= <expr><call><name><name>matching_list</name><operator>.</operator><name>GetSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>spec</name> <range>: <expr><name>m_specs</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>spec</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>module_spec</name></expr></argument>, <argument><expr><name>exact_arch_match</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>matching_list</name><operator>.</operator><name>Append</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><call><name><name>module_spec</name><operator>.</operator><name>GetArchitecturePtr</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>initial_match_count</name> <operator>==</operator> <call><name><name>matching_list</name><operator>.</operator><name>GetSize</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exact_arch_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>spec</name> <range>: <expr><name>m_specs</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>spec</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>module_spec</name></expr></argument>, <argument><expr><name>exact_arch_match</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>matching_list</name><operator>.</operator><name>Append</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>spec</name> <range>: <expr><name>m_specs</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"[%u] "</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>spec</name><operator>.</operator><name>Dump</name></name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>strm</name><operator>.</operator><name>EOL</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleSpec</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>collection</name></type> <name>m_specs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
