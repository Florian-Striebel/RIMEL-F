<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionArgParser.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONARGPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONARGPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<struct>struct <name>OptionArgParser</name> <block>{
<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>ToAddress</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>llvm::StringRef s</argument>, <argument>lldb::addr_t fail_value</argument>,
<argument>Status *error</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ToBoolean</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>fail_value</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>success_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>ToChar</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>s</name></expr></argument>, <argument><expr><name>char</name> <name>fail_value</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>success_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>ToOptionEnum</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>s</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>OptionEnumValues</name> <operator>&amp;</operator><name>enum_values</name></expr></argument>,
<argument><expr><name>int32_t</name> <name>fail_value</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <macro><name>ToScriptLanguage</name><argument_list>(<argument>llvm::StringRef s</argument>,
<argument>lldb::ScriptLanguage fail_value</argument>,
<argument>bool *success_ptr</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>ToFormat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <operator>&amp;</operator><name>format</name></expr></argument>,
<argument><expr><name>size_t</name> <operator>*</operator><name>byte_size_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
