<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBThread.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBTHREAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBThread</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <block>{
<decl><name>eBroadcastBitStackChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitThreadSuspended</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitThreadResumed</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitSelectedFrameChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitThreadSelected</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBroadcasterClassName</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>SBThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>lldb_object_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBQueue</name> <macro><name>GetQueue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopReason</name> <call><name>GetStopReason</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>size_t</name></type> <name>GetStopReasonDataCount</name><parameter_list>()</parameter_list>;</function_decl>




















<function_decl><type><name>uint64_t</name></type> <name>GetStopReasonDataAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetStopReasonExtendedInfoAsJSON</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBThreadCollection</name></type>
<name>GetStopReasonExtendedBacktraces</name><parameter_list>(<parameter><decl><type><name>InstrumentationRuntimeType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetStopDescription</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBValue</name></type> <name>GetStopReturnValue</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <macro><name>GetThreadID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetIndexID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetQueueName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>queue_id_t</name> <macro><name>GetQueueID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>GetInfoItemByPathAsString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>SBStream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>StepOver</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RunMode</name> <name>stop_other_threads</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eOnlyDuringStepping</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>StepOver</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RunMode</name> <name>stop_other_threads</name></expr></argument>, <argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>StepInto</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RunMode</name> <name>stop_other_threads</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eOnlyDuringStepping</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>StepInto</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>target_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>RunMode</name> <name>stop_other_threads</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eOnlyDuringStepping</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>StepInto</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>target_name</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>end_line</name></expr></argument>, <argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>RunMode</name> <name>stop_other_threads</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eOnlyDuringStepping</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>StepOut</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StepOut</name><parameter_list>(<parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StepOutOfFrame</name><parameter_list>(<parameter><decl><type><name>SBFrame</name> <modifier>&amp;</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StepOutOfFrame</name><parameter_list>(<parameter><decl><type><name>SBFrame</name> <modifier>&amp;</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StepInstruction</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>step_over</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StepInstruction</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>step_over</name></decl></parameter>, <parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>SBError</name></type> <name>StepOverUntil</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>line</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBError</name></type> <name>StepUsingScriptedThreadPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script_class_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>StepUsingScriptedThreadPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script_class_name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>resume_immediately</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>SBError</name></type> <name>StepUsingScriptedThreadPlan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>script_class_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <operator>&amp;</operator><name>args_data</name></expr></argument>,
<argument><expr><name>bool</name> <name>resume_immediately</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SBError</name></type> <name>JumpToLine</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>RunToAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>RunToAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBError</name></type> <name>ReturnFromFrame</name><parameter_list>(<parameter><decl><type><name>SBFrame</name> <modifier>&amp;</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>SBValue</name> <modifier>&amp;</modifier></type><name>return_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>UnwindInnermostExpression</name><parameter_list>()</parameter_list>;</function_decl>




















<function_decl><type><name>bool</name></type> <name>Suspend</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Suspend</name><parameter_list>(<parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Resume</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Resume</name><parameter_list>(<parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsSuspended</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsStopped</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetNumFrames</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFrame</name> <macro><name>GetFrameAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFrame</name> <call><name>GetSelectedFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFrame</name> <macro><name>SetSelectedFrame</name><argument_list>(<argument>uint32_t frame_idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>EventIsThreadEvent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBEvent</name> <modifier>&amp;</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SBFrame</name></type> <name>GetStackFrameFromEvent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBEvent</name> <modifier>&amp;</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SBThread</name></type> <name>GetThreadFromEvent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBEvent</name> <modifier>&amp;</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <call><name>GetProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>stop_format</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetStatus</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>status</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>SBThread</name></type> <name>GetExtendedBacktraceThread</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetExtendedBacktraceOriginatingIndexID</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBValue</name></type> <name>GetCurrentException</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBThread</name></type> <name>GetCurrentExceptionBacktrace</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SafeToCallFunctions</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointCallbackBaton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBExecutionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBProcess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>QueueImpl</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBQueueItem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThreadPlan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTrace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>lldb_object_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SBError</name></type> <name>ResumeNewPlan</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>ThreadPlan</name> <operator>*</operator><name>new_plan</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExecutionContextRefSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>*</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
