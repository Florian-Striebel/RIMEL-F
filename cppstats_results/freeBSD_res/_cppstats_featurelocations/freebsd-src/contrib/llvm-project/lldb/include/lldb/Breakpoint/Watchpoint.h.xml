<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/Watchpoint.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_WATCHPOINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_WATCHPOINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/StoppointSite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/WatchpointOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Target.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Watchpoint</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Watchpoint</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>StoppointSite</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>WatchpointEventData</name> <range>: <expr><name>public</name> <name>EventData</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>WatchpointEventData</name><argument_list>(<argument>lldb::WatchpointEventType sub_type</argument>,
<argument>const lldb::WatchpointSP &amp;new_watchpoint_sp</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>WatchpointEventData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>ConstString</name> <call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;

<expr><name>ConstString</name> <macro><name>GetFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>WatchpointEventType</name> <macro><name>GetWatchpointEventType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>lldb</name><operator>::</operator><name>WatchpointSP</name> <operator>&amp;</operator><call><name>GetWatchpoint</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>WatchpointEventType</name>
<call><name>GetWatchpointEventTypeFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>WatchpointSP</name>
<call><name>GetWatchpointFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>WatchpointEventData</name> <operator>*</operator>
<call><name>GetEventDataFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>WatchpointEventType</name> <name>m_watchpoint_event</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>WatchpointSP</name> <name>m_new_watchpoint_sp</name></expr>;

<expr><call><name>WatchpointEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WatchpointEventData</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>WatchpointEventData</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>WatchpointEventData</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<macro><name>Watchpoint</name><argument_list>(<argument>Target &amp;target</argument>, <argument>lldb::addr_t addr</argument>, <argument>uint32_t size</argument>,
<argument>const CompilerType *type</argument>, <argument>bool hardware = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>Watchpoint</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>IncrementFalseAlarmsAndReviseHitCount</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>SetEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsHardware</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ShouldStop</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>WatchpointRead</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>WatchpointWrite</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <macro><name>GetIgnoreCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetIgnoreCount</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetWatchpointType</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>SetDeclInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetWatchSpec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>SetWatchSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsWatchVariable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetWatchVariable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>CaptureWatchedValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>DumpSnapshots</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>prefix</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>DumpWithLevel</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function><type><name>Target</name> <modifier>&amp;</modifier></type><name>GetTarget</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_target</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>const</specifier> <name>Status</name> <modifier>&amp;</modifier></type><name>GetError</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_error</name></expr>;</return> </block_content>}</block></function>





<function><type><name>WatchpointOptions</name> <modifier>*</modifier></type><name>GetOptions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>m_options</name></expr>;</return> </block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>SetCallback</name><parameter_list>(<parameter><decl><type><name>WatchpointHitCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_baton</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_synchronous</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetCallback</name><argument_list>(<argument><expr><name>WatchpointHitCallback</name> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BatonSP</name> <operator>&amp;</operator><name>callback_baton_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_synchronous</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ClearCallback</name><parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>bool</name></type> <name>InvokeCallback</name><parameter_list>(<parameter><decl><type><name>StoppointCallbackContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>SetCondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>condition</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetConditionText</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>TurnOnEphemeralMode</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>TurnOffEphemeralMode</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsDisabledDuringEphemeralMode</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>GetCompilerType</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_type</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>WatchpointList</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ResetHistoricValues</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_old_value_sp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_new_value_sp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>m_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_hardware</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_watch_variable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_ephemeral</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_disabled_count</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_watch_read</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_watch_write</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_watch_was_read</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_watch_was_written</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_ignore_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_false_alarms</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_decl_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_watch_spec_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>m_old_value_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>m_new_value_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Status</name></type> <name>m_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WatchpointOptions</name></type>
<name>m_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_being_created</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UserExpression</name></expr></argument>&gt;</argument_list></name> <name>m_condition_up</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>watch_id_t</name> <name>id</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_id</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SendWatchpointChangedEvent</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>WatchpointEventType</name> <name>eventKind</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SendWatchpointChangedEvent</name><parameter_list>(<parameter><decl><type><name>WatchpointEventData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>Watchpoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Watchpoint</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Watchpoint</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Watchpoint</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
