<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/SystemRuntime.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_SYSTEMRUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_SYSTEMRUNTIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/QueueItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/QueueList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Runtime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>


















<decl_stmt><decl><type><name>class</name></type> <name>SystemRuntime</name> <range>: <expr><name>public</name> <name>Runtime</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>PluginInterface</name> <block>{<block_content>
<label><name>public</name>:</label>








<function_decl><type><specifier>static</specifier> <name>SystemRuntime</name> <modifier>*</modifier></type><name>FindPlugin</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><call><name>SystemRuntime</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><operator>~</operator><macro><name>SystemRuntime</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>DidAttach</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>DidLaunch</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>ModulesDidLoad</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>Detach</name><parameter_list>()</parameter_list>;</function_decl>






















<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>GetExtendedBacktraceTypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

























<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetExtendedBacktraceThread</name><argument_list>(<argument>lldb::ThreadSP thread</argument>,
<argument>ConstString type</argument>)</argument_list></macro></expr>;</expr_stmt>




















<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadSP</name>
<macro><name>GetExtendedBacktraceForQueueItem</name><argument_list>(<argument>lldb::QueueItemSP queue_item_sp</argument>,
<argument>ConstString type</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ThreadSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>











<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PopulateQueueList</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>QueueList</name> <operator>&amp;</operator><name>queue_list</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>















<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name>
<macro><name>GetQueueNameFromThreadQAddress</name><argument_list>(<argument>lldb::addr_t dispatch_qaddr</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block></expr></expr_stmt>















<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>queue_id_t</name>
<macro><name>GetQueueIDFromThreadQAddress</name><argument_list>(<argument>lldb::addr_t dispatch_qaddr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LLDB_INVALID_QUEUE_ID</name></expr>;</return>
}</block></expr></expr_stmt>















<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name>
<macro><name>GetLibdispatchQueueAddressFromThreadQAddress</name><argument_list>(<argument>lldb::addr_t dispatch_qaddr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LLDB_INVALID_ADDRESS</name></expr>;</return>
}</block></expr></expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>QueueKind</name> <macro><name>GetQueueKind</name><argument_list>(<argument>lldb::addr_t dispatch_qaddr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><name>eQueueKindUnknown</name></expr>;</return>
}</block></expr></expr_stmt>









<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PopulatePendingItemsForQueue</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Queue</name> <operator>*</operator><name>queue</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>













<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>CompleteQueueItem</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>QueueItem</name> <operator>*</operator><name>queue_item</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>item_ref</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>









<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddThreadExtendedInfoPacketHints</name><argument_list>(
<argument><expr><name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>dict</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>














<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>SafeToCallFunctionsOnThisThread</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <name>thread_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>m_types</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>SystemRuntime</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SystemRuntime</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SystemRuntime</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SystemRuntime</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
