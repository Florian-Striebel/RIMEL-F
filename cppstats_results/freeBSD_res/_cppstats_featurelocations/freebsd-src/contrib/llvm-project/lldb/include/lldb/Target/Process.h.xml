<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Process.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_PROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_PROCESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointSiteList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Communication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/LoadedModuleInfoList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ThreadSafeValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UserSettingsController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/HostThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/ProcessLaunchInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/ProcessRunLock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/ObjectFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/InstrumentationRuntime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/MemoryTagManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/QueueList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlanStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Listener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/NameMatches.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ProcessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/TraceGDBRemotePackets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UnimplementedError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserIDResolver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Threading.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>B</name></expr><operator>,</operator> <expr><name>typename</name> <name>S</name><operator>&gt;</operator> struct <name>Range</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ProcessExperimentalProperties</name> <range>: <expr><name>public</name> <name>Properties</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ProcessExperimentalProperties</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ProcessProperties</name> <range>: <expr><name>public</name> <name>Properties</name> <block>{
<expr><name>public</name><operator>:</operator>


<call><name>ProcessProperties</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ProcessProperties</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>GetDisableMemoryCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>uint64_t</name> <macro><name>GetMemoryCacheLineSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>Args</name> <macro><name>GetExtraStartupCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <call><name>SetExtraStartupCommands</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;
<expr><name>FileSpec</name> <macro><name>GetPythonOSPluginPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>uint32_t</name> <macro><name>GetVirtualAddressableBits</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetVirtualAddressableBits</name><argument_list>(<argument>uint32_t bits</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <call><name>SetPythonOSPluginPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>GetIgnoreBreakpointsInExpressions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetIgnoreBreakpointsInExpressions</name><argument_list>(<argument>bool ignore</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>GetUnwindOnErrorInExpressions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetUnwindOnErrorInExpressions</name><argument_list>(<argument>bool ignore</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>GetStopOnSharedLibraryEvents</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetStopOnSharedLibraryEvents</name><argument_list>(<argument>bool stop</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>GetDisableLangRuntimeUnwindPlans</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetDisableLangRuntimeUnwindPlans</name><argument_list>(<argument>bool disable</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>GetDetachKeepsStopped</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetDetachKeepsStopped</name><argument_list>(<argument>bool keep_stopped</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>GetWarningsOptimization</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>GetWarningsUnsupportedLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>GetStopOnExec</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name> <macro><name>GetUtilityExpressionTimeout</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name> <macro><name>GetInterruptTimeout</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>GetOSPluginReportsAllThreads</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetOSPluginReportsAllThreads</name><argument_list>(<argument>bool does_report</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>GetSteppingRunsAllThreads</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>
<name>Process</name> <operator>*</operator><name>m_process</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ProcessExperimentalProperties</name></expr></argument>&gt;</argument_list></name> <name>m_experimental_properties_up</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ProcessProperties</name></expr></argument>&gt;</argument_list></name> <name>ProcessPropertiesSP</name></expr>;</expr_stmt></typedef>





<decl_stmt><decl><type><name>class</name></type> <name>ProcessAttachInfo</name> <range>: <expr><name>public</name> <name>ProcessInstanceInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ProcessAttachInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>ProcessInstanceInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>m_listener_sp</name><argument_list>()</argument_list></call></expr>, <expr><call><name>m_hijack_listener_sp</name><argument_list>()</argument_list></call></expr>,
<macro><name>m_plugin_name</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<call><name>ProcessAttachInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessLaunchInfo</name> <operator>&amp;</operator><name>launch_info</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ProcessInstanceInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>m_listener_sp</name><argument_list>()</argument_list></call></expr>, <expr><call><name>m_hijack_listener_sp</name><argument_list>()</argument_list></call></expr>,
<expr><call><name>m_plugin_name</name><argument_list>()</argument_list></call></expr>, <expr><call><name>m_resume_count</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_wait_for_launch</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>m_ignore_existing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_continue_once_attached</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>m_detach_on_error</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_async</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><name>ProcessInfo</name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>launch_info</name><operator>)</operator></expr>;
<expr><call><name>SetProcessPluginName</name><argument_list>(<argument><expr><call><name><name>launch_info</name><operator>.</operator><name>GetProcessPluginName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>SetResumeCount</name><argument_list>(<argument><expr><call><name><name>launch_info</name><operator>.</operator><name>GetResumeCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>SetListener</name><argument_list>(<argument><expr><call><name><name>launch_info</name><operator>.</operator><name>GetListener</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>SetHijackListener</name><argument_list>(<argument><expr><call><name><name>launch_info</name><operator>.</operator><name>GetHijackListener</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>m_detach_on_error</name> <operator>=</operator> <call><name><name>launch_info</name><operator>.</operator><name>GetDetachOnError</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>GetWaitForLaunch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_wait_for_launch</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetWaitForLaunch</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_wait_for_launch</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>GetAsync</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_async</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetAsync</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_async</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>GetIgnoreExisting</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_ignore_existing</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetIgnoreExisting</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_ignore_existing</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>GetContinueOnceAttached</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_continue_once_attached</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetContinueOnceAttached</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_continue_once_attached</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>uint32_t</name> <macro><name>GetResumeCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_resume_count</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetResumeCount</name><argument_list>(<argument>uint32_t c</argument>)</argument_list></macro> <block>{ <expr><name>m_resume_count</name> <operator>=</operator> <name>c</name></expr>; }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetProcessPluginName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name><name>m_plugin_name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <call><name><name>m_plugin_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block>

<name>void</name> <macro><name>SetProcessPluginName</name><argument_list>(<argument>llvm::StringRef plugin</argument>)</argument_list></macro> <block>{
<expr><name>m_plugin_name</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <block>{
<expr><name>ProcessInstanceInfo</name><operator>::</operator><call><name>Clear</name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>m_plugin_name</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>m_resume_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>m_wait_for_launch</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>m_ignore_existing</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>m_continue_once_attached</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>bool</name> <macro><name>ProcessInfoSpecified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>GetExecutableFile</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><call><name>GetProcessID</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>LLDB_INVALID_PROCESS_ID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetParentProcessID</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>LLDB_INVALID_PROCESS_ID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <macro><name>GetHijackListener</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_hijack_listener_sp</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetHijackListener</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ListenerSP</name> <operator>&amp;</operator><name>listener_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_hijack_listener_sp</name> <operator>=</operator> <name>listener_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetDetachOnError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_detach_on_error</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetDetachOnError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_detach_on_error</name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <macro><name>GetListener</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_listener_sp</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetListener</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ListenerSP</name> <operator>&amp;</operator><name>listener_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_listener_sp</name> <operator>=</operator> <name>listener_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <call><name>GetListenerForProcess</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_listener_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_hijack_listener_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_plugin_name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_resume_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_wait_for_launch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_ignore_existing</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_continue_once_attached</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_detach_on_error</name> <init>=
<expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_async</name> <init>=
<expr><name>false</name></expr></init></decl>;</decl_stmt>


};






<decl_stmt><decl><type><name>class</name></type> <name>ProcessModID</name> <block>{<block_content>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ProcessModID</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>ProcessModID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_stop_id</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_stop_id</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_memory_id</name><argument_list>(<argument>rhs.m_memory_id</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <operator>&amp;</operator><name>rhs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_stop_id</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_stop_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_memory_id</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_memory_id</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ProcessModID</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>void</name></type> <name>BumpStopID</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_stop_id</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsLastResumeForUserExpression</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_last_natural_stop_id</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>BumpMemoryID</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_memory_id</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>BumpResumeID</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_resume_id</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m_running_user_expression</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_last_user_expression_resume</name> <operator>=</operator> <name>m_resume_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsRunningUtilityFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_running_utility_function</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetStopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stop_id</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <macro><name>GetLastNaturalStopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_last_natural_stop_id</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <macro><name>GetMemoryID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_memory_id</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <macro><name>GetResumeID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_resume_id</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <macro><name>GetLastUserExpressionResumeID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_last_user_expression_resume</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>MemoryIDEqual</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>compare</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>m_memory_id</name> <operator>==</operator> <name><name>compare</name><operator>.</operator><name>m_memory_id</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>StopIDEqual</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>compare</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>m_stop_id</name> <operator>==</operator> <name><name>compare</name><operator>.</operator><name>m_stop_id</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetInvalid</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_stop_id</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stop_id</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsLastResumeForUserExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<if_stmt><if>if <condition>(<expr><name>m_resume_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name>m_resume_id</name> <operator>==</operator> <name>m_last_user_expression_resume</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetRunningUserExpression</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_running_user_expression</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_running_user_expression</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetRunningUtilityFunction</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_running_utility_function</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m_running_utility_function</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<literal type="string">"Called SetRunningUtilityFunction(false) without calling "</literal>
<literal type="string">"SetRunningUtilityFunction(true) before?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_running_utility_function</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>SetStopEventForLastNaturalStopID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <name>event_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_last_natural_stop_event</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>event_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <macro><name>GetStopEventForStopID</name><argument_list>(<argument>uint32_t stop_id</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>stop_id</name> <operator>==</operator> <name>m_last_natural_stop_id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>m_last_natural_stop_event</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>lldb</name><operator>::</operator><call><name>EventSP</name><argument_list>()</argument_list></call></expr>;</return>
}

private:
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_stop_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_last_natural_stop_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_resume_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_memory_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_last_user_expression_resume</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_running_user_expression</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_running_utility_function</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <name>m_last_natural_stop_event</name></expr>;</expr_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>lhs</name><operator>.</operator><name>StopIDEqual</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>lhs</name><operator>.</operator><name>MemoryIDEqual</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<return>return <expr><operator>(</operator><operator>!</operator><call><name><name>lhs</name><operator>.</operator><name>StopIDEqual</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>lhs</name><operator>.</operator><name>MemoryIDEqual</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>Process</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Process</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>ProcessProperties</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>Broadcaster</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>ExecutionContextScope</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>PluginInterface</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FunctionCaller</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Debugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DynamicLoader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ProcessEventData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>StopInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ThreadList</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<enum>enum <block>{
<decl><name>eBroadcastBitStateChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitInterrupt</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitSTDOUT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitSTDERR</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitProfileData</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitStructuredData</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>eBroadcastInternalStateControlStop</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastInternalStateControlPause</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastInternalStateControlResume</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>


<enum>enum <name>Warnings</name> <block>{ <decl><name>eWarningsOptimization</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>eWarningsUnsupportedLanguage</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> }</block>;</enum>

<typedef>typedef <type><name><name>Range</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></type> <name>LoadRange</name>;</typedef>






<typedef>typedef <expr_stmt><expr><name>ProcessRunLock</name><operator>::</operator><name>ProcessRunLocker</name> <name>StopLocker</name></expr>;</expr_stmt></typedef>



<function_decl><type><specifier>static</specifier> <name>ConstString</name> <modifier>&amp;</modifier></type><name>GetStaticBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>ConstString</name> <operator>&amp;</operator><macro><name>GetBroadcasterClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>GetStaticBroadcasterClass</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>initialize</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>, <parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>void</name> <argument_list>(<argument>*process_state_changed</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>void</name> <operator>*</operator><name>baton</name><operator>,</operator> <name>Process</name> <operator>*</operator><name>process</name><operator>,</operator>
<name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name><operator>)</operator></expr>;</expr_stmt>
}</block></struct></type> <name>Notifications</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>ProcessEventData</name> <range>: <expr><name>public</name> <name>EventData</name> <block>{
<expr><name>friend</name> <name>class</name> <name>Process</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ProcessEventData</name><argument_list>()</argument_list></call></expr>;
<macro><name>ProcessEventData</name><argument_list>(<argument>const lldb::ProcessSP &amp;process</argument>, <argument>lldb::StateType state</argument>)</argument_list></macro>;

<expr><operator>~</operator><macro><name>ProcessEventData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>ConstString</name> <call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;

<expr><name>ConstString</name> <macro><name>GetFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcessSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_process_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_state</name></expr>;</return> }</block>
<name>bool</name> <macro><name>GetRestarted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_restarted</name></expr>;</return> }</block>

<name>size_t</name> <macro><name>GetNumRestartedReasons</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_restarted_reasons</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRestartedReasonAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><name>idx</name> <operator>&lt;</operator> <call><name><name>m_restarted_reasons</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator>
<operator>?</operator> <name><name>m_restarted_reasons</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call>
<operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block>

<name>bool</name> <macro><name>GetInterrupted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_interrupted</name></expr>;</return> }</block>

<name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>ShouldStop</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>found_valid_stopinfo</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>DoOnRemoval</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>Process</name><operator>::</operator><name>ProcessEventData</name> <operator>*</operator>
<call><name>GetEventDataFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <call><name>GetProcessFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetStateFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>bool</name> <call><name>GetRestartedFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>size_t</name> <call><name>GetNumRestartedReasons</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRestartedReasonAtIndex</name><argument_list>(<argument>const Event *event_ptr</argument>,
<argument>size_t idx</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>AddRestartedReason</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>reason</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>void</name> <macro><name>SetRestartedInEvent</name><argument_list>(<argument>Event *event_ptr</argument>, <argument>bool new_value</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <call><name>GetInterruptedFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>void</name> <macro><name>SetInterruptedInEvent</name><argument_list>(<argument>Event *event_ptr</argument>, <argument>bool new_value</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <call><name>SetUpdateStateOnRemoval</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>SetUpdateStateOnRemoval</name><argument_list>()</argument_list></macro> <block>{ <expr><name>m_update_state</name><operator>++</operator></expr>; }</block>

<name>void</name> <macro><name>SetRestarted</name><argument_list>(<argument>bool new_value</argument>)</argument_list></macro> <block>{ <expr><name>m_restarted</name> <operator>=</operator> <name>new_value</name></expr>; }</block>

<name>void</name> <macro><name>SetInterrupted</name><argument_list>(<argument>bool new_value</argument>)</argument_list></macro> <block>{ <expr><name>m_interrupted</name> <operator>=</operator> <name>new_value</name></expr>; }</block>

<name>void</name> <macro><name>AddRestartedReason</name><argument_list>(<argument>const char *reason</argument>)</argument_list></macro> <block>{
<expr><call><name><name>m_restarted_reasons</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>m_state</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eStateInvalid</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_restarted_reasons</name></expr>;
<expr><name>bool</name> <name>m_restarted</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>int</name> <name>m_update_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>bool</name> <name>m_interrupted</name> <operator>=</operator> <name>false</name></expr>;

<expr><call><name>ProcessEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessEventData</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ProcessEventData</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ProcessEventData</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<macro><name>Process</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>, <argument>lldb::ListenerSP listener_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<macro><name>Process</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>, <argument>lldb::ListenerSP listener_sp</argument>,
<argument>const lldb::UnixSignalsSP &amp;unix_signals_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<expr_stmt><expr><operator>~</operator><macro><name>Process</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsInitialize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsTerminate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProcessPropertiesSP</name> <modifier>&amp;</modifier></type><name>GetGlobalProperties</name><parameter_list>()</parameter_list>;</function_decl>









<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>FindPlugin</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>,
<argument>llvm::StringRef plugin_name</argument>,
<argument>lldb::ListenerSP listener_sp</argument>,
<argument>const FileSpec *crash_file_path</argument>,
<argument>bool can_connect</argument>)</argument_list></macro></expr>;</expr_stmt>











<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>
<name>SetProcessExitStatus</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>,
<argument><expr><name>bool</name> <name>exited</name></expr></argument>,
<argument><expr><name>int</name> <name>signo</name></expr></argument>,
<argument><expr><name>int</name> <name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetAddressByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <macro><name>GetID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_pid</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>SetID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>new_pid</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_pid</name> <operator>=</operator> <name>new_pid</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetUniqueID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_process_unique_id</name></expr>;</return> }</block></expr></expr_stmt>










<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>CanDebug</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>target</name></expr></argument>,
<argument><expr><name>bool</name> <name>plugin_specified_by_name</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>Finalize</name><parameter_list>()</parameter_list>;</function_decl>






<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>m_finalizing</name></expr>;</return> }</block></expr></expr_stmt>













<function><type><name>virtual</name> <name>CommandObject</name> <modifier>*</modifier></type><name>GetPluginCommandObject</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>




















<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>ProcessLaunchInfo</name> <modifier>&amp;</modifier></type><name>launch_info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>LoadCore</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>Status</name></type> <name>DoLoadCore</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support loading core files."</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>




























<decl_stmt><decl><type><name>UtilityFunction</name> <modifier>*</modifier></type><name>GetLoadImageUtilityFunction</name><argument_list>(
<argument><expr><name>Platform</name> <operator>*</operator><name>platform</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UtilityFunction</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>factory</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<function_decl><type><name>virtual</name> <name>DynamicLoader</name> <modifier>*</modifier></type><name>GetDynamicLoader</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><name>virtual</name> <name>DataExtractor</name></type> <name>GetAuxvData</name><parameter_list>()</parameter_list>;</function_decl>









<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>LoadModules</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"Not implemented."</literal></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>LoadedModuleInfoList</name></expr></argument>&gt;</argument_list></name> <macro><name>GetLoadedModuleList</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Not implemented"</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<function_decl><type><name>virtual</name> <name>JITLoaderList</name> <modifier>&amp;</modifier></type><name>GetJITLoaders</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>





<function_decl><type><name>virtual</name> <name>SystemRuntime</name> <modifier>*</modifier></type><name>GetSystemRuntime</name><parameter_list>()</parameter_list>;</function_decl>















<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Attach</name><parameter_list>(<parameter><decl><type><name>ProcessAttachInfo</name> <modifier>&amp;</modifier></type><name>attach_info</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>ConnectRemote</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>remote_url</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetShouldDetach</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_should_detach</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetShouldDetach</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_should_detach</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>





<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>GetImageTokens</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_image_tokens</name></expr>;</return> }</block></expr></expr_stmt>













<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetImageInfoAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>













<function><type><name>virtual</name> <name>void</name></type> <name>WillPublicStop</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>











<decl_stmt><decl><type><name>void</name></type> <name>RegisterNotificationCallbacks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Process</name><operator>::</operator><name>Notifications</name> <operator>&amp;</operator><name>callbacks</name></expr></argument>)</argument_list></decl>;</decl_stmt>















<decl_stmt><decl><type><name>bool</name></type> <name>UnregisterNotificationCallbacks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Process</name><operator>::</operator><name>Notifications</name> <operator>&amp;</operator><name>callbacks</name></expr></argument>)</argument_list></decl>;</decl_stmt>





























<function_decl><type><name>Status</name></type> <name>Resume</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>ResumeSynchronous</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>Status</name></type> <name>Halt</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>clear_thread_plans</name> <init>= <expr><name>false</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_run_lock</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>Status</name></type> <name>Detach</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>keep_stopped</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>Status</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force_kill</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>Status</name></type> <name>Signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetUnixSignals</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>UnixSignalsSP</name> <operator>&amp;&amp;</operator><name>signals_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>UnixSignalsSP</name> <operator>&amp;</operator><call><name>GetUnixSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>











<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>WillAttachToProcessWithID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>







<function><type><name>virtual</name> <name>Status</name></type> <name>WillAttachToProcessWithName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>process_name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>wait_for_launch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>








<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>DoConnectRemote</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>remote_url</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"remote connections are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>















<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>DoAttachToProcessWithID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ProcessAttachInfo</name> <operator>&amp;</operator><name>attach_info</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support attaching to a process by pid"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>














<function><type><name>virtual</name> <name>Status</name></type>
<name>DoAttachToProcessWithName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>process_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProcessAttachInfo</name> <modifier>&amp;</modifier></type><name>attach_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"attach by name is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>virtual</name> <name>void</name></type> <name>DidAttach</name><parameter_list>(<parameter><decl><type><name>ArchSpec</name> <modifier>&amp;</modifier></type><name>process_arch</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>process_arch</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>







<function_decl><type><name>virtual</name> <name>void</name></type> <name>DidExec</name><parameter_list>()</parameter_list>;</function_decl>



<function><type><name>virtual</name> <name>void</name></type> <name>DoDidExec</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>







<function><type><name>virtual</name> <name>Status</name></type> <name>WillLaunch</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


















<function><type><name>virtual</name> <name>Status</name></type> <name>DoLaunch</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>exe_module</name></decl></parameter>, <parameter><decl><type><name>ProcessLaunchInfo</name> <modifier>&amp;</modifier></type><name>launch_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support launching processes"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>DidLaunch</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>







<function><type><name>virtual</name> <name>Status</name></type> <name>WillResume</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
















<function><type><name>virtual</name> <name>Status</name></type> <name>DoResume</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support resuming processes"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>DidResume</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>







<function><type><name>virtual</name> <name>Status</name></type> <name>WillHalt</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
















<function><type><name>virtual</name> <name>Status</name></type> <name>DoHalt</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>caused_stop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support halting processes"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>DidHalt</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>








<function><type><name>virtual</name> <name>Status</name></type> <name>WillDetach</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>






<function><type><name>virtual</name> <name>Status</name></type> <name>DoDetach</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>keep_stopped</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support detaching from processes"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>DidDetach</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>DetachRequiresHalt</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>










<function><type><name>virtual</name> <name>Status</name></type> <name>WillSignal</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>





<function><type><name>virtual</name> <name>Status</name></type> <name>DoSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support sending signals to processes"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>Status</name></type> <name>WillDestroy</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DoDestroy</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>void</name></type> <name>DidDestroy</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>DestroyRequiresHalt</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>DidSignal</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>











<function_decl><type><name>virtual</name> <name>void</name></type> <name>RefreshStateAfterStop</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>












<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <macro><name>GetHostOSVersion</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <macro><name>GetHostMacCatalystVersion</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block></expr></expr_stmt>






<function><type><name>Target</name> <modifier>&amp;</modifier></type><name>GetTarget</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><call><name><name>m_target_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>






<expr_stmt><expr><specifier>const</specifier> <name>Target</name> <operator>&amp;</operator><macro><name>GetTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name><name>m_target_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>









<function_decl><type><name>void</name></type> <name>Flush</name><parameter_list>()</parameter_list>;</function_decl>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionResults</name>
<call><name>RunThreadPlan</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <operator>&amp;</operator><name>thread_plan_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ExecutionResultAsCString</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionResults</name> <name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>GetStatus</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>ostrm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetThreadStatus</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>ostrm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>only_threads_with_stop_reason</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_frame</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_frames</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>num_frames_with_source</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>stop_format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SendAsyncInterrupt</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>ModulesDidLoad</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>



























<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>ObjectSP</name>
<macro><name>GetLoadedDynamicLibrariesInfos</name><argument_list>(<argument>lldb::addr_t image_list_address</argument>,
<argument>lldb::addr_t image_count</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>ObjectSP</name>
<macro><name>GetLoadedDynamicLibrariesInfos</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>GetLoadedDynamicLibrariesInfos</name><argument_list>(
<argument>const std::vector&lt;lldb::addr_t&gt; &amp;load_addresses</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>GetSharedCacheInfo</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>










<function_decl><type><name>void</name></type> <name>PrintWarningOptimization</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>PrintWarningUnsupportedLanguage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>GetProcessInfo</name><parameter_list>(<parameter><decl><type><name>ProcessInstanceInfo</name> <modifier>&amp;</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>GetExitStatus</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExitDescription</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>void</name></type> <name>DidExit</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetCodeAddressMask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetDataAddressMask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetCodeAddressMask</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>code_address_mask</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_code_address_mask</name> <operator>=</operator> <name>code_address_mask</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetDataAddressMask</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>data_address_mask</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_data_address_mask</name> <operator>=</operator> <name>data_address_mask</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<expr_stmt><expr><name>ProcessModID</name> <macro><name>GetModID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mod_id</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ProcessModID</name> <operator>&amp;</operator><macro><name>GetModIDRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mod_id</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetStopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_mod_id</name><operator>.</operator><name>GetStopID</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetResumeID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_mod_id</name><operator>.</operator><name>GetResumeID</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetLastUserExpressionResumeID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_mod_id</name><operator>.</operator><name>GetLastUserExpressionResumeID</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetLastNaturalStopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_mod_id</name><operator>.</operator><name>GetLastNaturalStopID</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <macro><name>GetStopEventForStopID</name><argument_list>(<argument>uint32_t stop_id</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_mod_id</name><operator>.</operator><name>GetStopEventForStopID</name></name><argument_list>(<argument><expr><name>stop_id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>














<function_decl><type><name>virtual</name> <name>bool</name></type> <name>SetExitStatus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsAlive</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsLiveDebugSession</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>










<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>WarnBeforeDetach</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

































<decl_stmt><decl><type><name>virtual</name> <name>size_t</name></type> <name>ReadMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>





























<decl_stmt><decl><type><name>size_t</name></type> <name>ReadMemoryFromInferior</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>




























<decl_stmt><decl><type><name>size_t</name></type> <name>ReadStringFromMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>size_t</name> <name>max_bytes</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>size_t</name> <name>type_width</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><name>size_t</name></type> <name>ReadCStringFromMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>cstr</name></expr></argument>,
<argument><expr><name>size_t</name> <name>cstr_max_len</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ReadCStringFromMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>out_str</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>


























<decl_stmt><decl><type><name>uint64_t</name></type> <name>ReadUnsignedIntegerFromMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>size_t</name> <name>byte_size</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>fail_value</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ReadSignedIntegerFromMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>byte_size</name></expr></argument>,
<argument><expr><name>int64_t</name> <name>fail_value</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>ReadPointerFromMemory</name><argument_list>(<argument>lldb::addr_t vm_addr</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WritePointerToMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>ptr_value</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>virtual</name> <name>size_t</name></type> <name>DoWriteMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>buf</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support writing to processes"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>






























<decl_stmt><decl><type><name>size_t</name></type> <name>WriteScalarToMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Scalar</name> <operator>&amp;</operator><name>scalar</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ReadScalarIntegerFromMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>byte_size</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_signed</name></expr></argument>, <argument><expr><name>Scalar</name> <operator>&amp;</operator><name>scalar</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

























<decl_stmt><decl><type><name>size_t</name></type> <name>WriteMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>DoAllocateMemory</name><argument_list>(<argument>size_t size</argument>, <argument>uint32_t permissions</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support allocating in the debug process"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>LLDB_INVALID_ADDRESS</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>WriteObjectFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ObjectFile</name><operator>::</operator><name>LoadableData</name></expr></argument>&gt;</argument_list></name> <name>entries</name></expr></argument>)</argument_list></decl>;</decl_stmt>






















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>AllocateMemory</name><argument_list>(<argument>size_t size</argument>, <argument>uint32_t permissions</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>CallocateMemory</name><argument_list>(<argument>size_t size</argument>, <argument>uint32_t permissions</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemoryTagManager</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>GetMemoryTagManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>ReadMemoryTags</name><argument_list>(<argument>lldb::addr_t addr</argument>,
<argument>size_t len</argument>)</argument_list></macro></expr>;</expr_stmt>





















<decl_stmt><decl><type><name>Status</name></type> <name>WriteMemoryTags</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>tags</name></expr></argument>)</argument_list></decl>;</decl_stmt>












<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>ResolveIndirectFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>*</operator><name>address</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

























<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>GetMemoryRegionInfo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>MemoryRegionInfo</name> <operator>&amp;</operator><name>range_info</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"Process::GetMemoryRegionInfo() not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type>
<name>GetMemoryRegions</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>MemoryRegionInfos</name> <operator>&amp;</operator><name>region_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>virtual</name> <name>Status</name></type> <name>GetWatchpointSupportInfo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"Process::GetWatchpointSupportInfo() not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>Status</name></type> <name>GetWatchpointSupportInfo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>after</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>after</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"Process::GetWatchpointSupportInfo() not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>ReadModuleFromMemory</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>,
<argument>lldb::addr_t header_addr</argument>,
<argument>size_t size_to_read = <literal type="number">512</literal></argument>)</argument_list></macro></expr>;</expr_stmt>




















<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetLoadAddressPermissions</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>permissions</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function_decl><type><name>bool</name></type> <name>CanJIT</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>SetCanJIT</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>can_jit</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>bool</name></type> <name>CanInterpretFunctionCalls</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_can_interpret_function_calls</name></expr>;</return> </block_content>}</block></function>






<function><type><name>void</name></type> <name>SetCanInterpretFunctionCalls</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>can_interpret_function_calls</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_can_interpret_function_calls</name> <operator>=</operator> <name>can_interpret_function_calls</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function_decl><type><name>void</name></type> <name>SetCanRunCode</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>can_run_code</name></decl></parameter>)</parameter_list>;</function_decl>












<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>DoDeallocateMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>ptr</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support deallocating in the debug process"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>












<decl_stmt><decl><type><name>Status</name></type> <name>DeallocateMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>




























<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetSTDOUT</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetSTDERR</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>



















<function><type><name>virtual</name> <name>size_t</name></type> <name>PutSTDIN</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"stdin unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>














<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetAsyncProfileData</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>GetSoftwareBreakpointTrapOpcode</name><parameter_list>(<parameter><decl><type><name>BreakpointSite</name> <modifier>*</modifier></type><name>bp_site</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>Status</name></type> <name>EnableBreakpointSite</name><parameter_list>(<parameter><decl><type><name>BreakpointSite</name> <modifier>*</modifier></type><name>bp_site</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support enabling breakpoints"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>Status</name></type> <name>DisableBreakpointSite</name><parameter_list>(<parameter><decl><type><name>BreakpointSite</name> <modifier>*</modifier></type><name>bp_site</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support disabling breakpoints"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>





<function_decl><type><name>virtual</name> <name>Status</name></type> <name>EnableSoftwareBreakpoint</name><parameter_list>(<parameter><decl><type><name>BreakpointSite</name> <modifier>*</modifier></type><name>bp_site</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DisableSoftwareBreakpoint</name><parameter_list>(<parameter><decl><type><name>BreakpointSite</name> <modifier>*</modifier></type><name>bp_site</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BreakpointSiteList</name> <modifier>&amp;</modifier></type><name>GetBreakpointSiteList</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>BreakpointSiteList</name> <operator>&amp;</operator><macro><name>GetBreakpointSiteList</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>DisableAllBreakpointSites</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Status</name></type> <name>ClearBreakpointSiteByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <macro><name>CreateBreakpointSite</name><argument_list>(<argument>const lldb::BreakpointLocationSP &amp;owner</argument>,
<argument>bool use_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>DisableBreakpointSiteByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>EnableBreakpointSiteByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>RemoveOwnerFromBreakpointSite</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>owner_id</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>owner_loc_id</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <operator>&amp;</operator><name>bp_site_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>virtual</name> <name>Status</name></type> <name>EnableWatchpoint</name><parameter_list>(<parameter><decl><type><name>Watchpoint</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DisableWatchpoint</name><parameter_list>(<parameter><decl><type><name>Watchpoint</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>bool</name></type> <name>UpdateThreadList</name><parameter_list>(<parameter><decl><type><name>ThreadList</name> <modifier>&amp;</modifier></type><name>old_thread_list</name></decl></parameter>,
<parameter><decl><type><name>ThreadList</name> <modifier>&amp;</modifier></type><name>new_thread_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateThreadListIfNeeded</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>ThreadList</name> <modifier>&amp;</modifier></type><name>GetThreadList</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_thread_list</name></expr>;</return> </block_content>}</block></function>





<function><type><name>ThreadList</name> <modifier>&amp;</modifier></type><name>GetExtendedThreadList</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_extended_thread_list</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>ThreadList</name><operator>::</operator><name>ThreadIterable</name> <macro><name>Threads</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_thread_list</name><operator>.</operator><name>Threads</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNextThreadIndexID</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>CreateOSPluginThread</name><argument_list>(<argument>lldb::tid_t tid</argument>, <argument>lldb::addr_t context</argument>)</argument_list></macro></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>HasAssignedIndexIDToThread</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>sb_thread_id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>uint32_t</name></type> <name>AssignIndexIDToThread</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>UpdateQueueListIfNeeded</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>QueueList</name> <modifier>&amp;</modifier></type><name>GetQueueList</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UpdateQueueListIfNeeded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>m_queue_list</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>QueueList</name><operator>::</operator><name>QueueIterable</name> <macro><name>Queues</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>UpdateQueueListIfNeeded</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name><name>m_queue_list</name><operator>.</operator><name>Queues</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetNextEvent</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name>
<macro><name>WaitForProcessToStop</name><argument_list>(<argument>const Timeout&lt;std::micro&gt; &amp;timeout</argument>,
<argument>lldb::EventSP *event_sp_ptr = nullptr</argument>,
<argument>bool wait_always = true</argument>,
<argument>lldb::ListenerSP hijack_listener = lldb::ListenerSP()</argument>,
<argument>Stream *stream = nullptr</argument>, <argument>bool use_run_lock = true</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetIOHandlerID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_iohandler_sync</name><operator>.</operator><name>GetValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>









<function_decl><type><name>void</name></type> <name>SyncIOHandler</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>iohandler_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetStateChangedEvents</name><argument_list>(
<argument>lldb::EventSP &amp;event_sp</argument>, <argument>const Timeout&lt;std::micro&gt; &amp;timeout</argument>,
<argument>lldb::ListenerSP
hijack_listener</argument>)</argument_list></macro></expr>;</expr_stmt>




















<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>HandleProcessStateChangedEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>*</operator><name>stream</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>pop_process_io_handler</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>Event</name> <modifier>*</modifier></type><name>PeekAtStateChangedEvents</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>ProcessEventHijacker</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ProcessEventHijacker</name><argument_list>(<argument>Process &amp;process</argument>, <argument>lldb::ListenerSP listener_sp</argument>)</argument_list></macro>
: <macro><name>m_process</name><argument_list>(<argument>process</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_process</name><operator>.</operator><name>HijackProcessEvents</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>listener_sp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><operator>~</operator><macro><name>ProcessEventHijacker</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>m_process</name><operator>.</operator><name>RestoreProcessEvents</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>Process</name> <operator>&amp;</operator><name>m_process</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ProcessEventHijacker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ProcessProperties</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>bool</name></type> <name>HijackProcessEvents</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>listener_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>RestoreProcessEvents</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>StateChangedIsHijackedForSynchronousResume</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>StateChangedIsExternallyHijacked</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ABISP</name> <operator>&amp;</operator><call><name>GetABI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>OperatingSystem</name> <modifier>*</modifier></type><name>GetOperatingSystem</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_os_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LanguageRuntime</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>GetLanguageRuntimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LanguageRuntime</name> <modifier>*</modifier></type><name>GetLanguageRuntime</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>IsPossibleDynamicValue</name><parameter_list>(<parameter><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>in_value</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsRunning</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>DynamicCheckerFunctions</name> <modifier>*</modifier></type><name>GetDynamicCheckers</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_dynamic_checkers_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>SetDynamicCheckers</name><parameter_list>(<parameter><decl><type><name>DynamicCheckerFunctions</name> <modifier>*</modifier></type><name>dynamic_checkers</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>bool</name></type> <name>PruneThreadPlansForTID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>PruneThreadPlans</name><parameter_list>()</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>ThreadPlanStack</name> <modifier>*</modifier></type><name>FindThreadPlans</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list></decl>;</decl_stmt>
























<decl_stmt><decl><type><name>bool</name></type> <name>DumpThreadPlansForTID</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>desc_level</name></expr></argument>, <argument><expr><name>bool</name> <name>internal</name></expr></argument>,
<argument><expr><name>bool</name> <name>condense_trivial</name></expr></argument>, <argument><expr><name>bool</name> <name>skip_unreported_plans</name></expr></argument>)</argument_list></decl>;</decl_stmt>


















<decl_stmt><decl><type><name>void</name></type> <name>DumpThreadPlans</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>desc_level</name></expr></argument>,
<argument><expr><name>bool</name> <name>internal</name></expr></argument>, <argument><expr><name>bool</name> <name>condense_trivial</name></expr></argument>,
<argument><expr><name>bool</name> <name>skip_unreported_plans</name></expr></argument>)</argument_list></decl>;</decl_stmt>











<function><type><name>virtual</name> <name>bool</name></type> <name>StartNoticingNewThreads</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>






<function><type><name>virtual</name> <name>bool</name></type> <name>StopNoticingNewThreads</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>SetRunningUserExpression</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>on</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetRunningUtilityFunction</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>on</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>CalculateTarget</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>CalculateProcess</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name>shared_from_this</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>CalculateThread</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>lldb</name><operator>::</operator><call><name>ThreadSP</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>CalculateStackFrame</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>StackFrameSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CalculateExecutionContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetSTDIOFileDescriptor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file_descriptor</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>AddInvalidMemoryRegion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LoadRange</name> <modifier>&amp;</modifier></type><name>region</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>RemoveInvalidMemoryRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LoadRange</name> <modifier>&amp;</modifier></type><name>region</name></decl></parameter>)</parameter_list>;</function_decl>








<typedef>typedef <function_decl><type><name>bool</name></type>(<name>PreResumeActionCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>AddPreResumeAction</name><parameter_list>(<parameter><decl><type><name>PreResumeActionCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>RunPreResumeActions</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearPreResumeActions</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearPreResumeAction</name><parameter_list>(<parameter><decl><type><name>PreResumeActionCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ProcessRunLock</name> <modifier>&amp;</modifier></type><name>GetRunLock</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CurrentThreadIsPrivateStateThread</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>Status</name></type> <name>SendEventData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>return_error</name><argument_list>(<argument><expr><literal type="string">"Sending an event is not supported for this process."</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>return_error</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadCollectionSP</name> <macro><name>GetHistoryThreads</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>InstrumentationRuntimeSP</name>
<macro><name>GetInstrumentationRuntime</name><argument_list>(<argument>lldb::InstrumentationRuntimeType type</argument>)</argument_list></macro></expr>;</expr_stmt>



















<function_decl><type><name>virtual</name> <name>bool</name></type> <name>GetModuleSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>module_file_spec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>, <parameter><decl><type><name>ModuleSpec</name> <modifier>&amp;</modifier></type><name>module_spec</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PrefetchModuleSpecs</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>&gt;</argument_list></name> <name>module_file_specs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>triple</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>















<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>GetFileLoadAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>is_loaded</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>load_addr</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>Status</name><argument_list>(<argument><expr><literal type="string">"Not supported"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>AddImageToken</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>image_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetImagePtrFromToken</name><argument_list>(<argument>size_t token</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>ResetImageToken</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl>






















<function_decl><type><name>Address</name></type> <name>AdvanceAddressToNextBranchInstruction</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>default_stop_addr</name></decl></parameter>,
<parameter><decl><type><name>AddressRange</name></type> <name>range_bounds</name></decl></parameter>)</parameter_list>;</function_decl>

























<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type>
<name>ConfigureStructuredData</name><argument_list>(<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <operator>&amp;</operator><name>config_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<decl_stmt><decl><type><name>void</name></type> <name>BroadcastStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <operator>&amp;</operator><name>object_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StructuredDataPluginSP</name> <operator>&amp;</operator><name>plugin_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StructuredDataPluginSP</name>
<macro><name>GetStructuredDataPlugin</name><argument_list>(<argument>ConstString type_name</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Trace</name></decl>;</decl_stmt>







<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TraceSupportedResponse</name></expr></argument>&gt;</argument_list></name> <call><name>TraceSupported</name><argument_list>()</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>TraceStart</name><argument_list>(<argument>const llvm::json::Value &amp;request</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>UnimplementedError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>TraceStop</name><argument_list>(<argument>const TraceStopRequest &amp;request</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>UnimplementedError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>TraceGetState</name><argument_list>(<argument>llvm::StringRef type</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>UnimplementedError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>TraceGetBinaryData</name><argument_list>(<argument>const TraceGetBinaryDataRequest &amp;request</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>UnimplementedError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>CallVoidArgVoidPtrReturn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>*</operator><name>address</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>returned_func</name></expr></argument>,
<argument><expr><name>bool</name> <name>trap_exceptions</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<function_decl><type><name>virtual</name> <name>bool</name></type> <name>DoUpdateThreadList</name><parameter_list>(<parameter><decl><type><name>ThreadList</name> <modifier>&amp;</modifier></type><name>old_thread_list</name></decl></parameter>,
<parameter><decl><type><name>ThreadList</name> <modifier>&amp;</modifier></type><name>new_thread_list</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



























<decl_stmt><decl><type><name>virtual</name> <name>size_t</name></type> <name>DoReadMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetPrivateState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<function_decl><type><name>Status</name></type> <name>PrivateResume</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>CompleteAttach</name><parameter_list>()</parameter_list>;</function_decl>



























<function_decl><type><name>void</name></type> <name>PrintWarning</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>warning_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>repeat_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>4<operator>,</operator> 5</function_decl>)</block_content></block></decl>)</decl_stmt>)<empty_stmt>;</empty_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>NextEventAction</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>EventActionResult</name> <block>{
<decl><name>eEventActionSuccess</name></decl>,
<decl><name>eEventActionRetry</name></decl>,
<decl><name>eEventActionExit</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>NextEventAction</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_process</name><argument_list>(<argument>process</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>NextEventAction</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>EventActionResult</name></type> <name>PerformAction</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>virtual</name> <name>void</name></type> <name>HandleBeingUnshipped</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function_decl><type><name>virtual</name> <name>EventActionResult</name></type> <name>HandleBeingInterrupted</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExitString</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function><type><name>void</name></type> <name>RequestResume</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>m_process</name><operator>-&gt;</operator><name>m_resume_requested</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>m_process</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetNextEventAction</name><argument_list>(<argument><expr><name>Process</name><operator>::</operator><name>NextEventAction</name> <operator>*</operator><name>next_event_action</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>m_next_event_action_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_next_event_action_up</name><operator>-&gt;</operator><name>HandleBeingUnshipped</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>m_next_event_action_up</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>next_event_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>AttachCompletionHandler</name> <range>: <expr><name>public</name> <name>NextEventAction</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>AttachCompletionHandler</name><argument_list>(<argument>Process *process</argument>, <argument>uint32_t exec_count</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>AttachCompletionHandler</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>EventActionResult</name> <macro><name>PerformAction</name><argument_list>(<argument>lldb::EventSP &amp;event_sp</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>EventActionResult</name> <macro><name>HandleBeingInterrupted</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetExitString</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>uint32_t</name> <name>m_exec_count</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_exit_string</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>PrivateStateThreadIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name> <operator>=</operator> <call><name><name>m_private_state</name><operator>.</operator><name>GetValue</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>state</name> <operator>!=</operator> <name>lldb</name><operator>::</operator><name>eStateInvalid</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>lldb</name><operator>::</operator><name>eStateDetached</name> <operator>&amp;&amp;</operator>
<name>state</name> <operator>!=</operator> <name>lldb</name><operator>::</operator><name>eStateExited</name> <operator>&amp;&amp;</operator> <call><name><name>m_private_state_thread</name><operator>.</operator><name>IsJoinable</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>ForceNextEventDelivery</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_force_next_event_delivery</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

















<decl_stmt><decl><type><name>void</name></type> <name>MapSupportedStructuredDataPlugins</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Array</name> <operator>&amp;</operator><name>supported_type_names</name></expr></argument>)</argument_list></decl>;</decl_stmt>























<decl_stmt><decl><type><name>bool</name></type> <name>RouteAsyncStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>object_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function><type><name>virtual</name> <name>bool</name></type> <name>SupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

















<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>DoReadMemoryTags</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>size_t len</argument>, <argument>int32_t type</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s does not support reading memory tags"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



















<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>DoWriteMemoryTags</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><name>int32_t</name> <name>type</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>tags</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>Status</name><argument_list>(<argument><expr><literal type="string">"%s does not support writing memory tags"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>LanguageRuntimeSP</name></expr></argument>&gt;</argument_list></name>
<name>LanguageRuntimeCollection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>WarningsPointerSet</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>WarningsPointerSet</name></expr></argument>&gt;</argument_list></name> <name>WarningsCollection</name></expr>;</expr_stmt></typedef>

<struct>struct <name>PreResumeCallbackAndBaton</name> <block>{
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl>;</decl_stmt>
<macro><name>PreResumeCallbackAndBaton</name><argument_list>(<argument>PreResumeActionCallback in_callback</argument>,
<argument>void *in_baton</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>in_callback</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>baton</name><argument_list>(<argument>in_baton</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <name>operator</name><operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>PreResumeCallbackAndBaton</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<return>return <expr><name>callback</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>callback</name></name> <operator>&amp;&amp;</operator> <name>baton</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>baton</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>StructuredDataPluginMap</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>StructuredDataPluginSP</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <name>m_target_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>m_pid</name> <operator>=</operator> <name>LLDB_INVALID_PROCESS_ID</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>ThreadSafeValue</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name></expr></argument>&gt;</argument_list></name></type> <name>m_public_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>ThreadSafeValue</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name></expr></argument>&gt;</argument_list></name></type>
<name>m_private_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Broadcaster</name></type> <name>m_private_state_broadcaster</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Broadcaster</name></type> <name>m_private_state_control_broadcaster</name></decl>;</decl_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_private_state_listener_sp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HostThread</name></type> <name>m_private_state_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ProcessModID</name></type> <name>m_mod_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_process_unique_id</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_thread_index_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>m_thread_id_to_index_id_map</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_exit_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_exit_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_exit_status_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_thread_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ThreadList</name></type> <name>m_thread_list_real</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadList</name></type> <name>m_thread_list</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ThreadPlanStackMap</name></type> <name>m_thread_plans</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ThreadList</name></type> <name>m_extended_thread_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_extended_thread_stop_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QueueList</name></type>
<name>m_queue_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_queue_list_stop_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Notifications</name></expr></argument>&gt;</argument_list></name> <name>m_notifications</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>m_image_tokens</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_listener_sp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BreakpointSiteList</name></type> <name>m_breakpoint_site_list</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicLoaderUP</name> <name>m_dyld_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>JITLoaderListUP</name> <name>m_jit_loaders_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicCheckerFunctionsUP</name> <name>m_dynamic_checkers_up</name></expr>;</expr_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OperatingSystemUP</name> <name>m_os_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SystemRuntimeUP</name> <name>m_system_runtime_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnixSignalsSP</name>
<name>m_unix_signals_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ABISP</name> <name>m_abi_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <name>m_process_input_reader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Communication</name></type> <name>m_stdio_communication</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_stdio_communication_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_stdin_forward</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_stdout_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_stderr_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_profile_data_comm_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_profile_data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>m_iohandler_sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemoryCache</name></type> <name>m_memory_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllocatedMemoryCache</name></type> <name>m_allocated_memory_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_should_detach</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LanguageRuntimeCollection</name></type> <name>m_language_runtimes</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_language_runtimes_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>InstrumentationRuntimeCollection</name></type> <name>m_instrumentation_runtimes</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NextEventAction</name></expr></argument>&gt;</argument_list></name> <name>m_next_event_action_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PreResumeCallbackAndBaton</name></expr></argument>&gt;</argument_list></name> <name>m_pre_resume_actions</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ProcessRunLock</name></type> <name>m_public_run_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ProcessRunLock</name></type> <name>m_private_run_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_currently_handling_do_on_removals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_resume_requested</name></decl>;</decl_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_finalizing</name></expr>;</expr_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_code_address_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_data_address_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_clear_thread_plans_on_stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_force_next_event_delivery</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>m_last_broadcast_state</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>m_resolved_indirect_addresses</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_destroy_in_process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_can_interpret_function_calls</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>WarningsCollection</name></type> <name>m_warnings_issued</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_run_thread_plan_lock</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StructuredDataPluginMap</name></type> <name>m_structured_data_plugin_map</name></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>eCanJITDontKnow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>eCanJITYes</name></decl>, <decl><name>eCanJITNo</name></decl> }</block> <decl><name>m_can_jit</name></decl>;</enum>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UtilityFunction</name></expr></argument>&gt;</argument_list></name> <name>m_dlopen_utility_func_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>once_flag</name> <name>m_dlopen_utility_func_flag_once</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>RemoveBreakpointOpcodesFromBuffer</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SynchronouslyNotifyStateChanged</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPublicState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>new_state</name></expr></argument>, <argument><expr><name>bool</name> <name>restarted</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPrivateState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>StartPrivateStateThread</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_secondary_thread</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StopPrivateStateThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PausePrivateStateThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ResumePrivateStateThread</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<struct>struct <name>PrivateStateThreadArgs</name> <block>{
<macro><name>PrivateStateThreadArgs</name><argument_list>(<argument>Process *p</argument>, <argument>bool s</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>is_secondary_thread</name><argument_list>(<argument>s</argument>)</argument_list></macro><expr><block>{}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_secondary_thread</name></decl>;</decl_stmt>
}</block>;</struct>



<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>thread_result_t</name> <call><name>PrivateStateThread</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>thread_result_t</name> <macro><name>RunPrivateStateThread</name><argument_list>(<argument>bool is_secondary_thread</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>HandlePrivateEvent</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>Status</name></type> <name>HaltPrivate</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <call><name>WaitForProcessStopPrivate</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>GetEventsPrivate</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><name>bool</name> <name>control_only</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name>
<call><name>GetStateChangedEventsPrivate</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>WriteMemoryPrivate</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>AppendSTDOUT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AppendSTDERR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>BroadcastAsyncProfileData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>one_profile_data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>STDIOReadThreadBytesReceived</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>PushProcessIOHandler</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>PopProcessIOHandler</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ProcessIOHandlerIsActive</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>ProcessIOHandlerExists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_process_input_reader</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>StopForDestroyOrDetach</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>exit_event_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>UpdateAutomaticSignalFiltering</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>LoadOperatingSystemPlugin</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>Status</name></type> <name>DestroyImpl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force_kill</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>bool</name></type> <name>ShouldBroadcastEvent</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ControlPrivateStateThread</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>signal</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>Process</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Process</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Process</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Process</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};



<decl_stmt><decl><type><name>class</name></type> <name>UtilityFunctionScope</name> <block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>m_process</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>UtilityFunctionScope</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_process</name><argument_list>(<argument>p</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_process</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_process</name><operator>-&gt;</operator><name>SetRunningUtilityFunction</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>UtilityFunctionScope</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_process</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_process</name><operator>-&gt;</operator><name>SetRunningUtilityFunction</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
