<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Communication.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_COMMUNICATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_COMMUNICATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/HostThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Timeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ratio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>




















































<decl_stmt><decl><type><name>class</name></type> <name>Communication</name> <range>: <expr><name>public</name> <name>Broadcaster</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>FLAGS_ANONYMOUS_ENUM</name><argument_list>()</argument_list></macro><block>{
<expr><name>eBroadcastBitDisconnected</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>eBroadcastBitReadThreadGotBytes</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>eBroadcastBitReadThreadDidExit</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal>
<operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>eBroadcastBitReadThreadShouldExit</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,
<expr><name>eBroadcastBitPacketAvailable</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>,
<expr><name>eBroadcastBitNoMorePendingInput</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>,


<expr><name>kLoUserBroadcastBit</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>,
<expr><name>kHiUserBroadcastBit</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>,
<expr><name>eAllEventBits</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>}</block></expr>;

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReadThreadBytesReceived</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>









<call><name>Communication</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>broadcaster_name</name></expr></argument>)</argument_list></call></block></expr></range></decl>;</decl_stmt>




<expr_stmt><expr><operator>~</operator><macro><name>Communication</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <call><name>Connect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>url</name></expr></argument>, <argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <call><name>Disconnect</name><argument_list>(<argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>IsConnected</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasConnection</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Connection</name> <operator>*</operator><macro><name>GetConnection</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_connection_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>




























<decl_stmt><decl><type><name>size_t</name></type> <name>Read</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>size_t</name></type> <name>Write</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>src_len</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <operator>&amp;</operator><name>status</name></expr></argument>,
<argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>













<decl_stmt><decl><type><name>void</name></type> <name>SetConnection</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Connection</name></expr></argument>&gt;</argument_list></name> <name>connection</name></expr></argument>)</argument_list></decl>;</decl_stmt>























<function_decl><type><name>virtual</name> <name>bool</name></type> <name>StartReadThread</name><parameter_list>(<parameter><decl><type><name>Status</name> <modifier>*</modifier></type><name>error_ptr</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>virtual</name> <name>bool</name></type> <name>StopReadThread</name><parameter_list>(<parameter><decl><type><name>Status</name> <modifier>*</modifier></type><name>error_ptr</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>JoinReadThread</name><parameter_list>(<parameter><decl><type><name>Status</name> <modifier>*</modifier></type><name>error_ptr</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>ReadThreadIsRunning</name><parameter_list>()</parameter_list>;</function_decl>













<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>thread_result_t</name> <macro><name>ReadThread</name><argument_list>(<argument>lldb::thread_arg_t comm_ptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetReadThreadBytesReceivedCallback</name><parameter_list>(<parameter><decl><type><name>ReadThreadBytesReceived</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_baton</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>SynchronizeWithReadThread</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>ConnectionStatusAsString</name><argument_list>(<argument>lldb::ConnectionStatus status</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetCloseOnEOF</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_close_on_eof</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetCloseOnEOF</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_close_on_eof</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>ConstString</name> <modifier>&amp;</modifier></type><name>GetStaticBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>ConstString</name> <operator>&amp;</operator><macro><name>GetBroadcasterClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>GetStaticBroadcasterClass</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ConnectionSP</name> <name>m_connection_sp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HostThread</name></type> <name>m_read_thread</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_read_thread_enabled</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_read_thread_did_exit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name>
<name>m_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_bytes_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name>
<name>m_write_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_synchronize_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ReadThreadBytesReceived</name></type> <name>m_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_callback_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_close_on_eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ReadFromConnection</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AppendBytesToCache</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>src_len</name></expr></argument>,
<argument><expr><name>bool</name> <name>broadcast</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>
















<function_decl><type><name>size_t</name></type> <name>GetCachedBytes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_len</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Communication</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Communication</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Communication</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Communication</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
