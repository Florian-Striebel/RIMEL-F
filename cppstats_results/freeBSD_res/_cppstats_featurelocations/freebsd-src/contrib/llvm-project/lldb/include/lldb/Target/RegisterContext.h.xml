<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/RegisterContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_REGISTERCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_REGISTERCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RegisterContext</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>RegisterContext</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>ExecutionContextScope</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>RegisterContext</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>uint32_t concrete_frame_idx</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>RegisterContext</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>InvalidateIfNeeded</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>InvalidateAllRegisters</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetRegisterCount</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>GetRegisterInfoAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>reg</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>UpdateDynamicRegisterSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>,
<argument><expr><name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetRegisterSetCount</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>RegisterSet</name> <modifier>*</modifier></type><name>GetRegisterSet</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>reg_set</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ByteOrder</name> <call><name>GetByteOrder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ReadRegister</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>reg_info</name></decl></parameter>,
<parameter><decl><type><name>RegisterValue</name> <modifier>&amp;</modifier></type><name>reg_value</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>WriteRegister</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>reg_info</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RegisterValue</name> <modifier>&amp;</modifier></type><name>reg_value</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ReadAllRegisterValues</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>WriteAllRegisterValues</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DataBufferSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>











<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type>
<name>ReadAllRegisterValues</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>RegisterCheckpoint</name> <operator>&amp;</operator><name>reg_checkpoint</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>WriteAllRegisterValues</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterCheckpoint</name> <operator>&amp;</operator><name>reg_checkpoint</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>CopyFromRegisterContext</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <name>context</name></expr></argument>)</argument_list></decl>;</decl_stmt>


































<decl_stmt><decl><type><name>virtual</name> <name>uint32_t</name></type> <name>ConvertRegisterKindToRegisterNumber</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>kind</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>NumSupportedHardwareBreakpoints</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>uint32_t</name></type> <name>SetHardwareBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ClearHardwareBreakpoint</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>hw_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>NumSupportedHardwareWatchpoints</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>uint32_t</name></type> <name>SetHardwareWatchpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>bool</name> <name>read</name></expr></argument>, <argument><expr><name>bool</name> <name>write</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ClearHardwareWatchpoint</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>hw_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>HardwareSingleStep</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type>
<name>ReadRegisterValueFromMemory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>src_addr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>src_len</name></expr></argument>,
<argument><expr><name>RegisterValue</name> <operator>&amp;</operator><name>reg_value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type>
<name>WriteRegisterValueToMemory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>dst_addr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>dst_len</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>RegisterValue</name> <operator>&amp;</operator><name>reg_value</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>tid_t</name> <macro><name>GetThreadID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>virtual</name> <name>Thread</name> <modifier>&amp;</modifier></type><name>GetThread</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_thread</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>GetRegisterInfoByName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>reg_name</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>start_idx</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>GetRegisterInfo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>reg_kind</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>reg_num</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>uint64_t</name></type> <name>GetPC</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name> <init>= <expr><name>LLDB_INVALID_ADDRESS</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>bool</name></type> <name>GetPCForSymbolication</name><parameter_list>(<parameter><decl><type><name>Address</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetPC</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetPC</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>GetSP</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name> <init>= <expr><name>LLDB_INVALID_ADDRESS</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetSP</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>GetFP</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name> <init>= <expr><name>LLDB_INVALID_ADDRESS</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetFP</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetRegisterName</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>GetReturnAddress</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name> <init>= <expr><name>LLDB_INVALID_ADDRESS</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>GetFlags</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>ReadRegisterAsUnsigned</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>ReadRegisterAsUnsigned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>reg_info</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>WriteRegisterFromUnsigned</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uval</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>WriteRegisterFromUnsigned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>reg_info</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uval</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ConvertBetweenRegisterKinds</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>source_rk</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>source_regnum</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>target_rk</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>target_regnum</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>CalculateTarget</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>CalculateProcess</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>CalculateThread</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>CalculateStackFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CalculateExecutionContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetStopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stop_id</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetStopID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>stop_id</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_stop_id</name> <operator>=</operator> <name>stop_id</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>









<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>BehavesLikeZerothFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_concrete_frame_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>m_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_concrete_frame_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_stop_id</name></decl>;</decl_stmt>
<label><name>private</name>:</label>

<expr_stmt><expr><call><name>RegisterContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterContext</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RegisterContext</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>RegisterContext</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
