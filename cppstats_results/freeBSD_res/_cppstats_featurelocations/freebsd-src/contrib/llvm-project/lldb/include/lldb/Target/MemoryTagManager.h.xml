<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/MemoryTagManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_MEMORYTAGMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_MEMORYTAGMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/MemoryRegionInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>










<decl_stmt><decl><type><name>class</name></type> <name>MemoryTagManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>Range</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></type> <name>TagRange</name>;</typedef>





<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLogicalTag</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>RemoveNonAddressBits</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<decl_stmt><decl><type><name>virtual</name> <name>ptrdiff_t</name></type> <name>AddressDiff</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr1</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr2</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetGranuleSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>










<decl_stmt><decl><type><name>virtual</name> <name>TagRange</name></type> <name>ExpandToGranule</name><argument_list>(<argument><expr><name>TagRange</name> <name>range</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>











<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TagRange</name></expr></argument>&gt;</argument_list></name> <macro><name>MakeTaggedRange</name><argument_list>(
<argument>lldb::addr_t addr</argument>, <argument>lldb::addr_t end_addr</argument>,
<argument>const lldb_private::MemoryRegionInfos &amp;memory_regions</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>








<expr_stmt><expr><name>virtual</name> <name>int32_t</name> <macro><name>GetAllocationTagType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>size_t</name> <macro><name>GetTagSizeInBytes</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>UnpackTagsData</name><argument_list>(<argument>const std::vector&lt;uint8_t&gt; &amp;tags</argument>,
<argument>size_t granules = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>PackTags</name><argument_list>(<argument>const std::vector&lt;lldb::addr_t&gt; &amp;tags</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





















<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>RepeatTagsForRange</name><argument_list>(<argument>const std::vector&lt;lldb::addr_t&gt; &amp;tags</argument>,
<argument>TagRange range</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>MemoryTagManager</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
