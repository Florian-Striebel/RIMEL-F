<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/StackFrame.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_STACKFRAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_STACKFRAME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObjectList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StackID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StreamString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>













<decl_stmt><decl><type><name>class</name></type> <name>StackFrame</name> <range>: <expr><name>public</name> <name>ExecutionContextScope</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>std</name>::<name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>StackFrame</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>ExpressionPathOption</name> <block>{
<decl><name>eExpressionPathOptionCheckPtrVsMember</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eExpressionPathOptionsNoFragileObjcIvar</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eExpressionPathOptionsNoSyntheticChildren</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eExpressionPathOptionsNoSyntheticArrayRange</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eExpressionPathOptionsAllowDirectIVarAccess</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>eExpressionPathOptionsInspectAnonymousUnions</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Kind</name> <block>{<block_content>

<expr_stmt><expr><name>Regular</name></expr><operator>,</operator>



<expr><name>History</name></expr><operator>,</operator>




<expr><name>Artificial</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>









































<macro><name>StackFrame</name><argument_list>(<argument>const lldb::ThreadSP &amp;thread_sp</argument>, <argument>lldb::user_id_t frame_idx</argument>,
<argument>lldb::user_id_t concrete_frame_idx</argument>, <argument>lldb::addr_t cfa</argument>,
<argument>bool cfa_is_valid</argument>, <argument>lldb::addr_t pc</argument>, <argument>Kind frame_kind</argument>,
<argument>bool behaves_like_zeroth_frame</argument>, <argument>const SymbolContext *sc_ptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>StackFrame</name><argument_list>(<argument>const lldb::ThreadSP &amp;thread_sp</argument>, <argument>lldb::user_id_t frame_idx</argument>,
<argument>lldb::user_id_t concrete_frame_idx</argument>,
<argument>const lldb::RegisterContextSP &amp;reg_context_sp</argument>, <argument>lldb::addr_t cfa</argument>,
<argument>lldb::addr_t pc</argument>, <argument>bool behaves_like_zeroth_frame</argument>,
<argument>const SymbolContext *sc_ptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>StackFrame</name><argument_list>(<argument>const lldb::ThreadSP &amp;thread_sp</argument>, <argument>lldb::user_id_t frame_idx</argument>,
<argument>lldb::user_id_t concrete_frame_idx</argument>,
<argument>const lldb::RegisterContextSP &amp;reg_context_sp</argument>, <argument>lldb::addr_t cfa</argument>,
<argument>const Address &amp;pc</argument>, <argument>bool behaves_like_zeroth_frame</argument>,
<argument>const SymbolContext *sc_ptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>StackFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_thread_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>StackID</name> <modifier>&amp;</modifier></type><name>GetStackID</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>GetFrameCodeAddress</name><parameter_list>()</parameter_list>;</function_decl>

















<function_decl><type><name>Address</name></type> <name>GetFrameCodeAddressForSymbolication</name><parameter_list>()</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>bool</name></type> <name>ChangePC</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>pc</name></expr></argument>)</argument_list></decl>;</decl_stmt>















<decl_stmt><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>GetSymbolContext</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>)</argument_list></decl>;</decl_stmt>





















<function_decl><type><name>bool</name></type> <name>GetFrameBaseValue</name><parameter_list>(<parameter><decl><type><name>Scalar</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>*</modifier></type><name>error_ptr</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>DWARFExpression</name> <modifier>*</modifier></type><name>GetFrameBaseExpression</name><parameter_list>(<parameter><decl><type><name>Status</name> <modifier>*</modifier></type><name>error_ptr</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>Block</name> <modifier>*</modifier></type><name>GetFrameBlock</name><parameter_list>()</parameter_list>;</function_decl>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <call><name>GetRegisterContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <operator>&amp;</operator><macro><name>GetRegisterContextSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_reg_context_sp</name></expr>;</return>
}</block></expr></expr_stmt>















<function_decl><type><name>VariableList</name> <modifier>*</modifier></type><name>GetVariableList</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>get_file_globals</name></decl></parameter>)</parameter_list>;</function_decl>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name>
<macro><name>GetInScopeVariableList</name><argument_list>(<argument>bool get_file_globals</argument>,
<argument>bool must_have_valid_location = false</argument>)</argument_list></macro></expr>;</expr_stmt>


























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetValueForVariableExpressionPath</name><argument_list>(
<argument>llvm::StringRef var_expr</argument>, <argument>lldb::DynamicValueType use_dynamic</argument>,
<argument>uint32_t options</argument>, <argument>lldb::VariableSP &amp;var_sp</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>






<function_decl><type><name>bool</name></type> <name>HasDebugInformation</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Disassemble</name><parameter_list>()</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>DumpUsingSettingsFormat</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_unique</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frame_marker</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_frame_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_fullpaths</name></decl></parameter>)</parameter_list>;</function_decl>






















<function_decl><type><name>bool</name></type> <name>GetStatus</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_frame_info</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_source</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>show_unique</name> <init>= <expr><name>false</name></expr></init></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frame_marker</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>IsInlined</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>IsHistorical</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>IsArtificial</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>uint32_t</name> <macro><name>GetFrameIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function><type><name>void</name></type> <name>SetFrameIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_frame_index</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt> </block_content>}</block></function>









<expr_stmt><expr><name>uint32_t</name> <macro><name>GetConcreteFrameIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_concrete_frame_index</name></expr>;</return> }</block></expr></expr_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>GetValueObjectForFrameVariable</name><argument_list>(<argument>const lldb::VariableSP &amp;variable_sp</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>GetLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>GuessLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GuessValueForAddress</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro></expr>;</expr_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GuessValueForRegisterAndOffset</name><argument_list>(<argument>ConstString reg</argument>,
<argument>int64_t offset</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>FindVariable</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>CalculateTarget</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>CalculateProcess</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>CalculateThread</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>CalculateStackFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CalculateExecutionContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RecognizedStackFrameSP</name> <call><name>GetRecognizedFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>StackFrameList</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetSymbolContextScope</name><parameter_list>(<parameter><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>symbol_scope</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateCurrentFrameFromPreviousFrame</name><parameter_list>(<parameter><decl><type><name>StackFrame</name> <modifier>&amp;</modifier></type><name>prev_frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdatePreviousFrameFromCurrentFrame</name><parameter_list>(<parameter><decl><type><name>StackFrame</name> <modifier>&amp;</modifier></type><name>curr_frame</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>HasCachedData</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadWP</name> <name>m_thread_wp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_frame_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_concrete_frame_index</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <name>m_reg_context_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StackID</name></type> <name>m_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Address</name></type> <name>m_frame_code_addr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SymbolContext</name></type> <name>m_sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Scalar</name></type> <name>m_frame_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Status</name></type> <name>m_frame_base_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_cfa_is_valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Kind</name></type> <name>m_stack_frame_kind</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>m_behaves_like_zeroth_frame</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name> <name>m_variable_list_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ValueObjectList</name></type> <name>m_variable_list_value_objects</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RecognizedStackFrameSP</name> <name>m_recognized_frame_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StreamString</name></type> <name>m_disassembly</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StackFrame</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StackFrame</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>StackFrame</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>StackFrame</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
