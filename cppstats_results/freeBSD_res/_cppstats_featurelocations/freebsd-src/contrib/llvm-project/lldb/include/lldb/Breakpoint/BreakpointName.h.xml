<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointName.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTNAME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointLocationCollection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointLocationList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/Stoppoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SearchFilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BreakpointName</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Permissions</name>
<block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <name>PermissionKinds</name> <block>{ <decl><name>listPerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>disablePerm</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>deletePerm</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><name>allPerms</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> }</block>;</enum>

<macro><name>Permissions</name><argument_list>(<argument>bool in_list</argument>, <argument>bool in_disable</argument>, <argument>bool in_delete</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>listPerm</name></expr>]</index></name> <operator>=</operator> <name>in_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>disablePerm</name></expr>]</index></name> <operator>=</operator> <name>in_disable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>deletePerm</name></expr>]</index></name> <operator>=</operator> <name>in_delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_set_mask</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name><name>permissions_mask</name><index>[<expr><name>allPerms</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>Permissions</name><argument_list>(<argument>const Permissions &amp;rhs</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>listPerm</name></expr>]</index></name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_permissions</name><index>[<expr><name>listPerm</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>disablePerm</name></expr>]</index></name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_permissions</name><index>[<expr><name>disablePerm</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>deletePerm</name></expr>]</index></name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_permissions</name><index>[<expr><name>deletePerm</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_set_mask</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_set_mask</name></name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>Permissions</name><argument_list>()</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>listPerm</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>disablePerm</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>deletePerm</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_set_mask</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><specifier>const</specifier> <name>Permissions</name> <modifier>&amp;</modifier></type><name>operator</name><init>= <expr><operator>(</operator><specifier>const</specifier> <name>Permissions</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <operator>&amp;</operator><name>rhs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>listPerm</name></expr>]</index></name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_permissions</name><index>[<expr><name>listPerm</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>disablePerm</name></expr>]</index></name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_permissions</name><index>[<expr><name>disablePerm</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>deletePerm</name></expr>]</index></name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_permissions</name><index>[<expr><name>deletePerm</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_set_mask</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_set_mask</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></init></decl></decl_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>Permissions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>MergeInto</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Permissions</name> <modifier>&amp;</modifier></type><name>incoming</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MergePermission</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>listPerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MergePermission</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>disablePerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MergePermission</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>deletePerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetAllowList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetPermission</name><argument_list>(<argument><expr><name>listPerm</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>bool</name></type> <name>SetAllowList</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SetPermission</name><argument_list>(<argument><expr><name>listPerm</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetAllowDelete</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetPermission</name><argument_list>(<argument><expr><name>deletePerm</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>bool</name></type> <name>SetAllowDelete</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SetPermission</name><argument_list>(<argument><expr><name>deletePerm</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetAllowDisable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetPermission</name><argument_list>(<argument><expr><name>disablePerm</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>bool</name></type> <name>SetAllowDisable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SetPermission</name><argument_list>(<argument><expr><name>disablePerm</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>GetPermission</name><argument_list>(<argument><expr>enum <name>PermissionKinds</name> <name>permission</name></expr></argument>)</argument_list> const
<block>{<block_content>
<return>return <expr><name><name>m_permissions</name><index>[<expr><name>permission</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsSet</name><argument_list>(<argument><expr>enum <name>PermissionKinds</name> <name>permission</name></expr></argument>)</argument_list> const
<block>{<block_content>
<return>return <expr><call><name><name>m_set_mask</name><operator>.</operator><name>Test</name></name><argument_list>(<argument><expr><name><name>permissions_mask</name><index>[<expr><name>permission</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>AnySet</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_set_mask</name><operator>.</operator><name>AnySet</name></name><argument_list>(<argument><expr><name><name>permissions_mask</name><index>[<expr><name>allPerms</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>Flags</name><operator>::</operator><name>ValueType</name> <name><name>permissions_mask</name><index>[<expr><name>allPerms</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>m_permissions</name><index>[<expr><name>allPerms</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_set_mask</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>SetPermission</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>PermissionKinds</name></name></type> <name>permission</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>old_value</name> <init>= <expr><name><name>m_permissions</name><index>[<expr><name>permission</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>m_permissions</name><index>[<expr><name>permission</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_set_mask</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name><name>permissions_mask</name><index>[<expr><name>permission</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>old_value</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>MergePermission</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Permissions</name> <modifier>&amp;</modifier></type><name>incoming</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>PermissionKinds</name></name></type> <name>permission</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>IsSet</name></name><argument_list>(<argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetPermission</name><argument_list>(<argument><expr><name>permission</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name><name>m_permissions</name><index>[<expr><name>permission</name></expr>]</index></name> <operator>|</operator>
<name><name>incoming</name><operator>.</operator><name>m_permissions</name><index>[<expr><name>permission</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>BreakpointName</name><argument_list>(<argument>ConstString name</argument>, <argument>const char *help = nullptr</argument>)</argument_list></macro> :
<expr_stmt><expr><call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_options</name><argument_list>(<argument>false</argument>)</argument_list></macro>
<expr><block>{
<expr><call><name>SetHelp</name><argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>BreakpointName</name><argument_list>(<argument>ConstString name</argument>,
<argument>BreakpointOptions &amp;options</argument>,
<argument>const Permissions &amp;permissions = Permissions()</argument>,
<argument>const char *help = nullptr</argument>)</argument_list></macro> <operator>:</operator>
<call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_permissions</name><argument_list>(<argument>permissions</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>SetHelp</name><argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BreakpointName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointName</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>:</operator>
<call><name>m_name</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_name</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_options</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_options</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_permissions</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_permissions</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_help</name><argument_list>(<argument>rhs.m_help</argument>)</argument_list></macro>
<expr><block>{}</block>

<macro><name>BreakpointName</name><argument_list>(<argument>ConstString name</argument>, <argument>const Breakpoint &amp;bkpt</argument>,
<argument>const char *help</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>BreakpointOptions</name> <modifier>&amp;</modifier></type><name>GetOptions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_options</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>BreakpointOptions</name> <operator>&amp;</operator><macro><name>GetOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_options</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BreakpointOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_options</name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Permissions</name> <modifier>&amp;</modifier></type><name>GetPermissions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_permissions</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Permissions</name> <operator>&amp;</operator><macro><name>GetPermissions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_permissions</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>SetPermissions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Permissions</name> <modifier>&amp;</modifier></type><name>permissions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_permissions</name> <operator>=</operator> <name>permissions</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>GetPermission</name><argument_list>(<argument><expr><name>Permissions</name><operator>::</operator><name>PermissionKinds</name> <name>permission</name></expr></argument>)</argument_list> const
<block>{<block_content>
<return>return <expr><call><name><name>m_permissions</name><operator>.</operator><name>GetPermission</name></name><argument_list>(<argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetHelp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>description</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_help</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_help</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetHelp</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>m_help</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ConfigureBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <name>bp_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BreakpointOptions</name></type> <name>m_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Permissions</name></type> <name>m_permissions</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_help</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
