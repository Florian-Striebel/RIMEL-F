<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/MemoryRegionInfo.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_MEMORYREGIONINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_MEMORYREGIONINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FormatProviders.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryRegionInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>Range</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></type> <name>RangeType</name>;</typedef>

<enum>enum <name>OptionalBool</name> <block>{ <decl><name>eDontKnow</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>eNo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>eYes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<expr_stmt><expr><call><name>MemoryRegionInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>MemoryRegionInfo</name><argument_list>(<argument>RangeType range</argument>, <argument>OptionalBool read</argument>, <argument>OptionalBool write</argument>,
<argument>OptionalBool execute</argument>, <argument>OptionalBool mapped</argument>, <argument>ConstString name</argument>,
<argument>OptionalBool flash</argument>, <argument>lldb::offset_t blocksize</argument>,
<argument>OptionalBool memory_tagged</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_range</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_read</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_write</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_execute</name><argument_list>(<argument><expr><name>execute</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_mapped</name><argument_list>(<argument><expr><name>mapped</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_flash</name><argument_list>(<argument><expr><name>flash</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_blocksize</name><argument_list>(<argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_memory_tagged</name><argument_list>(<argument>memory_tagged</argument>)</argument_list></macro> <expr><block>{}</block>

<name>RangeType</name> <operator>&amp;</operator><macro><name>GetRange</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_range</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>MemoryRegionInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>RangeType</name> <operator>&amp;</operator><macro><name>GetRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_range</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>OptionalBool</name> <macro><name>GetReadable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_read</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>OptionalBool</name> <macro><name>GetWritable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_write</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>OptionalBool</name> <macro><name>GetExecutable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_execute</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>OptionalBool</name> <macro><name>GetMapped</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mapped</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>OptionalBool</name> <macro><name>GetMemoryTagged</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_memory_tagged</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetReadable</name><parameter_list>(<parameter><decl><type><name>OptionalBool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_read</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetWritable</name><parameter_list>(<parameter><decl><type><name>OptionalBool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_write</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetExecutable</name><parameter_list>(<parameter><decl><type><name>OptionalBool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_execute</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetMapped</name><parameter_list>(<parameter><decl><type><name>OptionalBool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_mapped</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_name</name> <operator>=</operator> <call><name>ConstString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>OptionalBool</name> <macro><name>GetFlash</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_flash</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetFlash</name><parameter_list>(<parameter><decl><type><name>OptionalBool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_flash</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <macro><name>GetBlocksize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_blocksize</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetBlocksize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>blocksize</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_blocksize</name> <operator>=</operator> <name>blocksize</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetMemoryTagged</name><parameter_list>(<parameter><decl><type><name>OptionalBool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_memory_tagged</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>



<expr_stmt><expr><name>uint32_t</name> <macro><name>GetLLDBPermissions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>uint32_t</name> <name>permissions</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><name>m_read</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permissions</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>ePermissionsReadable</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m_write</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permissions</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>ePermissionsWritable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m_execute</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permissions</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>ePermissionsExecutable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>permissions</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>SetLLDBPermissions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_read</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>permissions</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>ePermissionsReadable</name><operator>)</operator></expr> ?</condition><then> <expr><name>eYes</name></expr> </then><else>: <expr><name>eNo</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>m_write</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>permissions</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>ePermissionsWritable</name><operator>)</operator></expr> ?</condition><then> <expr><name>eYes</name></expr> </then><else>: <expr><name>eNo</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>m_execute</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>permissions</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>ePermissionsExecutable</name><operator>)</operator></expr> ?</condition><then> <expr><name>eYes</name></expr> </then><else>: <expr><name>eNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>MemoryRegionInfo</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>m_range</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_range</name></name> <operator>&amp;&amp;</operator> <name>m_read</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_read</name></name> <operator>&amp;&amp;</operator>
<name>m_write</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_write</name></name> <operator>&amp;&amp;</operator> <name>m_execute</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_execute</name></name> <operator>&amp;&amp;</operator>
<name>m_mapped</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_mapped</name></name> <operator>&amp;&amp;</operator> <name>m_name</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_name</name></name> <operator>&amp;&amp;</operator>
<name>m_flash</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_flash</name></name> <operator>&amp;&amp;</operator> <name>m_blocksize</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_blocksize</name></name> <operator>&amp;&amp;</operator>
<name>m_memory_tagged</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_memory_tagged</name></name> <operator>&amp;&amp;</operator>
<name>m_pagesize</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_pagesize</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>MemoryRegionInfo</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>




<function><type><name>int</name></type> <name>GetPageSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_pagesize</name></expr>;</return> </block_content>}</block></function>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetDirtyPageList</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_dirty_pages</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetPageSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pagesize</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_pagesize</name> <operator>=</operator> <name>pagesize</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>SetDirtyPageList</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>pagelist</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>m_dirty_pages</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_dirty_pages</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_dirty_pages</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>pagelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>RangeType</name></type> <name>m_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalBool</name></type> <name>m_read</name> <init>= <expr><name>eDontKnow</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalBool</name></type> <name>m_write</name> <init>= <expr><name>eDontKnow</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalBool</name></type> <name>m_execute</name> <init>= <expr><name>eDontKnow</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalBool</name></type> <name>m_mapped</name> <init>= <expr><name>eDontKnow</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalBool</name></type> <name>m_flash</name> <init>= <expr><name>eDontKnow</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>m_blocksize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>OptionalBool</name></type> <name>m_memory_tagged</name> <init>= <expr><name>eDontKnow</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_pagesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_dirty_pages</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>MemoryRegionInfo</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator>
<specifier>const</specifier> <name>MemoryRegionInfo</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>lhs</name><operator>.</operator><name>GetRange</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>rhs</name><operator>.</operator><name>GetRange</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>MemoryRegionInfo</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <name>lldb</name><operator>::</operator><name>addr_t</name> <name>rhs</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>lhs</name><operator>.</operator><name>GetRange</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetRangeBase</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>rhs</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>lldb</name><operator>::</operator><name>addr_t</name> <name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>MemoryRegionInfo</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<return>return <expr><name>lhs</name> <operator>&lt;</operator> <call><name><name>rhs</name><operator>.</operator><name>GetRange</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetRangeBase</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator>
<specifier>const</specifier> <name>MemoryRegionInfo</name> <operator>&amp;</operator><name>Info</name><operator>)</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>MemoryRegionInfos</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>MemoryRegionInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>

}</block></expr></range></decl>;</decl_stmt>

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>




struct <name><name>format_provider</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>MemoryRegionInfo</name><operator>::</operator><name>OptionalBool</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>format</name><argument_list>(<argument>const lldb_private::MemoryRegionInfo::OptionalBool &amp;B</argument>,
<argument>raw_ostream &amp;OS</argument>, <argument>StringRef Options</argument>)</argument_list></macro></expr>;
}</block></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
