<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/posix/HostInfoPosix.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_POSIX_HOSTINFOPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_POSIX_HOSTINFOPOSIX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/HostInfoBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>UserIDResolver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>HostInfoPosix</name> <range>: <expr><name>public</name> <name>HostInfoBase</name> <block>{
<expr><name>friend</name> <name>class</name> <name>HostInfoBase</name></expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>size_t</name> <call><name>GetPageSize</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>bool</name> <call><name>GetHostname</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>uint32_t</name> <call><name>GetUserID</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>uint32_t</name> <call><name>GetGroupID</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>uint32_t</name> <call><name>GetEffectiveUserID</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>uint32_t</name> <call><name>GetEffectiveGroupID</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>FileSpec</name> <call><name>GetDefaultShell</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>bool</name> <call><name>GetEnvironmentVar</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>var_name</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>UserIDResolver</name> <operator>&amp;</operator><call><name>GetUserIDResolver</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <call><name>ComputeSupportExeDirectory</name><argument_list>(<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>bool</name> <call><name>ComputeHeaderDirectory</name><argument_list>(<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
