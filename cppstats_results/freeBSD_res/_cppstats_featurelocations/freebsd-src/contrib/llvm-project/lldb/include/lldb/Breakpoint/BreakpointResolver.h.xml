<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointResolver.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTRESOLVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTRESOLVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/Breakpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SearchFilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RegularExpression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>














<decl_stmt><decl><type><name>class</name></type> <name>BreakpointResolver</name> <range>: <expr><name>public</name> <name>Searcher</name> <block>{
<expr><name>friend</name> <name>class</name> <name>Breakpoint</name></expr>;

<expr><name>public</name><operator>:</operator>








<macro><name>BreakpointResolver</name><argument_list>(<argument>const lldb::BreakpointSP &amp;bkpt</argument>,
<argument>unsigned char resolverType</argument>,
<argument>lldb::addr_t offset = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;



<expr><operator>~</operator><macro><name>BreakpointResolver</name><argument_list>()</argument_list></macro> <name>override</name></expr>;





<expr><name>void</name> <call><name>SetBreakpoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSP</name> <operator>&amp;</operator><name>bkpt</name></expr></argument>)</argument_list></call></expr>;


<expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>GetBreakpoint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>breakpoint_sp</name> <operator>=</operator> <call><name><name>m_breakpoint</name><operator>.</operator><name>expired</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>lldb</name><operator>::</operator><call><name>BreakpointSP</name><argument_list>()</argument_list></call> <operator>:</operator>
<call><name><name>m_breakpoint</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>breakpoint_sp</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>breakpoint_sp</name></expr>;</return>
}</block>







<name>void</name> <macro><name>SetOffset</name><argument_list>(<argument>lldb::addr_t offset</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_offset</name></expr>;</return> }</block>






<name>virtual</name> <name>void</name> <call><name>ResolveBreakpoint</name><argument_list>(<argument><expr><name>SearchFilter</name> <operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;






<expr><name>virtual</name> <name>void</name> <call><name>ResolveBreakpointInModules</name><argument_list>(<argument><expr><name>SearchFilter</name> <operator>&amp;</operator><name>filter</name></expr></argument>,
<argument><expr><name>ModuleList</name> <operator>&amp;</operator><name>modules</name></expr></argument>)</argument_list></call></expr>;





<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;




<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointResolverSP</name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>resolver_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetSerializationKey</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="string">"BKPTResolver"</literal></expr>;</return> }</block>

<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetSerializationSubclassKey</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="string">"Type"</literal></expr>;</return> }</block>

<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetSerializationSubclassOptionsKey</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="string">"Options"</literal></expr>;</return> }</block>

<name>StructuredData</name><operator>::</operator><name>DictionarySP</name>
<macro><name>WrapOptionsDict</name><argument_list>(<argument>StructuredData::DictionarySP options_dict_sp</argument>)</argument_list></macro></expr>;





enum <expr><name>ResolverTy</name> <block>{
<expr><name>FileLineResolver</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>AddressResolver</name></expr>,
<expr><name>NameResolver</name></expr>,
<expr><name>FileRegexResolver</name></expr>,
<expr><name>PythonResolver</name></expr>,
<expr><name>ExceptionResolver</name></expr>,
<expr><name>LastKnownResolverType</name> <operator>=</operator> <name>ExceptionResolver</name></expr>,
<expr><name>UnknownResolver</name></expr>
}</block></expr>;



<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name><name>g_ty_to_name</name><index>[<expr><name>LastKnownResolverType</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;




<expr><name>unsigned</name> <macro><name>getResolverID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SubclassID</name></expr>;</return> }</block>

enum <name>ResolverTy</name> <macro><name>GetResolverTy</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>SubclassID</name> <operator>&gt;</operator> <name>ResolverTy</name><operator>::</operator><name>LastKnownResolverType</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ResolverTy</name><operator>::</operator><name>UnknownResolver</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator>enum <name>ResolverTy</name><operator>)</operator><name>SubclassID</name></expr>;</return></block_content></block></else></if_stmt>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetResolverName</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>ResolverTyToName</name><argument_list>(<argument><expr><call><name>GetResolverTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>

<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>ResolverTyToName</name><argument_list>(<argument><expr>enum <name>ResolverTy</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>ResolverTy</name> <macro><name>NameToResolverTy</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>BreakpointResolverSP</name>
<call><name>CopyForBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <operator>&amp;</operator><name>breakpoint</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>



enum <name>class</name> <name>OptionNames</name> <operator>:</operator> <name>uint32_t</name> <block>{
<expr><name>AddressOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>ExactMatch</name></expr>,
<expr><name>FileName</name></expr>,
<expr><name>Inlines</name></expr>,
<expr><name>LanguageName</name></expr>,
<expr><name>LineNumber</name></expr>,
<expr><name>Column</name></expr>,
<expr><name>ModuleName</name></expr>,
<expr><name>NameMaskArray</name></expr>,
<expr><name>Offset</name></expr>,
<expr><name>PythonClassName</name></expr>,
<expr><name>RegexString</name></expr>,
<expr><name>ScriptArgs</name></expr>,
<expr><name>SectionName</name></expr>,
<expr><name>SearchDepth</name></expr>,
<expr><name>SkipPrologue</name></expr>,
<expr><name>SymbolNameArray</name></expr>,
<expr><name>LastOptionName</name></expr>
}</block></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
<operator>*</operator><name><name>g_option_names</name><index>[<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OptionNames</name><operator>::</operator><name>LastOptionName</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>NotifyBreakpointSet</name><argument_list>()</argument_list></macro> <block>{}</block></expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetKey</name><argument_list>(<argument>OptionNames enum_value</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>g_option_names</name><index>[<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>enum_value</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>







<name>void</name> <macro><name>SetSCMatchesByLine</name><argument_list>(<argument>SearchFilter &amp;filter</argument>, <argument>SymbolContextList &amp;sc_list</argument>,
<argument>bool skip_prologue</argument>, <argument>llvm::StringRef log_ident</argument>,
<argument>uint32_t line = <literal type="number">0</literal></argument>,
<argument>llvm::Optional&lt;uint16_t&gt; column = llvm::None</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <call><name>SetSCMatchesByLine</name><argument_list>(<argument><expr><name>SearchFilter</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>SymbolContextList</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>AddLocation</name><argument_list>(<argument>Address loc_addr</argument>,
<argument>bool *new_location = nullptr</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>

<name>void</name> <macro><name>AddLocation</name><argument_list>(<argument>SearchFilter &amp;filter</argument>, <argument>const SymbolContext &amp;sc</argument>,
<argument>bool skip_prologue</argument>, <argument>llvm::StringRef log_ident</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>BreakpointWP</name> <name>m_breakpoint</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_offset</name></expr>;



<expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>SubclassID</name></expr>;
<expr><call><name>BreakpointResolver</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointResolver</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>BreakpointResolver</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>BreakpointResolver</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
