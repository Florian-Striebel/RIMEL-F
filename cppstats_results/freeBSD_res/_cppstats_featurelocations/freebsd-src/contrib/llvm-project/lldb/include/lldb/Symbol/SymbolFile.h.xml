<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/SymbolFile.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_SYMBOLFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_SYMBOLFILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SourceLocationSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerDecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerDeclContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SourceModule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TypeList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TypeSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/XcodeSDK.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Errc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CONFIGURATION_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_MODULE_LOCK</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(expr-&gt;AssertModuleLock())</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_MODULE_LOCK</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolFile</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>public</name><operator>:</operator>


<name>virtual</name> <name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> }</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const SymbolFile *obj</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>obj</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>








enum <name>Abilities</name> <block>{
<expr><name>CompileUnits</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>LineTables</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>Functions</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>Blocks</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,
<expr><name>GlobalVariables</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>,
<expr><name>LocalVariables</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>,
<expr><name>VariableTypes</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>,
<expr><name>kAllAbilities</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">1u</literal><operator>)</operator></expr>
}</block></expr>;

<expr><specifier>static</specifier> <name>SymbolFile</name> <operator>*</operator><macro><name>FindPlugin</name><argument_list>(<argument>lldb::ObjectFileSP objfile_sp</argument>)</argument_list></macro></expr>;


<macro><name>SymbolFile</name><argument_list>(<argument>lldb::ObjectFileSP objfile_sp</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>m_objfile_sp</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>objfile_sp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_abilities</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>m_calculated_abilities</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>SymbolFile</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;




























<expr><name>uint32_t</name> <macro><name>GetAbilities</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_calculated_abilities</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_abilities</name> <operator>=</operator> <call><name>CalculateAbilities</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_calculated_abilities</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

return m_abilities</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>virtual</name> <name>uint32_t</name> <call><name>CalculateAbilities</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>GetModuleMutex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;








<expr><name>virtual</name> <name>void</name> <macro><name>InitializeObject</name><argument_list>()</argument_list></macro> <block>{}</block>



<name>uint32_t</name> <call><name>GetNumCompileUnits</name><argument_list>()</argument_list></call></expr>;
<expr><name>lldb</name><operator>::</operator><name>CompUnitSP</name> <macro><name>GetCompileUnitAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;

<expr><name>Symtab</name> <operator>*</operator><call><name>GetSymtab</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>ParseLanguage</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>&amp;</operator><name>comp_unit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>XcodeSDK</name> <macro><name>ParseXcodeSDK</name><argument_list>(<argument>CompileUnit &amp;comp_unit</argument>)</argument_list></macro> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block>
<name>virtual</name> <name>size_t</name> <call><name>ParseFunctions</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>&amp;</operator><name>comp_unit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>bool</name> <call><name>ParseLineTable</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>&amp;</operator><name>comp_unit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>bool</name> <call><name>ParseDebugMacros</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>&amp;</operator><name>comp_unit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



























<expr><name>virtual</name> <name>bool</name> <macro><name>ForEachExternalModule</name><argument_list>(
<argument>lldb_private::CompileUnit &amp;comp_unit</argument>,
<argument>llvm::DenseSet&lt;lldb_private::SymbolFile *&gt; &amp;visited_symbol_files</argument>,
<argument>llvm::function_ref&lt;bool(Module &amp;)&gt; lambda</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>
<name>virtual</name> <name>bool</name> <call><name>ParseSupportFiles</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>&amp;</operator><name>comp_unit</name></expr></argument>,
<argument><expr><name>FileSpecList</name> <operator>&amp;</operator><name>support_files</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>size_t</name> <call><name>ParseTypes</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>&amp;</operator><name>comp_unit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>ParseIsOptimized</name><argument_list>(<argument>CompileUnit &amp;comp_unit</argument>)</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>virtual</name> <name>bool</name>
<call><name>ParseImportedModules</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SourceModule</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>imported_modules</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>size_t</name> <call><name>ParseBlocksRecursive</name><argument_list>(<argument><expr><name>Function</name> <operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>size_t</name> <call><name>ParseVariablesForContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>Type</name> <operator>*</operator><macro><name>ResolveTypeUID</name><argument_list>(<argument>lldb::user_id_t type_uid</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;



struct <expr><name>ArrayInfo</name> <block>{
<expr><name>int64_t</name> <name>first_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>element_orders</name></expr>;
<expr><name>uint32_t</name> <name>byte_stride</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint32_t</name> <name>bit_stride</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;




<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ArrayInfo</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetDynamicArrayInfoForUID</name><argument_list>(<argument>lldb::user_id_t type_uid</argument>,
<argument>const lldb_private::ExecutionContext *exe_ctx</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>CompleteType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>&amp;</operator><name>compiler_type</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>ParseDeclsForContext</name><argument_list>(<argument>CompilerDeclContext decl_ctx</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>CompilerDecl</name> <macro><name>GetDeclForUID</name><argument_list>(<argument>lldb::user_id_t uid</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CompilerDecl</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>CompilerDeclContext</name> <macro><name>GetDeclContextForUID</name><argument_list>(<argument>lldb::user_id_t uid</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CompilerDeclContext</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>CompilerDeclContext</name> <macro><name>GetDeclContextContainingUID</name><argument_list>(<argument>lldb::user_id_t uid</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CompilerDeclContext</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>uint32_t</name> <macro><name>ResolveSymbolContext</name><argument_list>(<argument>const Address &amp;so_addr</argument>,
<argument>lldb::SymbolContextItem resolve_scope</argument>,
<argument>SymbolContext &amp;sc</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>uint32_t</name>
<macro><name>ResolveSymbolContext</name><argument_list>(<argument>const SourceLocationSpec &amp;src_location_spec</argument>,
<argument>lldb::SymbolContextItem resolve_scope</argument>,
<argument>SymbolContextList &amp;sc_list</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>DumpClangAST</name><argument_list>(<argument>Stream &amp;s</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>void</name> <macro><name>FindGlobalVariables</name><argument_list>(<argument>ConstString name</argument>,
<argument>const CompilerDeclContext &amp;parent_decl_ctx</argument>,
<argument>uint32_t max_matches</argument>,
<argument>VariableList &amp;variables</argument>)</argument_list></macro></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>FindGlobalVariables</name><argument_list>(<argument>const RegularExpression &amp;regex</argument>,
<argument>uint32_t max_matches</argument>,
<argument>VariableList &amp;variables</argument>)</argument_list></macro></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>FindFunctions</name><argument_list>(<argument>ConstString name</argument>,
<argument>const CompilerDeclContext &amp;parent_decl_ctx</argument>,
<argument>lldb::FunctionNameType name_type_mask</argument>,
<argument>bool include_inlines</argument>, <argument>SymbolContextList &amp;sc_list</argument>)</argument_list></macro></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>FindFunctions</name><argument_list>(<argument>const RegularExpression &amp;regex</argument>,
<argument>bool include_inlines</argument>, <argument>SymbolContextList &amp;sc_list</argument>)</argument_list></macro></expr>;
<expr><name>virtual</name> <name>void</name>
<macro><name>FindTypes</name><argument_list>(<argument>ConstString name</argument>, <argument>const CompilerDeclContext &amp;parent_decl_ctx</argument>,
<argument>uint32_t max_matches</argument>,
<argument>llvm::DenseSet&lt;lldb_private::SymbolFile *&gt; &amp;searched_symbol_files</argument>,
<argument>TypeMap &amp;types</argument>)</argument_list></macro></expr>;






<expr><name>virtual</name> <name>void</name>
<macro><name>FindTypes</name><argument_list>(<argument>llvm::ArrayRef&lt;CompilerContext&gt; pattern</argument>, <argument>LanguageSet languages</argument>,
<argument>llvm::DenseSet&lt;lldb_private::SymbolFile *&gt; &amp;searched_symbol_files</argument>,
<argument>TypeMap &amp;types</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>void</name>
<call><name>GetMangledNamesForFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>scope_qualified_name</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>mangled_names</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>GetTypes</name><argument_list>(<argument>lldb_private::SymbolContextScope *sc_scope</argument>,
<argument>lldb::TypeClass type_mask</argument>,
<argument>lldb_private::TypeList &amp;type_list</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>PreloadSymbols</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>TypeSystem</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<macro><name>GetTypeSystemForLanguage</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>CompilerDeclContext</name>
<macro><name>FindNamespace</name><argument_list>(<argument>ConstString name</argument>, <argument>const CompilerDeclContext &amp;parent_decl_ctx</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CompilerDeclContext</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>ObjectFile</name> <operator>*</operator><macro><name>GetObjectFile</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_objfile_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>ObjectFile</name> <operator>*</operator><macro><name>GetObjectFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_objfile_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>ObjectFile</name> <operator>*</operator><call><name>GetMainObjectFile</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallEdge</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>ParseCallEdgesInFunction</name><argument_list>(<argument>UserID func_id</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <macro><name>AddSymbols</name><argument_list>(<argument>Symtab &amp;symtab</argument>)</argument_list></macro> <block>{}</block>



<name>virtual</name> <name>void</name> <call><name>SectionFileAddressesChanged</name><argument_list>()</argument_list></call></expr>;

struct <expr><name>RegisterInfoResolver</name> <block>{
<expr><name>virtual</name> <operator>~</operator><call><name>RegisterInfoResolver</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><macro><name>ResolveName</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><macro><name>ResolveNumber</name><argument_list>(<argument>lldb::RegisterKind kind</argument>,
<argument>uint32_t number</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;
<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>UnwindPlanSP</name>
<macro><name>GetUnwindPlan</name><argument_list>(<argument>const Address &amp;address</argument>, <argument>const RegisterInfoResolver &amp;resolver</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>



<name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetParameterStackSize</name><argument_list>(<argument>Symbol &amp;symbol</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(<argument><expr><call><name>make_error_code</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>errc</name><operator>::</operator><name>not_supported</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Operation not supported."</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <call><name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <call><name>AssertModuleLock</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>uint32_t</name> <call><name>CalculateNumCompileUnits</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>CompUnitSP</name> <macro><name>ParseCompileUnitAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>TypeList</name> <operator>&amp;</operator><macro><name>GetTypeList</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_type_list</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetCompileUnitAtIndex</name><argument_list>(<argument>uint32_t idx</argument>, <argument>const lldb::CompUnitSP &amp;cu_sp</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ObjectFileSP</name> <name>m_objfile_sp</name></expr>;



<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>CompUnitSP</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_compile_units</name></expr>;
<expr><name>TypeList</name> <name>m_type_list</name></expr>;
<expr><name>Symtab</name> <operator>*</operator><name>m_symtab</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>uint32_t</name> <name>m_abilities</name></expr>;
<expr><name>bool</name> <name>m_calculated_abilities</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>SymbolFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymbolFile</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>SymbolFile</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>SymbolFile</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
