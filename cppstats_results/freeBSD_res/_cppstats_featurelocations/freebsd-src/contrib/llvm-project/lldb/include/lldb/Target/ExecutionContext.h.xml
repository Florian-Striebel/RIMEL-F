<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ExecutionContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_EXECUTIONCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_EXECUTIONCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StackID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>






















































<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContextRef</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>ExecutionContextRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ExecutionContextRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContextRef</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>ExecutionContextRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>ExecutionContextRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<macro><name>ExecutionContextRef</name><argument_list>(<argument>Target *target</argument>, <argument>bool adopt_selected</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>











<expr_stmt><expr><call><name>ExecutionContextRef</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>ExecutionContextRef</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>&amp;</operator><name>exe_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ExecutionContextRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>ExecutionContextRef</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ExecutionContextRef</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ExecutionContextRef</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name><operator>)</operator></expr></init></decl>;</decl_stmt>





<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>














<decl_stmt><decl><type><name>void</name></type> <name>SetTargetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<decl_stmt><decl><type><name>void</name></type> <name>SetProcessSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<decl_stmt><decl><type><name>void</name></type> <name>SetThreadSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>thread_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<decl_stmt><decl><type><name>void</name></type> <name>SetFrameSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetTargetPtr</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>adopt_selected</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetProcessPtr</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetThreadPtr</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetFramePtr</name><parameter_list>(<parameter><decl><type><name>StackFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>GetTargetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcessSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetThreadSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetFrameSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<decl_stmt><decl><type><name>ExecutionContext</name></type> <name>Lock</name><argument_list>(<argument><expr><name>bool</name> <name>thread_and_frame_only_if_stopped</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>HasThreadRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_tid</name> <operator>!=</operator> <name>LLDB_INVALID_THREAD_ID</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>HasFrameRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_stack_id</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>ClearThread</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_thread_wp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_tid</name> <operator>=</operator> <name>LLDB_INVALID_THREAD_ID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ClearFrame</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_stack_id</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetWP</name> <name>m_target_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>lldb</name><operator>::</operator><name>ThreadWP</name> <name>m_thread_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>m_tid</name> <operator>=</operator> <name>LLDB_INVALID_THREAD_ID</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>StackID</name></type> <name>m_stack_id</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




















<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContext</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>ExecutionContext</name><argument_list>(<argument>Target *t</argument>, <argument>bool fill_current_process_thread_frame = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>ExecutionContext</name><argument_list>(<argument>const lldb::TargetSP &amp;target_sp</argument>, <argument>bool get_process</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>thread_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>ExecutionContext</name><argument_list>(<argument>const lldb::TargetWP &amp;target_wp</argument>, <argument>bool get_process</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessWP</name> <operator>&amp;</operator><name>process_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadWP</name> <operator>&amp;</operator><name>thread_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameWP</name> <operator>&amp;</operator><name>frame_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContextRef</name> <operator>&amp;</operator><name>exe_ctx_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ExecutionContext</name><argument_list>(<argument>const ExecutionContextRef *exe_ctx_ref</argument>,
<argument>bool thread_and_frame_only_if_stopped = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContextRef</name> <operator>&amp;</operator><name>exe_ctx_ref</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>locker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContextRef</name> <operator>*</operator><name>exe_ctx_ref</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>locker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>&amp;</operator><name>exe_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<expr_stmt><expr><call><name>ExecutionContext</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>, <argument><expr><name>Thread</name> <operator>*</operator><name>thread</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>StackFrame</name> <operator>*</operator><name>frame</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ExecutionContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ExecutionContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ExecutionContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ExecutionContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>RegisterContext</name> <operator>*</operator><macro><name>GetRegisterContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ExecutionContextScope</name> <operator>*</operator><macro><name>GetBestExecutionContextScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetAddressByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>












<expr_stmt><expr><name>Target</name> <operator>*</operator><macro><name>GetTargetPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<expr_stmt><expr><name>Process</name> <operator>*</operator><macro><name>GetProcessPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<expr_stmt><expr><name>Thread</name> <operator>*</operator><macro><name>GetThreadPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_thread_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>








<expr_stmt><expr><name>StackFrame</name> <operator>*</operator><macro><name>GetFramePtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_frame_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>











<expr_stmt><expr><name>Target</name> <operator>&amp;</operator><macro><name>GetTargetRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<expr_stmt><expr><name>Process</name> <operator>&amp;</operator><macro><name>GetProcessRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>Thread</name> <operator>&amp;</operator><macro><name>GetThreadRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>StackFrame</name> <operator>&amp;</operator><macro><name>GetFrameRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><macro><name>GetTargetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_target_sp</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><macro><name>GetProcessSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_process_sp</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><macro><name>GetThreadSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_thread_sp</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><macro><name>GetFrameSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_frame_sp</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetTargetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetProcessSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetThreadSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>thread_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetFrameSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>SetTargetPtr</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>SetProcessPtr</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>SetThreadPtr</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>SetFramePtr</name><parameter_list>(<parameter><decl><type><name>StackFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>void</name></type> <name>SetContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>get_process</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>SetContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>SetContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>thread_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>SetContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>HasTargetScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<expr_stmt><expr><name>bool</name> <macro><name>HasProcessScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<expr_stmt><expr><name>bool</name> <macro><name>HasThreadScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<expr_stmt><expr><name>bool</name> <macro><name>HasFrameScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>m_target_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <name>m_process_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <name>m_thread_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <name>m_frame_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
