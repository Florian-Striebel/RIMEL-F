<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointSite.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTSITE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTSITE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointLocationCollection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/StoppointSite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/LLDBAssert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>












<decl_stmt><decl><type><name>class</name></type> <name>BreakpointSite</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointSite</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>StoppointSite</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Type</name> <block>{
<decl><name>eSoftware</name></decl>,


<decl><name>eHardware</name></decl>,
<decl><name>eExternal</name></decl>


}</block>;</enum>

<expr_stmt><expr><operator>~</operator><macro><name>BreakpointSite</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>




<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>GetTrapOpcodeBytes</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><macro><name>GetTrapOpcodeBytes</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>GetTrapOpcodeMaxByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>SetTrapOpcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>trap_opcode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>trap_opcode_size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>GetSavedOpcodeBytes</name><parameter_list>()</parameter_list>;</function_decl>



<expr_stmt><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><macro><name>GetSavedOpcodeBytes</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IntersectsRange</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>*</operator><name>intersect_addr</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>intersect_size</name></expr></argument>,
<argument><expr><name>size_t</name> <operator>*</operator><name>opcode_offset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<expr_stmt><expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>SetEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>









<decl_stmt><decl><type><name>bool</name></type> <name>ShouldStop</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>AddOwner</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <operator>&amp;</operator><name>owner</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function_decl><type><name>size_t</name></type> <name>GetNumberOfOwners</name><parameter_list>()</parameter_list>;</function_decl>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>GetOwnerAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>










<function_decl><type><name>size_t</name></type> <name>CopyOwnersList</name><parameter_list>(<parameter><decl><type><name>BreakpointLocationCollection</name> <modifier>&amp;</modifier></type><name>out_collection</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>bool</name></type> <name>ValidForThisThread</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>














<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>IsBreakpointAtThisSite</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>bp_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<expr_stmt><expr><name>bool</name> <macro><name>IsInternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsHardware</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>lldbassert</name><argument_list>(<argument><expr><name>BreakpointSite</name><operator>::</operator><name>Type</name><operator>::</operator><name>eHardware</name> <operator>==</operator> <call><name>GetType</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>HardwareRequired</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>BreakpointSite</name><operator>::</operator><name>Type</name><operator>::</operator><name>eHardware</name> <operator>==</operator> <call><name>GetType</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>BreakpointSite</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetType</name><argument_list>(<argument><expr><name>BreakpointSite</name><operator>::</operator><name>Type</name> <name>type</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>BreakpointLocation</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>StopInfoBreakpoint</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>BumpHitCounts</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>size_t</name></type> <name>RemoveOwner</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_id</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_loc_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>BreakpointSite</name><operator>::</operator><name>Type</name> <name>m_type</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>m_saved_opcode</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>m_trap_opcode</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>m_enabled</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BreakpointLocationCollection</name></type> <name>m_owners</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name>
<name>m_owners_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>break_id_t</name> <call><name>GetNextID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<macro><name>BreakpointSite</name><argument_list>(<argument>BreakpointSiteList *list</argument>,
<argument>const lldb::BreakpointLocationSP &amp;owner</argument>, <argument>lldb::addr_t m_addr</argument>,
<argument>bool use_hardware</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BreakpointSite</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointSite</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BreakpointSite</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>BreakpointSite</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
