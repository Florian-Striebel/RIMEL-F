<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Architecture.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_ARCHITECTURE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_ARCHITECTURE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/MemoryTagManager.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Architecture</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{
<expr><name>public</name><operator>:</operator>










<name>virtual</name> <name>void</name> <macro><name>OverrideStopInfo</name><argument_list>(<argument>Thread &amp;thread</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
















<expr><name>virtual</name> <name>size_t</name> <macro><name>GetBytesToSkip</name><argument_list>(<argument>Symbol &amp;func</argument>, <argument>const Address &amp;curr_addr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block>









<name>virtual</name> <name>void</name> <macro><name>AdjustBreakpointAddress</name><argument_list>(<argument>const Symbol &amp;func</argument>,
<argument>Address &amp;addr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{}</block>











<name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetCallableLoadAddress</name><argument_list>(
<argument>lldb::addr_t addr</argument>, <argument>AddressClass addr_class = AddressClass::eInvalid</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>addr</name></expr>;</return>
}</block>












<name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetOpcodeLoadAddress</name><argument_list>(
<argument>lldb::addr_t addr</argument>, <argument>AddressClass addr_class = AddressClass::eInvalid</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>addr</name></expr>;</return>
}</block>






<name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetBreakableLoadAddress</name><argument_list>(<argument>lldb::addr_t addr</argument>,
<argument>Target &amp;target</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>addr</name></expr>;</return>
}</block>








<name>virtual</name> <specifier>const</specifier> <name>MemoryTagManager</name> <operator>*</operator><macro><name>GetMemoryTagManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
