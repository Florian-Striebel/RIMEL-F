<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/ScriptedProcessInterface.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_SCRIPTEDPROCESSINTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_SCRIPTEDPROCESSINTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/StructuredDataImpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/ScriptInterpreter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ScriptedProcessInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ScriptedProcessInterface</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_object_instance_sp</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>ScriptedProcessInterface</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>GenericSP</name>
<macro><name>CreatePluginObject</name><argument_list>(<argument>const llvm::StringRef class_name</argument>, <argument>lldb::TargetSP target_sp</argument>,
<argument>StructuredData::DictionarySP args_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>Status</name></type> <name>Launch</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><literal type="string">"ScriptedProcess did not launch"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>Status</name></type> <name>Resume</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><literal type="string">"ScriptedProcess did not resume"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>ShouldStop</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>Status</name></type> <name>Stop</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><literal type="string">"ScriptedProcess did not stop"</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>MemoryRegionInfoSP</name>
<macro><name>GetMemoryRegionContainingAddress</name><argument_list>(<argument>lldb::addr_t address</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>DictionarySP</name> <macro><name>GetThreadWithID</name><argument_list>(<argument>lldb::tid_t tid</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>DictionarySP</name> <macro><name>GetRegistersForThread</name><argument_list>(<argument>lldb::tid_t tid</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>DataExtractorSP</name>
<macro><name>ReadMemoryAtAddress</name><argument_list>(<argument>lldb::addr_t address</argument>, <argument>size_t size</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>DictionarySP</name> <macro><name>GetLoadedImages</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>pid_t</name> <macro><name>GetProcessID</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>LLDB_INVALID_PROCESS_ID</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>bool</name></type> <name>IsAlive</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>m_object_instance_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
