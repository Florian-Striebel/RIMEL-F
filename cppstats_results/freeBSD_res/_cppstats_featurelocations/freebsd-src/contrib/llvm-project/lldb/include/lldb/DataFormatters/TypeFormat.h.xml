<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/TypeFormat.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_TYPEFORMAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_TYPEFORMAT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>TypeFormatImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Flags</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Flags</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>Flags</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_flags</name><argument_list>(<argument>other.m_flags</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Flags</name><argument_list>(<argument>uint32_t value</argument>)</argument_list></macro> <operator>:</operator> <macro><name>m_flags</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>

<name>Flags</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>rhs</name> <operator>!=</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_flags</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>Flags</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<expr><name>m_flags</name> <operator>=</operator> <name>rhs</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetCascades</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name><operator>)</operator> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetCascades</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetSkipPointers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetSkipPointers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetSkipReferences</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetSkipReferences</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetNonCacheable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetNonCacheable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetValue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_flags</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetValue</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_flags</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_flags</name> <init>= <expr><name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>TypeFormatImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>flags</name> <operator>=</operator> <call><name>Flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeFormatImpl</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TypeFormatImpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>Cascades</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetCascades</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>SkipsPointers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetSkipPointers</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>SkipsReferences</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetSkipReferences</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>NonCacheable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetNonCacheable</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetCascades</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetCascades</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetSkipsPointers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetSkipPointers</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetSkipsReferences</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetSkipReferences</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetNonCacheable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetNonCacheable</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetOptions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetValue</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetOptions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>GetRevision</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_my_revision</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Type</name> <block>{<block_content> <expr_stmt><expr><name>eTypeUnknown</name></expr><operator>,</operator> <expr><name>eTypeFormat</name></expr><operator>,</operator> <expr><name>eTypeEnum</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>virtual</name> <name>Type</name></type> <name>GetType</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Type</name><operator>::</operator><name>eTypeUnknown</name></expr>;</return> </block_content>}</block></function>





<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>FormatObject</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetDescription</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_my_revision</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>TypeFormatImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeFormatImpl</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeFormatImpl</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeFormatImpl</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeFormatImpl_Format</name> <range>: <expr><name>public</name> <name>TypeFormatImpl</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>TypeFormatImpl_Format</name><argument_list>(<argument>lldb::Format f = lldb::eFormatInvalid</argument>,
<argument>const TypeFormatImpl::Flags &amp;flags = Flags()</argument>)</argument_list></macro></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeFormatImpl_Format</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<operator>~</operator><macro><name>TypeFormatImpl_Format</name><argument_list>()</argument_list></macro> <name>override</name></block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <macro><name>GetFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_format</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetFormat</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>fmt</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_format</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>TypeFormatImpl</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>TypeFormatImpl</name><operator>::</operator><name>Type</name><operator>::</operator><name>eTypeFormat</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FormatObject</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>m_format</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>TypeFormatImpl_Format</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeFormatImpl_Format</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeFormatImpl_Format</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeFormatImpl_Format</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>TypeFormatImpl_EnumType</name> <range>: <expr><name>public</name> <name>TypeFormatImpl</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>TypeFormatImpl_EnumType</name><argument_list>(<argument>ConstString type_name = ConstString(<literal type="string">""</literal>)</argument>,
<argument>const TypeFormatImpl::Flags &amp;flags = Flags()</argument>)</argument_list></macro></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeFormatImpl_EnumType</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<operator>~</operator><macro><name>TypeFormatImpl_EnumType</name><argument_list>()</argument_list></macro> <name>override</name></block></expr></range></decl>;</decl_stmt>

<function><type><name>ConstString</name></type> <name>GetTypeName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_enum_type</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetTypeName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>enum_type</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_enum_type</name> <operator>=</operator> <name>enum_type</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>TypeFormatImpl</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>TypeFormatImpl</name><operator>::</operator><name>Type</name><operator>::</operator><name>eTypeEnum</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FormatObject</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_enum_type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>CompilerType</name></expr></argument>&gt;</argument_list></name> <name>m_types</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>TypeFormatImpl_EnumType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeFormatImpl_EnumType</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeFormatImpl_EnumType</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeFormatImpl_EnumType</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
