<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/TypeCategory.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_TYPECATEGORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_TYPECATEGORY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatClasses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormattersContainer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FormatterImpl</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>FormatterContainerPair</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>FormatterImpl</name></expr></argument>&gt;</argument_list></name></type> <name>ExactMatchContainer</name>;</typedef>
<typedef>typedef <type><name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>FormatterImpl</name></expr></argument>&gt;</argument_list></name></type> <name>RegexMatchContainer</name>;</typedef>

<typedef>typedef <type><name>TypeMatcher</name></type> <name>ExactMatchMap</name>;</typedef>
<typedef>typedef <type><name>TypeMatcher</name></type> <name>RegexMatchMap</name>;</typedef>

<typedef>typedef <expr_stmt><expr><name>typename</name> <name>ExactMatchContainer</name><operator>::</operator><name>ValueSP</name> <name>MapValueType</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>typename</name> <name>ExactMatchContainer</name><operator>::</operator><name>SharedPointer</name> <name>ExactMatchContainerSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>RegexMatchContainer</name><operator>::</operator><name>SharedPointer</name> <name>RegexMatchContainerSP</name></expr>;</expr_stmt></typedef>

<typedef>typedef
<expr_stmt><expr><name>typename</name> <name>ExactMatchContainer</name><operator>::</operator><name>ForEachCallback</name> <name>ExactMatchForEachCallback</name></expr>;</expr_stmt></typedef>
<typedef>typedef
<expr_stmt><expr><name>typename</name> <name>RegexMatchContainer</name><operator>::</operator><name>ForEachCallback</name> <name>RegexMatchForEachCallback</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><call><name>FormatterContainerPair</name><argument_list>(<argument><expr><name>IFormatChangeListener</name> <operator>*</operator><name>clist</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>m_exact_sp</name><argument_list>(<argument>new ExactMatchContainer(clist)</argument>)</argument_list></macro></expr><operator>,</operator>
<macro><name>m_regex_sp</name><argument_list>(<argument>new RegexMatchContainer(clist)</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><call><name>FormatterContainerPair</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>ExactMatchContainerSP</name> <macro><name>GetExactMatch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_exact_sp</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>RegexMatchContainerSP</name> <macro><name>GetRegexMatch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_regex_sp</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>uint32_t</name></type> <name>GetCount</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetExactMatch</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCount</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>GetRegexMatch</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCount</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ExactMatchContainerSP</name></type> <name>m_exact_sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RegexMatchContainerSP</name></type> <name>m_regex_sp</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeCategoryImpl</name> <block>{<block_content>
<label><name>private</name>:</label>
<typedef>typedef <type><name><name>FormatterContainerPair</name><argument_list type="generic">&lt;<argument><expr><name>TypeFormatImpl</name></expr></argument>&gt;</argument_list></name></type> <name>FormatContainer</name>;</typedef>
<typedef>typedef <type><name><name>FormatterContainerPair</name><argument_list type="generic">&lt;<argument><expr><name>TypeSummaryImpl</name></expr></argument>&gt;</argument_list></name></type> <name>SummaryContainer</name>;</typedef>
<typedef>typedef <type><name><name>FormatterContainerPair</name><argument_list type="generic">&lt;<argument><expr><name>TypeFilterImpl</name></expr></argument>&gt;</argument_list></name></type> <name>FilterContainer</name>;</typedef>
<typedef>typedef <type><name><name>FormatterContainerPair</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildren</name></expr></argument>&gt;</argument_list></name></type> <name>SynthContainer</name>;</typedef>

<label><name>public</name>:</label>
<typedef>typedef <type><name>uint16_t</name></type> <name>FormatCategoryItems</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name>ALL_ITEM_TYPES</name> <init>= <expr><name>UINT16_MAX</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>ExactMatchContainerSP</name> <name>FormatContainerSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>RegexMatchContainerSP</name> <name>RegexFormatContainerSP</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>ExactMatchContainerSP</name> <name>SummaryContainerSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>RegexMatchContainerSP</name> <name>RegexSummaryContainerSP</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>ExactMatchContainerSP</name> <name>FilterContainerSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>RegexMatchContainerSP</name> <name>RegexFilterContainerSP</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>ExactMatchContainerSP</name> <name>SynthContainerSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>RegexMatchContainerSP</name> <name>RegexSynthContainerSP</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>ForEachCallbacks</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ForEachCallbacks</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ForEachCallbacks</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>TypeFormatImpl</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetExact</name><argument_list>(<argument>FormatContainer::ExactMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_format_exact</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>TypeFormatImpl</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetWithRegex</name><argument_list>(<argument>FormatContainer::RegexMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_format_regex</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>TypeSummaryImpl</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetExact</name><argument_list>(<argument>SummaryContainer::ExactMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_summary_exact</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>TypeSummaryImpl</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetWithRegex</name><argument_list>(<argument>SummaryContainer::RegexMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_summary_regex</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>TypeFilterImpl</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetExact</name><argument_list>(<argument>FilterContainer::ExactMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_filter_exact</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>TypeFilterImpl</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetWithRegex</name><argument_list>(<argument>FilterContainer::RegexMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_filter_regex</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>SyntheticChildren</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetExact</name><argument_list>(<argument>SynthContainer::ExactMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_synth_exact</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name> <operator>=</operator> <name>SyntheticChildren</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>ForEachCallbacks</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>SetWithRegex</name><argument_list>(<argument>SynthContainer::RegexMatchForEachCallback callback</argument>)</argument_list></macro> <block>{
<expr><name>m_synth_regex</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name> <macro><name>GetFormatExactCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_format_exact</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name> <macro><name>GetFormatRegexCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_format_regex</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name>
<macro><name>GetSummaryExactCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_summary_exact</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name>
<macro><name>GetSummaryRegexCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_summary_regex</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name> <macro><name>GetFilterExactCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_filter_exact</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name> <macro><name>GetFilterRegexCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_filter_regex</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name> <macro><name>GetSynthExactCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_synth_exact</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name> <macro><name>GetSynthRegexCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_synth_regex</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name> <name>m_format_exact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name> <name>m_format_regex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name> <name>m_summary_exact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name> <name>m_summary_regex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name> <name>m_filter_exact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name> <name>m_filter_regex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>ExactMatchForEachCallback</name> <name>m_synth_exact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>RegexMatchForEachCallback</name> <name>m_synth_regex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>TypeCategoryImpl</name><argument_list>(<argument>IFormatChangeListener *clist</argument>, <argument>ConstString name</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>ForEach</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>ForEachCallbacks</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>foreach</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>GetTypeFormatsContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetFormatExactCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetRegexTypeFormatsContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetFormatRegexCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTypeSummariesContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetSummaryExactCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetRegexTypeSummariesContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(
<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetSummaryRegexCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTypeFiltersContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetFilterExactCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetRegexTypeFiltersContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetFilterRegexCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTypeSyntheticsContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetSynthExactCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetRegexTypeSyntheticsContainer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ForEach</name><argument_list>(<argument><expr><call><name><name>foreach</name><operator>.</operator><name>GetSynthRegexCallback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FormatContainerSP</name></type> <name>GetTypeFormatsContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_format_cont</name><operator>.</operator><name>GetExactMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>RegexFormatContainerSP</name></type> <name>GetRegexTypeFormatsContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_format_cont</name><operator>.</operator><name>GetRegexMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FormatContainer</name> <modifier>&amp;</modifier></type><name>GetFormatContainer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_format_cont</name></expr>;</return> </block_content>}</block></function>

<function><type><name>SummaryContainerSP</name></type> <name>GetTypeSummariesContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_summary_cont</name><operator>.</operator><name>GetExactMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>RegexSummaryContainerSP</name></type> <name>GetRegexTypeSummariesContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_summary_cont</name><operator>.</operator><name>GetRegexMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SummaryContainer</name> <modifier>&amp;</modifier></type><name>GetSummaryContainer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_summary_cont</name></expr>;</return> </block_content>}</block></function>

<function><type><name>FilterContainerSP</name></type> <name>GetTypeFiltersContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_filter_cont</name><operator>.</operator><name>GetExactMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>RegexFilterContainerSP</name></type> <name>GetRegexTypeFiltersContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_filter_cont</name><operator>.</operator><name>GetRegexMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FilterContainer</name> <modifier>&amp;</modifier></type><name>GetFilterContainer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_filter_cont</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>MapValueType</name>
<macro><name>GetFormatForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>MapValueType</name>
<macro><name>GetSummaryForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>MapValueType</name>
<macro><name>GetFilterForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>MapValueType</name>
<macro><name>GetSyntheticForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeNameSpecifierImplSP</name>
<macro><name>GetTypeNameSpecifierForFormatAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeNameSpecifierImplSP</name>
<macro><name>GetTypeNameSpecifierForSummaryAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>FormatContainer</name><operator>::</operator><name>MapValueType</name> <macro><name>GetFormatAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>SummaryContainer</name><operator>::</operator><name>MapValueType</name> <macro><name>GetSummaryAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>FilterContainer</name><operator>::</operator><name>MapValueType</name> <macro><name>GetFilterAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeNameSpecifierImplSP</name>
<macro><name>GetTypeNameSpecifierForFilterAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<function><type><name>SynthContainerSP</name></type> <name>GetTypeSyntheticsContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_synth_cont</name><operator>.</operator><name>GetExactMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>RegexSynthContainerSP</name></type> <name>GetRegexTypeSyntheticsContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_synth_cont</name><operator>.</operator><name>GetRegexMatch</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SynthContainer</name> <modifier>&amp;</modifier></type><name>GetSyntheticsContainer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_synth_cont</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>SynthContainer</name><operator>::</operator><name>MapValueType</name> <macro><name>GetSyntheticAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeNameSpecifierImplSP</name>
<macro><name>GetTypeNameSpecifierForSyntheticAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_enabled</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>uint32_t</name></type> <name>GetEnabledPosition</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_enabled</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UINT32_MAX</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>m_enabled_position</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>Get</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FormattersMatchVector</name> <operator>&amp;</operator><name>candidates</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name> <operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Get</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FormattersMatchVector</name> <operator>&amp;</operator><name>candidates</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Get</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FormattersMatchVector</name> <operator>&amp;</operator><name>candidates</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name> <operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>(<parameter><decl><type><name>FormatCategoryItems</name></type> <name>items</name> <init>= <expr><name>ALL_ITEM_TYPES</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>FormatCategoryItems</name></type> <name>items</name> <init>= <expr><name>ALL_ITEM_TYPES</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetCount</name><parameter_list>(<parameter><decl><type><name>FormatCategoryItems</name></type> <name>items</name> <init>= <expr><name>ALL_ITEM_TYPES</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_name</name><operator>.</operator><name>GetCString</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>size_t</name></type> <name>GetNumLanguages</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguageAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetDescription</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>AnyMatches</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type_name</name></decl></parameter>,
<parameter><decl><type><name>FormatCategoryItems</name></type> <name>items</name> <init>= <expr><name>ALL_ITEM_TYPES</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>only_enabled</name> <init>= <expr><name>true</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>matching_category</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>FormatCategoryItems</name> <modifier>*</modifier></type><name>matching_type</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeCategoryImpl</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>FormatContainer</name></type> <name>m_format_cont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SummaryContainer</name></type> <name>m_summary_cont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterContainer</name></type> <name>m_filter_cont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SynthContainer</name></type> <name>m_synth_cont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFormatChangeListener</name> <modifier>*</modifier></type><name>m_change_listener</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>&gt;</argument_list></name> <name>m_languages</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_enabled_position</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Enable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>Disable</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>Enable</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>IsApplicable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>uint32_t</name></type> <name>GetLastEnabledPosition</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_enabled_position</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetEnabledPosition</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_enabled_position</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FormatManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>LanguageCategory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TypeCategoryMap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>TypeFormatImpl</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>TypeSummaryImpl</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>TypeFilterImpl</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>ScriptedSyntheticChildren</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
