<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/CompactUnwindInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_COMPACTUNWINDINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_COMPACTUNWINDINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/ObjectFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/UnwindPlan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>















<decl_stmt><decl><type><name>class</name></type> <name>CompactUnwindInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CompactUnwindInfo</name><argument_list>(<argument><expr><name>ObjectFile</name> <operator>&amp;</operator><name>objfile</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>CompactUnwindInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>GetUnwindPlan</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>IsValid</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>





<struct>struct <name>UnwindIndex</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>function_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>second_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>lsda_array_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lsda_array_end</name> <init>=
<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sentinal_entry</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>UnwindIndex</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CompactUnwindInfo</name><operator>::</operator><name>UnwindIndex</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>function_offset</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>function_offset</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CompactUnwindInfo</name><operator>::</operator><name>UnwindIndex</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>function_offset</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>function_offset</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>



<struct>struct <name>FunctionInfo</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>encoding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Address</name></type> <name>lsda_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Address</name></type> <name>personality_ptr_address</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>valid_range_offset_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>valid_range_offset_end</name> <init>=
<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FunctionInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>lsda_address</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>personality_ptr_address</name><argument_list>()</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>UnwindHeader</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>common_encodings_array_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>common_encodings_array_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>personality_array_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>personality_array_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnwindHeader</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>void</name></type> <name>ScanIndex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>GetCompactUnwindInfoForFunction</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>,
<parameter><decl><type><name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>unwind_info</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name>
<macro><name>BinarySearchRegularSecondPage</name><argument_list>(<argument>uint32_t entry_page_offset</argument>,
<argument>uint32_t entry_count</argument>, <argument>uint32_t function_offset</argument>,
<argument>uint32_t *entry_func_start_offset</argument>,
<argument>uint32_t *entry_func_end_offset</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>BinarySearchCompressedSecondPage</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>entry_page_offset</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>entry_count</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>function_offset_to_find</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>function_offset_base</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>entry_func_start_offset</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>entry_func_end_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetLSDAForFunctionOffset</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>lsda_offset</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>lsda_count</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>function_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CreateUnwindPlan_x86_64</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>function_info</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>,
<parameter><decl><type><name>Address</name></type> <name>pc_or_function_start</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CreateUnwindPlan_i386</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>function_info</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>,
<parameter><decl><type><name>Address</name></type> <name>pc_or_function_start</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CreateUnwindPlan_arm64</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>function_info</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>,
<parameter><decl><type><name>Address</name></type> <name>pc_or_function_start</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CreateUnwindPlan_armv7</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>function_info</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>,
<parameter><decl><type><name>Address</name></type> <name>pc_or_function_start</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ObjectFile</name> <modifier>&amp;</modifier></type><name>m_objfile</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <name>m_section_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <name>m_section_contents_if_encrypted</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UnwindIndex</name></expr></argument>&gt;</argument_list></name> <name>m_indexes</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_indexes_computed</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>DataExtractor</name></type> <name>m_unwindinfo_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_unwindinfo_data_computed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UnwindHeader</name></type> <name>m_unwind_header</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
