<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/AssertFrameRecognizer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_ASSERTFRAMERECOGNIZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_ASSERTFRAMERECOGNIZER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StackFrameRecognizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>






<function_decl><type><name>void</name></type> <name>RegisterAssertFrameRecognizer</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>class</name></type> <name>AssertRecognizedStackFrame</name> <range>: <expr><name>public</name> <name>RecognizedStackFrame</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>AssertRecognizedStackFrame</name><argument_list>(<argument>lldb::StackFrameSP most_relevant_frame_sp</argument>)</argument_list></macro></expr>;
<expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetMostRelevantFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>StackFrameSP</name> <name>m_most_relevant_frame</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>AssertFrameRecognizer</name> <range>: <expr><name>public</name> <name>StackFrameRecognizer</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><literal type="string">"Assert StackFrame Recognizer"</literal></expr>;</return> }</block>
<name>lldb</name><operator>::</operator><name>RecognizedStackFrameSP</name>
<macro><name>RecognizeFrame</name><argument_list>(<argument>lldb::StackFrameSP frame_sp</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
