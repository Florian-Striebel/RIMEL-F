<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBPlatform.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBPLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBPLATFORM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>PlatformConnectOptions</name>;</struct_decl>
<struct_decl>struct <name>PlatformShellCommand</name>;</struct_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBLaunchInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBPlatformConnectOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBPlatformConnectOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBPlatformConnectOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBPlatformConnectOptions</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBPlatformConnectOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SBPlatformConnectOptions</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SBPlatformConnectOptions</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetURL</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetURL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetRsyncEnabled</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EnableRsync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_path_prefix</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>omit_remote_hostname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DisableRsync</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetLocalCacheDirectory</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetLocalCacheDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>PlatformConnectOptions</name> <modifier>*</modifier></type><name>m_opaque_ptr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBPlatformShellCommand</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBPlatformShellCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>shell</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>shell_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SBPlatformShellCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>shell_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBPlatformShellCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBPlatformShellCommand</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SBPlatformShellCommand</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SBPlatformShellCommand</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBPlatformShellCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetShell</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetShell</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetCommand</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell_command</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetWorkingDirectory</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetWorkingDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetTimeoutSeconds</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetTimeoutSeconds</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetSignal</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetStatus</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOutput</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBPlatform</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PlatformShellCommand</name> <modifier>*</modifier></type><name>m_opaque_ptr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBPlatform</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBPlatform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBPlatform</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBPlatform</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBPlatform</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SBPlatform</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SBPlatform</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBPlatform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>SBPlatform</name></type> <name>GetHostPlatform</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetWorkingDirectory</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetWorkingDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>ConnectRemote</name><parameter_list>(<parameter><decl><type><name>SBPlatformConnectOptions</name> <modifier>&amp;</modifier></type><name>connect_options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DisconnectRemote</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsConnected</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTriple</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetHostname</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOSBuild</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOSDescription</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetOSMajorVersion</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetOSMinorVersion</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetOSUpdateVersion</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><name>SBFileSpec</name> <modifier>&amp;</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SBFileSpec</name> <modifier>&amp;</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>SBFileSpec</name> <modifier>&amp;</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SBFileSpec</name> <modifier>&amp;</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>Install</name><parameter_list>(<parameter><decl><type><name>SBFileSpec</name> <modifier>&amp;</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SBFileSpec</name> <modifier>&amp;</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>Run</name><parameter_list>(<parameter><decl><type><name>SBPlatformShellCommand</name> <modifier>&amp;</modifier></type><name>shell_command</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>SBLaunchInfo</name> <modifier>&amp;</modifier></type><name>launch_info</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>SBError</name></type> <name>Kill</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBError</name></type>
<name>MakeDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>file_permissions</name> <init>= <expr><name>eFilePermissionsDirectoryDefault</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetFilePermissions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetFilePermissions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>file_permissions</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>SBUnixSignals</name> <macro><name>GetUnixSignals</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<function_decl><type><name>SBEnvironment</name></type> <name>GetEnvironment</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>GetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><name>platform_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SBError</name></type> <name>ExecuteConnected</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
