<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionValueProperties.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONVALUEPROPERTIES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONVALUEPROPERTIES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FormatEntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UniqueCStringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/Property.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Properties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OptionValueProperties</name>
<range>: <expr><name>public</name> <name><name>Cloneable</name><argument_list type="generic">&lt;<argument><expr><name>OptionValueProperties</name></expr></argument>, <argument><expr><name>OptionValue</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>std</name>::<name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>OptionValueProperties</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>OptionValueProperties</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>OptionValueProperties</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>OptionValueProperties</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>eTypeProperties</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<call><name>CreateLocalCopy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Properties</name> <operator>&amp;</operator><name>global_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name>
<macro><name>DeepCopy</name><argument_list>(<argument>const lldb::OptionValueSP &amp;new_parent</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Status</name></type>
<name>SetValueFromString</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>,
<argument><expr><name>VarSetOperationType</name> <name>op</name> <operator>=</operator> <name>eVarSetOperationAssign</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DumpValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>dump_mask</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>DumpPropertyValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>property_path</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>dump_mask</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DumpAllDescriptions</name><argument_list>(<argument><expr><name>CommandInterpreter</name> <operator>&amp;</operator><name>interpreter</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Apropos</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>keyword</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Property</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>matching_properties</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PropertyDefinitions</name> <modifier>&amp;</modifier></type><name>setting_definitions</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>virtual</name> <name>size_t</name> <macro><name>GetNumProperties</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>virtual</name> <name>uint32_t</name></type> <name>GetPropertyIndex</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>Property</name> <modifier>*</modifier></type><name>GetProperty</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>bool</name> <name>will_modify</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>Property</name> <modifier>*</modifier></type><name>GetPropertyAtIndex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>bool</name> <name>will_modify</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>Property</name> <modifier>*</modifier></type><name>GetPropertyAtPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>bool</name> <name>will_modify</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>property_path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>OptionValueSP</name>
<macro><name>GetPropertyValueAtIndex</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>, <argument>bool will_modify</argument>,
<argument>uint32_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>GetValueForKey</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>ConstString key</argument>,
<argument>bool value_will_be_modified</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>GetSubValue</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>llvm::StringRef name</argument>,
<argument>bool value_will_be_modified</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>SetSubValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>VarSetOperationType</name> <name>op</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>path</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionValueArch</name> <modifier>*</modifier></type>
<name>GetPropertyAtIndexAsOptionValueArch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionValueLanguage</name> <modifier>*</modifier></type>
<name>GetPropertyAtIndexAsOptionValueLanguage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetPropertyAtIndexAsArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>,
<argument><expr><name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetPropertyAtIndexFromArgs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Args</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetPropertyAtIndexAsBoolean</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>, <argument><expr><name>bool</name> <name>fail_value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetPropertyAtIndexAsBoolean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>OptionValueDictionary</name> <modifier>*</modifier></type>
<name>GetPropertyAtIndexAsOptionValueDictionary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>GetPropertyAtIndexAsEnumeration</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>,
<argument><expr><name>int64_t</name> <name>fail_value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetPropertyAtIndexAsEnumeration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator>
<macro><name>GetPropertyAtIndexAsFormatEntity</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RegularExpression</name> <modifier>*</modifier></type>
<name>GetPropertyAtIndexAsOptionValueRegex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionValueSInt64</name> <modifier>*</modifier></type>
<name>GetPropertyAtIndexAsOptionValueSInt64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>GetPropertyAtIndexAsSInt64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>, <argument><expr><name>int64_t</name> <name>fail_value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetPropertyAtIndexAsSInt64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetPropertyAtIndexAsUInt64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>fail_value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetPropertyAtIndexAsUInt64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetPropertyAtIndexAsString</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>uint32_t idx</argument>,
<argument>llvm::StringRef fail_value</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetPropertyAtIndexAsString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>new_value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionValueString</name> <modifier>*</modifier></type>
<name>GetPropertyAtIndexAsOptionValueString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>bool</name> <name>will_modify</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionValueFileSpec</name> <modifier>*</modifier></type>
<name>GetPropertyAtIndexAsOptionValueFileSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>bool</name> <name>will_modify</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>GetPropertyAtIndexAsFileSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetPropertyAtIndexAsFileSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>OptionValuePathMappings</name> <modifier>*</modifier></type><name>GetPropertyAtIndexAsOptionValuePathMappings</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>bool</name> <name>will_modify</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionValueFileSpecList</name> <modifier>*</modifier></type><name>GetPropertyAtIndexAsOptionValueFileSpecList</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>bool</name> <name>will_modify</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendProperty</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><name>ConstString</name> <name>desc</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_global</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <operator>&amp;</operator><name>value_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <macro><name>GetSubProperty</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>ConstString name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetValueChangedCallback</name><argument_list>(<argument><expr><name>uint32_t</name> <name>property_idx</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<function><type><name>Property</name> <modifier>*</modifier></type><name>ProtectedGetPropertyAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&lt;</operator> <call><name><name>m_properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>m_properties</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>Property</name> <modifier>*</modifier></type><name>ProtectedGetPropertyAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&lt;</operator> <call><name><name>m_properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>m_properties</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<typedef>typedef <type><name><name>UniqueCStringMap</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></type> <name>NameToIndex</name>;</typedef>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Property</name></expr></argument>&gt;</argument_list></name> <name>m_properties</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>NameToIndex</name></type> <name>m_name_to_index</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
