<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/FunctionCaller.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_FUNCTIONCALLER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_FUNCTIONCALLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/Expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/ExpressionParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
































<decl_stmt><decl><type><name>class</name></type> <name>FunctionCaller</name> <range>: <expr><name>public</name> <name>Expression</name> <block>{

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> }</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Expression *obj</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>obj</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

















<call><name>FunctionCaller</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>&amp;</operator><name>exe_scope</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>return_type</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>function_address</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ValueList</name> <operator>&amp;</operator><name>arg_value_list</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;


<expr><operator>~</operator><macro><name>FunctionCaller</name><argument_list>()</argument_list></macro> <name>override</name></expr>;













<expr><name>virtual</name> <name>unsigned</name> <macro><name>CompileFunction</name><argument_list>(<argument>lldb::ThreadSP thread_to_use_sp</argument>,
<argument>DiagnosticManager &amp;diagnostic_manager</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

















<expr><name>bool</name> <call><name>InsertFunction</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>args_addr_ref</name></expr></argument>,
<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>)</argument_list></call></expr>;












<expr><name>bool</name> <call><name>WriteFunctionWrapper</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>)</argument_list></call></expr>;

















<expr><name>bool</name> <call><name>WriteFunctionArguments</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>args_addr_ref</name></expr></argument>,
<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>)</argument_list></call></expr>;





















<expr><name>bool</name> <call><name>WriteFunctionArguments</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>args_addr_ref</name></expr></argument>,
<argument><expr><name>ValueList</name> <operator>&amp;</operator><name>arg_values</name></expr></argument>,
<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>)</argument_list></call></expr>;
































<expr><name>lldb</name><operator>::</operator><name>ExpressionResults</name>
<call><name>ExecuteFunction</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>*</operator><name>args_addr_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>, <argument><expr><name>Value</name> <operator>&amp;</operator><name>results</name></expr></argument>)</argument_list></call></expr>;
















<expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name>
<macro><name>GetThreadPlanToCallFunction</name><argument_list>(<argument>ExecutionContext &amp;exe_ctx</argument>, <argument>lldb::addr_t args_addr</argument>,
<argument>const EvaluateExpressionOptions &amp;options</argument>,
<argument>DiagnosticManager &amp;diagnostic_manager</argument>)</argument_list></macro></expr>;














<expr><name>bool</name> <macro><name>FetchFunctionResults</name><argument_list>(<argument>ExecutionContext &amp;exe_ctx</argument>, <argument>lldb::addr_t args_addr</argument>,
<argument>Value &amp;ret_value</argument>)</argument_list></macro></expr>;









<expr><name>void</name> <macro><name>DeallocateFunctionResults</name><argument_list>(<argument>ExecutionContext &amp;exe_ctx</argument>,
<argument>lldb::addr_t args_addr</argument>)</argument_list></macro></expr>;





<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Text</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>m_wrapper_function_text</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>FunctionName</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name><name>m_wrapper_function_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>



<name>ExpressionVariableList</name> <operator>*</operator><macro><name>LocalVariables</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>


<name>bool</name> <macro><name>NeedsValidation</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>


<name>bool</name> <macro><name>NeedsVariableResolution</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>ValueList</name> <macro><name>GetArgumentValues</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_arg_values</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>


<name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IRExecutionUnit</name></expr></argument>&gt;</argument_list></name> <name>m_execution_unit_sp</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ExpressionParser</name></expr></argument>&gt;</argument_list></name>
<name>m_parser</name></expr>;



<expr><name>lldb</name><operator>::</operator><name>ModuleWP</name> <name>m_jit_module_wp</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name>
<name>m_name</name></expr>;

<expr><name>Function</name> <operator>*</operator><name>m_function_ptr</name></expr>;


<expr><name>Address</name> <name>m_function_addr</name></expr>;

<expr><name>CompilerType</name> <name>m_function_return_type</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>m_wrapper_function_name</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name>
<name>m_wrapper_function_text</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_wrapper_struct_name</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>m_wrapper_args_addrs</name></expr>;



<expr><name>bool</name> <name>m_struct_valid</name></expr>;



<expr><name>size_t</name> <name>m_struct_size</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name>
<name>m_member_offsets</name></expr>;
<expr><name>uint64_t</name> <name>m_return_size</name></expr>;
<expr><name>uint64_t</name> <name>m_return_offset</name></expr>;


<expr><name>ValueList</name> <name>m_arg_values</name></expr>;

<expr><name>bool</name> <name>m_compiled</name></expr>;
<expr><name>bool</name>
<name>m_JITted</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
