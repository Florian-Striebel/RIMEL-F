<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionValue.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONVALUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONVALUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FormatEntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Cloneable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-interfaces.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>OptionValue</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Type</name> <block>{
<decl><name>eTypeInvalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eTypeArch</name></decl>,
<decl><name>eTypeArgs</name></decl>,
<decl><name>eTypeArray</name></decl>,
<decl><name>eTypeBoolean</name></decl>,
<decl><name>eTypeChar</name></decl>,
<decl><name>eTypeDictionary</name></decl>,
<decl><name>eTypeEnum</name></decl>,
<decl><name>eTypeFileLineColumn</name></decl>,
<decl><name>eTypeFileSpec</name></decl>,
<decl><name>eTypeFileSpecList</name></decl>,
<decl><name>eTypeFormat</name></decl>,
<decl><name>eTypeLanguage</name></decl>,
<decl><name>eTypePathMap</name></decl>,
<decl><name>eTypeProperties</name></decl>,
<decl><name>eTypeRegex</name></decl>,
<decl><name>eTypeSInt64</name></decl>,
<decl><name>eTypeString</name></decl>,
<decl><name>eTypeUInt64</name></decl>,
<decl><name>eTypeUUID</name></decl>,
<decl><name>eTypeFormatEntity</name></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>eDumpOptionName</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eDumpOptionType</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eDumpOptionValue</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eDumpOptionDescription</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eDumpOptionRaw</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>eDumpOptionCommand</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
<decl><name>eDumpGroupValue</name> <init>= <expr><operator>(</operator><name>eDumpOptionName</name> <operator>|</operator> <name>eDumpOptionType</name> <operator>|</operator> <name>eDumpOptionValue</name><operator>)</operator></expr></init></decl>,
<decl><name>eDumpGroupHelp</name> <init>=
<expr><operator>(</operator><name>eDumpOptionName</name> <operator>|</operator> <name>eDumpOptionType</name> <operator>|</operator> <name>eDumpOptionDescription</name><operator>)</operator></expr></init></decl>,
<decl><name>eDumpGroupExport</name> <init>= <expr><operator>(</operator><name>eDumpOptionCommand</name> <operator>|</operator> <name>eDumpOptionName</name> <operator>|</operator> <name>eDumpOptionValue</name><operator>)</operator></expr></init></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>OptionValue</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>OptionValue</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>ValueIsTransparent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>eTypeProperties</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetTypeAsCString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetBuiltinTypeAsCString</name><argument_list>(<argument><expr><call><name>GetType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBuiltinTypeAsCString</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>DumpValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>dump_mask</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type>
<name>SetValueFromString</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>,
<argument><expr><name>VarSetOperationType</name> <name>op</name> <operator>=</operator> <name>eVarSetOperationAssign</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>OptionValueSP</name>
<macro><name>DeepCopy</name><argument_list>(<argument>const lldb::OptionValueSP &amp;new_parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>AutoComplete</name><parameter_list>(<parameter><decl><type><name>CommandInterpreter</name> <modifier>&amp;</modifier></type><name>interpreter</name></decl></parameter>,
<parameter><decl><type><name>CompletionRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>GetSubValue</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>llvm::StringRef name</argument>,
<argument>bool will_modify</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(<argument><expr><literal type="string">"'%s' is not a value subvalue"</literal></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>lldb</name><operator>::</operator><call><name>OptionValueSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetSubValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>VarSetOperationType</name> <name>op</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsAggregateValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>DumpQualifiedName</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<function><type><name>uint32_t</name></type> <name>GetTypeAsMask</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <call><name>GetType</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ConvertTypeToMask</name><argument_list>(<argument><expr><name>OptionValue</name><operator>::</operator><name>Type</name> <name>type</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>type</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>OptionValue</name><operator>::</operator><name>Type</name> <macro><name>ConvertTypeMaskToType</name><argument_list>(<argument>uint32_t type_mask</argument>)</argument_list></macro> <block>{

<switch>switch <condition>(<expr><name>type_mask</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeArch</name></expr>:</case>
<return>return <expr><name>eTypeArch</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeArgs</name></expr>:</case>
<return>return <expr><name>eTypeArgs</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeArray</name></expr>:</case>
<return>return <expr><name>eTypeArray</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeBoolean</name></expr>:</case>
<return>return <expr><name>eTypeBoolean</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeChar</name></expr>:</case>
<return>return <expr><name>eTypeChar</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeDictionary</name></expr>:</case>
<return>return <expr><name>eTypeDictionary</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeEnum</name></expr>:</case>
<return>return <expr><name>eTypeEnum</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeFileLineColumn</name></expr>:</case>
<return>return <expr><name>eTypeFileLineColumn</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeFileSpec</name></expr>:</case>
<return>return <expr><name>eTypeFileSpec</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeFileSpecList</name></expr>:</case>
<return>return <expr><name>eTypeFileSpecList</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeFormat</name></expr>:</case>
<return>return <expr><name>eTypeFormat</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeLanguage</name></expr>:</case>
<return>return <expr><name>eTypeLanguage</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypePathMap</name></expr>:</case>
<return>return <expr><name>eTypePathMap</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeProperties</name></expr>:</case>
<return>return <expr><name>eTypeProperties</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeRegex</name></expr>:</case>
<return>return <expr><name>eTypeRegex</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeSInt64</name></expr>:</case>
<return>return <expr><name>eTypeSInt64</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeString</name></expr>:</case>
<return>return <expr><name>eTypeString</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeUInt64</name></expr>:</case>
<return>return <expr><name>eTypeUInt64</name></expr>;</return>
<case>case <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>eTypeUUID</name></expr>:</case>
<return>return <expr><name>eTypeUUID</name></expr>;</return>
<expr_stmt/>}</block_content>

return eTypeInvalid</block><empty_stmt>;</empty_stmt></switch>
}</block>

<specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValueSP</name>
<macro><name>CreateValueFromCStringForTypeMask</name><argument_list>(<argument>const char *value_cstr</argument>, <argument>uint32_t type_mask</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>uint64_t</name></type> <name>GetUInt64Value</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>success_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OptionValueArch</name> <modifier>*</modifier></type><name>GetAsArch</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueArch</name> <operator>*</operator><macro><name>GetAsArch</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueArray</name> <modifier>*</modifier></type><name>GetAsArray</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueArray</name> <operator>*</operator><macro><name>GetAsArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueArgs</name> <modifier>*</modifier></type><name>GetAsArgs</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueArgs</name> <operator>*</operator><macro><name>GetAsArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueBoolean</name> <modifier>*</modifier></type><name>GetAsBoolean</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>OptionValueChar</name> <modifier>*</modifier></type><name>GetAsChar</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueBoolean</name> <operator>*</operator><macro><name>GetAsBoolean</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueChar</name> <operator>*</operator><macro><name>GetAsChar</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueDictionary</name> <modifier>*</modifier></type><name>GetAsDictionary</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueDictionary</name> <operator>*</operator><macro><name>GetAsDictionary</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueEnumeration</name> <modifier>*</modifier></type><name>GetAsEnumeration</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueEnumeration</name> <operator>*</operator><macro><name>GetAsEnumeration</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueFileSpec</name> <modifier>*</modifier></type><name>GetAsFileSpec</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueFileSpec</name> <operator>*</operator><macro><name>GetAsFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueFileSpecList</name> <modifier>*</modifier></type><name>GetAsFileSpecList</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueFileSpecList</name> <operator>*</operator><macro><name>GetAsFileSpecList</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueFormat</name> <modifier>*</modifier></type><name>GetAsFormat</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueFormat</name> <operator>*</operator><macro><name>GetAsFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueLanguage</name> <modifier>*</modifier></type><name>GetAsLanguage</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueLanguage</name> <operator>*</operator><macro><name>GetAsLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValuePathMappings</name> <modifier>*</modifier></type><name>GetAsPathMappings</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValuePathMappings</name> <operator>*</operator><macro><name>GetAsPathMappings</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueProperties</name> <modifier>*</modifier></type><name>GetAsProperties</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueProperties</name> <operator>*</operator><macro><name>GetAsProperties</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueRegex</name> <modifier>*</modifier></type><name>GetAsRegex</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueRegex</name> <operator>*</operator><macro><name>GetAsRegex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueSInt64</name> <modifier>*</modifier></type><name>GetAsSInt64</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueSInt64</name> <operator>*</operator><macro><name>GetAsSInt64</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueString</name> <modifier>*</modifier></type><name>GetAsString</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueString</name> <operator>*</operator><macro><name>GetAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueUInt64</name> <modifier>*</modifier></type><name>GetAsUInt64</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueUInt64</name> <operator>*</operator><macro><name>GetAsUInt64</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueUUID</name> <modifier>*</modifier></type><name>GetAsUUID</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueUUID</name> <operator>*</operator><macro><name>GetAsUUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>OptionValueFormatEntity</name> <modifier>*</modifier></type><name>GetAsFormatEntity</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>OptionValueFormatEntity</name> <operator>*</operator><macro><name>GetAsFormatEntity</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetBooleanValue</name><argument_list>(<argument><expr><name>bool</name> <name>fail_value</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetBooleanValue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>char</name></type> <name>GetCharValue</name><argument_list>(<argument><expr><name>char</name> <name>fail_value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>char</name></type> <name>SetCharValue</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int64_t</name></type> <name>GetEnumerationValue</name><argument_list>(<argument><expr><name>int64_t</name> <name>fail_value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetEnumerationValue</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>FileSpec</name> <macro><name>GetFileSpecValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetFileSpecValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>FileSpecList</name> <macro><name>GetFileSpecListValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name>
<macro><name>GetFormatValue</name><argument_list>(<argument>lldb::Format fail_value = lldb::eFormatDefault</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetFormatValue</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>new_value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguageValue</name><argument_list>(
<argument>lldb::LanguageType fail_value = lldb::eLanguageTypeUnknown</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetLanguageValue</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>new_language</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><macro><name>GetFormatEntity</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>*</operator><macro><name>GetRegexValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>GetSInt64Value</name><argument_list>(<argument><expr><name>int64_t</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetSInt64Value</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetStringValue</name><argument_list>(<argument>llvm::StringRef fail_value</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetStringValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetStringValue</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>StringRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetStringValue</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>new_value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetUInt64Value</name><argument_list>(<argument><expr><name>uint64_t</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetUInt64Value</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>UUID</name> <macro><name>GetUUIDValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetUUIDValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UUID</name> <modifier>&amp;</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>OptionWasSet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_value_was_set</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetOptionWasSet</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_value_was_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>SetParent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <operator>&amp;</operator><name>parent_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_parent_wp</name> <operator>=</operator> <name>parent_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>GetParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_parent_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetValueChangedCallback</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>m_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_callback</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>NotifyValueChanged</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_callback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>m_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>TopmostBase</name> <init>= <expr><name>OptionValue</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>Clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValueWP</name> <name>m_parent_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>m_callback</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_value_was_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>





</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
