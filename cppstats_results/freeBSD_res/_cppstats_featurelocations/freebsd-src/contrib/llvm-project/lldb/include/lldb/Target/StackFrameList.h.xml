<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/StackFrameList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_STACKFRAMELIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_STACKFRAMELIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StackFrame.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>StackFrameList</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>StackFrameList</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>const lldb::StackFrameListSP &amp;prev_frames_sp</argument>,
<argument>bool show_inline_frames</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>StackFrameList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<function_decl><type><name>uint32_t</name></type> <name>GetNumFrames</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>can_create</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetFrameAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetFrameWithConcreteFrameIndex</name><argument_list>(<argument>uint32_t unwind_idx</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <call><name>GetFrameWithStackID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>stack_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>SetSelectedFrame</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>StackFrame</name> <operator>*</operator><name>frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>uint32_t</name> <macro><name>GetSelectedFrameIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>SetSelectedFrameByIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>uint32_t</name></type> <name>GetVisibleStackFrameIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_current_inlined_depth</name> <operator>&lt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>idx</name> <operator>-</operator> <name>m_current_inlined_depth</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>idx</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function_decl><type><name>void</name></type> <name>CalculateCurrentInlinedDepth</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>SetDefaultFileAndLineToSelectedFrame</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name>
<call><name>GetStackFrameSPForStackFramePtr</name><argument_list>(<argument><expr><name>StackFrame</name> <operator>*</operator><name>stack_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>size_t</name></type> <name>GetStatus</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>first_frame</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_frames</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>show_frame_info</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_frames_with_source</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>show_unique</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frame_marker</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetFrameAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>GetFramesUpTo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>end_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetOnlyConcreteFramesUpTo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>end_idx</name></decl></parameter>, <parameter><decl><type><name>Unwind</name> <modifier>&amp;</modifier></type><name>unwinder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SynthesizeTailCallFrames</name><parameter_list>(<parameter><decl><type><name>StackFrame</name> <modifier>&amp;</modifier></type><name>next_frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>GetAllFramesFetched</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_concrete_frames_fetched</name> <operator>==</operator> <name>UINT32_MAX</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetAllFramesFetched</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_concrete_frames_fetched</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>DecrementCurrentInlinedDepth</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ResetCurrentInlinedDepth</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetCurrentInlinedDepth</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetCurrentInlinedDepth</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>new_depth</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>


<decl_stmt><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>m_thread</name></decl>;</decl_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameListSP</name> <name>m_prev_frames_sp</name></expr>;</expr_stmt>





<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>collection</name></type> <name>m_frames</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_selected_frame_idx</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_concrete_frames_fetched</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_current_inlined_depth</name></decl>;</decl_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_current_inlined_pc</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>m_show_inlined_frames</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>StackFrameList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StackFrameList</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>StackFrameList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>StackFrameList</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
