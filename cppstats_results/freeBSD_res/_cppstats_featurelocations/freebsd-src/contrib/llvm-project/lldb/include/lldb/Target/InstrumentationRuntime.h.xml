<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/InstrumentationRuntime.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_INSTRUMENTATIONRUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_INSTRUMENTATIONRUNTIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>InstrumentationRuntimeType</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>InstrumentationRuntimeSP</name></expr></argument>&gt;</argument_list></name>
<name>InstrumentationRuntimeCollection</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>InstrumentationRuntime</name>
<range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>InstrumentationRuntime</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>PluginInterface</name> <block>{<block_content>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>m_runtime_module</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>m_breakpoint_id</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>m_is_active</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>InstrumentationRuntime</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_process_wp</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_runtime_module</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_breakpoint_id</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_is_active</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>process_sp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_process_wp</name> <operator>=</operator> <name>process_sp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcessSP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_process_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>GetRuntimeModuleSP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_runtime_module</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetRuntimeModuleSP</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>module_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_runtime_module</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>module_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <macro><name>GetBreakpointID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_breakpoint_id</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetBreakpointID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>ID</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_breakpoint_id</name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetActive</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsActive</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_is_active</name> <operator>=</operator> <name>IsActive</name></expr>;</expr_stmt> </block_content>}</block></function>



<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>RegularExpression</name> <modifier>&amp;</modifier></type><name>GetPatternForRuntimeLibrary</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>CheckIfRuntimeIsValid</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>module_sp</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>Activate</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ModulesDidLoad</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><name>InstrumentationRuntimeCollection</name> <operator>&amp;</operator><name>runtimes</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>ModulesDidLoad</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_active</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadCollectionSP</name>
<macro><name>GetBacktracesFromExtendedStopInfo</name><argument_list>(<argument>StructuredData::ObjectSP info</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
