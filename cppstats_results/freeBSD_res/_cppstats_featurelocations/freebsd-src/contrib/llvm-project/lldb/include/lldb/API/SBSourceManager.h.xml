<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBSourceManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBSOURCEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBSOURCEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBSourceManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBSourceManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBDebugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SBSourceManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBTarget</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SBSourceManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBSourceManager</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBSourceManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBSourceManager</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBSourceManager</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>DisplaySourceLinesWithLineNumbers</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>context_before</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>context_after</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>current_line_cstr</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>DisplaySourceLinesWithLineNumbersAndColumn</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>column</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>context_before</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>context_after</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>current_line_cstr</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBCommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>SourceManagerImpl</name></expr></argument>&gt;</argument_list></name> <name>m_opaque_up</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
