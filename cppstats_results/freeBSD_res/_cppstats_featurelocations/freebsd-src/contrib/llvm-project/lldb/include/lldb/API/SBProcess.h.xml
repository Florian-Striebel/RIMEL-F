<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBProcess.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBPROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBPROCESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBProcessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBQueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBTarget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBProcess</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>FLAGS_ANONYMOUS_ENUM</name><argument_list>()</argument_list></macro><block>{<block_content><expr><name>eBroadcastBitStateChanged</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitInterrupt</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitSTDOUT</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitSTDERR</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitProfileData</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitStructuredData</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></block_content>}</block><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SBProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBProcess</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBProcess</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBroadcasterClassName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPluginName</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetShortPluginName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <macro><name>GetTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>size_t</name></type> <name>PutSTDIN</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetSTDOUT</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetSTDERR</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetAsyncProfileData</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ReportEventState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ReportEventState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>SBFile</name> <name>file</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ReportEventState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>FileSP</name> <name>file</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendEventStateReport</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>RemoteAttachToProcessWithID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoteLaunch</name><argument_list>(<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator><operator>*</operator><name>envp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>stdin_path</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>stdout_path</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>stderr_path</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>working_directory</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>launch_flags</name></expr></argument>, <argument><expr><name>bool</name> <name>stop_at_entry</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>uint32_t</name></type> <name>GetNumThreads</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <macro><name>GetThreadAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <macro><name>GetThreadByID</name><argument_list>(<argument>lldb::tid_t sb_thread_id</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <macro><name>GetThreadByIndexID</name><argument_list>(<argument>uint32_t index_id</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <macro><name>GetSelectedThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <macro><name>CreateOSPluginThread</name><argument_list>(<argument>lldb::tid_t tid</argument>, <argument>lldb::addr_t context</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetSelectedThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetSelectedThreadByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetSelectedThreadByIndexID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index_id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint32_t</name></type> <name>GetNumQueues</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBQueue</name> <macro><name>GetQueueAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>int</name></type> <name>GetExitStatus</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExitDescription</name><parameter_list>()</parameter_list>;</function_decl>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <call><name>GetProcessID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>












<function_decl><type><name>uint32_t</name></type> <name>GetUniqueID</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetAddressByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>Destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>Continue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>Stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>Kill</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>Detach</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>Detach</name><argument_list>(<argument>bool keep_stopped</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>Signal</name><argument_list>(<argument>int signal</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBUnixSignals</name> <call><name>GetUnixSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SendAsyncInterrupt</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetStopID</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>include_expression_stops</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <macro><name>GetStopEventForStopID</name><argument_list>(<argument>uint32_t stop_id</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ReadMemory</name><argument_list>(<argument><expr><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>WriteMemory</name><argument_list>(<argument><expr><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ReadCStringFromMemory</name><argument_list>(<argument><expr><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ReadUnsignedFromMemory</name><argument_list>(<argument><expr><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>byte_size</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>ReadPointerFromMemory</name><argument_list>(<argument>addr_t addr</argument>, <argument>lldb::SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetStateFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetRestartedFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>GetNumRestartedReasonsFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GetRestartedReasonAtIndexFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <call><name>GetProcessFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetInterruptedFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBStructuredData</name>
<call><name>GetStructuredDataFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>EventIsProcessEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>EventIsStructuredDataEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <macro><name>GetBroadcaster</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBStructuredData</name></type> <name>GetExtendedCrashInformation</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetNumSupportedHardwareWatchpoints</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
















<decl_stmt><decl><type><name>uint32_t</name></type> <name>LoadImage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>remote_image_spec</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

























<decl_stmt><decl><type><name>uint32_t</name></type> <name>LoadImage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>local_image_spec</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>remote_image_spec</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>




























<decl_stmt><decl><type><name>uint32_t</name></type> <name>LoadImageUsingPaths</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>image_spec</name></expr></argument>,
<argument><expr><name>SBStringList</name> <operator>&amp;</operator><name>paths</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>loaded_path</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>UnloadImage</name><argument_list>(<argument>uint32_t image_token</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>SendEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<function_decl><type><name>uint32_t</name></type> <name>GetNumExtendedBacktraceTypes</name><parameter_list>()</parameter_list>;</function_decl>












<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExtendedBacktraceTypeAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThreadCollection</name> <macro><name>GetHistoryThreads</name><argument_list>(<argument>addr_t addr</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsInstrumentationRuntimePresent</name><parameter_list>(<parameter><decl><type><name>InstrumentationRuntimeType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>SaveCore</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>GetMemoryRegionInfo</name><argument_list>(<argument>lldb::addr_t load_addr</argument>,
<argument>lldb::SBMemoryRegionInfo &amp;region_info</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBMemoryRegionInfoList</name> <call><name>GetMemoryRegions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcessInfo</name> <call><name>GetProcessInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>AllocateMemory</name><argument_list>(<argument>size_t size</argument>, <argument>uint32_t permissions</argument>,
<argument>lldb::SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>DeallocateMemory</name><argument_list>(<argument>lldb::addr_t ptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBCommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBExecutionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>QueueImpl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_opaque_wp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
