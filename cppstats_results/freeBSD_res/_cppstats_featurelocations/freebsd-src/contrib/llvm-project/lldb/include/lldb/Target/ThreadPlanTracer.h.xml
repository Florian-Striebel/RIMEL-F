<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanTracer.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANTRACER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANTRACER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TaggedASTType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RegisterValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanTracer</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ThreadPlan</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>ThreadPlanTracerStyle</name> <block>{
<decl><name>eLocation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eStateChange</name></decl>,
<decl><name>eCheckFrames</name></decl>,
<decl><name>ePython</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>ThreadPlanTracer</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <operator>&amp;</operator><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ThreadPlanTracer</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ThreadPlanTracer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>TracingStarted</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>TracingEnded</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>bool</name></type> <name>EnableTracing</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>old_value</name> <init>= <expr><name>m_enabled</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m_enabled</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_value</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TracingStarted</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>old_value</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TracingEnded</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>old_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>TracingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_enabled</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>GetThread</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Process</name> <modifier>&amp;</modifier></type><name>m_process</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>m_tid</name></expr>;</expr_stmt>

<function_decl><type><name>Stream</name> <modifier>*</modifier></type><name>GetLogStream</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>Log</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>bool</name></type> <name>TracerExplainsStop</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>m_enabled</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <name>m_stream_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>m_thread</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanAssemblyTracer</name> <range>: <expr><name>public</name> <name>ThreadPlanTracer</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ThreadPlanAssemblyTracer</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <operator>&amp;</operator><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>ThreadPlanAssemblyTracer</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>ThreadPlanAssemblyTracer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>TracingStarted</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>TracingEnded</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Log</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>Disassembler</name> <operator>*</operator><call><name>GetDisassembler</name><argument_list>()</argument_list></call></expr>;

<expr><name>TypeFromUser</name> <call><name>GetIntPointerType</name><argument_list>()</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>DisassemblerSP</name> <name>m_disassembler_sp</name></expr>;
<expr><name>TypeFromUser</name> <name>m_intptr_type</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>RegisterValue</name></expr></argument>&gt;</argument_list></name> <name>m_register_values</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <name>m_buffer_sp</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
