<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/DebugMacros.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_DEBUGMACROS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_DEBUGMACROS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CompileUnit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DebugMacros</name></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DebugMacros</name></expr></argument>&gt;</argument_list></name> <name>DebugMacrosSP</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>DebugMacroEntry</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>EntryType</name> : <type><name>uint8_t</name></type> <block>{
<decl><name>INVALID</name></decl>, <decl><name>DEFINE</name></decl>, <decl><name>UNDEF</name></decl>, <decl><name>START_FILE</name></decl>, <decl><name>END_FILE</name></decl>, <decl><name>INDIRECT</name></decl>
}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>DebugMacroEntry</name></type> <name>CreateDefineEntry</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DebugMacroEntry</name></type> <name>CreateUndefEntry</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DebugMacroEntry</name></type> <name>CreateStartFileEntry</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>debug_line_file_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DebugMacroEntry</name></type> <name>CreateEndFileEntry</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DebugMacroEntry</name></type>
<name>CreateIndirectEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DebugMacrosSP</name> <modifier>&amp;</modifier></type><name>debug_macros_sp</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>DebugMacroEntry</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_type</name><argument_list>(<argument>INVALID</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><call><name>DebugMacroEntry</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>EntryType</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>EntryType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_type</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetLineNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_line</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetMacroString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_str</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetFileSpec</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>*</operator><name>comp_unit</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>DebugMacros</name> <operator>*</operator><macro><name>GetIndirectDebugMacros</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_debug_macros_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<macro><name>DebugMacroEntry</name><argument_list>(<argument>EntryType type</argument>, <argument>uint32_t line</argument>, <argument>uint32_t debug_line_file_idx</argument>,
<argument>const char *str</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DebugMacroEntry</name><argument_list>(<argument>EntryType type</argument>, <argument>const DebugMacrosSP &amp;debug_macros_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_type</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_line</name> <range>: <expr><literal type="number">29</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_debug_line_file_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DebugMacrosSP</name></type> <name>m_debug_macros_sp</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DebugMacros</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DebugMacros</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>DebugMacros</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>void</name></type> <name>AddMacroEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DebugMacroEntry</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_macro_entries</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>size_t</name> <macro><name>GetNumMacroEntries</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_macro_entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>DebugMacroEntry</name></type> <name>GetMacroEntryAtIndex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>size_t</name> <name>index</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name><name>m_macro_entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_macro_entries</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>DebugMacroEntry</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>DebugMacros</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DebugMacros</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DebugMacros</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DebugMacros</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DebugMacroEntry</name></expr></argument>&gt;</argument_list></name> <name>m_macro_entries</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
