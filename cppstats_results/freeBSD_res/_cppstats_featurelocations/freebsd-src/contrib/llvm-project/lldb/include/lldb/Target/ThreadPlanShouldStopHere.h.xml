<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanShouldStopHere.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANSHOULDSTOPHERE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANSHOULDSTOPHERE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlan.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



















<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanShouldStopHere</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>ThreadPlanShouldStopHereCallbacks</name> <block>{
<macro><name>ThreadPlanShouldStopHereCallbacks</name><argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>should_stop_here_callback</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_from_here_callback</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>ThreadPlanShouldStopHereCallbacks</name><argument_list>(
<argument>ThreadPlanShouldStopHereCallback should_stop</argument>,
<argument>ThreadPlanStepFromHereCallback step_from_here</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>should_stop_here_callback</name> <operator>=</operator> <name>should_stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_from_here_callback</name> <operator>=</operator> <name>step_from_here</name></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>should_stop_here_callback</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_from_here_callback</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ThreadPlanShouldStopHereCallback</name></type> <name>should_stop_here_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadPlanStepFromHereCallback</name></type> <name>step_from_here_callback</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <block>{
<decl><name>eNone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eAvoidInlines</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eStepInAvoidNoDebug</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eStepOutAvoidNoDebug</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>


<expr_stmt><expr><call><name>ThreadPlanShouldStopHere</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ThreadPlanShouldStopHere</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>owner</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ThreadPlanShouldStopHereCallbacks</name> <operator>*</operator><name>callbacks</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>baton</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ThreadPlanShouldStopHere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<function><type><name>void</name></type>
<name>SetShouldStopHereCallbacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ThreadPlanShouldStopHereCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>callbacks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_callbacks</name> <operator>=</operator> <operator>*</operator><name>callbacks</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m_callbacks</name><operator>.</operator><name>should_stop_here_callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m_callbacks</name><operator>.</operator><name>should_stop_here_callback</name></name> <operator>=</operator>
<name>ThreadPlanShouldStopHere</name><operator>::</operator><name>DefaultShouldStopHereCallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m_callbacks</name><operator>.</operator><name>step_from_here_callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m_callbacks</name><operator>.</operator><name>step_from_here_callback</name></name> <operator>=</operator>
<name>ThreadPlanShouldStopHere</name><operator>::</operator><name>DefaultStepFromHereCallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ClearShouldStopHereCallbacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>m_baton</name> <operator>=</operator> <name>baton</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ClearShouldStopHereCallbacks</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_callbacks</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>InvokeShouldStopHereCallback</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FrameComparison</name> <name>operation</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name>
<macro><name>CheckShouldStopHereAndQueueStepOut</name><argument_list>(<argument>lldb::FrameComparison operation</argument>,
<argument>Status &amp;status</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Flags</name> <operator>&amp;</operator><macro><name>GetFlags</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_flags</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>Flags</name> <operator>&amp;</operator><macro><name>GetFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_flags</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>DefaultShouldStopHereCallback</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>current_plan</name></expr></argument>,
<argument><expr><name>Flags</name> <operator>&amp;</operator><name>flags</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>FrameComparison</name> <name>operation</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name>
<macro><name>DefaultStepFromHereCallback</name><argument_list>(<argument>ThreadPlan *current_plan</argument>, <argument>Flags &amp;flags</argument>,
<argument>lldb::FrameComparison operation</argument>, <argument>Status &amp;status</argument>,
<argument>void *baton</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name>
<macro><name>QueueStepOutFromHerePlan</name><argument_list>(<argument>Flags &amp;flags</argument>, <argument>lldb::FrameComparison operation</argument>,
<argument>Status &amp;status</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>SetFlagsToDefault</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>ThreadPlanShouldStopHereCallbacks</name></type> <name>m_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadPlan</name> <modifier>*</modifier></type><name>m_owner</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Flags</name> <name>m_flags</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ThreadPlanShouldStopHere</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlanShouldStopHere</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadPlanShouldStopHere</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ThreadPlanShouldStopHere</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
