<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/ValueObjectConstResultImpl.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_VALUEOBJECTCONSTRESULTIMPL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_VALUEOBJECTCONSTRESULTIMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueObject</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>ValueObjectConstResultImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ValueObjectConstResultImpl</name><argument_list>(<argument>ValueObject *valobj</argument>,
<argument>lldb::addr_t live_address = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ValueObjectConstResultImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <call><name>Dereference</name><argument_list>(<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>CreateChildAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>synthetic_array_member</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>synthetic_index</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>GetSyntheticChildAtOffset</name><argument_list>(<argument>uint32_t offset</argument>, <argument>const CompilerType &amp;type</argument>,
<argument>bool can_create</argument>,
<argument>ConstString name_const_str = ConstString()</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <call><name>AddressOf</name><argument_list>(<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLiveAddress</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_live_address</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <call><name>Cast</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>compiler_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetLiveAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr></argument>,
<argument><expr><name>AddressType</name> <name>address_type</name> <operator>=</operator> <name>eAddressTypeLoad</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_live_address</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_live_address_type</name> <operator>=</operator> <name>address_type</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetAddressOf</name><argument_list>(<argument>bool scalar_is_load_address = true</argument>,
<argument>AddressType *address_type = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetPointeeData</name><parameter_list>(<parameter><decl><type><name>DataExtractor</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>item_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>item_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>m_impl_backend</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_live_address</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AddressType</name></type> <name>m_live_address_type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>m_load_addr_backend</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>m_address_of_backend</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ValueObjectConstResultImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueObjectConstResultImpl</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ValueObjectConstResultImpl</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ValueObjectConstResultImpl</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
