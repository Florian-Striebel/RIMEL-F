<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/REPL.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_REPL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_REPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/IOHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionGroupFormat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionGroupValueObjectDisplay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Target.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>REPL</name> <range>: <expr><name>public</name> <name>IOHandlerDelegate</name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>LLVMCastKind</name> <block>{ <expr><name>eKindClang</name></expr>, <expr><name>eKindSwift</name></expr>, <expr><name>eKindGo</name></expr>, <expr><name>kNumKinds</name></expr> }</block></expr>;

<expr><name>LLVMCastKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_kind</name></expr>;</return> }</block>

<macro><name>REPL</name><argument_list>(<argument>LLVMCastKind kind</argument>, <argument>Target &amp;target</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>REPL</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
























<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>REPLSP</name> <macro><name>Create</name><argument_list>(<argument>Status &amp;Status</argument>, <argument>lldb::LanguageType language</argument>,
<argument>Debugger *debugger</argument>, <argument>Target *target</argument>,
<argument>const char *repl_options</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>SetFormatOptions</name><argument_list>(<argument>const OptionGroupFormat &amp;options</argument>)</argument_list></macro> <block>{
<expr><name>m_format_options</name> <operator>=</operator> <name>options</name></expr>;
}</block>

<name>void</name>
<macro><name>SetValueObjectDisplayOptions</name><argument_list>(<argument>const OptionGroupValueObjectDisplay &amp;options</argument>)</argument_list></macro> <block>{
<expr><name>m_varobj_options</name> <operator>=</operator> <name>options</name></expr>;
}</block>

<name>void</name> <macro><name>SetEvaluateOptions</name><argument_list>(<argument>const EvaluateExpressionOptions &amp;options</argument>)</argument_list></macro> <block>{
<expr><name>m_expr_options</name> <operator>=</operator> <name>options</name></expr>;
}</block>

<name>void</name> <macro><name>SetCompilerOptions</name><argument_list>(<argument>const char *options</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_compiler_options</name> <operator>=</operator> <name>options</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <call><name>GetIOHandler</name><argument_list>()</argument_list></call></expr>;

<expr><name>Status</name> <call><name>RunLoop</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <macro><name>IOHandlerActivated</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>, <argument>bool interactive</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IOHandlerInterrupt</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>IOHandlerInputInterrupted</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>,
<argument>std::string &amp;line</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>IOHandlerGetFixIndentationCharacters</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ConstString</name> <macro><name>IOHandlerGetControlSequence</name><argument_list>(<argument>char ch</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>IOHandlerGetCommandPrefix</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>IOHandlerGetHelpPrologue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IOHandlerIsInputComplete</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>,
<argument>StringList &amp;lines</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>int</name> <macro><name>IOHandlerFixIndentation</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>, <argument>const StringList &amp;lines</argument>,
<argument>int cursor_position</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>IOHandlerInputComplete</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>,
<argument>std::string &amp;line</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>IOHandlerComplete</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>,
<argument>CompletionRequest &amp;request</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<specifier>static</specifier> <name>int</name> <call><name>CalculateActualIndentation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StringList</name> <operator>&amp;</operator><name>lines</name></expr></argument>)</argument_list></call></expr>;



<expr><name>virtual</name> <name>Status</name> <call><name>DoInitialization</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ConstString</name> <call><name>GetSourceFileBasename</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetAutoIndentCharacters</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>SourceIsComplete</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>offset_t</name> <macro><name>GetDesiredIndentation</name><argument_list>(
<argument>const StringList &amp;lines</argument>, <argument>int cursor_position</argument>,
<argument>int tab_size</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>GetLanguage</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>PrintOneVariable</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <operator>&amp;</operator><name>output_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>valobj_sp</name></expr></argument>,
<argument><expr><name>ExpressionVariable</name> <operator>*</operator><name>var</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>CompleteCode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>current_code</name></expr></argument>,
<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>OptionGroupFormat</name> <name>m_format_options</name> <operator>=</operator> <call><name>OptionGroupFormat</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>eFormatDefault</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OptionGroupValueObjectDisplay</name> <name>m_varobj_options</name></expr>;
<expr><name>EvaluateExpressionOptions</name> <name>m_expr_options</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_compiler_options</name></expr>;

<expr><name>bool</name> <name>m_enable_auto_indent</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_indent_str</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_current_indent_str</name></expr>;
<expr><name>uint32_t</name> <name>m_current_indent_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>m_repl_source_path</name></expr>;
<expr><name>bool</name> <name>m_dedicated_repl_mode</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>StringList</name> <name>m_code</name></expr>;

<expr><name>Target</name> <operator>&amp;</operator><name>m_target</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <name>m_io_handler_sp</name></expr>;
<expr><name>LLVMCastKind</name> <name>m_kind</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <call><name>GetSourcePath</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
