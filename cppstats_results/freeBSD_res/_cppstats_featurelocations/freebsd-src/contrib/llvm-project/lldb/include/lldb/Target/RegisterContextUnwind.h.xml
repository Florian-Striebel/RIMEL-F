<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/RegisterContextUnwind.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_REGISTERCONTEXTUNWIND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_REGISTERCONTEXTUNWIND_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/UnwindPlan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/RegisterContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/RegisterNumber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/UnwindLLDB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>UnwindLLDB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RegisterContextUnwind</name> <range>: <expr><name>public</name> <name>lldb_private</name><operator>::</operator><name>RegisterContext</name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RegisterContextUnwind</name></expr></argument>&gt;</argument_list></name> <name>SharedPtr</name></expr>;</expr_stmt></typedef>

<macro><name>RegisterContextUnwind</name><argument_list>(<argument>lldb_private::Thread &amp;thread</argument>,
<argument>const SharedPtr &amp;next_frame</argument>,
<argument>lldb_private::SymbolContext &amp;sym_ctx</argument>,
<argument>uint32_t frame_number</argument>,
<argument>lldb_private::UnwindLLDB &amp;unwind_lldb</argument>)</argument_list></macro></block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>RegisterContextUnwind</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>InvalidateAllRegisters</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetRegisterCount</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterInfo</name> <operator>*</operator><macro><name>GetRegisterInfoAtIndex</name><argument_list>(<argument>size_t reg</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetRegisterSetCount</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterSet</name> <operator>*</operator><macro><name>GetRegisterSet</name><argument_list>(<argument>size_t reg_set</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReadRegister</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>RegisterValue</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WriteRegister</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterValue</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReadAllRegisterValues</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WriteAllRegisterValues</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DataBufferSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ConvertRegisterKindToRegisterNumber</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>kind</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>num</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsTrapHandlerFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetCFA</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>cfa</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetStartPC</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>start_pc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReadPC</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>start_pc</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>BehavesLikeZerothFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<enum>enum <name>FrameType</name> <block>{
<decl><name>eNormalFrame</name></decl>,
<decl><name>eTrapHandlerFrame</name></decl>,
<decl><name>eDebuggerFrame</name></decl>,

<decl><name>eSkipFrame</name></decl>,

<decl><name>eNotAValidFrame</name></decl>

}</block>;</enum>


<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>UnwindLLDB</name></decl>;</decl_stmt>



<function_decl><type><name>bool</name></type> <name>CheckIfLoopingStack</name><parameter_list>()</parameter_list>;</function_decl>



<expr_stmt><expr><name>bool</name> <macro><name>IsFrameZero</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>InitializeZerothFrame</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>InitializeNonZerothFrame</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>SharedPtr</name> <macro><name>GetNextFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>SharedPtr</name> <macro><name>GetPrevFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<expr_stmt><expr><name>bool</name> <macro><name>IsSkipFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>IsTrapHandlerSymbol</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>SymbolContext</name> <operator>&amp;</operator><name>m_sym_ctx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>PropagateTrapHandlerFlagFromUnwindPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>unwind_plan</name></expr></argument>)</argument_list></decl>;</decl_stmt>



















<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>UnwindLLDB</name><operator>::</operator><name>RegisterSearchResult</name>
<macro><name>SavedLocationForRegister</name><argument_list>(<argument>uint32_t lldb_regnum</argument>,
<argument>lldb_private::UnwindLLDB::RegisterLocation &amp;regloc</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReadRegisterValueFromRegisterLocation</name><argument_list>(
<argument><expr><name>lldb_private</name><operator>::</operator><name>UnwindLLDB</name><operator>::</operator><name>RegisterLocation</name> <name>regloc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>RegisterValue</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WriteRegisterValueToRegisterLocation</name><argument_list>(
<argument><expr><name>lldb_private</name><operator>::</operator><name>UnwindLLDB</name><operator>::</operator><name>RegisterLocation</name> <name>regloc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>RegisterValue</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>











<function_decl><type><name>bool</name></type> <name>TryFallbackUnwindPlan</name><parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>bool</name></type> <name>ForceSwitchToFallbackUnwindPlan</name><parameter_list>()</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>bool</name></type> <name>ReadGPRValue</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>register_kind</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>regnum</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReadGPRValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterNumber</name> <operator>&amp;</operator><name>reg_num</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ReadFrameAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>register_kind</name></expr></argument>,
<argument><expr><name>UnwindPlan</name><operator>::</operator><name>Row</name><operator>::</operator><name>FAValue</name> <operator>&amp;</operator><name>fa</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetFastUnwindPlanForFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetFullUnwindPlanForFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>UnwindLogMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)</block_content></block></decl>)</decl_stmt>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>UnwindLogMsgVerbose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsUnwindPlanValidForCurrentPC</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>unwind_plan_sp</name></expr></argument>,
<argument><expr><name>int</name> <operator>&amp;</operator><name>valid_pc_offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetReturnAddressHint</name><argument_list>(<argument>int32_t plan_offset</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>&amp;</operator><name>m_thread</name></expr>;</expr_stmt>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_fast_unwind_plan_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_full_unwind_plan_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_fallback_unwind_plan_sp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_all_registers_available</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_frame_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_cfa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_afa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Address</name> <name>m_start_pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Address</name> <name>m_current_pc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_current_offset</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>int</name></type> <name>m_current_offset_backed_up_one</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_behaves_like_zeroth_frame</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>SymbolContext</name> <operator>&amp;</operator><name>m_sym_ctx</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_sym_ctx_valid</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_frame_number</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>lldb_private</name><operator>::</operator><name>UnwindLLDB</name><operator>::</operator><name>RegisterLocation</name></expr></argument>&gt;</argument_list></name>
<name>m_registers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>UnwindLLDB</name> <operator>&amp;</operator><name>m_parent_unwind</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RegisterContextUnwind</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterContextUnwind</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RegisterContextUnwind</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>RegisterContextUnwind</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
