<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionValueString.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONVALUESTRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONVALUESTRING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OptionValueString</name> <range>: <expr><name>public</name> <name><name>Cloneable</name><argument_list type="generic">&lt;<argument><expr><name>OptionValueString</name></expr></argument>, <argument><expr><name>OptionValue</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>Status</name></type> (<modifier>*</modifier><name>ValidatorCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

enum <name>Options</name> <block>{ <expr><name>eOptionEncodeCharacterEscapeSequences</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> }</block></block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OptionValueString</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>OptionValueString</name><argument_list>(<argument>ValidatorCallback validator</argument>, <argument>void *baton = nullptr</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_validator</name><argument_list>(<argument><expr><name>validator</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_validator_baton</name><argument_list>(<argument>baton</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>OptionValueString</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_current_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_default_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

OptionValueString(const char *current_value</block><operator>,</operator> <expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>default_value</name></expr></expr_stmt></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><name>current_value</name> <operator>&amp;&amp;</operator> <name><name>current_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_current_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>current_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>default_value</name> <operator>&amp;&amp;</operator> <name><name>default_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_default_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>default_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>OptionValueString</name><argument_list>(<argument>const char *value</argument>, <argument>ValidatorCallback validator</argument>,
<argument>void *baton = nullptr</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_validator</name><argument_list>(<argument><expr><name>validator</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_validator_baton</name><argument_list>(<argument>baton</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_current_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_default_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
}

OptionValueString<expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>current_value</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>default_value</name><operator>,</operator>
<name>ValidatorCallback</name> <name>validator</name><operator>,</operator> <name>void</name> <operator>*</operator><name>baton</name> <operator>=</operator> <name>nullptr</name><operator>)</operator>
<operator>:</operator> <call><name>m_validator</name><argument_list>(<argument><expr><name>validator</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_validator_baton</name><argument_list>(<argument>baton</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>current_value</name> <operator>&amp;&amp;</operator> <name><name>current_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_current_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>current_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>default_value</name> <operator>&amp;&amp;</operator> <name><name>default_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_default_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>default_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}

~<macro><name>OptionValueString</name><argument_list>()</argument_list></macro> <expr_stmt><expr><name>override</name> <operator>=</operator> default</expr>;</expr_stmt>



<expr_stmt><expr><name>OptionValue</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>eTypeString</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DumpValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>dump_mask</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type>
<name>SetValueFromString</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>,
<argument><expr><name>VarSetOperationType</name> <name>op</name> <operator>=</operator> <name>eVarSetOperationAssign</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> override <block>{<block_content>
<expr_stmt><expr><name>m_current_value</name> <operator>=</operator> <name>m_default_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_value_was_set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>GetOptions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_options</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><macro><name>GetOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_options</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>value</name><operator>)</operator> <block>{
<expr><call><name>SetCurrentValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_current_value</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetCurrentValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_current_value</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetCurrentValueAsRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_current_value</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetDefaultValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_default_value</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetDefaultValueAsRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_default_value</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>SetCurrentValue</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>Status</name></type> <name>AppendToCurrentValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SetDefaultValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_default_value</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_default_value</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsCurrentValueEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_current_value</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsDefaultValueEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_default_value</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_current_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_default_value</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValidatorCallback</name></type> <name>m_validator</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_validator_baton</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
