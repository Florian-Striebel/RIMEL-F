<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/CommandInterpreter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_COMMANDINTERPRETER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_COMMANDINTERPRETER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Debugger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/IOHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/CommandAlias.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/CommandHistory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/CommandObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/ScriptInterpreter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Args.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StreamString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandInterpreter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CommandInterpreterRunResult</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CommandInterpreterRunResult</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_num_errors</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CommandInterpreterResult</name> <macro><name>GetResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_result</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsResult</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>CommandInterpreterResult</name> <name>result</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>m_result</name> <operator>==</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name></type> <name>CommandInterpreter</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>IncrementNumberOfErrors</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_num_errors</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>SetResult</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>CommandInterpreterResult</name> <name>result</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_result</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>m_num_errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CommandInterpreterResult</name> <name>m_result</name> <operator>=</operator>
<name>lldb</name><operator>::</operator><name>eCommandInterpreterResultSuccess</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CommandInterpreterRunOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
































<macro><name>CommandInterpreterRunOptions</name><argument_list>(<argument>LazyBool stop_on_continue</argument>,
<argument>LazyBool stop_on_error</argument>, <argument>LazyBool stop_on_crash</argument>,
<argument>LazyBool echo_commands</argument>, <argument>LazyBool echo_comments</argument>,
<argument>LazyBool print_results</argument>, <argument>LazyBool print_errors</argument>,
<argument>LazyBool add_to_history</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_stop_on_continue</name><argument_list>(<argument><expr><name>stop_on_continue</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_stop_on_error</name><argument_list>(<argument><expr><name>stop_on_error</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_stop_on_crash</name><argument_list>(<argument><expr><name>stop_on_crash</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_echo_commands</name><argument_list>(<argument><expr><name>echo_commands</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_echo_comment_commands</name><argument_list>(<argument><expr><name>echo_comments</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_print_results</name><argument_list>(<argument><expr><name>print_results</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_print_errors</name><argument_list>(<argument><expr><name>print_errors</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_add_to_history</name><argument_list>(<argument>add_to_history</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>CommandInterpreterRunOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>void</name></type> <name>SetSilent</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>silent</name></expr> ?</condition><then> <expr><name>eLazyBoolNo</name></expr> </then><else>: <expr><name>eLazyBoolYes</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>m_print_results</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_print_errors</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_echo_commands</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_echo_comment_commands</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_add_to_history</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>





<expr_stmt><expr><name>bool</name> <macro><name>GetStopOnContinue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToNo</name><argument_list>(<argument><expr><name>m_stop_on_continue</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetStopOnContinue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop_on_continue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_stop_on_continue</name> <operator>=</operator> <ternary><condition><expr><name>stop_on_continue</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetStopOnError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToNo</name><argument_list>(<argument><expr><name>m_stop_on_error</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetStopOnError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop_on_error</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_stop_on_error</name> <operator>=</operator> <ternary><condition><expr><name>stop_on_error</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetStopOnCrash</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToNo</name><argument_list>(<argument><expr><name>m_stop_on_crash</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetStopOnCrash</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop_on_crash</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_stop_on_crash</name> <operator>=</operator> <ternary><condition><expr><name>stop_on_crash</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetEchoCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToYes</name><argument_list>(<argument><expr><name>m_echo_commands</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetEchoCommands</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>echo_commands</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_echo_commands</name> <operator>=</operator> <ternary><condition><expr><name>echo_commands</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetEchoCommentCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>DefaultToYes</name><argument_list>(<argument><expr><name>m_echo_comment_commands</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetEchoCommentCommands</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>echo_comments</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_echo_comment_commands</name> <operator>=</operator> <ternary><condition><expr><name>echo_comments</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetPrintResults</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToYes</name><argument_list>(<argument><expr><name>m_print_results</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetPrintResults</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>print_results</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_print_results</name> <operator>=</operator> <ternary><condition><expr><name>print_results</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetPrintErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToYes</name><argument_list>(<argument><expr><name>m_print_errors</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetPrintErrors</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>print_errors</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_print_errors</name> <operator>=</operator> <ternary><condition><expr><name>print_errors</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetAddToHistory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToYes</name><argument_list>(<argument><expr><name>m_add_to_history</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetAddToHistory</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>add_to_history</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_add_to_history</name> <operator>=</operator> <ternary><condition><expr><name>add_to_history</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetAutoHandleEvents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>DefaultToYes</name><argument_list>(<argument><expr><name>m_auto_handle_events</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetAutoHandleEvents</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_handle_events</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_auto_handle_events</name> <operator>=</operator> <ternary><condition><expr><name>auto_handle_events</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetSpawnThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>DefaultToNo</name><argument_list>(<argument><expr><name>m_spawn_thread</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetSpawnThread</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>spawn_thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_spawn_thread</name> <operator>=</operator> <ternary><condition><expr><name>spawn_thread</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_stop_on_continue</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_stop_on_error</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_stop_on_crash</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_echo_commands</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_echo_comment_commands</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_print_results</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_print_errors</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_add_to_history</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_auto_handle_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_spawn_thread</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>DefaultToYes</name><parameter_list>(<parameter><decl><type><name>LazyBool</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>eLazyBoolNo</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DefaultToNo</name><parameter_list>(<parameter><decl><type><name>LazyBool</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>eLazyBoolYes</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CommandInterpreter</name> <range>: <expr><name>public</name> <name>Broadcaster</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>Properties</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>IOHandlerDelegate</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <block>{
<decl><name>eBroadcastBitThreadShouldExit</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitResetPrompt</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitQuitCommandReceived</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitAsynchronousOutputData</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitAsynchronousErrorData</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<enum>enum <name>ChildrenTruncatedWarningStatus</name>

<block>{ <decl><name>eNoTruncation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eUnwarnedTruncation</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>eWarnedTruncation</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>CommandTypes</name> <block>{
<decl><name>eCommandTypesBuiltin</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>eCommandTypesUserDef</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>eCommandTypesAliases</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>eCommandTypesHidden</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
<decl><name>eCommandTypesAllThem</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>
}</block>;</enum>

<macro><name>CommandInterpreter</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>bool synchronous_execution</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>CommandInterpreter</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>



<function_decl><type><specifier>static</specifier> <name>ConstString</name> <modifier>&amp;</modifier></type><name>GetStaticBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>ConstString</name> <operator>&amp;</operator><macro><name>GetBroadcasterClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>GetStaticBroadcasterClass</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>SourceInitFileCwd</name><parameter_list>(<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SourceInitFileHome</name><parameter_list>(<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_repl</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>AddCommand</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <operator>&amp;</operator><name>cmd_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>can_replace</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AddUserCommand</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <operator>&amp;</operator><name>cmd_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>can_replace</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <macro><name>GetCommandSPExact</name><argument_list>(<argument>llvm::StringRef cmd</argument>,
<argument>bool include_aliases = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CommandObject</name> <modifier>*</modifier></type><name>GetCommandObject</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>cmd</name></expr></argument>,
<argument><expr><name>StringList</name> <operator>*</operator><name>matches</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>StringList</name> <operator>*</operator><name>descriptions</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>CommandExists</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>cmd</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AliasExists</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>cmd</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>UserCommandExists</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>cmd</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>CommandAlias</name> <modifier>*</modifier></type><name>AddAlias</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>alias_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <operator>&amp;</operator><name>command_obj_sp</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>args_string</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>StringRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>RemoveCommand</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveAlias</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>alias_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetAliasFullName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>cmd</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>full_name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveUser</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>alias_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>RemoveAllUser</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_user_dict</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandAlias</name> <modifier>*</modifier></type><name>GetAlias</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>alias_name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>CommandObject</name> <modifier>*</modifier></type><name>BuildAliasResult</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>alias_name</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>raw_input_string</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>alias_result</name></expr></argument>,
<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>HandleCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_line</name></decl></parameter>, <parameter><decl><type><name>LazyBool</name></type> <name>add_to_history</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>override_context</name></decl></parameter>,
<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>HandleCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_line</name></decl></parameter>, <parameter><decl><type><name>LazyBool</name></type> <name>add_to_history</name></decl></parameter>,
<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>WasInterrupted</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
















<function_decl><type><name>void</name></type> <name>HandleCommands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>&amp;</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CommandInterpreterRunOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandleCommands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>&amp;</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CommandInterpreterRunOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>void</name></type> <name>HandleCommandsFromFile</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CommandInterpreterRunOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandleCommandsFromFile</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CommandInterpreterRunOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>CommandObject</name> <modifier>*</modifier></type><name>GetCommandObjectForCommand</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>command_line</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>GetAutoSuggestionForCommand</name><argument_list>(<argument>llvm::StringRef line</argument>)</argument_list></macro></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>HandleCompletion</name><parameter_list>(<parameter><decl><type><name>CompletionRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>HandleCompletionMatches</name><parameter_list>(<parameter><decl><type><name>CompletionRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetCommandNamesMatchingPartialString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_cstr</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>include_aliases</name></decl></parameter>,
<parameter><decl><type><name>StringList</name> <modifier>&amp;</modifier></type><name>matches</name></decl></parameter>,
<parameter><decl><type><name>StringList</name> <modifier>&amp;</modifier></type><name>descriptions</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetHelp</name><parameter_list>(<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>types</name> <init>= <expr><name>eCommandTypesAllThem</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetAliasHelp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias_name</name></decl></parameter>, <parameter><decl><type><name>StreamString</name> <modifier>&amp;</modifier></type><name>help_string</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>OutputFormattedHelpText</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>prefix</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>help_text</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>OutputFormattedHelpText</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>command_word</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>separator</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>help_text</name></expr></argument>, <argument><expr><name>size_t</name> <name>max_word_len</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>OutputHelpText</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>command_word</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>separator</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>help_text</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>max_word_len</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>GetDebugger</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_debugger</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>ExecutionContext</name> <macro><name>GetExecutionContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>GetPlatform</name><argument_list>(<argument>bool prefer_target_platform</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ProcessEmbeddedScriptCommands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>UpdatePrompt</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>prompt</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Confirm</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>message</name></expr></argument>, <argument><expr><name>bool</name> <name>default_answer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>LoadCommandDictionary</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Initialize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>HasCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasUserCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasAliasOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>BuildAliasCommandArgs</name><argument_list>(<argument><expr><name>CommandObject</name> <operator>*</operator><name>alias_cmd_obj</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>alias_name</name></expr></argument>, <argument><expr><name>Args</name> <operator>&amp;</operator><name>cmd_args</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>raw_input_string</name></expr></argument>,
<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>GetOptionArgumentPosition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in_string</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SkipLLDBInitFiles</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>skip_lldbinit_files</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_skip_lldbinit_files</name> <operator>=</operator> <name>skip_lldbinit_files</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SkipAppInitFiles</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>skip_app_init_files</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_skip_app_init_files</name> <operator>=</operator> <name>skip_app_init_files</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>GetSynchronous</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>FindCommandsForApropos</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>word</name></expr></argument>, <argument><expr><name>StringList</name> <operator>&amp;</operator><name>commands_found</name></expr></argument>,
<argument><expr><name>StringList</name> <operator>&amp;</operator><name>commands_help</name></expr></argument>,
<argument><expr><name>bool</name> <name>search_builtin_commands</name></expr></argument>,
<argument><expr><name>bool</name> <name>search_user_commands</name></expr></argument>,
<argument><expr><name>bool</name> <name>search_alias_commands</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>GetBatchCommandMode</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_batch_command_mode</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>SetBatchCommandMode</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>old_value</name> <init>= <expr><name>m_batch_command_mode</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m_batch_command_mode</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>old_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ChildrenTruncated</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_truncation_warning</name> <operator>==</operator> <name>eNoTruncation</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_truncation_warning</name> <operator>=</operator> <name>eUnwarnedTruncation</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>TruncationWarningNecessary</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>m_truncation_warning</name> <operator>==</operator> <name>eUnwarnedTruncation</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>TruncationWarningGiven</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_truncation_warning</name> <operator>=</operator> <name>eWarnedTruncation</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TruncationWarningText</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="string">"*** Some of your variables have more members than the debugger "</literal>
<literal type="string">"will show by default. To show all of them, you can either use the "</literal>
<literal type="string">"--show-all-children option to %s or raise the limit by changing "</literal>
<literal type="string">"the target.max-children-count setting.\n"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>CommandHistory</name> <modifier>&amp;</modifier></type><name>GetCommandHistory</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_command_history</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>IsActive</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>CommandInterpreterRunResult</name></type>
<name>RunCommandInterpreter</name><parameter_list>(<parameter><decl><type><name>CommandInterpreterRunOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetLLDBCommandsFromIOHandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>IOHandlerDelegate</name> <modifier>&amp;</modifier></type><name>delegate</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetPythonCommandsFromIOHandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>IOHandlerDelegate</name> <modifier>&amp;</modifier></type><name>delegate</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetCommandPrefix</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>GetExpandRegexAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetPromptOnQuit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetPromptOnQuit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetSaveSessionOnQuit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetSaveSessionOnQuit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>FileSpec</name> <macro><name>GetSaveSessionDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>SetSaveSessionDirectory</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetEchoCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetEchoCommands</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetEchoCommentCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetEchoCommentCommands</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetRepeatPreviousCommand</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CommandObject</name><operator>::</operator><name>CommandMap</name> <operator>&amp;</operator><macro><name>GetUserCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_user_dict</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CommandObject</name><operator>::</operator><name>CommandMap</name> <operator>&amp;</operator><macro><name>GetCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_command_dict</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CommandObject</name><operator>::</operator><name>CommandMap</name> <operator>&amp;</operator><macro><name>GetAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_alias_dict</name></expr>;</return> }</block></expr></expr_stmt>



<function_decl><type><name>void</name></type> <name>AllowExitCodeOnQuit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allow</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>LLVM_NODISCARD</name> <name>bool</name></type> <name>SetQuitExitCode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>int</name></type> <name>GetQuitExitCode</name><argument_list>(<argument><expr><name>bool</name> <operator>&amp;</operator><name>exited</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ResolveCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_line</name></decl></parameter>, <parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetStopCmdSourceOnError</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name>
<macro><name>GetIOHandler</name><argument_list>(<argument>bool force_create = false</argument>,
<argument>CommandInterpreterRunOptions *options = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetSpaceReplPrompts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>SaveTranscript</name><argument_list>(<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>output_file</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>None</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>FileSpec</name></type> <name>GetCurrentSourceDir</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Debugger</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>IOHandlerInputComplete</name><argument_list>(<argument><expr><name>IOHandler</name> <operator>&amp;</operator><name>io_handler</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>line</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function><type><name>ConstString</name></type> <name>IOHandlerGetControlSequence</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> override <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ConstString</name><argument_list>(<argument><expr><literal type="string">"quit\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>IOHandlerInterrupt</name><argument_list>(<argument><expr><name>IOHandler</name> <operator>&amp;</operator><name>io_handler</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>GetProcessOutput</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>DidProcessStopAbnormally</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetSynchronous</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <macro><name>GetCommandSP</name><argument_list>(<argument>llvm::StringRef cmd</argument>,
<argument>bool include_aliases = true</argument>,
<argument>bool exact = true</argument>,
<argument>StringList *matches = nullptr</argument>,
<argument>StringList *descriptions = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>OverrideExecutionContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>override_context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RestoreExecutionContext</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Status</name></type> <name>PreprocessCommand</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SourceInitFile</name><parameter_list>(<parameter><decl><type><name>FileSpec</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>CommandObject</name> <modifier>*</modifier></type><name>ResolveCommandImpl</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>command_line</name></expr></argument>,
<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FindCommandsForApropos</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>word</name></expr></argument>, <argument><expr><name>StringList</name> <operator>&amp;</operator><name>commands_found</name></expr></argument>,
<argument><expr><name>StringList</name> <operator>&amp;</operator><name>commands_help</name></expr></argument>,
<argument><expr><name>CommandObject</name><operator>::</operator><name>CommandMap</name> <operator>&amp;</operator><name>command_map</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>PrintCommandOutput</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>EchoCommandNonInteractive</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>line</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>io_handler_flags</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>CommandHandlingState</name> <block>{<block_content>
<expr_stmt><expr><name>eIdle</name></expr><operator>,</operator>
<expr><name>eInProgress</name></expr><operator>,</operator>
<expr><name>eInterrupted</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>CommandHandlingState</name></expr></argument>&gt;</argument_list></name> <name>m_command_state</name><block>{
<expr><name>CommandHandlingState</name><operator>::</operator><name>eIdle</name></expr>}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_iohandler_nesting_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>StartHandlingCommand</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FinishHandlingCommand</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>InterruptCommand</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>m_debugger</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>ExecutionContext</name></expr></argument>&gt;</argument_list></name> <name>m_overriden_exe_contexts</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_synchronous_execution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_skip_lldbinit_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_skip_app_init_files</name></decl>;</decl_stmt>
<expr_stmt><expr><name>CommandObject</name><operator>::</operator><name>CommandMap</name> <name>m_command_dict</name></expr>;</expr_stmt>


<expr_stmt><expr><name>CommandObject</name><operator>::</operator><name>CommandMap</name>
<name>m_alias_dict</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CommandObject</name><operator>::</operator><name>CommandMap</name> <name>m_user_dict</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CommandHistory</name></type> <name>m_command_history</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_repeat_command</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <name>m_command_io_handler_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>m_comment_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_batch_command_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChildrenTruncatedWarningStatus</name></type> <name>m_truncation_warning</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_command_source_depth</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>&gt;</argument_list></name> <name>m_command_source_dirs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>m_command_source_flags</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CommandInterpreterRunResult</name></type> <name>m_result</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>m_quit_exit_code</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_allow_exit_code</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StreamString</name></type> <name>m_transcript_stream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
