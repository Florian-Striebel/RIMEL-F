<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Trace.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_TRACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_TRACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/JSON.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/TraceCursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/TraceGDBRemotePackets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UnimplementedError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>




















<decl_stmt><decl><type><name>class</name></type> <name>Trace</name> <range>: <expr><name>public</name> <name>PluginInterface</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>std</name>::<name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Trace</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>








<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>







































<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TraceSP</name></expr></argument>&gt;</argument_list></name>
<macro><name>FindPluginForPostMortemProcess</name><argument_list>(<argument>Debugger &amp;debugger</argument>,
<argument>const llvm::json::Value &amp;trace_session_file</argument>,
<argument>llvm::StringRef session_file_dir</argument>)</argument_list></macro></expr>;</expr_stmt>













<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TraceSP</name></expr></argument>&gt;</argument_list></name>
<macro><name>FindPluginForLiveProcess</name><argument_list>(<argument>llvm::StringRef plugin_name</argument>, <argument>Process &amp;process</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>FindPluginSchema</name><argument_list>(<argument>llvm::StringRef plugin_name</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>CommandObjectSP</name>
<call><name>GetProcessTraceStartCommand</name><argument_list>(<argument><expr><name>CommandInterpreter</name> <operator>&amp;</operator><name>interpreter</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>CommandObjectSP</name>
<call><name>GetThreadTraceStartCommand</name><argument_list>(<argument><expr><name>CommandInterpreter</name> <operator>&amp;</operator><name>interpreter</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name> <call><name>GetSchema</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>TraceCursorUP</name> <call><name>GetCursor</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>













<function_decl><type><name>virtual</name> <name>void</name></type> <name>DumpTraceInfo</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>








<function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsTraced</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetStartConfigurationHelp</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>










<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>Start</name><argument_list>(
<argument>StructuredData::ObjectSP configuration = StructuredData::ObjectSP()</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>














<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>Start</name><argument_list>(
<argument>llvm::ArrayRef&lt;lldb::tid_t&gt; tids</argument>,
<argument>StructuredData::ObjectSP configuration = StructuredData::ObjectSP()</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>









<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>Stop</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name></expr></argument>&gt;</argument_list></name> <name>tids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>Stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <macro><name>GetPostMortemTraceFile</name><argument_list>(<argument>lldb::tid_t tid</argument>)</argument_list></macro></expr>;</expr_stmt>




<function_decl><type><name>uint32_t</name></type> <name>GetStopID</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>











<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>GetLiveThreadBinaryData</name><argument_list>(<argument>lldb::tid_t tid</argument>, <argument>llvm::StringRef kind</argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>GetLiveProcessBinaryData</name><argument_list>(<argument>llvm::StringRef kind</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetLiveThreadBinaryDataSize</name><argument_list>(<argument>lldb::tid_t tid</argument>,
<argument>llvm::StringRef kind</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetLiveProcessBinaryDataSize</name><argument_list>(<argument>llvm::StringRef kind</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Trace</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><call><name>Trace</name><argument_list>(<argument><expr><name>Process</name> <operator>&amp;</operator><name>live_process</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_live_process</name><argument_list>(<argument>&amp;live_process</argument>)</argument_list></macro> <block>{}</block>











<name>llvm</name><operator>::</operator><name>Error</name> <call><name>Start</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>json</name><operator>::</operator><name>Value</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>GetLiveProcessState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name>virtual</name> <name>void</name></type>
<name>DoRefreshLiveProcessState</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TraceGetStateResponse</name></expr></argument>&gt;</argument_list></name> <name>state</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>RefreshLiveProcessState</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_stop_id</name> <init>= <expr><name>LLDB_INVALID_STOP_ID</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>m_live_process</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>m_live_thread_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>m_live_process_data</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
