<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/DumpValueObjectOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_DUMPVALUEOBJECTOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_DUMPVALUEOBJECTOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DumpValueObjectOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>PointerDepth</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Mode</name> <block>{<block_content> <expr_stmt><expr><name>Always</name></expr><operator>,</operator> <expr><name>Default</name></expr><operator>,</operator> <expr><name>Never</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt> <expr_stmt><expr><name>m_mode</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>PointerDepth</name> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PointerDepth</name><block>{<expr><name>m_mode</name></expr>, <expr><name>m_count</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>PointerDepth</name><block>{<expr><name>m_mode</name></expr>, <expr><name>m_count</name></expr>}</block></expr>;</return>
}</block>

<decl><name>bool</name> <name>CanAllowExpansion</name><argument_list>()</argument_list> const</decl>;</struct>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>PointerAsArraySettings</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>m_element_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_base_element</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_stride</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PointerAsArraySettings</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>PointerAsArraySettings</name><argument_list>(<argument>size_t elem_count</argument>, <argument>size_t base_elem = <literal type="number">0</literal></argument>,
<argument>size_t stride = <literal type="number">1</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_element_count</name><argument_list>(<argument><expr><name>elem_count</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_base_element</name><argument_list>(<argument><expr><name>base_elem</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_stride</name><argument_list>(<argument>stride</argument>)</argument_list></macro> <expr><block>{}</block>

<name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_element_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>ConstString</name>, <name>ConstString</name>,
<specifier>const</specifier> <name>DumpValueObjectOptions</name> <operator>&amp;</operator>, <name>Stream</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>DeclPrintingHelper</name></expr>;</expr_stmt></typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>DumpValueObjectOptions</name></type> <name>DefaultOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>DumpValueObjectOptions</name></type> <name>g_default_options</name></decl>;</decl_stmt>

<return>return <expr><name>g_default_options</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>DumpValueObjectOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DumpValueObjectOptions</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type>
<name>SetMaximumPointerDepth</name><argument_list>(<argument><expr><name>PointerDepth</name> <name>depth</name> <operator>=</operator> <block>{<expr><name>PointerDepth</name><operator>::</operator><name>Mode</name><operator>::</operator><name>Never</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetMaximumDepth</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetDeclPrintingHelper</name><parameter_list>(<parameter><decl><type><name>DeclPrintingHelper</name></type> <name>helper</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetShowTypes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>show</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetShowLocation</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>show</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetUseObjectiveC</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetShowSummary</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>show</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type>
<name>SetUseDynamicType</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>dyn</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eNoDynamicValues</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetUseSyntheticValue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_synthetic</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetScopeChecked</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>check</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetFlatOutput</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flat</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetOmitSummaryDepth</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetIgnoreCap</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetRawDisplay</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetFormat</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eFormatDefault</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type>
<name>SetSummary</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <name>summary</name> <operator>=</operator> <name>lldb</name><operator>::</operator><call><name>TypeSummaryImplSP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetRootValueObjectName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetHideRootType</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hide_root_type</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetHideName</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hide_name</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetHideValue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hide_value</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetHidePointerValue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hide</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetVariableFormatDisplayLanguage</name><argument_list>(
<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eLanguageTypeUnknown</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetRunValidator</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>run</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetUseTypeDisplayName</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>dis</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetAllowOnelinerMode</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>oneliner</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetRevealEmptyAggregates</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>reveal</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type><name>SetElementCount</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>element_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DumpValueObjectOptions</name> <modifier>&amp;</modifier></type>
<name>SetPointerAsArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PointerAsArraySettings</name> <modifier>&amp;</modifier></type><name>ptr_array</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_max_depth</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>m_use_dynamic</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eNoDynamicValues</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_omit_summary_depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>m_format</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eFormatDefault</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <name>m_summary_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_root_valobj_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>m_varformat_language</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eLanguageTypeUnknown</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PointerDepth</name></type> <name>m_max_ptr_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclPrintingHelper</name></type> <name>m_decl_printing_helper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PointerAsArraySettings</name></type> <name>m_pointer_as_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_use_synthetic</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_scope_already_checked</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_flat_output</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_ignore_cap</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_show_types</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_show_location</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_use_objc</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_hide_root_type</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_hide_name</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_hide_value</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_run_validator</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_use_type_display_name</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_allow_oneliner_mode</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_hide_pointer_value</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_reveal_empty_aggregates</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
