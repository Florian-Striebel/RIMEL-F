<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/ModuleList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_MODULELIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_MODULELIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UserSettingsController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/RWMutex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ConstString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileSpecList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RegularExpression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UUID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VariableList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleListProperties</name> <range>: <expr><name>public</name> <name>Properties</name> <block>{
<expr><name>mutable</name> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>RWMutex</name> <name>m_symlink_paths_mutex</name></expr>;
<expr><name>PathMappingList</name> <name>m_symlink_paths</name></expr>;

<expr><name>void</name> <call><name>UpdateSymlinkMappings</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ModuleListProperties</name><argument_list>()</argument_list></call></expr>;

<expr><name>FileSpec</name> <macro><name>GetClangModulesCachePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <call><name>SetClangModulesCachePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>GetEnableExternalLookup</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>SetEnableExternalLookup</name><argument_list>(<argument>bool new_value</argument>)</argument_list></macro></expr>;

<expr><name>PathMappingList</name> <macro><name>GetSymlinkMappings</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ModuleList</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Notifier</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Notifier</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>NotifyModuleAdded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>NotifyModuleRemoved</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>NotifyModuleUpdated</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>old_module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>new_module_sp</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>NotifyWillClearList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>NotifyModulesRemoved</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<expr_stmt><expr><call><name>ModuleList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>ModuleList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ModuleList</name><argument_list>(<argument><expr><name>ModuleList</name><operator>::</operator><name>Notifier</name> <operator>*</operator><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>ModuleList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>










<decl_stmt><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>















<decl_stmt><decl><type><name>void</name></type> <name>Append</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>notify</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>













<decl_stmt><decl><type><name>void</name></type> <name>ReplaceEquivalent</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>old_modules</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>












<decl_stmt><decl><type><name>bool</name></type> <name>AppendIfNeeded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>notify</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AppendIfNeeded</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ReplaceModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>old_module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>new_module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>LogUUIDAndPaths</name><parameter_list>(<parameter><decl><type><name>Log</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix_cstr</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>GetMutex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_modules_mutex</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetIndexForModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>module</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>GetModuleAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>GetModuleAtIndexUnlocked</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>GetModulePointerAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>












<decl_stmt><decl><type><name>void</name></type> <name>FindCompileUnits</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>FindFunctions</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <name>name_type_mask</name></expr></argument>,
<argument><expr><name>bool</name> <name>include_symbols</name></expr></argument>, <argument><expr><name>bool</name> <name>include_inlines</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>FindFunctionSymbols</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <name>name_type_mask</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>FindFunctions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegularExpression</name> <modifier>&amp;</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_symbols</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>include_inlines</name></decl></parameter>, <parameter><decl><type><name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>)</parameter_list>;</function_decl>













<decl_stmt><decl><type><name>void</name></type> <name>FindGlobalVariables</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><name>size_t</name> <name>max_matches</name></expr></argument>,
<argument><expr><name>VariableList</name> <operator>&amp;</operator><name>variable_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>












<decl_stmt><decl><type><name>void</name></type> <name>FindGlobalVariables</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>size_t</name> <name>max_matches</name></expr></argument>,
<argument><expr><name>VariableList</name> <operator>&amp;</operator><name>variable_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>














<decl_stmt><decl><type><name>void</name></type> <name>FindModules</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>,
<argument><expr><name>ModuleList</name> <operator>&amp;</operator><name>matching_module_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>FindModule</name><argument_list>(<argument>const Module *module_ptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>FindModule</name><argument_list>(<argument>const UUID &amp;uuid</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>FindFirstModule</name><argument_list>(<argument>const ModuleSpec &amp;module_spec</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FindSymbolsWithNameAndType</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FindSymbolsMatchingRegExAndType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

















<decl_stmt><decl><type><name>void</name></type> <name>FindTypes</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>search_first</name></expr></argument>, <argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>bool</name> <name>name_is_fully_qualified</name></expr></argument>, <argument><expr><name>size_t</name> <name>max_matches</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>SymbolFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>searched_symbol_files</name></expr></argument>,
<argument><expr><name>TypeList</name> <operator>&amp;</operator><name>types</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FindSourceFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>orig_spec</name></expr></argument>, <argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>new_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






















<decl_stmt><decl><type><name>void</name></type> <name>FindAddressesForLine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>,
<argument><expr><name>Function</name> <operator>*</operator><name>function</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Address</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>output_local</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Address</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>output_extern</name></expr></argument>)</argument_list></decl>;</decl_stmt>















<decl_stmt><decl><type><name>bool</name></type> <name>Remove</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>notify</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>RemoveIfOrphaned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>module_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>RemoveOrphans</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>mandatory</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ResolveFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>ResolveSymbolContextForAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>,
<argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>ResolveSymbolContextForFilePath</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file_path</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>bool</name> <name>check_inlines</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>, <argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>ResolveSymbolContextsForFileSpec</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>bool</name> <name>check_inlines</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>, <argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>GetSize</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>LoadScriptingResourcesInTarget</name><argument_list>(<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Status</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>errors</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>*</operator><name>feedback_stream</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <name>continue_on_error</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ModuleListProperties</name> <modifier>&amp;</modifier></type><name>GetGlobalModuleListProperties</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ModuleIsInCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>module_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type>
<name>GetSharedModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>module_search_paths_ptr</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>old_modules</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>did_create_ptr</name></expr></argument>, <argument><expr><name>bool</name> <name>always_create</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>RemoveSharedModule</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FindSharedModules</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleSpec</name> <modifier>&amp;</modifier></type><name>module_spec</name></decl></parameter>,
<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>matching_module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>RemoveOrphanSharedModules</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>mandatory</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RemoveSharedModuleIfOrphaned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>module_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ForEach</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier>
<operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name></expr></argument>&gt;</argument_list></name>
<name>collection</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>void</name></type> <name>AppendImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>use_notifier</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>use_notifier</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <macro><name>RemoveImpl</name><argument_list>(<argument>collection::iterator pos</argument>,
<argument>bool use_notifier = true</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>ClearImpl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_notifier</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>collection</name></type> <name>m_modules</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_modules_mutex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Notifier</name> <modifier>*</modifier></type><name>m_notifier</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name><name>LockingAdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name></expr></argument>, <argument><expr><name>vector_adapter</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name></type>
<name>ModuleIterable</name>;</typedef>
<expr_stmt><expr><name>ModuleIterable</name> <macro><name>Modules</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>ModuleIterable</name><argument_list>(<argument><expr><name>m_modules</name></expr></argument>, <argument><expr><call><name>GetMutex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<typedef>typedef <type><name><name>AdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name></expr></argument>, <argument><expr><name>vector_adapter</name></expr></argument>&gt;</argument_list></name></type>
<name>ModuleIterableNoLocking</name>;</typedef>
<expr_stmt><expr><name>ModuleIterableNoLocking</name> <macro><name>ModulesNoLocking</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>ModuleIterableNoLocking</name><argument_list>(<argument><expr><name>m_modules</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
