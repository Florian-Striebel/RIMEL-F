<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanCallFunctionUsingABI.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANCALLFUNCTIONUSINGABI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANCALLFUNCTIONUSINGABI_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlanCallFunction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/DerivedTypes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanCallFunctionUsingABI</name> <range>: <expr><name>public</name> <name>ThreadPlanCallFunction</name> <block>{






<expr><name>public</name><operator>:</operator>
<call><name>ThreadPlanCallFunctionUsingABI</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>function_address</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>&amp;</operator><name>function_prototype</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>&amp;</operator><name>return_type</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ABI</name><operator>::</operator><name>CallArgument</name></expr></argument>&gt;</argument_list></name> <name>args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ThreadPlanCallFunctionUsingABI</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>SetReturnValue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>Type</name> <operator>&amp;</operator><name>m_return_type</name></expr>;
<expr><call><name>ThreadPlanCallFunctionUsingABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlanCallFunctionUsingABI</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator>
<name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ThreadPlanCallFunctionUsingABI</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ThreadPlanCallFunctionUsingABI</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
