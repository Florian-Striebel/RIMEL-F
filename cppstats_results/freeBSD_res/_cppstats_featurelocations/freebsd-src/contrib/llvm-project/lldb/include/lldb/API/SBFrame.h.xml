<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBFrame.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBFRAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBFRAME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBValueList.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBFrame</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBFrame</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsEqual</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>that</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetFrameID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetCFA</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetPC</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetPC</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>new_pc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <macro><name>GetPCAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContext</name> <macro><name>GetSymbolContext</name><argument_list>(<argument>uint32_t resolve_scope</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <macro><name>GetModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <macro><name>GetCompileUnit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFunction</name> <macro><name>GetFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbol</name> <macro><name>GetSymbol</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBlock</name> <macro><name>GetBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>














<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFunctionName</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDisplayFunctionName</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetFunctionName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GuessLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>bool</name></type> <name>IsInlined</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsInlined</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsArtificial</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsArtificial</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>EvaluateExpression</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>EvaluateExpression</name><argument_list>(<argument>const char *expr</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>EvaluateExpression</name><argument_list>(<argument>const char *expr</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>,
<argument>bool unwind_on_error</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>EvaluateExpression</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBlock</name> <macro><name>GetFrameBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBLineEntry</name> <macro><name>GetLineEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <macro><name>GetThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Disassemble</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValueList</name> <macro><name>GetVariables</name><argument_list>(<argument>bool arguments</argument>, <argument>bool locals</argument>, <argument>bool statics</argument>,
<argument>bool in_scope_only</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValueList</name> <macro><name>GetVariables</name><argument_list>(<argument>bool arguments</argument>, <argument>bool locals</argument>, <argument>bool statics</argument>,
<argument>bool in_scope_only</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValueList</name> <call><name>GetVariables</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBVariablesOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValueList</name> <call><name>GetRegisters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>FindRegister</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>FindVariable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>FindVariable</name><argument_list>(<argument>const char *var_name</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>GetValueForVariablePath</name><argument_list>(<argument>const char *var_expr_cstr</argument>,
<argument>DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>GetValueForVariablePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>var_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>FindValue</name><argument_list>(<argument>const char *name</argument>, <argument>ValueType value_type</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>FindValue</name><argument_list>(<argument>const char *name</argument>, <argument>ValueType value_type</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SBFrame</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>lldb_object_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBExecutionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBInstruction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetFrameSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetFrameSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>lldb_object_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExecutionContextRefSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
