<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/LoadedModuleInfoList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_LOADEDMODULEINFOLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_LOADEDMODULEINFOLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>LoadedModuleInfoList</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>LoadedModuleInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>e_data_point</name> <block>{
<decl><name>e_has_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>e_has_base</name></decl>,
<decl><name>e_has_dynamic</name></decl>,
<decl><name>e_has_link_map</name></decl>,
<decl><name>e_num</name></decl>
}</block>;</enum>

<macro><name>LoadedModuleInfo</name><argument_list>()</argument_list></macro> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>e_num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m_has</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>set_name</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>name</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_has</name><index>[<expr><name>e_has_name</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>get_name</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>out</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>m_name</name></expr>;</expr_stmt>
<return>return <expr><name><name>m_has</name><index>[<expr><name>e_has_name</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>set_base</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <name>base</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_has</name><index>[<expr><name>e_has_base</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>get_base</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>out</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>m_base</name></expr>;</expr_stmt>
<return>return <expr><name><name>m_has</name><index>[<expr><name>e_has_base</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>set_base_is_offset</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_offset</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_base_is_offset</name> <operator>=</operator> <name>is_offset</name></expr>;</expr_stmt> </block_content>}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name>get_base_is_offset</name><argument_list>(<argument><expr><name>bool</name> <operator>&amp;</operator><name>out</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>m_base_is_offset</name></expr>;</expr_stmt>
<return>return <expr><name><name>m_has</name><index>[<expr><name>e_has_base</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>set_link_map</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_link_map</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_has</name><index>[<expr><name>e_has_link_map</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>get_link_map</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>out</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>m_link_map</name></expr>;</expr_stmt>
<return>return <expr><name><name>m_has</name><index>[<expr><name>e_has_link_map</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>set_dynamic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_dynamic</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_has</name><index>[<expr><name>e_has_dynamic</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>get_dynamic</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>out</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>m_dynamic</name></expr>;</expr_stmt>
<return>return <expr><name><name>m_has</name><index>[<expr><name>e_has_dynamic</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_info</name><argument_list>(<argument><expr><name>e_data_point</name> <name>datum</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>datum</name> <operator>&lt;</operator> <name>e_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>m_has</name><index>[<expr><name>datum</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>LoadedModuleInfo</name> <specifier>const</specifier> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>e_num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_has</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>m_has</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>

return (m_base == rhs.m_base</block></for>) <operator>&amp;&amp;</operator> <operator>(</operator><name>m_link_map</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_link_map</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>m_dynamic</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_dynamic</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>m_name</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_name</name></name><operator>)</operator></block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name><name>m_has</name><index>[<expr><name>e_num</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_link_map</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_base</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_base_is_offset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_dynamic</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>LoadedModuleInfoList</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_list</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>add</name><argument_list>(<argument>const LoadedModuleInfo &amp;mod</argument>)</argument_list></macro> <block>{ <expr><call><name><name>m_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>m_list</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LoadedModuleInfo</name></expr></argument>&gt;</argument_list></name> <name>m_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_link_map</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
