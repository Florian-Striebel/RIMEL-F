<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/FormatManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_FORMATMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_FORMATMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatClasses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormattersContainer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/LanguageCategory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeCategory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeCategoryMap.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>







<decl_stmt><decl><type><name>class</name></type> <name>FormatManager</name> <range>: <expr><name>public</name> <name>IFormatChangeListener</name> <block>{
<typedef>typedef <type><name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>TypeSummaryImpl</name></expr></argument>&gt;</argument_list></name></type> <name>NamedSummariesMap</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>TypeCategoryMap</name><operator>::</operator><name>MapType</name><operator>::</operator><name>iterator</name> <name>CategoryMapIterator</name></expr>;</expr_stmt></typedef>

<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>, <argument><expr><name>LanguageCategory</name><operator>::</operator><name>UniquePointer</name></expr></argument>&gt;</argument_list></name>
<name>LanguageCategories</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><call><name>FormatManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>FormatManager</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>NamedSummariesMap</name> <modifier>&amp;</modifier></type><name>GetNamedSummaryContainer</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>m_named_summaries_map</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type>
<name>EnableCategory</name><argument_list>(<argument><expr><name>ConstString</name> <name>category_name</name></expr></argument>,
<argument><expr><name>TypeCategoryMap</name><operator>::</operator><name>Position</name> <name>pos</name> <operator>=</operator> <name>TypeCategoryMap</name><operator>::</operator><name>Default</name></expr></argument>)</argument_list> <block>{<block_content>
<macro><name>EnableCategory</name><argument_list>(<argument>category_name</argument>, <argument>pos</argument>, <argument>{}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>EnableCategory</name><argument_list>(<argument><expr><name>ConstString</name> <name>category_name</name></expr></argument>,
<argument><expr><name>TypeCategoryMap</name><operator>::</operator><name>Position</name> <name>pos</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>TypeCategoryMap</name><operator>::</operator><name>ValueSP</name> <name>category_sp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>m_categories_map</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><name>category_name</name></expr></argument>, <argument><expr><name>category_sp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>category_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_categories_map</name><operator>.</operator><name>Enable</name></name><argument_list>(<argument><expr><name>category_sp</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>category_sp</name><operator>-&gt;</operator><name>AddLanguage</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>DisableCategory</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>category_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_categories_map</name><operator>.</operator><name>Disable</name></name><argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type>
<name>EnableCategory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <operator>&amp;</operator><name>category</name></expr></argument>,
<argument><expr><name>TypeCategoryMap</name><operator>::</operator><name>Position</name> <name>pos</name> <operator>=</operator> <name>TypeCategoryMap</name><operator>::</operator><name>Default</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_categories_map</name><operator>.</operator><name>Enable</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DisableCategory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <operator>&amp;</operator><name>category</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_categories_map</name><operator>.</operator><name>Disable</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>void</name></type> <name>EnableAllCategories</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DisableAllCategories</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>DeleteCategory</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>category_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_categories_map</name><operator>.</operator><name>Delete</name></name><argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ClearCategories</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_categories_map</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetCategoriesCount</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_categories_map</name><operator>.</operator><name>GetCount</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <macro><name>GetCategoryAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>m_categories_map</name><operator>.</operator><name>GetAtIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEachCategory</name><argument_list>(<argument><expr><name>TypeCategoryMap</name><operator>::</operator><name>ForEachCallback</name> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <macro><name>GetCategory</name><argument_list>(<argument>const char *category_name = nullptr</argument>,
<argument>bool can_create = true</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>category_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>GetCategory</name><argument_list>(<argument><expr><name>m_default_category_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>GetCategory</name><argument_list>(<argument><expr><call><name>ConstString</name><argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <macro><name>GetCategory</name><argument_list>(<argument>ConstString category_name</argument>,
<argument>bool can_create = true</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name>
<macro><name>GetFormatForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name>
<macro><name>GetSummaryForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeFilterImplSP</name>
<macro><name>GetFilterForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ScriptedSyntheticChildrenSP</name>
<macro><name>GetSyntheticForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name> <macro><name>GetFormat</name><argument_list>(<argument>ValueObject &amp;valobj</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <macro><name>GetSummaryFormat</name><argument_list>(<argument>ValueObject &amp;valobj</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name>
<macro><name>GetSyntheticChildren</name><argument_list>(<argument>ValueObject &amp;valobj</argument>, <argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>AnyMatches</name><argument_list>(<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>FormatCategoryItems</name> <name>items</name> <operator>=</operator>
<name>TypeCategoryImpl</name><operator>::</operator><name>ALL_ITEM_TYPES</name></expr></argument>,
<argument><expr><name>bool</name> <name>only_enabled</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>matching_category</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>FormatCategoryItems</name> <operator>*</operator><name>matching_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>m_categories_map</name><operator>.</operator><name>AnyMatches</name></name><argument_list>(<argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>only_enabled</name></expr></argument>,
<argument><expr><name>matching_category</name></expr></argument>, <argument><expr><name>matching_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetFormatFromCString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format_cstr</name></expr></argument>,
<argument><expr><name>bool</name> <name>partial_match_ok</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>GetFormatAsFormatChar</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFormatAsCString</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>Format</name> <macro><name>GetSingleItemFormat</name><argument_list>(<argument>lldb::Format vector_format</argument>)</argument_list></macro></expr>;</expr_stmt>





<function_decl><type><name>bool</name></type> <name>ShouldPrintAsOneLiner</name><parameter_list>(<parameter><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>valobj</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>void</name> <macro><name>Changed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><name>uint32_t</name></type> <name>GetCurrentRevision</name><parameter_list>()</parameter_list> override <block>{<block_content> <return>return <expr><name>m_last_revision</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>FormattersMatchVector</name></type>
<name>GetPossibleMatches</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>FormattersMatchVector</name></type> <name>matches</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetPossibleMatches</name><argument_list>(<argument><expr><name>valobj</name></expr></argument>, <argument><expr><call><name><name>valobj</name><operator>.</operator><name>GetCompilerType</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>use_dynamic</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>matches</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConstString</name></type> <name>GetTypeForCache</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LanguageCategory</name> <modifier>*</modifier></type><name>GetCategoryForLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetCandidateLanguages</name><argument_list>(<argument>lldb::LanguageType lang_type</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>GetPossibleMatches</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>,
<argument><expr><name>CompilerType</name> <name>compiler_type</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>,
<argument><expr><name>FormattersMatchVector</name> <operator>&amp;</operator><name>entries</name></expr></argument>,
<argument><expr><name>bool</name> <name>did_strip_ptr</name></expr></argument>, <argument><expr><name>bool</name> <name>did_strip_ref</name></expr></argument>,
<argument><expr><name>bool</name> <name>did_strip_typedef</name></expr></argument>,
<argument><expr><name>bool</name> <name>root_level</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>m_last_revision</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FormatCache</name></type> <name>m_format_cache</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_language_categories_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LanguageCategories</name></type> <name>m_language_categories_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NamedSummariesMap</name></type> <name>m_named_summaries_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TypeCategoryMap</name></type> <name>m_categories_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_default_category_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_system_category_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_vectortypes_category_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name>
<name>ImplSP</name></type> <name>Get</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name> <name>ImplSP</name></type> <name>GetCached</name><parameter_list>(<parameter><decl><type><name>FormattersMatchData</name> <modifier>&amp;</modifier></type><name>match_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name> <name>ImplSP</name></type> <name>GetHardcoded</name><parameter_list>(<parameter><decl><type><name>FormattersMatchData</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>TypeCategoryMap</name> <modifier>&amp;</modifier></type><name>GetCategories</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_categories_map</name></expr>;</return> </block_content>}</block></function>







<function_decl><type><name>void</name></type> <name>LoadSystemFormatters</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>LoadVectorFormatters</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FormattersMatchData</name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
