<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/HostInfoBase.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_HOSTINFOBASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_HOSTINFOBASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UUID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserIDResolver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/XcodeSDK.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileSpec</name></decl>;</decl_stmt>

<struct>struct <name>SharedCacheImageInfo</name> <block>{
<decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <name>data_sp</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>HostInfoBase</name> <block>{<block_content>
<label><name>private</name>:</label>

<expr_stmt><expr><call><name>HostInfoBase</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>HostInfoBase</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>public</name>:</label>




<decl_stmt><decl><type><name>using</name></type> <name>SharedLibraryDirectoryHelper</name> <init>= <expr><call><name>void</name><argument_list>(<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>this_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>SharedLibraryDirectoryHelper</name> <modifier>*</modifier></type><name>helper</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Terminate</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <call><name>GetTargetTriple</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<enum>enum <name>ArchitectureKind</name> <block>{
<decl><name>eArchKindDefault</name></decl>,

<decl><name>eArchKind32</name></decl>,

<decl><name>eArchKind64</name></decl>

}</block>;</enum>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type>
<name>GetArchitecture</name><parameter_list>(<parameter><decl><type><name>ArchitectureKind</name></type> <name>arch_kind</name> <init>= <expr><name>eArchKindDefault</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ArchitectureKind</name></expr></argument>&gt;</argument_list></name> <macro><name>ParseArchitectureKind</name><argument_list>(<argument>llvm::StringRef kind</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetShlibDir</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetSupportExeDir</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetHeaderDir</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetSystemPluginDir</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetUserPluginDir</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetProcessTempDir</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetGlobalTempDir</name><parameter_list>()</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>ArchSpec</name></type> <name>GetAugmentedArchSpec</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputePathRelativeToLibrary</name><argument_list>(<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetXcodeContentsDirectory</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><block>{}</block></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetXcodeDeveloperDirectory</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><block>{}</block></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetXcodeSDKPath</name><argument_list>(<argument>XcodeSDK sdk</argument>)</argument_list></macro> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>SharedCacheImageInfo</name></type>
<name>GetSharedCacheImageInfo</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>image_name</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><block>{}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeSharedLibraryDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeSupportExeDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeProcessTempFileDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeGlobalTempFileDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeTempFileBaseDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeHeaderDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeSystemPluginsDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ComputeUserPluginsDirectory</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ComputeHostArchitectureSupport</name><parameter_list>(<parameter><decl><type><name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch_32</name></decl></parameter>,
<parameter><decl><type><name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch_64</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
