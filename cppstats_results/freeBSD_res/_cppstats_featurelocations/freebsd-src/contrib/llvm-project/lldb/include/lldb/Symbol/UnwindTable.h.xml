<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/UnwindTable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_UNWINDTABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_UNWINDTABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>UnwindTable</name> <block>{<block_content>
<label><name>public</name>:</label>

<function_decl><type><name>explicit</name></type> <name>UnwindTable</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>&amp;</modifier></type><name>module</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><operator>~</operator><call><name>UnwindTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>CallFrameInfo</name> <operator>*</operator><call><name>GetObjectFileUnwindInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>DWARFCallFrameInfo</name> <operator>*</operator><call><name>GetEHFrameInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>DWARFCallFrameInfo</name> <operator>*</operator><call><name>GetDebugFrameInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>CompactUnwindInfo</name> <operator>*</operator><call><name>GetCompactUnwindInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ArmUnwindInfo</name> <modifier>*</modifier></type><name>GetArmUnwindInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>SymbolFile</name> <modifier>*</modifier></type><name>GetSymbolFile</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FuncUnwindersSP</name> <call><name>GetFuncUnwindersContainingAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>,
<argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>GetAllowAssemblyEmulationUnwindPlans</name><parameter_list>()</parameter_list>;</function_decl>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FuncUnwindersSP</name>
<call><name>GetUncachedFuncUnwindersContainingAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>,
<argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ArchSpec</name></type> <name>GetArchitecture</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Initialize</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>AddressRange</name></expr></argument>&gt;</argument_list></name> <call><name>GetAddressRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>,
<argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>FuncUnwindersSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>Module</name> <modifier>&amp;</modifier></type><name>m_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_unwinds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_initialized</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallFrameInfo</name></expr></argument>&gt;</argument_list></name> <name>m_object_file_unwind_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DWARFCallFrameInfo</name></expr></argument>&gt;</argument_list></name> <name>m_eh_frame_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DWARFCallFrameInfo</name></expr></argument>&gt;</argument_list></name> <name>m_debug_frame_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompactUnwindInfo</name></expr></argument>&gt;</argument_list></name> <name>m_compact_unwind_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ArmUnwindInfo</name></expr></argument>&gt;</argument_list></name> <name>m_arm_unwind_up</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnwindTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnwindTable</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UnwindTable</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>UnwindTable</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
