<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/TaggedASTType.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_TAGGEDASTTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_TAGGEDASTTYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name> <name>C</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>TaggedASTType</name> <range>: <expr><name>public</name> <name>CompilerType</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>TaggedASTType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>compiler_type</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>CompilerType</name><argument_list>(<argument>compiler_type</argument>)</argument_list></macro> <block>{}</block>

<macro><name>TaggedASTType</name><argument_list>(<argument>lldb::opaque_compiler_type_t type</argument>, <argument>TypeSystem *type_system</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>CompilerType</name><argument_list>(<argument>type_system</argument>, <argument>type</argument>)</argument_list></macro> <block>{}</block>

<call><name>TaggedASTType</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>TaggedASTType</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>tw</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>CompilerType</name><argument_list>(<argument>tw</argument>)</argument_list></macro> <block>{}</block>

<call><name>TaggedASTType</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>CompilerType</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>TaggedASTType</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name><name>TaggedASTType</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name><name>TaggedASTType</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>tw</name><operator>)</operator> <block>{
<expr><name>CompilerType</name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>tw</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
}</expr>;


<typedef>typedef <type><name><name>TaggedASTType</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>TypeFromParser</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name><name>TaggedASTType</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>TypeFromUser</name>;</typedef>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
