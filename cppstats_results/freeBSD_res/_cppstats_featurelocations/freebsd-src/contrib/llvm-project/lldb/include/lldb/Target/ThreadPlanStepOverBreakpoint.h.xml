<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanStepOverBreakpoint.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANSTEPOVERBREAKPOINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANSTEPOVERBREAKPOINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlan.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanStepOverBreakpoint</name> <range>: <expr><name>public</name> <name>ThreadPlan</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ThreadPlanStepOverBreakpoint</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ThreadPlanStepOverBreakpoint</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>ValidatePlan</name><argument_list>(<argument>Stream *error</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>ShouldStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>StopOthers</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetPlanRunState</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>WillStop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>WillPop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>MischiefManaged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>ThreadDestroyed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>SetAutoContinue</name><argument_list>(<argument>bool do_it</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>ShouldAutoContinue</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>IsPlanStale</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetBreakpointLoadAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_breakpoint_addr</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>DoPlanExplainsStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>DoWillResume</name><argument_list>(<argument>lldb::StateType resume_state</argument>, <argument>bool current_plan</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <call><name>ReenableBreakpointSite</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_breakpoint_addr</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>m_breakpoint_site_id</name></expr>;
<expr><name>bool</name> <name>m_auto_continue</name></expr>;
<expr><name>bool</name> <name>m_reenabled_breakpoint_site</name></expr>;

<expr><call><name>ThreadPlanStepOverBreakpoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlanStepOverBreakpoint</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ThreadPlanStepOverBreakpoint</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ThreadPlanStepOverBreakpoint</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
