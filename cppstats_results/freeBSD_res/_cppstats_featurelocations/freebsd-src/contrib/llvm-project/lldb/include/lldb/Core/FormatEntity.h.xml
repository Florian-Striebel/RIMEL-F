<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/FormatEntity.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_FORMATENTITY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_FORMATENTITY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompletionRequest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileSpec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueObject</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StringRef</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FormatEntity</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>Entry</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Type</name> <block>{<block_content>
<expr_stmt><expr><name>Invalid</name></expr><operator>,</operator>
<expr><name>ParentNumber</name></expr><operator>,</operator>
<expr><name>ParentString</name></expr><operator>,</operator>
<expr><name>EscapeCode</name></expr><operator>,</operator>
<expr><name>Root</name></expr><operator>,</operator>
<expr><name>String</name></expr><operator>,</operator>
<expr><name>Scope</name></expr><operator>,</operator>
<expr><name>Variable</name></expr><operator>,</operator>
<expr><name>VariableSynthetic</name></expr><operator>,</operator>
<expr><name>ScriptVariable</name></expr><operator>,</operator>
<expr><name>ScriptVariableSynthetic</name></expr><operator>,</operator>
<expr><name>AddressLoad</name></expr><operator>,</operator>
<expr><name>AddressFile</name></expr><operator>,</operator>
<expr><name>AddressLoadOrFile</name></expr><operator>,</operator>
<expr><name>ProcessID</name></expr><operator>,</operator>
<expr><name>ProcessFile</name></expr><operator>,</operator>
<expr><name>ScriptProcess</name></expr><operator>,</operator>
<expr><name>ThreadID</name></expr><operator>,</operator>
<expr><name>ThreadProtocolID</name></expr><operator>,</operator>
<expr><name>ThreadIndexID</name></expr><operator>,</operator>
<expr><name>ThreadName</name></expr><operator>,</operator>
<expr><name>ThreadQueue</name></expr><operator>,</operator>
<expr><name>ThreadStopReason</name></expr><operator>,</operator>
<expr><name>ThreadStopReasonRaw</name></expr><operator>,</operator>
<expr><name>ThreadReturnValue</name></expr><operator>,</operator>
<expr><name>ThreadCompletedExpression</name></expr><operator>,</operator>
<expr><name>ScriptThread</name></expr><operator>,</operator>
<expr><name>ThreadInfo</name></expr><operator>,</operator>
<expr><name>TargetArch</name></expr><operator>,</operator>
<expr><name>ScriptTarget</name></expr><operator>,</operator>
<expr><name>ModuleFile</name></expr><operator>,</operator>
<expr><name>File</name></expr><operator>,</operator>
<expr><name>Lang</name></expr><operator>,</operator>
<expr><name>FrameIndex</name></expr><operator>,</operator>
<expr><name>FrameNoDebug</name></expr><operator>,</operator>
<expr><name>FrameRegisterPC</name></expr><operator>,</operator>
<expr><name>FrameRegisterSP</name></expr><operator>,</operator>
<expr><name>FrameRegisterFP</name></expr><operator>,</operator>
<expr><name>FrameRegisterFlags</name></expr><operator>,</operator>
<expr><name>FrameRegisterByName</name></expr><operator>,</operator>
<expr><name>FrameIsArtificial</name></expr><operator>,</operator>
<expr><name>ScriptFrame</name></expr><operator>,</operator>
<expr><name>FunctionID</name></expr><operator>,</operator>
<expr><name>FunctionDidChange</name></expr><operator>,</operator>
<expr><name>FunctionInitialFunction</name></expr><operator>,</operator>
<expr><name>FunctionName</name></expr><operator>,</operator>
<expr><name>FunctionNameWithArgs</name></expr><operator>,</operator>
<expr><name>FunctionNameNoArgs</name></expr><operator>,</operator>
<expr><name>FunctionMangledName</name></expr><operator>,</operator>
<expr><name>FunctionAddrOffset</name></expr><operator>,</operator>
<expr><name>FunctionAddrOffsetConcrete</name></expr><operator>,</operator>
<expr><name>FunctionLineOffset</name></expr><operator>,</operator>
<expr><name>FunctionPCOffset</name></expr><operator>,</operator>
<expr><name>FunctionInitial</name></expr><operator>,</operator>
<expr><name>FunctionChanged</name></expr><operator>,</operator>
<expr><name>FunctionIsOptimized</name></expr><operator>,</operator>
<expr><name>LineEntryFile</name></expr><operator>,</operator>
<expr><name>LineEntryLineNumber</name></expr><operator>,</operator>
<expr><name>LineEntryColumn</name></expr><operator>,</operator>
<expr><name>LineEntryStartAddress</name></expr><operator>,</operator>
<expr><name>LineEntryEndAddress</name></expr><operator>,</operator>
<expr><name>CurrentPCArrow</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>Definition</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Entry</name><operator>::</operator><name>Type</name> <name>type</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>num_children</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Definition</name> <modifier>*</modifier></type><name>children</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>keep_separator</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>constexpr</name></type> <name>Definition</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name><operator>::</operator><name>Type</name> <name>t</name></expr></argument>)</argument_list>
<range>: <expr><call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>type</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<macro><name>constexpr</name></macro> <expr_stmt><expr><call><name>Definition</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>string</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>string</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>type</name><argument_list>(<argument>Entry::Type::EscapeCode</argument>)</argument_list></macro> <expr><block>{}</block>

<name>constexpr</name> <macro><name>Definition</name><argument_list>(<argument>const char *name</argument>, <argument>const FormatEntity::Entry::Type t</argument>,
<argument>const uint64_t data</argument>)</argument_list></macro>
<operator>:</operator> <call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>type</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>data</name><argument_list>(<argument>data</argument>)</argument_list></macro> <expr><block>{}</block>

<name>constexpr</name> <macro><name>Definition</name><argument_list>(<argument>const char *name</argument>, <argument>const FormatEntity::Entry::Type t</argument>,
<argument>const uint64_t num_children</argument>,
<argument>const Definition *children</argument>,
<argument>const bool keep_separator = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>type</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>num_children</name><argument_list>(<argument><expr><name>num_children</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>children</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>keep_separator</name><argument_list>(<argument>keep_separator</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>N</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>Definition</name></type>
<name>DefinitionWithChildren</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name><operator>::</operator><name>Type</name> <name>t</name></expr></argument>,
<argument><expr><specifier>const</specifier> <call><name>Definition</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>children</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>,
<argument><expr><name>bool</name> <name>keep_separator</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>Definition</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>children</name></expr></argument>, <argument><expr><name>keep_separator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<macro><name>Entry</name><argument_list>(<argument>Type t = Type::Invalid</argument>, <argument>const char *s = nullptr</argument>,
<argument>const char *f = nullptr</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>string</name><argument_list>(<argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>printf_format</name><argument_list>(<argument><expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><name>f</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>children</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>type</name><argument_list>(<argument>t</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>Entry</name><argument_list>(<argument>llvm::StringRef s</argument>)</argument_list></macro></expr>;</expr_stmt>
<macro><name>Entry</name><argument_list>(<argument>char ch</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>AppendChar</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>AppendText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>AppendText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>AppendEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Entry</name> <operator>&amp;&amp;</operator><name>entry</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>string</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>printf_format</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>Type</name><operator>::</operator><name>Invalid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eFormatDefault</name></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>deref</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TypeToCString</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Entry</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>string</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>printf_format</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>printf_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>m</name> <init>= <expr><call><name><name>rhs</name><operator>.</operator><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>std</name><operator>::</operator><call><name><name>min</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>children</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>fmt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>deref</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>deref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
}</block>

<decl><name>std</name>::<name>string</name> <name>string</name></decl>;</struct>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>printf_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Entry</name></expr></argument>&gt;</argument_list></name> <name>children</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Type</name></type> <name>type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>fmt</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eFormatDefault</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>deref</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>valobj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>function_changed</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>initial_function</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>FormatStringRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>*</operator><name>sc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Address</name> <operator>*</operator><name>addr</name></expr></argument>, <argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>,
<argument><expr><name>bool</name> <name>function_changed</name></expr></argument>, <argument><expr><name>bool</name> <name>initial_function</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>FormatCString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>valobj</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>function_changed</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>initial_function</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>Parse</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><name>Entry</name> <operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>ExtractVariableInfo</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>format_str</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>variable_name</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>variable_format</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AutoComplete</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>FormatFileSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>elements</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>element_format</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>ParseInternal</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><name>Entry</name> <operator>&amp;</operator><name>parent_entry</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>depth</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
