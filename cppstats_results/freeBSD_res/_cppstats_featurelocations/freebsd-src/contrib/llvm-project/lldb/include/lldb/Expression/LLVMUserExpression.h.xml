<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/LLVMUserExpression.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_LLVMUSEREXPRESSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_LLVMUSEREXPRESSION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/LegacyPassManager.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/UserExpression.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>











<decl_stmt><decl><type><name>class</name></type> <name>LLVMUserExpression</name> <range>: <expr><name>public</name> <name>UserExpression</name> <block>{

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name> <operator>||</operator> <name>UserExpression</name><operator>::</operator><call><name>isA</name><argument_list>(<argument><expr><name>ClassID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Expression *obj</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>obj</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>







struct <name>IRPasses</name> <block>{
<expr><call><name>IRPasses</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>EarlyPasses</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>, <macro><name>LatePasses</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro><expr><block>{}</block></expr>;
<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>legacy</name><operator>::</operator><name>PassManager</name></expr></argument>&gt;</argument_list></name> <name>EarlyPasses</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>legacy</name><operator>::</operator><name>PassManager</name></expr></argument>&gt;</argument_list></name> <name>LatePasses</name></expr>;
}</block></expr>;

<macro><name>LLVMUserExpression</name><argument_list>(<argument>ExecutionContextScope &amp;exe_scope</argument>, <argument>llvm::StringRef expr</argument>,
<argument>llvm::StringRef prefix</argument>, <argument>lldb::LanguageType language</argument>,
<argument>ResultType desired_type</argument>,
<argument>const EvaluateExpressionOptions &amp;options</argument>)</argument_list></macro>;
<expr><operator>~</operator><macro><name>LLVMUserExpression</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>FinalizeJITExecution</name><argument_list>(
<argument>DiagnosticManager &amp;diagnostic_manager</argument>, <argument>ExecutionContext &amp;exe_ctx</argument>,
<argument>lldb::ExpressionVariableSP &amp;result</argument>,
<argument>lldb::addr_t function_stack_bottom = LLDB_INVALID_ADDRESS</argument>,
<argument>lldb::addr_t function_stack_top = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CanInterpret</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>m_can_interpret</name></expr>;</return> }</block>

<name>Materializer</name> <operator>*</operator><macro><name>GetMaterializer</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>m_materializer_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Text</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>m_transformed_text</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>ExpressionResults</name>
<macro><name>DoExecute</name><argument_list>(<argument>DiagnosticManager &amp;diagnostic_manager</argument>, <argument>ExecutionContext &amp;exe_ctx</argument>,
<argument>const EvaluateExpressionOptions &amp;options</argument>,
<argument>lldb::UserExpressionSP &amp;shared_ptr_to_me</argument>,
<argument>lldb::ExpressionVariableSP &amp;result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>ScanContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>bool</name> <call><name>PrepareToExecuteJITExpression</name><argument_list>(<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>,
<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>struct_address</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>AddArguments</name><argument_list>(<argument>ExecutionContext &amp;exe_ctx</argument>,
<argument>std::vector&lt;lldb::addr_t&gt; &amp;args</argument>,
<argument>lldb::addr_t struct_address</argument>,
<argument>DiagnosticManager &amp;diagnostic_manager</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name>
<name>m_stack_frame_bottom</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_stack_frame_top</name></expr>;

<expr><name>bool</name> <name>m_allow_cxx</name></expr>;
<expr><name>bool</name> <name>m_allow_objc</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name>
<name>m_transformed_text</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IRExecutionUnit</name></expr></argument>&gt;</argument_list></name>
<name>m_execution_unit_sp</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Materializer</name></expr></argument>&gt;</argument_list></name> <name>m_materializer_up</name></expr>;


<expr><name>lldb</name><operator>::</operator><name>ModuleWP</name> <name>m_jit_module_wp</name></expr>;
<expr><name>Target</name> <operator>*</operator><name>m_target</name></expr>;


<expr><name>bool</name> <name>m_can_interpret</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_materialized_address</name></expr>;


<expr><name>Materializer</name><operator>::</operator><name>DematerializerSP</name> <name>m_dematerializer_sp</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
