<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/FileLineResolver.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_FILELINERESOLVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_FILELINERESOLVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SearchFilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>FileLineResolver</name> <range>: <expr><name>public</name> <name>Searcher</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>FileLineResolver</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>m_file_spec</name><argument_list>()</argument_list></call></expr>,

<macro><name>m_sc_list</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<macro><name>FileLineResolver</name><argument_list>(<argument>const FileSpec &amp;resolver</argument>, <argument>uint32_t line_no</argument>,
<argument>bool check_inlines</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>FileLineResolver</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Searcher</name><operator>::</operator><name>CallbackReturn</name> <macro><name>SearchCallback</name><argument_list>(<argument>SearchFilter &amp;filter</argument>,
<argument>SymbolContext &amp;context</argument>,
<argument>Address *addr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>SearchDepth</name> <macro><name>GetDepth</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>SymbolContextList</name> <operator>&amp;</operator><macro><name>GetFileLineMatches</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_sc_list</name></expr>;</return> }</block>

<name>void</name> <call><name>Clear</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>Reset</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>uint32_t line</argument>, <argument>bool check_inlines</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<name>FileSpec</name> <name>m_file_spec</name></expr>;
<expr><name>uint32_t</name> <name>m_line_number</name> <operator>=</operator>
<name>UINT32_MAX</name></expr>;
<expr><name>SymbolContextList</name> <name>m_sc_list</name></expr>;
<expr><name>bool</name> <name>m_inlines</name> <operator>=</operator> <name>true</name></expr>;


<expr><name>private</name><operator>:</operator>
<call><name>FileLineResolver</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileLineResolver</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>FileLineResolver</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>FileLineResolver</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
