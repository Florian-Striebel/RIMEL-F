<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Section.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_SECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_SECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjectFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SectionList</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>SectionSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_sections</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_sections</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>const_iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_sections</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>const_iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_sections</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><call><name>SectionList</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>SectionList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SectionList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>AddSection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>AddUniqueSection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>FindSectionIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Section</name> <modifier>*</modifier></type><name>sect</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ContainsSection</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>sect_id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>unsigned</name> <name>indent</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_header</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>depth</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <macro><name>FindSectionByName</name><argument_list>(<argument>ConstString section_dstr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <macro><name>FindSectionByID</name><argument_list>(<argument>lldb::user_id_t sect_id</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <macro><name>FindSectionByType</name><argument_list>(<argument>lldb::SectionType sect_type</argument>,
<argument>bool check_children</argument>,
<argument>size_t start_idx = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name>
<macro><name>FindSectionContainingFileAddress</name><argument_list>(<argument>lldb::addr_t addr</argument>,
<argument>uint32_t depth = UINT32_MAX</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_sections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>GetNumSections</name><argument_list>(<argument><expr><name>uint32_t</name> <name>depth</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReplaceSection</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>sect_id</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>depth</name> <operator>=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>DeleteSection</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <macro><name>GetSectionAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>Slide</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>slide_amount</name></expr></argument>, <argument><expr><name>bool</name> <name>slide_children</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_sections</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>collection</name></type> <name>m_sections</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Section</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Section</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>ModuleChild</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>UserID</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>Flags</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>Section</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>ObjectFile *obj_file</argument>,
<argument>lldb::user_id_t sect_id</argument>, <argument>ConstString name</argument>,
<argument>lldb::SectionType sect_type</argument>, <argument>lldb::addr_t file_vm_addr</argument>,
<argument>lldb::addr_t vm_size</argument>, <argument>lldb::offset_t file_offset</argument>,
<argument>lldb::offset_t file_size</argument>, <argument>uint32_t log2align</argument>, <argument>uint32_t flags</argument>,
<argument>uint32_t target_byte_size = <literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>Section</name><argument_list>(<argument>const lldb::SectionSP &amp;parent_section_sp</argument>,


<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>ObjectFile *obj_file</argument>,
<argument>lldb::user_id_t sect_id</argument>, <argument>ConstString name</argument>,
<argument>lldb::SectionType sect_type</argument>, <argument>lldb::addr_t file_vm_addr</argument>,
<argument>lldb::addr_t vm_size</argument>, <argument>lldb::offset_t file_offset</argument>,
<argument>lldb::offset_t file_size</argument>, <argument>uint32_t log2align</argument>, <argument>uint32_t flags</argument>,
<argument>uint32_t target_byte_size = <literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>Section</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Section</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Section</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ContainsFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><name>SectionList</name> <modifier>&amp;</modifier></type><name>GetChildren</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_children</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>SectionList</name> <operator>&amp;</operator><macro><name>GetChildren</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_children</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>unsigned</name> <name>indent</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>depth</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DumpName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLoadBaseAddress</name><argument_list>(<argument>Target *target</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ResolveContainedAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>offset</name></expr></argument>, <argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>,
<argument><expr><name>bool</name> <name>allow_section_end</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <macro><name>GetFileOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file_offset</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetFileOffset</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>file_offset</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_file_offset</name> <operator>=</operator> <name>file_offset</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <macro><name>GetFileSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file_size</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetFileSize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>file_size</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_file_size</name> <operator>=</operator> <name>file_size</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFileAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_byte_size</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetByteSize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>byte_size</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_byte_size</name> <operator>=</operator> <name>byte_size</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsFake</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_fake</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsFake</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fake</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_fake</name> <operator>=</operator> <name>fake</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsEncrypted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_encrypted</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsEncrypted</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_encrypted</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>IsDescendant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Section</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Slide</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>slide_amount</name></expr></argument>, <argument><expr><name>bool</name> <name>slide_children</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionType</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetTypeAsCString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <macro><name>GetParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_parent_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsThreadSpecific</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_thread_specific</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsThreadSpecific</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_thread_specific</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>uint32_t</name> <macro><name>GetPermissions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>SetPermissions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>permissions</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>ObjectFile</name> <modifier>*</modifier></type><name>GetObjectFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_obj_file</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ObjectFile</name> <operator>*</operator><macro><name>GetObjectFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_obj_file</name></expr>;</return> }</block></expr></expr_stmt>


















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <macro><name>GetSectionData</name><argument_list>(<argument>void *dst</argument>, <argument>lldb::offset_t dst_len</argument>,
<argument>lldb::offset_t offset = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <call><name>GetSectionData</name><argument_list>(<argument><expr><name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>uint32_t</name></type> <name>GetLog2Align</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_log2align</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetLog2Align</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>align</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_log2align</name> <operator>=</operator> <name>align</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>uint32_t</name> <macro><name>GetTargetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_target_byte_size</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsRelocated</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_relocated</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsRelocated</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_relocated</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ObjectFile</name> <modifier>*</modifier></type><name>m_obj_file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionType</name> <name>m_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionWP</name> <name>m_parent_wp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_file_addr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_byte_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>m_file_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>m_file_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_log2align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SectionList</name></type> <name>m_children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_fake</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,




<decl><type ref="prev"/><name>m_encrypted</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_thread_specific</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_readable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_writable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_executable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_relocated</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_target_byte_size</name></decl>;</decl_stmt>


<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Section</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Section</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Section</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Section</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
