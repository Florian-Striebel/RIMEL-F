<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/ThreadLauncher.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_THREADLAUNCHER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_THREADLAUNCHER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/HostThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadLauncher</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>HostThread</name></expr></argument>&gt;</argument_list></name>
<macro><name>LaunchThread</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>lldb::thread_func_t thread_function</argument>,
<argument>lldb::thread_arg_t thread_arg</argument>,
<argument>size_t min_stack_byte_size = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>




<struct>struct <name>HostThreadCreateInfo</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>thread_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>thread_func_t</name> <name>thread_fptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>thread_arg_t</name> <name>thread_arg</name></expr>;</expr_stmt>

<macro><name>HostThreadCreateInfo</name><argument_list>(<argument>const char *name</argument>, <argument>lldb::thread_func_t fptr</argument>,
<argument>lldb::thread_arg_t arg</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>thread_name</name><argument_list>(<argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>thread_fptr</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>thread_arg</name><argument_list>(<argument>arg</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
