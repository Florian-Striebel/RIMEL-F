<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/StackID.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_STACKID_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_STACKID_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>StackID</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>StackID</name><argument_list>()</argument_list></macro>

<block>{<block_content/>}</block>

<decl_stmt><decl><type><name>explicit</name></type> <name>StackID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>pc</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>cfa</name></expr></argument>,
<argument><expr><name>SymbolContextScope</name> <operator>*</operator><name>symbol_scope</name></expr></argument>)</argument_list>
<range>: <expr><call><name>m_pc</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>m_cfa</name><argument_list>(<argument><expr><name>cfa</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>m_symbol_scope</name><argument_list>(<argument><expr><name>symbol_scope</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<expr_stmt><expr><call><name>StackID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_pc</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_pc</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_cfa</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_cfa</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_symbol_scope</name><argument_list>(<argument>rhs.m_symbol_scope</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><call><name>StackID</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetPC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_pc</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetCallFrameAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_cfa</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SymbolContextScope</name> <operator>*</operator><macro><name>GetSymbolContextScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_symbol_scope</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetSymbolContextScope</name><parameter_list>(<parameter><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>symbol_scope</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_symbol_scope</name> <operator>=</operator> <name>symbol_scope</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_pc</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_cfa</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_symbol_scope</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_pc</name> <operator>!=</operator> <name>LLDB_INVALID_ADDRESS</name> <operator>||</operator> <name>m_cfa</name> <operator>!=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>const</specifier> <name>StackID</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <operator>&amp;</operator><name>rhs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_pc</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_pc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_cfa</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_cfa</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_symbol_scope</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_symbol_scope</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></init></decl></decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>StackFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPC</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>pc</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetCFA</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>cfa</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_cfa</name> <operator>=</operator> <name>cfa</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_pc</name> <operator>=</operator>
<name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_cfa</name> <operator>=</operator>
<name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>m_symbol_scope</name> <init>=
<expr><name>nullptr</name></expr></init></decl>;</decl_stmt>






</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>StackID</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
