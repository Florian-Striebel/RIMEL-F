<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/TypeSummary.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_TYPESUMMARY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_TYPESUMMARY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FormatEntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>TypeSummaryOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeSummaryOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>TypeSummaryOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryCapping</name> <macro><name>GetCapping</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TypeSummaryOptions</name> <modifier>&amp;</modifier></type><name>SetLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TypeSummaryOptions</name> <modifier>&amp;</modifier></type><name>SetCapping</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryCapping</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>m_lang</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eLanguageTypeUnknown</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryCapping</name> <name>m_capping</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eTypeSummaryCapped</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeSummaryImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Kind</name> <block>{<block_content> <expr_stmt><expr><name>eSummaryString</name></expr><operator>,</operator> <expr><name>eScript</name></expr><operator>,</operator> <expr><name>eCallback</name></expr><operator>,</operator> <expr><name>eInternal</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TypeSummaryImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>Kind</name> <macro><name>GetKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_kind</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Flags</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Flags</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>Flags</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_flags</name><argument_list>(<argument>other.m_flags</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Flags</name><argument_list>(<argument>uint32_t value</argument>)</argument_list></macro> <operator>:</operator> <macro><name>m_flags</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>

<name>Flags</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>rhs</name> <operator>!=</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_flags</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>Flags</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<expr><name>m_flags</name> <operator>=</operator> <name>rhs</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetCascades</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name><operator>)</operator> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetCascades</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetSkipPointers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetSkipPointers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetSkipReferences</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetSkipReferences</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetDontShowChildren</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideChildren</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionHideChildren</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetDontShowChildren</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideChildren</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionHideChildren</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetHideEmptyAggregates</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideEmptyAggregates</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionHideEmptyAggregates</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetHideEmptyAggregates</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideEmptyAggregates</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionHideEmptyAggregates</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetDontShowValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideValue</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionHideValue</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetDontShowValue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideValue</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionHideValue</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetShowMembersOneLiner</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionShowOneLiner</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionShowOneLiner</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetShowMembersOneLiner</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionShowOneLiner</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionShowOneLiner</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetHideItemNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideNames</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionHideNames</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetHideItemNames</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionHideNames</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionHideNames</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetNonCacheable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetNonCacheable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetValue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_flags</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetValue</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_flags</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_flags</name> <init>= <expr><name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>Cascades</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetCascades</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>SkipsPointers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetSkipPointers</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>SkipsReferences</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetSkipReferences</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>NonCacheable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetNonCacheable</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>DoesPrintChildren</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>!</operator><call><name><name>m_flags</name><operator>.</operator><name>GetDontShowChildren</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>DoesPrintEmptyAggregates</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name><name>m_flags</name><operator>.</operator><name>GetHideEmptyAggregates</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>DoesPrintValue</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>!</operator><call><name><name>m_flags</name><operator>.</operator><name>GetDontShowValue</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsOneLiner</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetShowMembersOneLiner</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>HideNames</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetHideItemNames</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetCascades</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetCascades</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetSkipsPointers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetSkipPointers</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetSkipsReferences</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetSkipReferences</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetDoesPrintChildren</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetDontShowChildren</name></name><argument_list>(<argument><expr><operator>!</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetDoesPrintValue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetDontShowValue</name></name><argument_list>(<argument><expr><operator>!</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetIsOneLiner</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetShowMembersOneLiner</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetHideNames</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetHideItemNames</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetNonCacheable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetNonCacheable</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetOptions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetValue</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetOptions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>





<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>FormatObject</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>dest</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TypeSummaryOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetDescription</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>GetRevision</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_my_revision</name></expr>;</return> </block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeSummaryImpl</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_my_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name></decl>;</decl_stmt>

<macro><name>TypeSummaryImpl</name><argument_list>(<argument>Kind kind</argument>, <argument>const TypeSummaryImpl::Flags &amp;flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>m_kind</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypeSummaryImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeSummaryImpl</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeSummaryImpl</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeSummaryImpl</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>StringSummaryFormat</name></name></type> <range>: <expr><name>public</name> <name>TypeSummaryImpl</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_format_str</name></expr>;
<expr><name>FormatEntity</name><operator>::</operator><name>Entry</name> <name>m_format</name></expr>;
<expr><name>Status</name> <name>m_error</name></expr>;

<expr><call><name>StringSummaryFormat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeSummaryImpl</name><operator>::</operator><name>Flags</name> <operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>StringSummaryFormat</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetSummaryString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_format_str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <call><name>SetSummaryString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>FormatObject</name><argument_list>(<argument>ValueObject *valobj</argument>, <argument>std::string &amp;dest</argument>,
<argument>const TypeSummaryOptions &amp;options</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const TypeSummaryImpl *S</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>S</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>eSummaryString</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<call><name>StringSummaryFormat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StringSummaryFormat</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>StringSummaryFormat</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>StringSummaryFormat</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>CXXFunctionSummaryFormat</name></name></type> <range>: <expr><name>public</name> <name>TypeSummaryImpl</name> <block>{


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>ValueObject</name> <operator>&amp;</operator>, <name>Stream</name> <operator>&amp;</operator>,
<specifier>const</specifier> <name>TypeSummaryOptions</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>Callback</name></expr>;</expr_stmt></typedef>

<name>Callback</name> <name>m_impl</name></block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_description</name></expr>;</expr_stmt>

<macro><name>CXXFunctionSummaryFormat</name><argument_list>(<argument>const TypeSummaryImpl::Flags &amp;flags</argument>, <argument>Callback impl</argument>,
<argument>const char *description</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>CXXFunctionSummaryFormat</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>Callback</name> <macro><name>GetBackendFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_impl</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetTextualInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_description</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetBackendFunction</name><parameter_list>(<parameter><decl><type><name>Callback</name></type> <name>cb_func</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_impl</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>cb_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetTextualInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>descr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_description</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_description</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>FormatObject</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>dest</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TypeSummaryOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeSummaryImpl</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>S</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>eCallback</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CXXFunctionSummaryFormat</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>CXXFunctionSummaryFormat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXFunctionSummaryFormat</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXFunctionSummaryFormat</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CXXFunctionSummaryFormat</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};


<decl_stmt><decl><type><name><name>struct</name> <name>ScriptSummaryFormat</name></name></type> <range>: <expr><name>public</name> <name>TypeSummaryImpl</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_function_name</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_python_script</name></expr>;
<expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>m_script_function_sp</name></expr>;

<expr><call><name>ScriptSummaryFormat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeSummaryImpl</name><operator>::</operator><name>Flags</name> <operator>&amp;</operator><name>flags</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>function_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>python_script</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ScriptSummaryFormat</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetFunctionName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_function_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPythonScript</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_python_script</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>SetFunctionName</name><argument_list>(<argument>const char *function_name</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>function_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_function_name</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>function_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_function_name</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<call><name><name>m_python_script</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></block></expr>;
}</block>

<name>void</name> <macro><name>SetPythonScript</name><argument_list>(<argument>const char *script</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>script</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_python_script</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_python_script</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FormatObject</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>dest</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TypeSummaryOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeSummaryImpl</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>S</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>eScript</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ScriptSummaryFormat</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ScriptSummaryFormat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScriptSummaryFormat</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScriptSummaryFormat</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ScriptSummaryFormat</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
