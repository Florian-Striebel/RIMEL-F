<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Declaration.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_DECLARATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_DECLARATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>Declaration</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Declaration</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_file</name><argument_list>()</argument_list></macro> <block>{}</block>














<macro><name>Declaration</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>uint32_t line = <literal type="number">0</literal></argument>,
<argument>uint16_t column = LLDB_INVALID_COLUMN_NUMBER</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_file</name><argument_list>(<argument><expr><name>file_spec</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_column</name><argument_list>(<argument>column</argument>)</argument_list></macro> <expr><block>{}</block>


<call><name>Declaration</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Declaration</name> <operator>*</operator><name>decl_ptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_file</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_line</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_column</name><argument_list>(<argument>LLDB_INVALID_COLUMN_NUMBER</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>decl_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>decl_ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>





<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_file</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

















<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Declaration</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Declaration</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>bool</name></type> <name>FileAndLineEqual</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Declaration</name> <operator>&amp;</operator><name>declaration</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_fullpaths</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>DumpStopContext</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_fullpaths</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<function><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_file</name></expr>;</return> </block_content>}</block></function>





<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>uint32_t</name> <macro><name>GetLine</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_line</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>uint16_t</name> <macro><name>GetColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_column</name></expr>;</return> }</block></expr></expr_stmt>















<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_file</name> <operator>&amp;&amp;</operator> <name>m_line</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>m_line</name> <operator>!=</operator> <name>LLDB_INVALID_LINE_NUMBER</name></expr>;</return>
}</block></expr></expr_stmt>









<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<function><type><name>void</name></type> <name>SetFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_file</name> <operator>=</operator> <name>file_spec</name></expr>;</expr_stmt> </block_content>}</block></function>






<function><type><name>void</name></type> <name>SetLine</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_line</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt> </block_content>}</block></function>






<function><type><name>void</name></type> <name>SetColumn</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_column</name> <operator>=</operator> <name>column</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>


<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>m_column</name> <init>= <expr><name>LLDB_INVALID_COLUMN_NUMBER</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Declaration</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>Declaration</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
