<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/ProcessLaunchInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_PROCESSLAUNCHINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_PROCESSLAUNCHINFO_H</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/FileAction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/PseudoTerminal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ProcessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>ProcessLaunchInfo</name> <range>: <expr><name>public</name> <name>ProcessInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ProcessLaunchInfo</name><argument_list>()</argument_list></call></expr>;

<macro><name>ProcessLaunchInfo</name><argument_list>(<argument>const FileSpec &amp;stdin_file_spec</argument>,
<argument>const FileSpec &amp;stdout_file_spec</argument>,
<argument>const FileSpec &amp;stderr_file_spec</argument>,
<argument>const FileSpec &amp;working_dir</argument>, <argument>uint32_t launch_flags</argument>)</argument_list></macro>;

<expr><name>void</name> <macro><name>AppendFileAction</name><argument_list>(<argument>const FileAction &amp;info</argument>)</argument_list></macro> <block>{
<expr><call><name><name>m_file_actions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>AppendCloseFileAction</name><argument_list>(<argument>int fd</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>AppendDuplicateFileAction</name><argument_list>(<argument>int fd</argument>, <argument>int dup_fd</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>AppendOpenFileAction</name><argument_list>(<argument>int fd</argument>, <argument>const FileSpec &amp;file_spec</argument>, <argument>bool read</argument>,
<argument>bool write</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>AppendSuppressFileAction</name><argument_list>(<argument>int fd</argument>, <argument>bool read</argument>, <argument>bool write</argument>)</argument_list></macro></expr>;




<expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>SetUpPtyRedirection</name><argument_list>()</argument_list></call></expr>;

<expr><name>size_t</name> <macro><name>GetNumFileActions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_file_actions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>FileAction</name> <operator>*</operator><macro><name>GetFileActionAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>const</specifier> <name>FileAction</name> <operator>*</operator><macro><name>GetFileActionForFD</name><argument_list>(<argument>int fd</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>Flags</name> <operator>&amp;</operator><macro><name>GetFlags</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_flags</name></expr>;</return> }</block>

<specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><macro><name>GetFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_flags</name></expr>;</return> }</block>

<specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetWorkingDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetWorkingDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>working_dir</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetProcessPluginName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetProcessPluginName</name><argument_list>(<argument>llvm::StringRef plugin</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetShell</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetShell</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>shell</name></expr></argument>)</argument_list></call></expr>;

<expr><name>uint32_t</name> <macro><name>GetResumeCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_resume_count</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetResumeCount</name><argument_list>(<argument>uint32_t c</argument>)</argument_list></macro> <block>{ <expr><name>m_resume_count</name> <operator>=</operator> <name>c</name></expr>; }</block>

<name>bool</name> <macro><name>GetLaunchInSeparateProcessGroup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>Test</name></name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>eLaunchFlagLaunchInSeparateProcessGroup</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>SetLaunchInSeparateProcessGroup</name><argument_list>(<argument>bool separate</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetShellExpandArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>Test</name></name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>eLaunchFlagShellExpandArguments</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>SetShellExpandArguments</name><argument_list>(<argument>bool expand</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>Clear</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>ConvertArgumentsForLaunchingInShell</name><argument_list>(<argument>Status &amp;error</argument>, <argument>bool will_debug</argument>,
<argument>bool first_arg_is_full_shell_command</argument>,
<argument>uint32_t num_resumes</argument>)</argument_list></macro></expr>;

<expr><name>void</name>
<macro><name>SetMonitorProcessCallback</name><argument_list>(<argument>const Host::MonitorChildProcessCallback &amp;callback</argument>,
<argument>bool monitor_signals</argument>)</argument_list></macro></expr>;

<expr><name>Host</name><operator>::</operator><name>MonitorChildProcessCallback</name> <macro><name>GetMonitorProcessCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_monitor_callback</name></expr>;</return>
}</block>




<specifier>static</specifier> <name>bool</name> <macro><name>NoOpMonitorCallback</name><argument_list>(<argument>lldb::pid_t pid</argument>, <argument>bool exited</argument>, <argument>int signal</argument>,
<argument>int status</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetMonitorSignals</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_monitor_signals</name></expr>;</return> }</block>






<name>bool</name> <macro><name>MonitorProcess</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>PseudoTerminal</name> <operator>&amp;</operator><macro><name>GetPTY</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><name>m_pty</name></expr>;</return> }</block>


<name>lldb</name><operator>::</operator><name>ListenerSP</name> <macro><name>GetListener</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_listener_sp</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetListener</name><argument_list>(<argument>const lldb::ListenerSP &amp;listener_sp</argument>)</argument_list></macro> <block>{
<expr><name>m_listener_sp</name> <operator>=</operator> <name>listener_sp</name></expr>;
}</block>

<name>lldb</name><operator>::</operator><name>ListenerSP</name> <macro><name>GetHijackListener</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_hijack_listener_sp</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetHijackListener</name><argument_list>(<argument>const lldb::ListenerSP &amp;listener_sp</argument>)</argument_list></macro> <block>{
<expr><name>m_hijack_listener_sp</name> <operator>=</operator> <name>listener_sp</name></expr>;
}</block>

<name>void</name> <macro><name>SetLaunchEventData</name><argument_list>(<argument>const char *data</argument>)</argument_list></macro> <block>{ <expr><call><name><name>m_event_data</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>; }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetLaunchEventData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_event_data</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>SetDetachOnError</name><argument_list>(<argument>bool enable</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDetachOnError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>Test</name></name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>eLaunchFlagDetachOnError</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>IsScriptedProcess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name><name>m_scripted_process_class_name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>std</name><operator>::</operator><name>string</name> <macro><name>GetScriptedProcessClassName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_scripted_process_class_name</name></expr>;</return>
}</block>

<name>void</name> <macro><name>SetScriptedProcessClassName</name><argument_list>(<argument>std::string name</argument>)</argument_list></macro> <block>{
<expr><name>m_scripted_process_class_name</name> <operator>=</operator> <name>name</name></expr>;
}</block>

<name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>DictionarySP</name>
<macro><name>GetScriptedProcessDictionarySP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_scripted_process_dictionary_sp</name></expr>;</return>
}</block>

<name>void</name> <macro><name>SetScriptedProcessDictionarySP</name><argument_list>(
<argument>lldb_private::StructuredData::DictionarySP dictionary_sp</argument>)</argument_list></macro> <block>{
<expr><name>m_scripted_process_dictionary_sp</name> <operator>=</operator> <name>dictionary_sp</name></expr>;
}</block>

<name>protected</name><operator>:</operator>
<name>FileSpec</name> <name>m_working_dir</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_plugin_name</name></expr>;
<expr><name>FileSpec</name> <name>m_shell</name></expr>;
<expr><name>Flags</name> <name>m_flags</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FileAction</name></expr></argument>&gt;</argument_list></name> <name>m_file_actions</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PseudoTerminal</name></expr></argument>&gt;</argument_list></name> <name>m_pty</name></expr>;
<expr><name>uint32_t</name> <name>m_resume_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>Host</name><operator>::</operator><name>MonitorChildProcessCallback</name> <name>m_monitor_callback</name></expr>;
<expr><name>void</name> <operator>*</operator><name>m_monitor_callback_baton</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>bool</name> <name>m_monitor_signals</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_event_data</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_listener_sp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_hijack_listener_sp</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_scripted_process_class_name</name></expr>;

<expr><name>StructuredData</name><operator>::</operator><name>DictionarySP</name>
<name>m_scripted_process_dictionary_sp</name></expr>;

}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
