<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/common/TCPSocket.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_COMMON_TCPSOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_COMMON_TCPSOCKET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/SocketAddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>TCPSocket</name> <range>: <expr><name>public</name> <name>Socket</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>TCPSocket</name><argument_list>(<argument>bool should_close</argument>, <argument>bool child_processes_inherit</argument>)</argument_list></macro></expr>;
<macro><name>TCPSocket</name><argument_list>(<argument>NativeSocket socket</argument>, <argument>bool should_close</argument>,
<argument>bool child_processes_inherit</argument>)</argument_list></macro>;
<expr><operator>~</operator><macro><name>TCPSocket</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


<expr><name>uint16_t</name> <macro><name>GetLocalPortNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetLocalIPAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>uint16_t</name> <macro><name>GetRemotePortNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetRemoteIPAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>int</name> <call><name>SetOptionNoDelay</name><argument_list>()</argument_list></call></expr>;
<expr><name>int</name> <call><name>SetOptionReuseAddress</name><argument_list>()</argument_list></call></expr>;

<expr><name>Status</name> <macro><name>Connect</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Listen</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>int backlog</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Accept</name><argument_list>(<argument>Socket *&amp;conn_socket</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>CreateSocket</name><argument_list>(<argument>int domain</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetRemoteConnectionURI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<macro><name>TCPSocket</name><argument_list>(<argument>NativeSocket socket</argument>, <argument>const TCPSocket &amp;listen_socket</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>CloseListenSockets</name><argument_list>()</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>SocketAddress</name></expr></argument>&gt;</argument_list></name> <name>m_listen_sockets</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
