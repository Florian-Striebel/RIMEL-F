<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/ProcessRunLock.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_PROCESSRUNLOCK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_PROCESSRUNLOCK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>ProcessRunLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ProcessRunLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ProcessRunLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>ReadTryLock</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ReadUnlock</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SetRunning</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>TrySetRunning</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SetStopped</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>ProcessRunLocker</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ProcessRunLocker</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>ProcessRunLocker</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>Unlock</name><argument_list>()</argument_list></call></expr>; }</block>


<name>bool</name> <macro><name>TryLock</name><argument_list>(<argument>ProcessRunLock *lock</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_lock</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_lock</name> <operator>==</operator> <name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt/>}</block_content>
if (lock</block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>lock</name><operator>-&gt;</operator><name>ReadTryLock</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_lock</name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
}
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>protected</name><operator>:</operator>
<name>void</name> <macro><name>Unlock</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_lock</name><operator>-&gt;</operator><name>ReadUnlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_lock</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

ProcessRunLock *m_lock = nullptr</block><empty_stmt>;</empty_stmt></if></if_stmt>

<name>private</name><operator>:</operator>
<call><name>ProcessRunLocker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessRunLocker</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></block></block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ProcessRunLocker</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ProcessRunLocker</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>rwlock_t</name> <name>m_rwlock</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_running</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ProcessRunLock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessRunLock</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ProcessRunLock</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ProcessRunLock</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
