<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/Breakpoint.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>







<decl_stmt><decl><type><name>class</name></type> <name>BreakpointList</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>BreakpointList</name><argument_list>(<argument>bool is_internal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>BreakpointList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <macro><name>Add</name><argument_list>(<argument>lldb::BreakpointSP &amp;bp_sp</argument>, <argument>bool notify</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>FindBreakpointByID</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>GetBreakpointAtIndex</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>FindBreakpointsByName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_breakpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>Remove</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>breakID</name></expr></argument>, <argument><expr><name>bool</name> <name>notify</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<function_decl><type><name>void</name></type> <name>RemoveInvalidLocations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetEnabledAll</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetEnabledAllowed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>RemoveAll</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>RemoveAllowed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>UpdateBreakpoints</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>load</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>delete_locations</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>UpdateBreakpointsWhenModuleIsReplaced</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>old_module_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>new_module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ClearAllBreakpointSites</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>void</name></type> <name>GetListMutex</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name></expr></argument>&gt;</argument_list></name> <name>bp_collection</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>bp_collection</name><operator>::</operator><name>iterator</name> <macro><name>GetBreakpointIDIterator</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>bp_collection</name><operator>::</operator><name>const_iterator</name>
<macro><name>GetBreakpointIDConstIterator</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>GetMutex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mutex</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bp_collection</name></type> <name>m_breakpoints</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>m_next_break_id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_internal</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name><name>LockingAdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>bp_collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name></expr></argument>,
<argument><expr><name>list_adapter</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name></type>
<name>BreakpointIterable</name>;</typedef>
<function><type><name>BreakpointIterable</name></type> <name>Breakpoints</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>BreakpointIterable</name><argument_list>(<argument><expr><name>m_breakpoints</name></expr></argument>, <argument><expr><call><name>GetMutex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>BreakpointList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointList</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BreakpointList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>BreakpointList</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
