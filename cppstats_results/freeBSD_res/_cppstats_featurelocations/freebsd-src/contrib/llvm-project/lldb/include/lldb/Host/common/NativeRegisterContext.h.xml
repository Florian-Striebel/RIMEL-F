<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/common/NativeRegisterContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_COMMON_NATIVEREGISTERCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_COMMON_NATIVEREGISTERCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/common/NativeWatchpointList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeThreadProtocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ExpeditedRegs</name> <block>{<block_content> <expr_stmt><expr><name>Minimal</name></expr><operator>,</operator> <expr><name>Full</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NativeRegisterContext</name>
<range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>NativeRegisterContext</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>

<call><name>NativeRegisterContext</name><argument_list>(<argument><expr><name>NativeThreadProtocol</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>NativeRegisterContext</name><argument_list>()</argument_list></call></expr>;








<expr><name>virtual</name> <name>uint32_t</name> <macro><name>GetRegisterCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <macro><name>GetUserRegisterCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><macro><name>GetRegisterInfoAtIndex</name><argument_list>(<argument>uint32_t reg</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRegisterSetNameForRegisterAtIndex</name><argument_list>(<argument>uint32_t reg_index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <macro><name>GetRegisterSetCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>RegisterSet</name> <operator>*</operator><macro><name>GetRegisterSet</name><argument_list>(<argument>uint32_t set_index</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>ReadRegister</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><name>RegisterValue</name> <operator>&amp;</operator><name>reg_value</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>WriteRegister</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>RegisterValue</name> <operator>&amp;</operator><name>reg_value</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>ReadAllRegisterValues</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>WriteAllRegisterValues</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DataBufferSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>uint32_t</name> <macro><name>ConvertRegisterKindToRegisterNumber</name><argument_list>(<argument>uint32_t kind</argument>,
<argument>uint32_t num</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>virtual</name> <name>uint32_t</name> <call><name>NumSupportedHardwareBreakpoints</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <macro><name>SetHardwareBreakpoint</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>ClearHardwareBreakpoint</name><argument_list>(<argument>uint32_t hw_idx</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>ClearAllHardwareBreakpoints</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>GetHardwareBreakHitIndex</name><argument_list>(<argument>uint32_t &amp;bp_index</argument>,
<argument>lldb::addr_t trap_addr</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <call><name>NumSupportedHardwareWatchpoints</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <macro><name>SetHardwareWatchpoint</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>size_t size</argument>,
<argument>uint32_t watch_flags</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>ClearHardwareWatchpoint</name><argument_list>(<argument>uint32_t hw_index</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>ClearWatchpointHit</name><argument_list>(<argument>uint32_t hw_index</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>ClearAllHardwareWatchpoints</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>IsWatchpointHit</name><argument_list>(<argument>uint32_t wp_index</argument>, <argument>bool &amp;is_hit</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>GetWatchpointHitIndex</name><argument_list>(<argument>uint32_t &amp;wp_index</argument>,
<argument>lldb::addr_t trap_addr</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>IsWatchpointVacant</name><argument_list>(<argument>uint32_t wp_index</argument>, <argument>bool &amp;is_vacant</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetWatchpointAddress</name><argument_list>(<argument>uint32_t wp_index</argument>)</argument_list></macro></expr>;










<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetWatchpointHitAddress</name><argument_list>(<argument>uint32_t wp_index</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>HardwareSingleStep</name><argument_list>(<argument>bool enable</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name>
<macro><name>ReadRegisterValueFromMemory</name><argument_list>(<argument>const lldb_private::RegisterInfo *reg_info</argument>,
<argument>lldb::addr_t src_addr</argument>, <argument>size_t src_len</argument>,
<argument>RegisterValue &amp;reg_value</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name>
<macro><name>WriteRegisterValueToMemory</name><argument_list>(<argument>const lldb_private::RegisterInfo *reg_info</argument>,
<argument>lldb::addr_t dst_addr</argument>, <argument>size_t dst_len</argument>,
<argument>const RegisterValue &amp;reg_value</argument>)</argument_list></macro></expr>;


<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>tid_t</name> <macro><name>GetThreadID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>NativeThreadProtocol</name> <operator>&amp;</operator><macro><name>GetThread</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_thread</name></expr>;</return> }</block>

<name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetExpeditedRegisters</name><argument_list>(<argument>ExpeditedRegs expType</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>RegisterOffsetIsDynamic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><macro><name>GetRegisterInfoByName</name><argument_list>(<argument>llvm::StringRef reg_name</argument>,
<argument>uint32_t start_idx = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><macro><name>GetRegisterInfo</name><argument_list>(<argument>uint32_t reg_kind</argument>, <argument>uint32_t reg_num</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetPC</name><argument_list>(<argument>lldb::addr_t fail_value = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name>
<macro><name>GetPCfromBreakpointLocation</name><argument_list>(<argument>lldb::addr_t fail_value = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro></expr>;

<expr><name>Status</name> <macro><name>SetPC</name><argument_list>(<argument>lldb::addr_t pc</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetSP</name><argument_list>(<argument>lldb::addr_t fail_value = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro></expr>;

<expr><name>Status</name> <macro><name>SetSP</name><argument_list>(<argument>lldb::addr_t sp</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFP</name><argument_list>(<argument>lldb::addr_t fail_value = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro></expr>;

<expr><name>Status</name> <macro><name>SetFP</name><argument_list>(<argument>lldb::addr_t fp</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRegisterName</name><argument_list>(<argument>uint32_t reg</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetReturnAddress</name><argument_list>(<argument>lldb::addr_t fail_value = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFlags</name><argument_list>(<argument>lldb::addr_t fail_value = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>ReadRegisterAsUnsigned</name><argument_list>(<argument>uint32_t reg</argument>, <argument>lldb::addr_t fail_value</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>ReadRegisterAsUnsigned</name><argument_list>(<argument>const RegisterInfo *reg_info</argument>,
<argument>lldb::addr_t fail_value</argument>)</argument_list></macro></expr>;

<expr><name>Status</name> <macro><name>WriteRegisterFromUnsigned</name><argument_list>(<argument>uint32_t reg</argument>, <argument>uint64_t uval</argument>)</argument_list></macro></expr>;

<expr><name>Status</name> <macro><name>WriteRegisterFromUnsigned</name><argument_list>(<argument>const RegisterInfo *reg_info</argument>, <argument>uint64_t uval</argument>)</argument_list></macro></expr>;













<expr><name>protected</name><operator>:</operator>

<name>NativeThreadProtocol</name>
<operator>&amp;</operator><name>m_thread</name></expr>;



<expr><name>private</name><operator>:</operator>

<call><name>NativeRegisterContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NativeRegisterContext</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>NativeRegisterContext</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>NativeRegisterContext</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
