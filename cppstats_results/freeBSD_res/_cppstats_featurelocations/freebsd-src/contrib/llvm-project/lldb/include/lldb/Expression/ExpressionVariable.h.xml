<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/ExpressionVariable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_EXPRESSIONVARIABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_EXPRESSIONVARIABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ExpressionVariable</name>
<range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>ExpressionVariable</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>LLVMCastKind</name> <block>{ <expr><name>eKindClang</name></expr>, <expr><name>eKindSwift</name></expr>, <expr><name>eKindGo</name></expr>, <expr><name>kNumKinds</name></expr> }</block></expr>;

<expr><name>LLVMCastKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_kind</name></expr>;</return> }</block>

<macro><name>ExpressionVariable</name><argument_list>(<argument>LLVMCastKind kind</argument>)</argument_list></macro> <operator>:</operator> <call><name>m_flags</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>m_kind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>ExpressionVariable</name><argument_list>()</argument_list></call></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>GetByteSize</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetValueObject</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_frozen_sp</name></expr>;</return> }</block>

<name>uint8_t</name> <operator>*</operator><call><name>GetValueBytes</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>ValueUpdated</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>ValueUpdated</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>RegisterInfo</name> <operator>*</operator><macro><name>GetRegisterInfo</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetRegisterInfo</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>SetRegisterInfo</name><argument_list>(<argument>const RegisterInfo *reg_info</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetContext</name><argument_list>(
<argument><expr><name>Value</name><operator>::</operator><name>ContextType</name><operator>::</operator><name>RegisterInfo</name></expr></argument>, <argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>RegisterInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>reg_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>CompilerType</name> <macro><name>GetCompilerType</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>GetCompilerType</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>SetCompilerType</name><argument_list>(<argument>const CompilerType &amp;compiler_type</argument>)</argument_list></macro> <block>{
<expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetCompilerType</name><argument_list>(<argument><expr><name>compiler_type</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>SetName</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <block>{ <expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>SetName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>; }</block>








<name>void</name> <macro><name>TransferAddress</name><argument_list>(<argument>bool force = false</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>m_live_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><call><name><name>m_frozen_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <operator>(</operator><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>GetLiveAddress</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LLDB_INVALID_ADDRESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_frozen_sp</name><operator>-&gt;</operator><name>SetLiveAddress</name></name><argument_list>(<argument><expr><call><name><name>m_live_sp</name><operator>-&gt;</operator><name>GetLiveAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<enum>enum <name>Flags</name> <block>{
<decl><name>EVNone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>EVIsLLDBAllocated</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,


<decl><name>EVIsProgramReference</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,


<decl><name>EVNeedsAllocation</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><name>EVIsFreezeDried</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,


<decl><name>EVNeedsFreezeDry</name> <init>=
<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>EVKeepInTarget</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,


<decl><name>EVTypeIsReference</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,


<decl><name>EVBareRegister</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><name>uint16_t</name></type> <name>FlagType</name>;</typedef>

<decl_stmt><decl><type><name>FlagType</name></type> <name>m_flags</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>m_frozen_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>m_live_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LLVMCastKind</name></type> <name>m_kind</name></decl>;</decl_stmt>
};






<decl_stmt><decl><type><name>class</name></type> <name>ExpressionVariableList</name> <block>{<block_content>
<label><name>public</name>:</label>

<function><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_variables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <macro><name>GetVariableAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <name>var_sp</name></expr>;
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name><name>m_variables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>var_sp</name> <operator>=</operator> <name><name>m_variables</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>var_sp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>AddVariable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <operator>&amp;</operator><name>var_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_variables</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>var_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>m_variables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name>
<macro><name>AddNewlyConstructedVariable</name><argument_list>(<argument>ExpressionVariable *var</argument>)</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <call><name>var_sp</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>m_variables</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>var_sp</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_variables</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ContainsVariable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <operator>&amp;</operator><name>var_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><call><name><name>m_variables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_variables</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>var_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <macro><name>GetVariable</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <name>var_sp</name></expr>;
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name>GetSize</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>var_sp</name> <operator>=</operator> <call><name>GetVariableAtIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>var_sp</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>var_sp</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></for>}</block>
<call><name><name>var_sp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>var_sp</name></expr>;</return>
}

lldb<expr_stmt><expr><operator>::</operator><name>ExpressionVariableSP</name> <macro><name>GetVariable</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name>GetSize</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>var_sp</name> <init>= <expr><call><name>GetVariableAtIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>var_name_str</name> <operator>=</operator> <call><name><name>var_sp</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetStringRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>var_name_str</name> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>var_sp</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>nullptr</name></expr>;</return>
}

void <macro><name>RemoveVariable</name><argument_list>(<argument>lldb::ExpressionVariableSP var_sp</argument>)</argument_list></macro> <block>{<block_content>
<for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name>
<name>vi</name> <operator>=</operator> <call><name><name>m_variables</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><name>ve</name> <operator>=</operator> <call><name><name>m_variables</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init>
<condition><expr><name>vi</name> <operator>!=</operator> <name>ve</name></expr>;</condition> <incr><expr><operator>++</operator><name>vi</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>vi</name><operator>-&gt;</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>var_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_variables</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_variables</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name></expr></argument>&gt;</argument_list></name> <name>m_variables</name></expr>;</expr_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>PersistentExpressionState</name> <range>: <expr><name>public</name> <name>ExpressionVariableList</name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>LLVMCastKind</name> <block>{ <expr><name>eKindClang</name></expr>, <expr><name>eKindSwift</name></expr>, <expr><name>eKindGo</name></expr>, <expr><name>kNumKinds</name></expr> }</block></expr>;

<expr><name>LLVMCastKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_kind</name></expr>;</return> }</block>

<macro><name>PersistentExpressionState</name><argument_list>(<argument>LLVMCastKind kind</argument>)</argument_list></macro> <operator>:</operator> <macro><name>m_kind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>PersistentExpressionState</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name>
<call><name>CreatePersistentVariable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>valobj_sp</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name>
<macro><name>CreatePersistentVariable</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>,
<argument>ConstString name</argument>, <argument>const CompilerType &amp;type</argument>,
<argument>lldb::ByteOrder byte_order</argument>,
<argument>uint32_t addr_byte_size</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>ConstString</name> <macro><name>GetNextPersistentVariableName</name><argument_list>(<argument>bool is_error = false</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name>
<macro><name>RemovePersistentVariable</name><argument_list>(<argument>lldb::ExpressionVariableSP variable</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CompilerType</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetCompilerTypeFromPersistentDecl</name><argument_list>(<argument>ConstString type_name</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>LookupSymbol</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>RegisterExecutionUnit</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>IRExecutionUnitSP</name> <operator>&amp;</operator><name>execution_unit_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name>
<macro><name>GetPersistentVariablePrefix</name><argument_list>(<argument>bool is_error = false</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>private</name><operator>:</operator>
<name>LLVMCastKind</name> <name>m_kind</name></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>IRExecutionUnitSP</name></expr></argument>&gt;</argument_list></name> <name>ExecutionUnitSet</name></expr>;</expr_stmt></typedef>
<name>ExecutionUnitSet</name>
<name>m_execution_units</name></block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>SymbolMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>SymbolMap</name></type>
<name>m_symbol_map</name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
