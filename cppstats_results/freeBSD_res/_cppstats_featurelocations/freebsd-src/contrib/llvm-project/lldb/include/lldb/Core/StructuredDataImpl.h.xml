<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/StructuredDataImpl.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_STRUCTUREDDATAIMPL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_STRUCTUREDDATAIMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StructuredDataPlugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name><name>--</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>StructuredDataImpl</name></cpp:pragma>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>StructuredDataImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>StructuredDataImpl</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_plugin_wp</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_data_sp</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<call><name>StructuredDataImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredDataImpl</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>StructuredDataImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_plugin_wp</name><argument_list>(
<argument><expr><name>EventDataStructuredData</name><operator>::</operator><call><name>GetPluginFromEvent</name><argument_list>(<argument><expr><call><name><name>event_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_data_sp</name><argument_list>(<argument>EventDataStructuredData::GetObjectFromEvent(event_sp.get())</argument>)</argument_list></macro> <expr><block>{
}</block>

<operator>~</operator><call><name>StructuredDataImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>StructuredDataImpl</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>StructuredDataImpl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_data_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_plugin_wp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_data_sp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>Status</name></type> <name>GetAsJSON</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_data_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"No structured data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>json</name><operator>::</operator><name>OStream</name> <call><name>s</name><argument_list>(<argument><expr><call><name><name>stream</name><operator>.</operator><name>AsRawOstream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>Serialize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_data_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"Cannot pretty print structured data: "</literal>
<literal type="string">"no data to print."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StructuredDataPluginSP</name> <name>plugin_sp</name> <operator>=</operator> <call><name><name>m_plugin_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plugin_sp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_data_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"No data to describe."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>Dump</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>plugin_sp</name><operator>-&gt;</operator><name>GetDescription</name></name><argument_list>(<argument><expr><name>m_data_sp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>GetObjectSP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_data_sp</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetObjectSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_data_sp</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StructuredDataType</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_data_sp</name> <operator>?</operator> <call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetType</name></name><argument_list>()</argument_list></call> <operator>:</operator>
<name>lldb</name><operator>::</operator><name>eStructuredDataTypeInvalid</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_data_sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eStructuredDataTypeDictionary</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>dict</name> <init>= <expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetAsDictionary</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name><name>dict</name><operator>-&gt;</operator><name>GetSize</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eStructuredDataTypeArray</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>array</name> <init>= <expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetAsArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name><name>array</name><operator>-&gt;</operator><name>GetSize</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>GetValueForKey</name><argument_list>(<argument>const char *key</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_data_sp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>dict</name> <init>= <expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetAsDictionary</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dict</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>dict</name><operator>-&gt;</operator><name>GetValueForKey</name></name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>StringRef</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return StructuredData::ObjectSP(</block></if></if_stmt>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>GetItemAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_data_sp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>array</name> <init>= <expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetAsArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>array</name><operator>-&gt;</operator><name>GetItemAtIndex</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}

uint64_t <macro><name>GetIntegerValue</name><argument_list>(<argument>uint64_t fail_value = <literal type="number">0</literal></argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_data_sp</name> <operator>?</operator> <call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetIntegerValue</name></name><argument_list>(<argument><expr><name>fail_value</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>fail_value</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>GetFloatValue</name><argument_list>(<argument><expr><name>double</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>m_data_sp</name></expr> ?</condition><then> <expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetFloatValue</name></name><argument_list>(<argument><expr><name>fail_value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>fail_value</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetBooleanValue</name><argument_list>(<argument><expr><name>bool</name> <name>fail_value</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>m_data_sp</name></expr> ?</condition><then> <expr><call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetBooleanValue</name></name><argument_list>(<argument><expr><name>fail_value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>fail_value</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetStringValue</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_data_sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>result</name> <operator>=</operator> <call><name><name>m_data_sp</name><operator>-&gt;</operator><name>GetStringValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name> <operator>||</operator> <operator>!</operator><name>dst_len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>::</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>::</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StructuredDataPluginWP</name> <name>m_plugin_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>m_data_sp</name></expr>;</expr_stmt>
};
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
