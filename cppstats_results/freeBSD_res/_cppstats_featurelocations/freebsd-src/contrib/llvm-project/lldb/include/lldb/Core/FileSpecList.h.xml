<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/FileSpecList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_FILESPECLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_FILESPECLIST_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>FileSpecList</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>




<expr_stmt><expr><call><name>FileSpecList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FileSpecList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><call><name>FileSpecList</name><argument_list>(<argument><expr><name>FileSpecList</name> <operator>&amp;&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><call><name>FileSpecList</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_files</name><argument_list>(<argument>std::move(rhs)</argument>)</argument_list></macro> <block>{}</block>


<operator>~</operator><call><name>FileSpecList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>










<decl_stmt><decl><type><name>FileSpecList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FileSpecList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FileSpecList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>FileSpecList</name> <operator>&amp;&amp;</operator><name>rhs</name><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>







<function_decl><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>bool</name></type> <name>AppendIfUnique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>EmplaceBack</name><argument_list>(<argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_files</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>separator_cstr</name> <operator>=</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>


















<decl_stmt><decl><type><name>size_t</name></type> <name>FindFileIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>bool</name> <name>full</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>














<decl_stmt><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetFileSpecAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>












<decl_stmt><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>*</modifier></type><name>GetFileSpecPointerAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_files</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>bool</name></type> <name>Insert</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_files</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>m_files</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <call><name><name>m_files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_files</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Replace</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m_files</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_files</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>m_files</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>GetFilesMatchingPartialPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dir_okay</name></decl></parameter>,
<parameter><decl><type><name>FileSpecList</name> <modifier>&amp;</modifier></type><name>matches</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_files</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_files</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>collection</name></type> <name>m_files</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
