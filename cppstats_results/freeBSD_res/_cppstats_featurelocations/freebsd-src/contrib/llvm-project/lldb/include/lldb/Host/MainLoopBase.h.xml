<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/MainLoopBase.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_MAINLOOPBASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_MAINLOOPBASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/IOObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>













<decl_stmt><decl><type><name>class</name></type> <name>MainLoopBase</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>ReadHandle</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MainLoopBase</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>MainLoopBase</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ReadHandle</name></expr></argument>&gt;</argument_list></name> <name>ReadHandleUP</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>MainLoopBase</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Callback</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>virtual</name> <name>ReadHandleUP</name></type> <name>RegisterReadObject</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOObjectSP</name> <operator>&amp;</operator><name>object_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Callback</name> <operator>&amp;</operator><name>callback</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<function><type><name>virtual</name> <name>Status</name></type> <name>Run</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>RequestTermination</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ReadHandleUP</name></type> <name>CreateReadHandle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOObjectSP</name> <operator>&amp;</operator><name>object_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <macro><name>ReadHandleUP</name><argument_list>(<argument>new ReadHandle(*this, object_sp-&gt;GetWaitableHandle())</argument>)</argument_list></macro>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>UnregisterReadObject</name><argument_list>(<argument><expr><name>IOObject</name><operator>::</operator><name>WaitableHandle</name> <name>handle</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>ReadHandle</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>ReadHandle</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>m_mainloop</name><operator>.</operator><name>UnregisterReadObject</name></name><argument_list>(<argument><expr><name>m_handle</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<macro><name>ReadHandle</name><argument_list>(<argument>MainLoopBase &amp;mainloop</argument>, <argument>IOObject::WaitableHandle handle</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_mainloop</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_handle</name><argument_list>(<argument>handle</argument>)</argument_list></macro> <expr><block>{}</block>

<name>MainLoopBase</name> <operator>&amp;</operator><name>m_mainloop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IOObject</name><operator>::</operator><name>WaitableHandle</name> <name>m_handle</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>MainLoopBase</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ReadHandle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReadHandle</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ReadHandle</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ReadHandle</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>MainLoopBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MainLoopBase</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MainLoopBase</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MainLoopBase</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
