<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/ValueObjectConstResultChild.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_VALUEOBJECTCONSTRESULTCHILD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_VALUEOBJECTCONSTRESULTCHILD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObjectChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObjectConstResultImpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueObject</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ValueObjectConstResultChild</name> <range>: <expr><name>public</name> <name>ValueObjectChild</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ValueObjectConstResultChild</name><argument_list>(<argument>ValueObject &amp;parent</argument>,
<argument>const CompilerType &amp;compiler_type</argument>,
<argument>ConstString name</argument>, <argument>uint32_t byte_size</argument>,
<argument>int32_t byte_offset</argument>, <argument>uint32_t bitfield_bit_size</argument>,
<argument>uint32_t bitfield_bit_offset</argument>, <argument>bool is_base_class</argument>,
<argument>bool is_deref_of_parent</argument>,
<argument>lldb::addr_t live_address</argument>,
<argument>uint64_t language_flags</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>ValueObjectConstResultChild</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>Dereference</name><argument_list>(<argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ValueObject</name> <operator>*</operator><macro><name>CreateChildAtIndex</name><argument_list>(<argument>size_t idx</argument>, <argument>bool synthetic_array_member</argument>,
<argument>int32_t synthetic_index</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>CompilerType</name> <macro><name>GetCompilerType</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>ValueObjectChild</name><operator>::</operator><call><name>GetCompilerType</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetSyntheticChildAtOffset</name><argument_list>(
<argument>uint32_t offset</argument>, <argument>const CompilerType &amp;type</argument>, <argument>bool can_create</argument>,
<argument>ConstString name_const_str = ConstString()</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>AddressOf</name><argument_list>(<argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetAddressOf</name><argument_list>(<argument>bool scalar_is_load_address = true</argument>,
<argument>AddressType *address_type = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>GetPointeeData</name><argument_list>(<argument>DataExtractor &amp;data</argument>, <argument>uint32_t item_idx = <literal type="number">0</literal></argument>,
<argument>uint32_t item_count = <literal type="number">1</literal></argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>Cast</name><argument_list>(<argument>const CompilerType &amp;compiler_type</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>ValueObjectConstResultImpl</name> <name>m_impl</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>ValueObject</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ValueObjectConstResult</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ValueObjectConstResultImpl</name></expr>;

<expr><call><name>ValueObjectConstResultChild</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueObjectConstResultChild</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ValueObjectConstResultChild</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ValueObjectConstResultChild</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
