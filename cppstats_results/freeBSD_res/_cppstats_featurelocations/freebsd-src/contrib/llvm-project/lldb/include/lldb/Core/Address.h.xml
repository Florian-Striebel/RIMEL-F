<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Address.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_ADDRESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_ADDRESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompileUnit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContextScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>
<struct_decl>struct <name>LineEntry</name>;</struct_decl>




























<decl_stmt><decl><type><name>class</name></type> <name>Address</name> <block>{<block_content>
<label><name>public</name>:</label>


<enum>enum <name>DumpStyle</name> <block>{

<decl><name>DumpStyleInvalid</name></decl>,





<decl><name>DumpStyleSectionNameOffset</name></decl>,





<decl><name>DumpStyleSectionPointerOffset</name></decl>,






<decl><name>DumpStyleFileAddress</name></decl>,





<decl><name>DumpStyleModuleWithFileAddress</name></decl>,





<decl><name>DumpStyleLoadAddress</name></decl>,




<decl><name>DumpStyleResolvedDescription</name></decl>,
<decl><name>DumpStyleResolvedDescriptionNoModule</name></decl>,
<decl><name>DumpStyleResolvedDescriptionNoFunctionArguments</name></decl>,


<decl><name>DumpStyleNoFunctionName</name></decl>,


<decl><name>DumpStyleDetailedSymbolContext</name></decl>,


<decl><name>DumpStyleResolvedPointerDescription</name></decl>
}</block>;</enum>





<expr_stmt><expr><call><name>Address</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_section_wp</name><argument_list>()</argument_list></macro> <block>{}</block>







<call><name>Address</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_section_wp</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_section_wp</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_offset</name><argument_list>(<argument>rhs.m_offset</argument>)</argument_list></macro> <expr><block>{}</block>











<macro><name>Address</name><argument_list>(<argument>const lldb::SectionSP &amp;section_sp</argument>, <argument>lldb::addr_t offset</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_section_wp</name><argument_list>()</argument_list></call></expr><operator>,</operator>

<macro><name>m_offset</name><argument_list>(<argument>offset</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>section_sp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_section_wp</name> <operator>=</operator> <name>section_sp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>











<macro><name>Address</name><argument_list>(<argument>lldb::addr_t file_addr</argument>, <argument>const SectionList *section_list</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>Address</name><argument_list>(<argument>lldb::addr_t abs_addr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>











<decl_stmt><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>





<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_section_wp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_offset</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CompareFileAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CompareLoadAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>,
<parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CompareModulePointerAndOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>class</name></type> <name>ModulePointerAndOffsetLessThanFunctionObject</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ModulePointerAndOffsetLessThanFunctionObject</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>a</name><operator>,</operator> <specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Address</name><operator>::</operator><call><name>CompareModulePointerAndOffset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>























<decl_stmt><decl><type><name>bool</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>, <argument><expr><name>DumpStyle</name> <name>style</name></expr></argument>,
<argument><expr><name>DumpStyle</name> <name>fallback_style</name> <operator>=</operator> <name>DumpStyleInvalid</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>addr_byte_size</name> <operator>=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>AddressClass</name> <macro><name>GetAddressClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFileAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLoadAddress</name><argument_list>(<argument>Target *target</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetCallableLoadAddress</name><argument_list>(<argument>Target *target</argument>,
<argument>bool is_indirect = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetOpcodeLoadAddress</name><argument_list>(
<argument>Target *target</argument>,
<argument>AddressClass addr_class = AddressClass::eInvalid</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_offset</name></expr>;</return> }</block></expr></expr_stmt>












<expr_stmt><expr><name>bool</name> <macro><name>IsSectionOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetSection</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>










<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_offset</name> <operator>!=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>ResolveAddressUsingFileSections</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SectionList</name> <operator>*</operator><name>sections</name></expr></argument>)</argument_list></decl>;</decl_stmt>















<decl_stmt><decl><type><name>bool</name></type> <name>ResolveFunctionScope</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>SymbolContext</name> <operator>&amp;</operator><name>sym_ctx</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>AddressRange</name> <operator>*</operator><name>addr_range_ptr</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


























<decl_stmt><decl><type><name>bool</name></type> <name>SetLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,
<argument><expr><name>bool</name> <name>allow_section_end</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetOpcodeLoadAddress</name><argument_list>(
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,
<argument><expr><name>AddressClass</name> <name>addr_class</name> <operator>=</operator> <name>AddressClass</name><operator>::</operator><name>eInvalid</name></expr></argument>,
<argument><expr><name>bool</name> <name>allow_section_end</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetCallableLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>GetModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <macro><name>GetSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_section_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>SetOffset</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>offset</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>changed</name> <init>= <expr><name>m_offset</name> <operator>!=</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m_offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetRawAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_section_wp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_offset</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>Slide</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_offset</name> <operator>!=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_offset</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>







<decl_stmt><decl><type><name>void</name></type> <name>SetSection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_section_wp</name> <operator>=</operator> <name>section_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>ClearSection</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_section_wp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>









<decl_stmt><decl><type><name>uint32_t</name></type> <name>CalculateSymbolContext</name><argument_list>(<argument><expr><name>SymbolContext</name> <operator>*</operator><name>sc</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name> <operator>=</operator>
<name>lldb</name><operator>::</operator><name>eSymbolContextEverything</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>CalculateSymbolContextModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompileUnit</name> <operator>*</operator><macro><name>CalculateSymbolContextCompileUnit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>Function</name> <operator>*</operator><macro><name>CalculateSymbolContextFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>Block</name> <operator>*</operator><macro><name>CalculateSymbolContextBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>Symbol</name> <operator>*</operator><macro><name>CalculateSymbolContextSymbol</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>CalculateSymbolContextLineEntry</name><argument_list>(<argument><expr><name>LineEntry</name> <operator>&amp;</operator><name>line_entry</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>SectionWasDeleted</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionWP</name> <name>m_section_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_offset</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>







<expr_stmt><expr><name>bool</name> <macro><name>SectionWasDeletedPrivate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>












<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
