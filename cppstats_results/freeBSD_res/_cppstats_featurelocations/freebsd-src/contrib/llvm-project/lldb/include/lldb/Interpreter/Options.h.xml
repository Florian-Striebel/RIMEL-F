<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/Options.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Args.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/OptionDefinition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<struct_decl>struct <name>Option</name>;</struct_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>OptionArgVector</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OptionArgVector</name></expr></argument>&gt;</argument_list></name> <name>OptionArgVectorSP</name></expr>;</expr_stmt></typedef>

<struct>struct <name>OptionArgElement</name> <block>{
<enum>enum <block>{ <decl><name>eUnrecognizedArg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>eBareDash</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>, <decl><name>eBareDoubleDash</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl> }</block>;</enum>

<macro><name>OptionArgElement</name><argument_list>(<argument>int defs_index</argument>, <argument>int pos</argument>, <argument>int arg_pos</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>opt_defs_index</name><argument_list>(<argument><expr><name>defs_index</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>opt_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>opt_arg_pos</name><argument_list>(<argument>arg_pos</argument>)</argument_list></macro> <expr><block>{}</block>

<name>int</name> <name>opt_defs_index</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_arg_pos</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OptionArgElement</name></expr></argument>&gt;</argument_list></name> <name>OptionElementVector</name></expr>;</expr_stmt></typedef>














<decl_stmt><decl><type><name>class</name></type> <name>Options</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>BuildGetoptTable</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>BuildValidOptionSets</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>NumCommandOptions</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>Option</name> <modifier>*</modifier></type><name>GetLongOptions</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>OptionSeen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>short_option</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>VerifyOptions</name><parameter_list>(<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>VerifyPartialOptions</name><parameter_list>(<parameter><decl><type><name>CommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>OutputFormattedUsageText</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OptionDefinition</name> <modifier>&amp;</modifier></type><name>option_def</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>output_max_columns</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GenerateOptionUsage</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>CommandObject</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>screen_width</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SupportsLongOption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_option</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<function_decl><type><name>void</name></type> <name>NotifyOptionParsingStarting</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>execution_context</name></decl></parameter>)</parameter_list>;</function_decl>

















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name> <macro><name>Parse</name><argument_list>(<argument>const Args &amp;args</argument>,
<argument>ExecutionContext *execution_context</argument>,
<argument>lldb::PlatformSP platform_sp</argument>,
<argument>bool require_validation</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name> <call><name>ParseAlias</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>,
<argument><expr><name>OptionArgVector</name> <operator>*</operator><name>option_arg_vector</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>input_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>OptionElementVector</name></type> <name>ParseForCompletion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Args</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cursor_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>NotifyOptionParsingFinished</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>execution_context</name></decl></parameter>)</parameter_list>;</function_decl>


















<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetOptionValue</name><argument_list>(<argument><expr><name>uint32_t</name> <name>option_idx</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>option_arg</name></expr></argument>,
<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>execution_context</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>bool</name></type> <name>HandleOptionCompletion</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>,
<argument><expr><name>OptionElementVector</name> <operator>&amp;</operator><name>option_map</name></expr></argument>,
<argument><expr><name>CommandInterpreter</name> <operator>&amp;</operator><name>interpreter</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<decl_stmt><decl><type><name>virtual</name> <name>void</name></type>
<name>HandleOptionArgumentCompletion</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>,
<argument><expr><name>OptionElementVector</name> <operator>&amp;</operator><name>opt_element_vector</name></expr></argument>,
<argument><expr><name>int</name> <name>opt_element_index</name></expr></argument>,
<argument><expr><name>CommandInterpreter</name> <operator>&amp;</operator><name>interpreter</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>OptionSet</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OptionSet</name></expr></argument>&gt;</argument_list></name> <name>OptionSetVector</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Option</name></expr></argument>&gt;</argument_list></name> <name>m_getopt_table</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>OptionSet</name></type> <name>m_seen_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionSetVector</name></type> <name>m_required_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionSetVector</name></type> <name>m_optional_options</name></decl>;</decl_stmt>

<function><type><name>OptionSetVector</name> <modifier>&amp;</modifier></type><name>GetRequiredOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>BuildValidOptionSets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>m_required_options</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OptionSetVector</name> <modifier>&amp;</modifier></type><name>GetOptionalOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>BuildValidOptionSets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>m_optional_options</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>IsASubset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionSet</name> <modifier>&amp;</modifier></type><name>set_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionSet</name> <modifier>&amp;</modifier></type><name>set_b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>OptionsSetDiff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionSet</name> <modifier>&amp;</modifier></type><name>set_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionSet</name> <modifier>&amp;</modifier></type><name>set_b</name></decl></parameter>,
<parameter><decl><type><name>OptionSet</name> <modifier>&amp;</modifier></type><name>diffs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>OptionsSetUnion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionSet</name> <modifier>&amp;</modifier></type><name>set_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionSet</name> <modifier>&amp;</modifier></type><name>set_b</name></decl></parameter>,
<parameter><decl><type><name>OptionSet</name> <modifier>&amp;</modifier></type><name>union_set</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>OptionParsingStarting</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>execution_context</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>Status</name></type> <name>OptionParsingFinished</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>execution_context</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OptionGroup</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>OptionGroup</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>OptionGroup</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <call><name>GetDefinitions</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetOptionValue</name><argument_list>(<argument><expr><name>uint32_t</name> <name>option_idx</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>option_value</name></expr></argument>,
<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>execution_context</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>OptionParsingStarting</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>execution_context</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>Status</name></type> <name>OptionParsingFinished</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>execution_context</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupOptions</name> <range>: <expr><name>public</name> <name>Options</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionGroupOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>OptionGroupOptions</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;









<expr><name>void</name> <call><name>Append</name><argument_list>(<argument><expr><name>OptionGroup</name> <operator>*</operator><name>group</name></expr></argument>)</argument_list></call></expr>;





















<expr><name>void</name> <macro><name>Append</name><argument_list>(<argument>OptionGroup *group</argument>, <argument>uint32_t src_mask</argument>, <argument>uint32_t dst_mask</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>Finalize</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>DidFinalize</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_did_finalize</name></expr>;</return> }</block>

<name>Status</name> <macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_arg</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>OptionParsingFinished</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>m_did_finalize</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>m_option_defs</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>OptionGroup</name> <operator>*</operator><macro><name>GetGroupWithOption</name><argument_list>(<argument>char short_opt</argument>)</argument_list></macro></expr>;

struct <expr><name>OptionInfo</name> <block>{
<macro><name>OptionInfo</name><argument_list>(<argument>OptionGroup *g</argument>, <argument>uint32_t i</argument>)</argument_list></macro> <operator>:</operator> <expr><call><name>option_group</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <macro><name>option_index</name><argument_list>(<argument>i</argument>)</argument_list></macro> <expr><block>{}</block>
<name>OptionGroup</name> <operator>*</operator><name>option_group</name></expr>;
<expr><name>uint32_t</name> <name>option_index</name></expr>;
}</block></expr>;
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OptionInfo</name></expr></argument>&gt;</argument_list></name> <name>OptionInfos</name></expr>;</expr_stmt></typedef>

<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <name>m_option_defs</name></block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionInfos</name></type> <name>m_option_infos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_did_finalize</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
