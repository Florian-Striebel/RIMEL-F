<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/Variable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_VARIABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_VARIABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Declaration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Mangled.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/DWARFExpression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Variable</name> <range>: <expr><name>public</name> <name>UserID</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>std</name>::<name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Variable</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>RangeVector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></type> <name>RangeList</name>;</typedef>




<macro><name>Variable</name><argument_list>(<argument>lldb::user_id_t uid</argument>, <argument>const char *name</argument>, <argument>const char *mangled</argument>,
<argument>const lldb::SymbolFileTypeSP &amp;symfile_type_sp</argument>, <argument>lldb::ValueType scope</argument>,
<argument>SymbolContextScope *owner_scope</argument>, <argument>const RangeList &amp;scope_range</argument>,
<argument>Declaration *decl</argument>, <argument>const DWARFExpression &amp;location</argument>, <argument>bool external</argument>,
<argument>bool artificial</argument>, <argument>bool location_is_constant_data</argument>,
<argument>bool static_member = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Variable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>DumpDeclaration</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_fullpaths</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_module</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>Declaration</name> <operator>&amp;</operator><macro><name>GetDeclaration</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_declaration</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetUnqualifiedName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>SymbolContextScope</name> <operator>*</operator><macro><name>GetSymbolContextScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_owner_scope</name></expr>;</return> }</block></expr></expr_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>NameMatches</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>NameMatches</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>Type</name> <modifier>*</modifier></type><name>GetType</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueType</name> <macro><name>GetScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_scope</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>RangeList</name> <operator>&amp;</operator><macro><name>GetScopeRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_scope_range</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsExternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_external</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsArtificial</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_artificial</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsStaticMember</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_static_member</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>DWARFExpression</name> <modifier>&amp;</modifier></type><name>LocationExpression</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_location</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>DWARFExpression</name> <operator>&amp;</operator><macro><name>LocationExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_location</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>bool</name></type> <name>DumpLocationForAddress</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>CalculateSymbolContext</name><parameter_list>(<parameter><decl><type><name>SymbolContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsInScope</name><parameter_list>(<parameter><decl><type><name>StackFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>LocationIsValidForFrame</name><parameter_list>(<parameter><decl><type><name>StackFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>LocationIsValidForAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetLocationIsConstantValueData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_loc_is_const_data</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetLocationIsConstantValueData</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_loc_is_const_data</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>GetVariableCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>VariableList</name> <modifier>&amp;</modifier></type><name>var_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>GetValuesForVariableExpressionPath</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>variable_expr_path</name></expr></argument>, <argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>scope</name></expr></argument>,
<argument><expr><name>GetVariableCallback</name> <name>callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>, <argument><expr><name>VariableList</name> <operator>&amp;</operator><name>variable_list</name></expr></argument>,
<argument><expr><name>ValueObjectList</name> <operator>&amp;</operator><name>valobj_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AutoComplete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><name>CompletionRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CompilerDeclContext</name></type> <name>GetDeclContext</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>CompilerDecl</name></type> <name>GetDecl</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Mangled</name></type> <name>m_mangled</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SymbolFileTypeSP</name> <name>m_symfile_type_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueType</name> <name>m_scope</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>m_owner_scope</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RangeList</name></type> <name>m_scope_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Declaration</name></type> <name>m_declaration</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DWARFExpression</name></type> <name>m_location</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m_external</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m_artificial</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>m_loc_is_const_data</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m_static_member</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Variable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Variable</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Variable</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
