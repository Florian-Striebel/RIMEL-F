<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/StreamAsynchronousIO.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_STREAMASYNCHRONOUSIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_STREAMASYNCHRONOUSIO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Debugger</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StreamAsynchronousIO</name> <range>: <expr><name>public</name> <name>Stream</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>StreamAsynchronousIO</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>bool for_stdout</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>StreamAsynchronousIO</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Flush</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>size_t</name> <macro><name>WriteImpl</name><argument_list>(<argument>const void *src</argument>, <argument>size_t src_len</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>Debugger</name> <operator>&amp;</operator><name>m_debugger</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_data</name></expr>;
<expr><name>bool</name> <name>m_for_stdout</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
