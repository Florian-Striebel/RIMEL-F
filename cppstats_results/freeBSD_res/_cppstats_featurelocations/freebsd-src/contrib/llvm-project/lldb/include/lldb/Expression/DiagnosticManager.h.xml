<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/DiagnosticManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_DIAGNOSTICMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_DIAGNOSTICMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<enum>enum <name>DiagnosticOrigin</name> <block>{
<decl><name>eDiagnosticOriginUnknown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eDiagnosticOriginLLDB</name></decl>,
<decl><name>eDiagnosticOriginClang</name></decl>,
<decl><name>eDiagnosticOriginSwift</name></decl>,
<decl><name>eDiagnosticOriginLLVM</name></decl>
}</block>;</enum>

<enum>enum <name>DiagnosticSeverity</name> <block>{
<decl><name>eDiagnosticSeverityError</name></decl>,
<decl><name>eDiagnosticSeverityWarning</name></decl>,
<decl><name>eDiagnosticSeverityRemark</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>LLDB_INVALID_COMPILER_ID</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Diagnostic</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DiagnosticManager</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>DiagnosticOrigin</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_origin</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Diagnostic</name> <modifier>*</modifier></type><name>diag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DiagnosticOrigin</name></type> <name>kind</name> <init>= <expr><call><name><name>diag</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>eDiagnosticOriginUnknown</name></expr>:</case>
<case>case <expr><name>eDiagnosticOriginLLDB</name></expr>:</case>
<case>case <expr><name>eDiagnosticOriginLLVM</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>eDiagnosticOriginClang</name></expr>:</case>
<case>case <expr><name>eDiagnosticOriginSwift</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<macro><name>Diagnostic</name><argument_list>(<argument>llvm::StringRef message</argument>, <argument>DiagnosticSeverity severity</argument>,
<argument>DiagnosticOrigin origin</argument>, <argument>uint32_t compiler_id</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_message</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_severity</name><argument_list>(<argument><expr><name>severity</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_origin</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_compiler_id</name><argument_list>(<argument>compiler_id</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>Diagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Diagnostic</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_message</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_message</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_severity</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_severity</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_origin</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_origin</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_compiler_id</name><argument_list>(<argument>rhs.m_compiler_id</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>Diagnostic</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>HasFixIts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>DiagnosticSeverity</name> <macro><name>GetSeverity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_severity</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetCompilerID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_compiler_id</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetMessage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_message</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendMessage</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>message</name></expr></argument>,
<argument><expr><name>bool</name> <name>precede_with_newline</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>precede_with_newline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_message</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_message</name> <operator>+=</operator> <name>message</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_message</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DiagnosticSeverity</name></type> <name>m_severity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticOrigin</name></type> <name>m_origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_compiler_id</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Diagnostic</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>DiagnosticList</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_diagnostics</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_fixed_expression</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>DiagnosticList</name> <modifier>&amp;</modifier></type><name>Diagnostics</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_diagnostics</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>HasFixIts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>any_of</name><argument_list>(<argument><expr><name>m_diagnostics</name></expr></argument>,
<argument><expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Diagnostic</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>diag</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>diag</name><operator>-&gt;</operator><name>HasFixIts</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddDiagnostic</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>message</name></expr></argument>, <argument><expr><name>DiagnosticSeverity</name> <name>severity</name></expr></argument>,
<argument><expr><name>DiagnosticOrigin</name> <name>origin</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>compiler_id</name> <operator>=</operator> <name>LLDB_INVALID_COMPILER_ID</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_diagnostics</name><operator>.</operator><name>emplace_back</name></name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>Diagnostic</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>severity</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>compiler_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddDiagnostic</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Diagnostic</name></expr></argument>&gt;</argument_list></name> <name>diagnostic</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_diagnostics</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>diagnostic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>size_t</name></type> <name>Printf</name><parameter_list>(<parameter><decl><type><name>DiagnosticSeverity</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>3<operator>,</operator> 4</function_decl>)</block_content></block></decl>)</decl_stmt>)</block_content></block></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>PutString</name><argument_list>(<argument><expr><name>DiagnosticSeverity</name> <name>severity</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendMessageToDiagnostic</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_diagnostics</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_diagnostics</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>AppendMessage</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetString</name><argument_list>(<argument>char separator = <literal type="char">'\n'</literal></argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Log</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>GetFixedExpression</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_fixed_expression</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetFixedExpression</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>fixed_expression</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_fixed_expression</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>fixed_expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>DiagnosticList</name></type> <name>m_diagnostics</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_fixed_expression</name></expr>;</expr_stmt>
};
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
