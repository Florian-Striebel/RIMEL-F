<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/Block.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_BLOCK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_BLOCK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/LineEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

















<decl_stmt><decl><type><name>class</name></type> <name>Block</name> <range>: <expr><name>public</name> <name>UserID</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>SymbolContextScope</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>RangeVector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>RangeList</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>RangeList</name><operator>::</operator><name>Entry</name> <name>Range</name></expr>;</expr_stmt></typedef>
















<macro><name>Block</name><argument_list>(<argument>lldb::user_id_t uid</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><operator>~</operator><macro><name>Block</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>AddChild</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BlockSP</name> <operator>&amp;</operator><name>child_block_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>AddRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>FinalizeRanges</name><parameter_list>()</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>void</name></type> <name>CalculateSymbolContext</name><argument_list>(<argument><expr><name>SymbolContext</name> <operator>*</operator><name>sc</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>CalculateSymbolContextModule</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CompileUnit</name> <operator>*</operator><macro><name>CalculateSymbolContextCompileUnit</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Function</name> <operator>*</operator><macro><name>CalculateSymbolContextFunction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Block</name> <operator>*</operator><macro><name>CalculateSymbolContextBlock</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>Contains</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>range_offset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>Contains</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Range</name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>Contains</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Block</name> <operator>*</operator><name>block</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


















<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>base_addr</name></expr></argument>, <argument><expr><name>int32_t</name> <name>depth</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>DumpSymbolContext</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DumpAddressRanges</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>base_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Function</name> <operator>*</operator><name>function</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>Block</name> <operator>*</operator><macro><name>GetParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<function_decl><type><name>Block</name> <modifier>*</modifier></type><name>GetContainingInlinedBlock</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>Block</name> <modifier>*</modifier></type><name>GetInlinedParent</name><parameter_list>()</parameter_list>;</function_decl>














<function_decl><type><name>Block</name> <modifier>*</modifier></type>
<name>GetContainingInlinedBlockWithCallSite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Declaration</name> <modifier>&amp;</modifier></type><name>find_call_site</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>Block</name> <operator>*</operator><macro><name>GetSibling</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>Block</name> <operator>*</operator><macro><name>GetFirstChild</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name><name>m_children</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <call><name><name>m_children</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name> <macro><name>GetBlockVariableList</name><argument_list>(<argument>bool can_create</argument>)</argument_list></macro></expr>;</expr_stmt>


















<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendBlockVariables</name><argument_list>(<argument><expr><name>bool</name> <name>can_create</name></expr></argument>, <argument><expr><name>bool</name> <name>get_child_block_variables</name></expr></argument>,
<argument><expr><name>bool</name> <name>stop_if_child_block_is_inlined_function</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Variable</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>filter</name></expr></argument>,
<argument><expr><name>VariableList</name> <operator>*</operator><name>variable_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>



























<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendVariables</name><argument_list>(<argument><expr><name>bool</name> <name>can_create</name></expr></argument>, <argument><expr><name>bool</name> <name>get_parent_variables</name></expr></argument>,
<argument><expr><name>bool</name> <name>stop_if_block_is_inlined_function</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Variable</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>filter</name></expr></argument>,
<argument><expr><name>VariableList</name> <operator>*</operator><name>variable_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><specifier>const</specifier> <name>InlineFunctionInfo</name> <operator>*</operator><macro><name>GetInlinedFunctionInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_inlineInfoSP</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<function_decl><type><name>SymbolFile</name> <modifier>*</modifier></type><name>GetSymbolFile</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>CompilerDeclContext</name></type> <name>GetDeclContext</name><parameter_list>()</parameter_list>;</function_decl>








<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




















<function_decl><type><name>void</name></type> <name>SetInlinedFunctionInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mangled</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Declaration</name> <modifier>*</modifier></type><name>decl_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Declaration</name> <modifier>*</modifier></type><name>call_decl_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SetParentScope</name><parameter_list>(<parameter><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>parent_scope</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_parent_scope</name> <operator>=</operator> <name>parent_scope</name></expr>;</expr_stmt>
</block_content>}</block></function>








<decl_stmt><decl><type><name>void</name></type> <name>SetVariableList</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name> <operator>&amp;</operator><name>variable_list_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_variable_list_sp</name> <operator>=</operator> <name>variable_list_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>BlockInfoHasBeenParsed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_parsed_block_info</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>SetBlockInfoHasBeenParsed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set_children</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>FindBlockByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>block_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetNumRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_ranges</name><operator>.</operator><name>GetSize</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetRangeContainingOffset</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <name>offset</name></expr></argument>, <argument><expr><name>Range</name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>GetRangeContainingAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>AddressRange</name> <modifier>&amp;</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetRangeContainingLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>AddressRange</name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetRangeIndexContainingAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>GetRangeAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>range_idx</name></decl></parameter>, <parameter><decl><type><name>AddressRange</name> <modifier>&amp;</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetStartAddress</name><parameter_list>(<parameter><decl><type><name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetDidParseVariables</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set_children</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>BlockSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>m_parent_scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RangeList</name></type> <name>m_ranges</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>InlineFunctionInfoSP</name> <name>m_inlineInfoSP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name> <name>m_variable_list_sp</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_parsed_block_info</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>m_parsed_block_variables</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>m_parsed_child_blocks</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>GetSiblingForChild</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Block</name> <operator>*</operator><name>child_block</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Block</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Block</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Block</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Block</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
