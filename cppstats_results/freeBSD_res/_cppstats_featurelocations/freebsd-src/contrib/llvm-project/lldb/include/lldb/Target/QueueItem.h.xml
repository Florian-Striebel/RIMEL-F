<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/QueueItem.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_QUEUEITEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_QUEUEITEM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>QueueItem</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>QueueItem</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>QueueItem</name><argument_list>(<argument>lldb::QueueSP queue_sp</argument>, <argument>lldb::ProcessSP process_sp</argument>,
<argument>lldb::addr_t item_ref</argument>, <argument>lldb_private::Address address</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><call><name>QueueItem</name><argument_list>()</argument_list></call></expr>;






<expr><name>lldb</name><operator>::</operator><name>QueueItemKind</name> <call><name>GetKind</name><argument_list>()</argument_list></call></expr>;





<expr><name>void</name> <macro><name>SetKind</name><argument_list>(<argument>lldb::QueueItemKind item_kind</argument>)</argument_list></macro></expr>;











<expr><name>lldb_private</name><operator>::</operator><name>Address</name> <operator>&amp;</operator><call><name>GetAddress</name><argument_list>()</argument_list></call></expr>;






<expr><name>void</name> <macro><name>SetAddress</name><argument_list>(<argument>lldb_private::Address addr</argument>)</argument_list></macro></expr>;








<expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_queue_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block>













<name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetExtendedBacktraceThread</name><argument_list>(<argument>ConstString type</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>SetItemThatEnqueuedThis</name><argument_list>(<argument>lldb::addr_t address_of_item</argument>)</argument_list></macro> <block>{
<expr><name>m_item_that_enqueued_this_ref</name> <operator>=</operator> <name>address_of_item</name></expr>;
}</block>

<name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetItemThatEnqueuedThis</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetEnqueueingThreadID</name><argument_list>(<argument>lldb::tid_t tid</argument>)</argument_list></macro> <block>{ <expr><name>m_enqueueing_thread_id</name> <operator>=</operator> <name>tid</name></expr>; }</block>

<name>lldb</name><operator>::</operator><name>tid_t</name> <call><name>GetEnqueueingThreadID</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetEnqueueingQueueID</name><argument_list>(<argument>lldb::queue_id_t qid</argument>)</argument_list></macro> <block>{
<expr><name>m_enqueueing_queue_id</name> <operator>=</operator> <name>qid</name></expr>;
}</block>

<name>lldb</name><operator>::</operator><name>queue_id_t</name> <call><name>GetEnqueueingQueueID</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetTargetQueueID</name><argument_list>(<argument>lldb::queue_id_t qid</argument>)</argument_list></macro> <block>{ <expr><name>m_target_queue_id</name> <operator>=</operator> <name>qid</name></expr>; }</block>

<name>void</name> <macro><name>SetStopID</name><argument_list>(<argument>uint32_t stop_id</argument>)</argument_list></macro> <block>{ <expr><name>m_stop_id</name> <operator>=</operator> <name>stop_id</name></expr>; }</block>

<name>uint32_t</name> <call><name>GetStopID</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetEnqueueingBacktrace</name><argument_list>(<argument>std::vector&lt;lldb::addr_t&gt; backtrace</argument>)</argument_list></macro> <block>{
<expr><name>m_backtrace</name> <operator>=</operator> <name>backtrace</name></expr>;
}</block>

<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>GetEnqueueingBacktrace</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetThreadLabel</name><argument_list>(<argument>std::string thread_name</argument>)</argument_list></macro> <block>{ <expr><name>m_thread_label</name> <operator>=</operator> <name>thread_name</name></expr>; }</block>

<name>std</name><operator>::</operator><name>string</name> <call><name>GetThreadLabel</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetQueueLabel</name><argument_list>(<argument>std::string queue_name</argument>)</argument_list></macro> <block>{ <expr><name>m_queue_label</name> <operator>=</operator> <name>queue_name</name></expr>; }</block>

<name>std</name><operator>::</operator><name>string</name> <call><name>GetQueueLabel</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetTargetQueueLabel</name><argument_list>(<argument>std::string queue_name</argument>)</argument_list></macro> <block>{
<expr><name>m_target_queue_label</name> <operator>=</operator> <name>queue_name</name></expr>;
}</block>

<name>lldb</name><operator>::</operator><name>ProcessSP</name> <call><name>GetProcessSP</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <call><name>FetchEntireItem</name><argument_list>()</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>QueueWP</name> <name>m_queue_wp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_item_ref</name></expr>;

<expr><name>lldb_private</name><operator>::</operator><name>Address</name> <name>m_address</name></expr>;
<expr><name>bool</name> <name>m_have_fetched_entire_item</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>QueueItemKind</name> <name>m_kind</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_item_that_enqueued_this_ref</name></expr>;


<expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>m_enqueueing_thread_id</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>queue_id_t</name>
<name>m_enqueueing_queue_id</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>queue_id_t</name> <name>m_target_queue_id</name></expr>;
<expr><name>uint32_t</name> <name>m_stop_id</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>m_backtrace</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_thread_label</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_queue_label</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_target_queue_label</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>QueueItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QueueItem</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>QueueItem</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>QueueItem</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
