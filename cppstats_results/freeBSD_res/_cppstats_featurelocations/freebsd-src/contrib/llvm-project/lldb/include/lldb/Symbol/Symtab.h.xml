<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/Symtab.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_SYMTAB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_SYMTAB_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UniqueCStringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Symbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Symtab</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>IndexCollection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>UniqueCStringMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>NameToIndexMap</name>;</typedef>

<enum>enum <name>Debug</name> <block>{
<decl><name>eDebugNo</name></decl>,
<decl><name>eDebugYes</name></decl>,
<decl><name>eDebugAny</name></decl>
}</block>;</enum>

<enum>enum <name>Visibility</name> <block>{ <decl><name>eVisibilityAny</name></decl>, <decl><name>eVisibilityExtern</name></decl>, <decl><name>eVisibilityPrivate</name></decl> }</block>;</enum>

<expr_stmt><expr><call><name>Symtab</name><argument_list>(<argument><expr><name>ObjectFile</name> <operator>*</operator><name>objfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Symtab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>PreloadSymbols</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Reserve</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>Resize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>AddSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>size_t</name> <macro><name>GetNumSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SectionFileAddressesChanged</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type>
<name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>SortOrder</name> <name>sort_type</name></expr></argument>,
<argument><expr><name>Mangled</name><operator>::</operator><name>NamePreference</name> <name>name_preference</name> <operator>=</operator> <name>Mangled</name><operator>::</operator><name>ePreferDemangled</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indexes</name></expr></argument>,
<argument><expr><name>Mangled</name><operator>::</operator><name>NamePreference</name> <name>name_preference</name> <operator>=</operator>
<name>Mangled</name><operator>::</operator><name>ePreferDemangled</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetIndexForSymbol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>*</operator><name>symbol</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>GetMutex</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_mutex</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>FindSymbolByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>uid</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>SymbolAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>*</modifier></type><name>SymbolAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>FindSymbolWithType</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>,
<argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>start_idx</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>*</modifier></type><name>GetParent</name><argument_list>(<argument><expr><name>Symbol</name> <operator>*</operator><name>symbol</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesWithType</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indexes</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>start_idx</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>uint32_t</name> <name>end_index</name> <operator>=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesWithTypeAndFlagsValue</name><argument_list>(
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>flags_value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indexes</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>start_idx</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>uint32_t</name> <name>end_index</name> <operator>=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesWithType</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>,
<argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>matches</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>start_idx</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>uint32_t</name> <name>end_index</name> <operator>=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesWithName</name><argument_list>(<argument><expr><name>ConstString</name> <name>symbol_name</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesWithName</name><argument_list>(<argument><expr><name>ConstString</name> <name>symbol_name</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>,
<argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesWithNameAndType</name><argument_list>(<argument><expr><name>ConstString</name> <name>symbol_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesWithNameAndType</name><argument_list>(<argument><expr><name>ConstString</name> <name>symbol_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>,
<argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type>
<name>AppendSymbolIndexesMatchingRegExAndType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indexes</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AppendSymbolIndexesMatchingRegExAndType</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>, <argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indexes</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>FindAllSymbolsWithNameAndType</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>symbol_indexes</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>FindAllSymbolsWithNameAndType</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>,
<argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>symbol_indexes</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>FindAllSymbolsMatchingRexExAndType</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>, <argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>symbol_indexes</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>FindFirstSymbolWithNameAndType</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>,
<argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>FindSymbolAtFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>FindSymbolContainingFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>ForEachSymbolContainingFileAddress</name><argument_list>(
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Symbol</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>FindFunctionSymbols</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>name_type_mask</name></decl></parameter>,
<parameter><decl><type><name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CalculateSymbolSizes</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SortSymbolIndexesByValue</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indexes</name></expr></argument>,
<argument><expr><name>bool</name> <name>remove_duplicates</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DumpSymbolHeader</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>Finalize</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>m_symbols</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>m_symbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>collection</name></type> <name>new_symbols</name><argument_list>(<argument><expr><call><name><name>m_symbols</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_symbols</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>m_symbols</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>new_symbols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>AppendSymbolNamesToMap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IndexCollection</name> <operator>&amp;</operator><name>indexes</name></expr></argument>,
<argument><expr><name>bool</name> <name>add_demangled</name></expr></argument>, <argument><expr><name>bool</name> <name>add_mangled</name></expr></argument>,
<argument><expr><name>NameToIndexMap</name> <operator>&amp;</operator><name>name_to_index_map</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><name>ObjectFile</name> <modifier>*</modifier></type><name>GetObjectFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_objfile</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>class</name></type> <name>FileRangeToIndexMapCompare</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FileRangeToIndexMapCompare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Symtab</name> <operator>&amp;</operator><name>symtab</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_symtab</name><argument_list>(<argument>symtab</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <name>a_data</name><operator>,</operator> <specifier>const</specifier> <name>uint32_t</name> <name>b_data</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>rank</name><argument_list>(<argument><expr><name>a_data</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>rank</name><argument_list>(<argument><expr><name>b_data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>int</name></type> <name>rank</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint32_t</name> <name>data</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>symbol</name> <init>= <expr><operator>*</operator><call><name><name>m_symtab</name><operator>.</operator><name>SymbolAtIndex</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>symbol</name><operator>.</operator><name>IsExternal</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>symbol</name><operator>.</operator><name>IsWeak</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>symbol</name><operator>.</operator><name>IsDebug</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Symtab</name> <modifier>&amp;</modifier></type><name>m_symtab</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<typedef>typedef <type><name><name>RangeDataVector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>FileRangeToIndexMapCompare</name></expr></argument>&gt;</argument_list></name></type>
<name>FileRangeToIndexMap</name>;</typedef>
<function_decl><type><name>void</name></type> <name>InitNameIndexes</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitAddressIndexes</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ObjectFile</name> <modifier>*</modifier></type><name>m_objfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_symbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileRangeToIndexMap</name></type> <name>m_file_addr_to_index</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name></expr></argument>, <argument><expr><name><name>UniqueCStringMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>m_name_to_symbol_indices</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name>
<name>m_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_file_addr_to_index_computed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>m_name_indexes_computed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>UniqueCStringMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type>
<name>GetNameToSymbolIndexMap</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <name>type</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>map</name> <init>= <expr><call><name><name>m_name_to_symbol_indices</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>map</name> <operator>!=</operator> <call><name><name>m_name_to_symbol_indices</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>map</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CheckSymbolAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><name>Debug</name> <name>symbol_debug_type</name></expr></argument>,
<argument><expr><name>Visibility</name> <name>symbol_visibility</name></expr></argument>)</argument_list> const <block>{<block_content>
<switch>switch <condition>(<expr><name>symbol_debug_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>eDebugNo</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m_symbols</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>IsDebug</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>eDebugYes</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m_symbols</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>IsDebug</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>eDebugAny</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>symbol_visibility</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>eVisibilityAny</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>eVisibilityExtern</name></expr>:</case>
<return>return <expr><name><name>m_symbols</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>IsExternal</name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>eVisibilityPrivate</name></expr>:</case>
<return>return <expr><operator>!</operator><name><name>m_symbols</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>IsExternal</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


















<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetNameIndexes</name><argument_list>(<argument><expr><name>ConstString</name> <name>symbol_name</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indexes</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SymbolIndicesToSymbolContextList</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>symbol_indexes</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>RegisterMangledNameEntry</name><argument_list>(
<argument><expr><name>uint32_t</name> <name>value</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>class_contexts</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>NameToIndexMap</name><operator>::</operator><name>Entry</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>backlog</name></expr></argument>,
<argument><expr><name>RichManglingContext</name> <operator>&amp;</operator><name>rmc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>RegisterBacklogEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NameToIndexMap</name><operator>::</operator><name>Entry</name> <operator>&amp;</operator><name>entry</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>decl_context</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>class_contexts</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Symtab</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Symtab</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Symtab</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Symtab</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
