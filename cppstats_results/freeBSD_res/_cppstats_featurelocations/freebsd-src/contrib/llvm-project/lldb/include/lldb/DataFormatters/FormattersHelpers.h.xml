<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/FormattersHelpers.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_FORMATTERSHELPERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_FORMATTERSHELPERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeCategory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeFormat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeSummary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeSynthetic.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>formatters</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name></type> <name>AddFormat</name><argument_list>(<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>SharedPointer</name> <name>category_sp</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>, <argument><expr><name>TypeFormatImpl</name><operator>::</operator><name>Flags</name> <name>flags</name></expr></argument>,
<argument><expr><name>bool</name> <name>regex</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddSummary</name><argument_list>(<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>SharedPointer</name> <name>category_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <name>summary_sp</name></expr></argument>, <argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><name>bool</name> <name>regex</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddStringSummary</name><argument_list>(<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>SharedPointer</name> <name>category_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>string</name></expr></argument>, <argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><name>TypeSummaryImpl</name><operator>::</operator><name>Flags</name> <name>flags</name></expr></argument>, <argument><expr><name>bool</name> <name>regex</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddOneLineSummary</name><argument_list>(<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>SharedPointer</name> <name>category_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>, <argument><expr><name>TypeSummaryImpl</name><operator>::</operator><name>Flags</name> <name>flags</name></expr></argument>,
<argument><expr><name>bool</name> <name>regex</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>AddCXXSummary</name><argument_list>(<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>SharedPointer</name> <name>category_sp</name></expr></argument>,
<argument><expr><name>CXXFunctionSummaryFormat</name><operator>::</operator><name>Callback</name> <name>funct</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>, <argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><name>TypeSummaryImpl</name><operator>::</operator><name>Flags</name> <name>flags</name></expr></argument>, <argument><expr><name>bool</name> <name>regex</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>AddCXXSynthetic</name><argument_list>(<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>SharedPointer</name> <name>category_sp</name></expr></argument>,
<argument><expr><name>CXXSyntheticChildren</name><operator>::</operator><name>CreateFrontEndCallback</name> <name>generator</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>, <argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><name>ScriptedSyntheticChildren</name><operator>::</operator><name>Flags</name> <name>flags</name></expr></argument>,
<argument><expr><name>bool</name> <name>regex</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddFilter</name><argument_list>(<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>SharedPointer</name> <name>category_sp</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>children</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>, <argument><expr><name>ScriptedSyntheticChildren</name><operator>::</operator><name>Flags</name> <name>flags</name></expr></argument>,
<argument><expr><name>bool</name> <name>regex</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>ExtractIndexFromString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item_name</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetArrayAddressOrPointerValue</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <call><name>GetValueOfLibCXXCompressedPair</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>time_t</name></type> <name>GetOSXEpoch</name><parameter_list>()</parameter_list>;</function_decl>

<struct>struct <name>InferiorSizedWord</name> <block>{

<expr_stmt><expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InferiorSizedWord</name> <operator>&amp;</operator><name>word</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ptr_size</name><argument_list>(<argument>word.ptr_size</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thirty_two</name> <operator>=</operator> <name><name>word</name><operator>.</operator><name>thirty_two</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sixty_four</name> <operator>=</operator> <name><name>word</name><operator>.</operator><name>sixty_four</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>InferiorSizedWord</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>InferiorSizedWord</name> <operator>&amp;</operator><name>word</name><operator>)</operator> <block>{
<expr><name>ptr_size</name> <operator>=</operator> <name><name>word</name><operator>.</operator><name>ptr_size</name></name></expr>;
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thirty_two</name> <operator>=</operator> <name><name>word</name><operator>.</operator><name>thirty_two</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sixty_four</name> <operator>=</operator> <name><name>word</name><operator>.</operator><name>sixty_four</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></init></decl></decl_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<decl><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>uint64_t</name> <name>val</name></expr></argument>, <argument><expr><name>Process</name> <operator>&amp;</operator><name>process</name></expr></argument>)</argument_list>
<range>: <macro><name>ptr_size</name><argument_list>(<argument>process.GetAddressByteSize()</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thirty_two</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sixty_four</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"new pointer size is unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></expr></range></decl>

<decl><name>bool</name> <name>IsNegative</name><argument_list>()</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>thirty_two</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>sixty_four</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl>

<decl><name>bool</name> <name>IsZero</name><argument_list>()</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>thirty_two</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>sixty_four</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl>

<decl>static <name>InferiorSizedWord</name> <name>GetMaximum</name><argument_list>(<argument><expr><name>Process</name> <operator>&amp;</operator><name>process</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>process</name><operator>.</operator><name>GetAddressByteSize</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>UINT32_MAX</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl>

<decl><name>InferiorSizedWord</name> <name>operator</name>&gt;&gt;<argument_list>(<argument><expr><name>int</name> <name>rhs</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>thirty_two</name> <operator>&gt;&gt;</operator> <name>rhs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>sixty_four</name> <operator>&gt;&gt;</operator> <name>rhs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl>

<decl><name>InferiorSizedWord</name> <name>operator</name>&lt;&lt;<argument_list>(<argument><expr><name>int</name> <name>rhs</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>thirty_two</name> <operator>&lt;&lt;</operator> <name>rhs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>sixty_four</name> <operator>&lt;&lt;</operator> <name>rhs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl>

<decl><name>InferiorSizedWord</name> <name>operator</name><modifier>&amp;</modifier>(const <name>InferiorSizedWord</name> <modifier>&amp;</modifier><name>word</name></decl>) <expr_stmt><expr><specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>!=</operator> <name><name>word</name><operator>.</operator><name>ptr_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ptr_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt></struct>
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>thirty_two</name> <operator>&amp;</operator> <name><name>word</name><operator>.</operator><name>thirty_two</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>sixty_four</name> <operator>&amp;</operator> <name><name>word</name><operator>.</operator><name>sixty_four</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>InferiorSizedWord</name> <name>operator</name></type><modifier>&amp;</modifier>(<name>int</name> <name>x</name></decl>) const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>thirty_two</name> <operator>&amp;</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><name>sixty_four</name> <operator>&amp;</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetBitSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr_size</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>thirty_two</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>sixty_four</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>InferiorSizedWord</name> <macro><name>SignExtend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>thirty_two</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>InferiorSizedWord</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>sixty_four</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
}

uint8_t <expr_stmt><expr><operator>*</operator><macro><name>CopyToBuffer</name><argument_list>(<argument>uint8_t *buffer</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thirty_two</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sixty_four</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buffer</name> <operator>+</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
}

DataExtractor
<macro><name>GetAsData</name><argument_list>(<argument>lldb::ByteOrder byte_order = lldb::eByteOrderInvalid</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DataExtractor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thirty_two</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>byte_order</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>DataExtractor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sixty_four</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>byte_order</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<macro><name>InferiorSizedWord</name><argument_list>(<argument>uint64_t val</argument>, <argument>size_t psz</argument>)</argument_list></macro> : <macro><name>ptr_size</name><argument_list>(<argument>psz</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thirty_two</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sixty_four</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>size_t</name></type> <name>ptr_size</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>thirty_two</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sixty_four</name></decl>;</decl_stmt>
}</block>;</union>
};
}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
