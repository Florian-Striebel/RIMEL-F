<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/UniqueCStringMap.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_UNIQUECSTRINGMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_UNIQUECSTRINGMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RegularExpression.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>







<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>UniqueCStringMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>Entry</name> <block>{
<macro><name>Entry</name><argument_list>(<argument>ConstString cstr</argument>, <argument>const T &amp;v</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>cstring</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>value</name><argument_list>(<argument>v</argument>)</argument_list></macro> <expr><block>{}</block>

<name>ConstString</name> <name>cstring</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Entry</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>




<function><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>unique_cstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<macro><name>m_map</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>typename UniqueCStringMap&lt;T&gt;::Entry(unique_cstr, value)</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>&amp;</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>





<decl_stmt><decl><type><name>bool</name></type> <name>GetValueAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>, <argument><expr><name>T</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>m_map</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ConstString</name></type> <name>GetCStringAtIndexUnchecked</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>m_map</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cstring</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>T</name></type> <name>GetValueAtIndexUnchecked</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name><name>m_map</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</return> </block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>GetValueRefAtIndexUnchecked</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>m_map</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ConstString</name></type> <name>GetCStringAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&lt;</operator> <call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name><name>m_map</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cstring</name></expr> </then><else>: <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name>T</name></type> <name>Find</name><argument_list>(<argument><expr><name>ConstString</name> <name>unique_cstr</name></expr></argument>, <argument><expr><name>T</name> <name>fail_value</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>pos</name> <init>= <expr><name>llvm</name><operator>::</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>m_map</name></expr></argument>, <argument><expr><name>unique_cstr</name></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>cstring</name></name> <operator>==</operator> <name>unique_cstr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pos</name><operator>-&gt;</operator><name>value</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>fail_value</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>*</modifier></type><name>FindFirstValueForName</name><argument_list>(<argument><expr><name>ConstString</name> <name>unique_cstr</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>pos</name> <init>= <expr><name>llvm</name><operator>::</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>m_map</name></expr></argument>, <argument><expr><name>unique_cstr</name></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>cstring</name></name> <operator>==</operator> <name>unique_cstr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>*</modifier></type><name>FindNextValueForName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Entry</name> <operator>*</operator><name>entry_ptr</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_map</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>*</modifier></type><name>first_entry</name> <init>= <expr><operator>&amp;</operator><name><name>m_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>*</modifier></type><name>after_last_entry</name> <init>= <expr><name>first_entry</name> <operator>+</operator> <call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>*</modifier></type><name>next_entry</name> <init>= <expr><name>entry_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>first_entry</name> <operator>&lt;=</operator> <name>next_entry</name> <operator>&amp;&amp;</operator> <name>next_entry</name> <operator>&lt;</operator> <name>after_last_entry</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>next_entry</name><operator>-&gt;</operator><name>cstring</name></name> <operator>==</operator> <name><name>entry_ptr</name><operator>-&gt;</operator><name>cstring</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>next_entry</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetValues</name><argument_list>(<argument><expr><name>ConstString</name> <name>unique_cstr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>values</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>start_size</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>&amp;</modifier></type><name>entry</name> <range>: <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>equal_range</name><argument_list>(
<argument><expr><call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>unique_cstr</name></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_size</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetValues</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>values</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>start_size</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>const_iterator</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>pos</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>regex</name><operator>.</operator><name>Execute</name></name><argument_list>(<argument><expr><call><name><name>pos</name><operator>-&gt;</operator><name>cstring</name><operator>.</operator><name>GetCString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_size</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_map</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>





<function><type><name>void</name></type> <name>Reserve</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>










<function><type><name>void</name></type> <name>Sort</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>sort</name><argument_list>(<argument><expr><call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>






<function><type><name>void</name></type> <name>SizeToFit</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>m_map</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>collection</name></type> <name>temp</name><argument_list>(<argument><expr><call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>const_iterator</name></expr></argument>&gt;</argument_list></name>
<macro><name>equal_range</name><argument_list>(<argument>ConstString unique_cstr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name>equal_range</name><argument_list>(<argument><expr><call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>unique_cstr</name></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<label><name>protected</name>:</label>
<struct>struct <name>Compare</name> <block>{
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>Entry</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>Entry</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<return>return <expr><call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>cstring</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>cstring</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>Entry</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <name>ConstString</name> <name>rhs</name><operator>)</operator> <block>{
<return>return <expr><call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>cstring</name></name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>ConstString</name> <name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>Entry</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<return>return <expr><call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>cstring</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>ConstString</name> <name>lhs</name><operator>,</operator> <name>ConstString</name> <name>rhs</name><operator>)</operator> <block>{
<return>return <expr><call><name>uintptr_t</name><argument_list>(<argument><expr><call><name><name>lhs</name><operator>.</operator><name>GetCString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>uintptr_t</name><argument_list>(<argument><expr><call><name><name>rhs</name><operator>.</operator><name>GetCString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>collection</name></type> <name>m_map</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
