<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/ValueObjectPrinter.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_VALUEOBJECTPRINTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_VALUEOBJECTPRINTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/DumpValueObjectOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ValueObjectPrinter</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ValueObjectPrinter</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ValueObjectPrinter</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DumpValueObjectOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ValueObjectPrinter</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>PrintValueObject</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>InstancePointersSet</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>InstancePointersSet</name></expr></argument>&gt;</argument_list></name> <name>InstancePointersSetSP</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>InstancePointersSetSP</name></type> <name>m_printed_instance_pointers</name></decl>;</decl_stmt>



<macro><name>ValueObjectPrinter</name><argument_list>(<argument>ValueObject *valobj</argument>, <argument>Stream *s</argument>,
<argument>const DumpValueObjectOptions &amp;options</argument>,
<argument>const DumpValueObjectOptions::PointerDepth &amp;ptr_depth</argument>,
<argument>uint32_t curr_depth</argument>,
<argument>InstancePointersSetSP printed_instance_pointers</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>Init</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DumpValueObjectOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DumpValueObjectOptions</name><operator>::</operator><name>PointerDepth</name> <operator>&amp;</operator><name>ptr_depth</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>curr_depth</name></expr></argument>,
<argument><expr><name>InstancePointersSetSP</name> <name>printed_instance_pointers</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>GetMostSpecializedValue</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDescriptionForDisplay</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetRootNameForDisplay</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ShouldPrintValueObject</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsNil</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsUninitialized</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsPtr</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsRef</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsInstancePointer</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsAggregate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>PrintLocationIfNeeded</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintDecl</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CheckScopeIfNeeded</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ShouldPrintEmptyBrackets</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value_printed</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>summary_printed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TypeSummaryImpl</name> <modifier>*</modifier></type><name>GetSummaryFormatter</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>null_if_omitted</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>GetValueSummaryError</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>summary</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>PrintValueAndSummaryIfNeeded</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>value_printed</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>summary_printed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>PrintObjectDescriptionIfNeeded</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value_printed</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>summary_printed</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type>
<name>ShouldPrintChildren</name><argument_list>(<argument><expr><name>bool</name> <name>is_failed_description</name></expr></argument>,
<argument><expr><name>DumpValueObjectOptions</name><operator>::</operator><name>PointerDepth</name> <operator>&amp;</operator><name>curr_ptr_depth</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>ShouldExpandEmptyAggregates</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>GetValueObjectForChildrenGeneration</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintChildrenPreamble</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintChildrenPostamble</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>print_dotdotdot</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GenerateChild</name><argument_list>(<argument>ValueObject *synth_valobj</argument>, <argument>size_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>PrintChild</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>child_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DumpValueObjectOptions</name><operator>::</operator><name>PointerDepth</name> <operator>&amp;</operator><name>curr_ptr_depth</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetMaxNumChildrenToPrint</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>print_dotdotdot</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type>
<name>PrintChildren</name><argument_list>(<argument><expr><name>bool</name> <name>value_printed</name></expr></argument>, <argument><expr><name>bool</name> <name>summary_printed</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DumpValueObjectOptions</name><operator>::</operator><name>PointerDepth</name> <operator>&amp;</operator><name>curr_ptr_depth</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>PrintChildrenIfNeeded</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value_printed</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>summary_printed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>PrintChildrenOneLiner</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hide_names</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>m_orig_valobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>m_valobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>m_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DumpValueObjectOptions</name></type> <name>m_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_type_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_compiler_type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DumpValueObjectOptions</name><operator>::</operator><name>PointerDepth</name> <name>m_ptr_depth</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_curr_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_should_print</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_nil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_uninit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_aggregate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_instance_ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>TypeSummaryImpl</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_summary_formatter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_summary</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_error</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_val_summary_ok</name></decl>;</decl_stmt>

<macro><name>friend</name></macro> <struct_decl>struct <name>StringSummaryFormat</name>;</struct_decl>

<expr_stmt><expr><call><name>ValueObjectPrinter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueObjectPrinter</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ValueObjectPrinter</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ValueObjectPrinter</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
