<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadCollection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>ThreadList</name> <range>: <expr><name>public</name> <name>ThreadCollection</name> <block>{
<expr><name>friend</name> <name>class</name> <name>Process</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ThreadList</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>ThreadList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ThreadList</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>ThreadList</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ThreadList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;

<expr><name>uint32_t</name> <macro><name>GetSize</name><argument_list>(<argument>bool can_update = true</argument>)</argument_list></macro></expr>;



<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <call><name>GetSelectedThread</name><argument_list>()</argument_list></call></expr>;




<expr><name>class</name> <name>ExpressionExecutionThreadPusher</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ExpressionExecutionThreadPusher</name><argument_list>(<argument>ThreadList &amp;thread_list</argument>, <argument>lldb::tid_t tid</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_thread_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread_list</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_tid</name><argument_list>(<argument>tid</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>m_thread_list</name><operator>-&gt;</operator><name>PushExpressionExecutionThread</name></name><argument_list>(<argument><expr><name>m_tid</name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>ExpressionExecutionThreadPusher</name><argument_list>(<argument>lldb::ThreadSP thread_sp</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>ExpressionExecutionThreadPusher</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_thread_list</name> <operator>&amp;&amp;</operator> <name>m_tid</name> <operator>!=</operator> <name>LLDB_INVALID_THREAD_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_thread_list</name><operator>-&gt;</operator><name>PopExpressionExecutionThread</name></name><argument_list>(<argument><expr><name>m_tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>private</name><operator>:</operator>
<name>ThreadList</name> <operator>*</operator><name>m_thread_list</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>m_tid</name></expr>;
}</block></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <call><name>GetExpressionExecutionThread</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>PushExpressionExecutionThread</name><argument_list>(<argument>lldb::tid_t tid</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>PopExpressionExecutionThread</name><argument_list>(<argument>lldb::tid_t tid</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>SetSelectedThreadByID</name><argument_list>(<argument>lldb::tid_t tid</argument>, <argument>bool notify = false</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>SetSelectedThreadByIndexID</name><argument_list>(<argument>uint32_t index_id</argument>, <argument>bool notify = false</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>Clear</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>Flush</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>Destroy</name><argument_list>()</argument_list></call></expr>;




<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetThreadAtIndex</name><argument_list>(<argument>uint32_t idx</argument>, <argument>bool can_update = true</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>FindThreadByID</name><argument_list>(<argument>lldb::tid_t tid</argument>, <argument>bool can_update = true</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>FindThreadByProtocolID</name><argument_list>(<argument>lldb::tid_t tid</argument>,
<argument>bool can_update = true</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>RemoveThreadByID</name><argument_list>(<argument>lldb::tid_t tid</argument>, <argument>bool can_update = true</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>RemoveThreadByProtocolID</name><argument_list>(<argument>lldb::tid_t tid</argument>,
<argument>bool can_update = true</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>FindThreadByIndexID</name><argument_list>(<argument>uint32_t index_id</argument>, <argument>bool can_update = true</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <call><name>GetThreadSPForThreadPtr</name><argument_list>(<argument><expr><name>Thread</name> <operator>*</operator><name>thread_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <call><name>GetBackingThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>real_thread</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>ShouldStop</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Vote</name> <call><name>ShouldReportStop</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Vote</name> <call><name>ShouldReportRun</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>RefreshStateAfterStop</name><argument_list>()</argument_list></call></expr>;












<expr><name>bool</name> <call><name>WillResume</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>DidResume</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>DidStop</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>DiscardThreadPlans</name><argument_list>()</argument_list></call></expr>;

<expr><name>uint32_t</name> <macro><name>GetStopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetStopID</name><argument_list>(<argument>uint32_t stop_id</argument>)</argument_list></macro></expr>;

<expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>GetMutex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <call><name>Update</name><argument_list>(<argument><expr><name>ThreadList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>SetShouldReportStop</name><argument_list>(<argument>Vote vote</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>NotifySelectedThreadChanged</name><argument_list>(<argument>lldb::tid_t tid</argument>)</argument_list></macro></expr>;


<expr><name>Process</name> <operator>*</operator><name>m_process</name></expr>;
<expr><name>uint32_t</name>
<name>m_stop_id</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>tid_t</name>
<name>m_selected_tid</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name></expr></argument>&gt;</argument_list></name> <name>m_expression_tid_stack</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>ThreadList</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
