<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanStepOverRange.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANSTEPOVERRANGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANSTEPOVERRANGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StackID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlanStepRange.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanStepOverRange</name> <range>: <expr><name>public</name> <name>ThreadPlanStepRange</name></expr></range></decl>,
<decl><type ref="prev"/><name>ThreadPlanShouldStopHere</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ThreadPlanStepOverRange</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>const AddressRange &amp;range</argument>,
<argument>const SymbolContext &amp;addr_context</argument>,
<argument>lldb::RunMode stop_others</argument>,
<argument>LazyBool step_out_avoids_no_debug</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>ThreadPlanStepOverRange</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ShouldStop</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>DoPlanExplainsStop</name><argument_list>(<argument><expr><name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>DoWillResume</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>resume_state</name></expr></argument>, <argument><expr><name>bool</name> <name>current_plan</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>SetFlagsToDefault</name><parameter_list>()</parameter_list> override <block>{<block_content>
<expr_stmt><expr><call><name>GetFlags</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Set</name><argument_list>(<argument><expr><name>ThreadPlanStepOverRange</name><operator>::</operator><name>s_default_flag_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>s_default_flag_values</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetupAvoidNoDebug</name><parameter_list>(<parameter><decl><type><name>LazyBool</name></type> <name>step_out_avoids_code_without_debug_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsEquivalentContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>m_first_resume</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ThreadPlanStepOverRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlanStepOverRange</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadPlanStepOverRange</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ThreadPlanStepOverRange</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
