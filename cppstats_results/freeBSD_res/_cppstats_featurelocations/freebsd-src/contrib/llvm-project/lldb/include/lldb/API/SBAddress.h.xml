<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBAddress.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBADDRESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBADDRESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBModule.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBAddress</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBAddress</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>SBAddress</name><argument_list>(<argument>lldb::SBSection section</argument>, <argument>lldb::addr_t offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>SBAddress</name><argument_list>(<argument>lldb::addr_t load_addr</argument>, <argument>lldb::SBTarget &amp;target</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBAddress</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBAddress</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SBAddress</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>addr_t</name> <macro><name>GetFileAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>addr_t</name></type> <name>GetLoadAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBSection</name> <name>section</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>OffsetAddress</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContext</name> <macro><name>GetSymbolContext</name><argument_list>(<argument>uint32_t resolve_scope</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSection</name> <call><name>GetSection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <call><name>GetModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <call><name>GetCompileUnit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFunction</name> <call><name>GetFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBlock</name> <call><name>GetBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbol</name> <call><name>GetSymbol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBLineEntry</name> <call><name>GetLineEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBLineEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBInstruction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSymbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThreadPlan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBQueueItem</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Address</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>Address</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const</block></decl>;</decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>LLDB_API</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SBAddress</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>SBAddress</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Address</name> <operator>*</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Address</name> <operator>&amp;</operator><call><name>ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>Address</name> <operator>&amp;</operator><macro><name>ref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>Address</name> <operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>Address</name> <operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>Address</name></expr></argument>&gt;</argument_list></name> <name>m_opaque_up</name></expr>;</expr_stmt>
};

<expr_stmt><expr><name>bool</name> <name>LLDB_API</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SBAddress</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>SBAddress</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
