<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/StructuredDataPlugin.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_STRUCTUREDDATAPLUGIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_STRUCTUREDDATAPLUGIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CommandObjectMultiword</name></decl>;</decl_stmt>






















<decl_stmt><decl><type><name>class</name></type> <name>StructuredDataPlugin</name>
<range>: <expr><name>public</name> <name>PluginInterface</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>std</name>::<name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>StructuredDataPlugin</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>StructuredDataPlugin</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcess</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




















<function_decl><type><name>virtual</name> <name>bool</name></type> <name>SupportsStructuredDataType</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type_name</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


























<decl_stmt><decl><type><name>virtual</name> <name>void</name></type>
<name>HandleArrivalOfStructuredData</name><argument_list>(<argument><expr><name>Process</name> <operator>&amp;</operator><name>process</name></expr></argument>, <argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <operator>&amp;</operator><name>object_sp</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


















<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>GetDescription</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <operator>&amp;</operator><name>object_sp</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Stream</name> <operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetEnabled</name><argument_list>(<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
















<function_decl><type><name>virtual</name> <name>void</name></type> <name>ModulesDidLoad</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>&amp;</modifier></type><name>process</name></decl></parameter>, <parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<expr_stmt><expr><call><name>StructuredDataPlugin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessWP</name> <operator>&amp;</operator><name>process_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitializeBasePluginForDebugger</name><parameter_list>(<parameter><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>debugger</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StructuredDataPlugin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredDataPlugin</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>StructuredDataPlugin</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>StructuredDataPlugin</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
