<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/TraceCursor.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_TRACE_CURSOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_TRACE_CURSOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
























































<decl_stmt><decl><type><name>class</name></type> <name>TraceCursor</name> <block>{<block_content>
<label><name>public</name>:</label>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SeekType</name> <block>{<block_content>

<expr_stmt><expr><name>Set</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>

<expr><name>Current</name></expr><operator>,</operator>

<expr><name>End</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<macro><name>TraceCursor</name><argument_list>(<argument>lldb::ThreadSP thread_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TraceCursor</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetGranularity</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TraceInstructionControlFlowType</name> <name>granularity</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>SetIgnoreErrors</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore_errors</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>SetForwards</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>forwards</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>bool</name> <macro><name>IsForwards</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
























<function_decl><type><name>virtual</name> <name>bool</name></type> <name>Next</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




















<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>Seek</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>SeekType</name></type> <name>origin</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function_decl><type><name>ExecutionContextRef</name> <modifier>&amp;</modifier></type><name>GetExecutionContextRef</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsError</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>







<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <call><name>GetError</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetLoadAddress</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>








<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <call><name>GetTimestampCounter</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>TraceInstructionControlFlowType</name>
<call><name>GetInstructionControlFlowType</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ExecutionContextRef</name></type> <name>m_exe_ctx_ref</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TraceInstructionControlFlowType</name> <name>m_granularity</name> <operator>=</operator>
<name>lldb</name><operator>::</operator><name>eTraceInstructionControlFlowTypeInstruction</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_ignore_errors</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_forwards</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
