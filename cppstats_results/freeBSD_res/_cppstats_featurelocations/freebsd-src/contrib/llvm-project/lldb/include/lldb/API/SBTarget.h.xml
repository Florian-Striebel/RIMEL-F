<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBTarget.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBTARGET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBTARGET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBAddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBAttachInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBBreakpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBBroadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBFileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBFileSpecList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBLaunchInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBSymbolContextList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBWatchpoint.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBPlatform</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBTarget</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <block>{
<decl><name>eBroadcastBitBreakpointChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitModulesLoaded</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitModulesUnloaded</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitWatchpointChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitSymbolsLoaded</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>


<expr_stmt><expr><call><name>SBTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTarget</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTarget</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>SBTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>EventIsTargetEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>GetTargetFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetNumModulesFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBModule</name> <macro><name>GetModuleAtIndexFromEvent</name><argument_list>(<argument>const uint32_t idx</argument>,
<argument>const lldb::SBEvent &amp;event</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBroadcasterClassName</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <call><name>GetProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>SetCollectingStats</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>GetCollectingStats</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <call><name>GetStatistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBPlatform</name> <call><name>GetPlatform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<function_decl><type><name>SBEnvironment</name></type> <name>GetEnvironment</name><parameter_list>()</parameter_list>;</function_decl>













<function_decl><type><name>SBError</name></type> <name>Install</name><parameter_list>()</parameter_list>;</function_decl>






















































<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <macro><name>Launch</name><argument_list>(<argument>SBListener &amp;listener</argument>, <argument>char const **argv</argument>,
<argument>char const **envp</argument>, <argument>const char *stdin_path</argument>,
<argument>const char *stdout_path</argument>, <argument>const char *stderr_path</argument>,
<argument>const char *working_directory</argument>,
<argument>uint32_t launch_flags</argument>,
<argument>bool stop_at_entry</argument>, <argument>lldb::SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>SBProcess</name></type> <name>LoadCore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>core_file</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>SBProcess</name></type> <name>LoadCore</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>core_file</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>



























<function_decl><type><name>SBProcess</name></type> <name>LaunchSimple</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>working_directory</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBProcess</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>SBLaunchInfo</name> <modifier>&amp;</modifier></type><name>launch_info</name></decl></parameter>, <parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBProcess</name></type> <name>Attach</name><parameter_list>(<parameter><decl><type><name>SBAttachInfo</name> <modifier>&amp;</modifier></type><name>attach_info</name></decl></parameter>, <parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <macro><name>AttachToProcessWithID</name><argument_list>(<argument>SBListener &amp;listener</argument>, <argument>lldb::pid_t pid</argument>,
<argument>lldb::SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>




















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <macro><name>AttachToProcessWithName</name><argument_list>(<argument>SBListener &amp;listener</argument>,
<argument>const char *name</argument>, <argument>bool wait_for</argument>,
<argument>lldb::SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>




















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <call><name>ConnectRemote</name><argument_list>(<argument><expr><name>SBListener</name> <operator>&amp;</operator><name>listener</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>url</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>plugin_name</name></expr></argument>, <argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <call><name>GetExecutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>AppendImageSearchPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>from</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>to</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AddModule</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <operator>&amp;</operator><name>module</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <call><name>AddModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <call><name>AddModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>uuid_cstr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>symfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <call><name>AddModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumModules</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <macro><name>GetModuleAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveModule</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <name>module</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBDebugger</name> <macro><name>GetDebugger</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <call><name>FindModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContextList</name>
<call><name>FindCompileUnits</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>sb_file_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <call><name>GetByteOrder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetAddressByteSize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTriple</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>uint32_t</name></type> <name>GetDataByteSize</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>uint32_t</name></type> <name>GetCodeByteSize</name><parameter_list>()</parameter_list>;</function_decl>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>SetSectionLoadAddress</name><argument_list>(<argument>lldb::SBSection section</argument>,
<argument>lldb::addr_t section_base_addr</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>ClearSectionLoadAddress</name><argument_list>(<argument>lldb::SBSection section</argument>)</argument_list></macro></expr>;</expr_stmt>



















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>SetModuleLoadAddress</name><argument_list>(<argument>lldb::SBModule module</argument>,
<argument>int64_t sections_offset</argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>ClearModuleLoadAddress</name><argument_list>(<argument>lldb::SBModule module</argument>)</argument_list></macro></expr>;</expr_stmt>
















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContextList</name>
<macro><name>FindFunctions</name><argument_list>(<argument>const char *name</argument>,
<argument>uint32_t name_type_mask = lldb::eFunctionNameTypeAny</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValueList</name> <macro><name>FindGlobalVariables</name><argument_list>(<argument>const char *name</argument>, <argument>uint32_t max_matches</argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>FindFirstGlobalVariable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValueList</name> <macro><name>FindGlobalVariables</name><argument_list>(<argument>const char *name</argument>, <argument>uint32_t max_matches</argument>,
<argument>MatchType matchtype</argument>)</argument_list></macro></expr>;</expr_stmt>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContextList</name> <macro><name>FindGlobalFunctions</name><argument_list>(<argument>const char *name</argument>,
<argument>uint32_t max_matches</argument>,
<argument>MatchType matchtype</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>








<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <macro><name>ResolveFileAddress</name><argument_list>(<argument>lldb::addr_t file_addr</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <macro><name>ResolveLoadAddress</name><argument_list>(<argument>lldb::addr_t vm_addr</argument>)</argument_list></macro></expr>;</expr_stmt>





















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <macro><name>ResolvePastLoadAddress</name><argument_list>(<argument>uint32_t stop_id</argument>,
<argument>lldb::addr_t vm_addr</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>SBSymbolContext</name></type> <name>ResolveSymbolContextForAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBAddress</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>resolve_scope</name></decl></parameter>)</parameter_list>;</function_decl>





















<decl_stmt><decl><type><name>size_t</name></type> <name>ReadMemory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBAddress</name> <name>addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByLocation</name><argument_list>(<argument>const char *file</argument>,
<argument>uint32_t line</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<macro><name>BreakpointCreateByLocation</name><argument_list>(<argument>const lldb::SBFileSpec &amp;file_spec</argument>, <argument>uint32_t line</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<macro><name>BreakpointCreateByLocation</name><argument_list>(<argument>const lldb::SBFileSpec &amp;file_spec</argument>, <argument>uint32_t line</argument>,
<argument>lldb::addr_t offset</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<macro><name>BreakpointCreateByLocation</name><argument_list>(<argument>const lldb::SBFileSpec &amp;file_spec</argument>, <argument>uint32_t line</argument>,
<argument>lldb::addr_t offset</argument>, <argument>SBFileSpecList &amp;module_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<macro><name>BreakpointCreateByLocation</name><argument_list>(<argument>const lldb::SBFileSpec &amp;file_spec</argument>, <argument>uint32_t line</argument>,
<argument>uint32_t column</argument>, <argument>lldb::addr_t offset</argument>,
<argument>SBFileSpecList &amp;module_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<macro><name>BreakpointCreateByLocation</name><argument_list>(<argument>const lldb::SBFileSpec &amp;file_spec</argument>, <argument>uint32_t line</argument>,
<argument>uint32_t column</argument>, <argument>lldb::addr_t offset</argument>,
<argument>SBFileSpecList &amp;module_list</argument>,
<argument>bool move_to_nearest_code</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <call><name>BreakpointCreateByName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>symbol_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>module_name</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<call><name>BreakpointCreateByName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>symbol_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>comp_unit_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByName</name><argument_list>(
<argument>const char *symbol_name</argument>,
<argument>uint32_t
name_type_mask</argument>,
<argument>const SBFileSpecList &amp;module_list</argument>,
<argument>const SBFileSpecList &amp;comp_unit_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByName</name><argument_list>(
<argument>const char *symbol_name</argument>,
<argument>uint32_t
name_type_mask</argument>,
<argument>lldb::LanguageType symbol_language</argument>,
<argument>const SBFileSpecList &amp;module_list</argument>, <argument>const SBFileSpecList &amp;comp_unit_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByNames</name><argument_list>(
<argument>const char *symbol_name[]</argument>, <argument>uint32_t num_names</argument>,
<argument>uint32_t
name_type_mask</argument>,
<argument>const SBFileSpecList &amp;module_list</argument>,
<argument>const SBFileSpecList &amp;comp_unit_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByNames</name><argument_list>(
<argument>const char *symbol_name[]</argument>, <argument>uint32_t num_names</argument>,
<argument>uint32_t
name_type_mask</argument>,
<argument>lldb::LanguageType symbol_language</argument>,
<argument>const SBFileSpecList &amp;module_list</argument>, <argument>const SBFileSpecList &amp;comp_unit_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByNames</name><argument_list>(
<argument>const char *symbol_name[]</argument>, <argument>uint32_t num_names</argument>,
<argument>uint32_t
name_type_mask</argument>,
<argument>lldb::LanguageType symbol_language</argument>,
<argument>lldb::addr_t offset</argument>, <argument>const SBFileSpecList &amp;module_list</argument>,
<argument>const SBFileSpecList &amp;comp_unit_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <call><name>BreakpointCreateByRegex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>symbol_name_regex</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>module_name</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<call><name>BreakpointCreateByRegex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>symbol_name_regex</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>comp_unit_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByRegex</name><argument_list>(
<argument>const char *symbol_name_regex</argument>, <argument>lldb::LanguageType symbol_language</argument>,
<argument>const SBFileSpecList &amp;module_list</argument>, <argument>const SBFileSpecList &amp;comp_unit_list</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<call><name>BreakpointCreateBySourceRegex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>source_regex</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpec</name> <operator>&amp;</operator><name>source_file</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>module_name</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name>
<call><name>BreakpointCreateBySourceRegex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>source_regex</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>source_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <call><name>BreakpointCreateBySourceRegex</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>source_regex</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBFileSpecList</name> <operator>&amp;</operator><name>source_file</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SBStringList</name> <operator>&amp;</operator><name>func_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateForException</name><argument_list>(<argument>lldb::LanguageType language</argument>,
<argument>bool catch_bp</argument>, <argument>bool throw_bp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateByAddress</name><argument_list>(<argument>addr_t address</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <call><name>BreakpointCreateBySBAddress</name><argument_list>(<argument><expr><name>SBAddress</name> <operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>BreakpointCreateFromScript</name><argument_list>(
<argument>const char *class_name</argument>,
<argument>SBStructuredData &amp;extra_args</argument>,
<argument>const SBFileSpecList &amp;module_list</argument>,
<argument>const SBFileSpecList &amp;file_list</argument>,
<argument>bool request_hardware = false</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>BreakpointsCreateFromFile</name><argument_list>(<argument><expr><name>SBFileSpec</name> <operator>&amp;</operator><name>source_file</name></expr></argument>,
<argument><expr><name>SBBreakpointList</name> <operator>&amp;</operator><name>new_bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>BreakpointsCreateFromFile</name><argument_list>(<argument><expr><name>SBFileSpec</name> <operator>&amp;</operator><name>source_file</name></expr></argument>,
<argument><expr><name>SBStringList</name> <operator>&amp;</operator><name>matching_names</name></expr></argument>,
<argument><expr><name>SBBreakpointList</name> <operator>&amp;</operator><name>new_bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>BreakpointsWriteToFile</name><argument_list>(<argument><expr><name>SBFileSpec</name> <operator>&amp;</operator><name>dest_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>BreakpointsWriteToFile</name><argument_list>(<argument>SBFileSpec &amp;dest_file</argument>,
<argument>SBBreakpointList &amp;bkpt_list</argument>,
<argument>bool append = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumBreakpoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>GetBreakpointAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>BreakpointDelete</name><parameter_list>(<parameter><decl><type><name>break_id_t</name></type> <name>break_id</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBreakpoint</name> <macro><name>FindBreakpointByID</name><argument_list>(<argument>break_id_t break_id</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>FindBreakpointsByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>SBBreakpointList</name> <modifier>&amp;</modifier></type><name>bkpt_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetBreakpointNames</name><parameter_list>(<parameter><decl><type><name>SBStringList</name> <modifier>&amp;</modifier></type><name>names</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DeleteBreakpointName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>EnableAllBreakpoints</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DisableAllBreakpoints</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DeleteAllBreakpoints</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumWatchpoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBWatchpoint</name> <macro><name>GetWatchpointAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>DeleteWatchpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>watch_id_t</name> <name>watch_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBWatchpoint</name> <macro><name>FindWatchpointByID</name><argument_list>(<argument>lldb::watch_id_t watch_id</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBWatchpoint</name> <macro><name>WatchAddress</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>size_t size</argument>, <argument>bool read</argument>,
<argument>bool write</argument>, <argument>SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>EnableAllWatchpoints</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DisableAllWatchpoints</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DeleteAllWatchpoints</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <macro><name>GetBroadcaster</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>FindFirstType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeList</name> <call><name>FindTypes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <macro><name>GetBasicType</name><argument_list>(<argument>lldb::BasicType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>CreateValueFromAddress</name><argument_list>(<argument>const char *name</argument>, <argument>lldb::SBAddress addr</argument>,
<argument>lldb::SBType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>CreateValueFromData</name><argument_list>(<argument>const char *name</argument>, <argument>lldb::SBData data</argument>,
<argument>lldb::SBType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>CreateValueFromExpression</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>SBSourceManager</name></type> <name>GetSourceManager</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBInstructionList</name> <macro><name>ReadInstructions</name><argument_list>(<argument>lldb::SBAddress base_addr</argument>,
<argument>uint32_t count</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBInstructionList</name> <macro><name>ReadInstructions</name><argument_list>(<argument>lldb::SBAddress base_addr</argument>,
<argument>uint32_t count</argument>,
<argument>const char *flavor_string</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBInstructionList</name> <macro><name>GetInstructions</name><argument_list>(<argument>lldb::SBAddress base_addr</argument>,
<argument>const void *buf</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBInstructionList</name> <macro><name>GetInstructionsWithFlavor</name><argument_list>(<argument>lldb::SBAddress base_addr</argument>,
<argument>const char *flavor_string</argument>,
<argument>const void *buf</argument>,
<argument>size_t size</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBInstructionList</name> <macro><name>GetInstructions</name><argument_list>(<argument>lldb::addr_t base_addr</argument>,
<argument>const void *buf</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBInstructionList</name> <macro><name>GetInstructionsWithFlavor</name><argument_list>(<argument>lldb::addr_t base_addr</argument>,
<argument>const char *flavor_string</argument>,
<argument>const void *buf</argument>,
<argument>size_t size</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContextList</name> <macro><name>FindSymbols</name><argument_list>(<argument>const char *name</argument>,
<argument>lldb::SymbolType type = eSymbolTypeAny</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>EvaluateExpression</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>EvaluateExpression</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SBExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetStackRedZoneSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsLoaded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBModule</name> <operator>&amp;</operator><name>module</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBLaunchInfo</name> <macro><name>GetLaunchInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetLaunchInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBLaunchInfo</name> <operator>&amp;</operator><name>launch_info</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTrace</name> <call><name>GetTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTrace</name> <call><name>CreateTrace</name><argument_list>(<argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointNameImpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBExecutionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBInstruction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBPlatform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBProcess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSymbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBVariablesOptions</name></decl>;</decl_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>GetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
