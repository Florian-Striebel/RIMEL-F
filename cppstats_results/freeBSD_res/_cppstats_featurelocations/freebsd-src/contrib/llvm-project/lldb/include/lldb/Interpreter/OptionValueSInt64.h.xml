<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionValueSInt64.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONVALUESINT64_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONVALUESINT64_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OptionValueSInt64</name> <range>: <expr><name>public</name> <name><name>Cloneable</name><argument_list type="generic">&lt;<argument><expr><name>OptionValueSInt64</name></expr></argument>, <argument><expr><name>OptionValue</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionValueSInt64</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<macro><name>OptionValueSInt64</name><argument_list>(<argument>int64_t value</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>m_current_value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_default_value</name><argument_list>(<argument>value</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>OptionValueSInt64</name><argument_list>(<argument>int64_t current_value</argument>, <argument>int64_t default_value</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_current_value</name><argument_list>(<argument><expr><name>current_value</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_default_value</name><argument_list>(<argument>default_value</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>OptionValueSInt64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OptionValueSInt64</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>OptionValueSInt64</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;



<expr><name>OptionValue</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>eTypeSInt64</name></expr>;</return> }</block>

<name>void</name> <macro><name>DumpValue</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>, <argument>Stream &amp;strm</argument>,
<argument>uint32_t dump_mask</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name>
<macro><name>SetValueFromString</name><argument_list>(<argument>llvm::StringRef value</argument>,
<argument>VarSetOperationType op = eVarSetOperationAssign</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><name>m_current_value</name> <operator>=</operator> <name>m_default_value</name></expr>;
<expr><name>m_value_was_set</name> <operator>=</operator> <name>false</name></expr>;
}</block>



<specifier>const</specifier> <name>int64_t</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>int64_t</name> <name>value</name><operator>)</operator> <block>{
<expr><name>m_current_value</name> <operator>=</operator> <name>value</name></expr>;
<return>return <expr><name>m_current_value</name></expr>;</return>
}</block>

<name>int64_t</name> <macro><name>GetCurrentValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_current_value</name></expr>;</return> }</block>

<name>int64_t</name> <macro><name>GetDefaultValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_default_value</name></expr>;</return> }</block>

<name>bool</name> <macro><name>SetCurrentValue</name><argument_list>(<argument>int64_t value</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>m_min_value</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>m_max_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_current_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>bool</name> <macro><name>SetDefaultValue</name><argument_list>(<argument>int64_t value</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>m_min_value</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>m_max_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_default_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>void</name> <macro><name>SetMinimumValue</name><argument_list>(<argument>int64_t v</argument>)</argument_list></macro> <block>{ <expr><name>m_min_value</name> <operator>=</operator> <name>v</name></expr>; }</block>

<name>int64_t</name> <macro><name>GetMinimumValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_min_value</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetMaximumValue</name><argument_list>(<argument>int64_t v</argument>)</argument_list></macro> <block>{ <expr><name>m_max_value</name> <operator>=</operator> <name>v</name></expr>; }</block>

<name>int64_t</name> <macro><name>GetMaximumValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_max_value</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>int64_t</name> <name>m_current_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>int64_t</name> <name>m_default_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>int64_t</name> <name>m_min_value</name> <operator>=</operator> <name>INT64_MIN</name></expr>;
<expr><name>int64_t</name> <name>m_max_value</name> <operator>=</operator> <name>INT64_MAX</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
