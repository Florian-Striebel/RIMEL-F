<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/ThreadSafeDenseMap.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_THREADSAFEDENSEMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_THREADSAFEDENSEMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_KeyType</name></expr></argument>, <argument><expr><name>typename</name> <name>_ValueType</name></expr></argument>,
<argument><expr><name>typename</name> <name>_MutexType</name> <operator>=</operator> <name>std</name><operator>::</operator><name>mutex</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ThreadSafeDenseMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>_KeyType</name></expr></argument>, <argument><expr><name>_ValueType</name></expr></argument>&gt;</argument_list></name> <name>LLVMMapType</name></expr>;</expr_stmt></typedef>

<macro><name>ThreadSafeDenseMap</name><argument_list>(<argument>unsigned map_initial_capacity = <literal type="number">0</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_map</name><argument_list>(<argument><expr><name>map_initial_capacity</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_mutex</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>Insert</name><argument_list>(<argument>_KeyType k</argument>, <argument>_ValueType v</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>_MutexType</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>m_map</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Erase</name><argument_list>(<argument>_KeyType k</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>_MutexType</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>m_map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>_ValueType</name> <macro><name>Lookup</name><argument_list>(<argument>_KeyType k</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>_MutexType</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_map</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>bool</name></type> <name>Lookup</name><parameter_list>(<parameter><decl><type><name>_KeyType</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>_ValueType</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>_MutexType</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>m_map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>_MutexType</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>LLVMMapType</name></type> <name>m_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_MutexType</name></type> <name>m_mutex</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
