<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/LanguageCategory.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_LANGUAGECATEGORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_LANGUAGECATEGORY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatClasses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LanguageCategory</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LanguageCategory</name></expr></argument>&gt;</argument_list></name> <name>UniquePointer</name></expr>;</expr_stmt></typedef>

<macro><name>LanguageCategory</name><argument_list>(<argument>lldb::LanguageType lang_type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>FormattersMatchData</name> <modifier>&amp;</modifier></type><name>match_data</name></decl></parameter>, <parameter><decl><type><name>ImplSP</name> <modifier>&amp;</modifier></type><name>format_sp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>GetHardcoded</name><parameter_list>(<parameter><decl><type><name>FormatManager</name> <modifier>&amp;</modifier></type><name>fmt_mgr</name></decl></parameter>, <parameter><decl><type><name>FormattersMatchData</name> <modifier>&amp;</modifier></type><name>match_data</name></decl></parameter>,
<parameter><decl><type><name>ImplSP</name> <modifier>&amp;</modifier></type><name>format_sp</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <macro><name>GetCategory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>FormatCache</name> <modifier>&amp;</modifier></type><name>GetFormatCache</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Enable</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Disable</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsEnabled</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <name>m_category_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>HardcodedFormatters</name><operator>::</operator><name>HardcodedFormatFinder</name> <name>m_hardcoded_formats</name></expr>;</expr_stmt>
<expr_stmt><expr><name>HardcodedFormatters</name><operator>::</operator><name>HardcodedSummaryFinder</name> <name>m_hardcoded_summaries</name></expr>;</expr_stmt>
<expr_stmt><expr><name>HardcodedFormatters</name><operator>::</operator><name>HardcodedSyntheticFinder</name> <name>m_hardcoded_synthetics</name></expr>;</expr_stmt>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name>
<specifier>auto</specifier> <modifier>&amp;</modifier></type><name>GetHardcodedFinder</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>FormatCache</name> <name>m_format_cache</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_enabled</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
