<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/UserExpression.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_USEREXPRESSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_USEREXPRESSION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/Expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/Materializer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Target.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>










<decl_stmt><decl><type><name>class</name></type> <name>UserExpression</name> <range>: <expr><name>public</name> <name>Expression</name> <block>{

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> }</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Expression *obj</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>obj</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

enum <block>{ <expr><name>kDefaultTimeout</name> <operator>=</operator> <literal type="number">500000u</literal></expr> }</block></expr>;














<macro><name>UserExpression</name><argument_list>(<argument>ExecutionContextScope &amp;exe_scope</argument>, <argument>llvm::StringRef expr</argument>,
<argument>llvm::StringRef prefix</argument>, <argument>lldb::LanguageType language</argument>,
<argument>ResultType desired_type</argument>,
<argument>const EvaluateExpressionOptions &amp;options</argument>)</argument_list></macro>;


<expr><operator>~</operator><macro><name>UserExpression</name><argument_list>()</argument_list></macro> <name>override</name></expr>;




















<expr><name>virtual</name> <name>bool</name> <macro><name>Parse</name><argument_list>(<argument>DiagnosticManager &amp;diagnostic_manager</argument>,
<argument>ExecutionContext &amp;exe_ctx</argument>,
<argument>lldb_private::ExecutionPolicy execution_policy</argument>,
<argument>bool keep_result_in_memory</argument>, <argument>bool generate_debug_info</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;






















<expr><name>virtual</name> <name>bool</name> <macro><name>Complete</name><argument_list>(<argument>ExecutionContext &amp;exe_ctx</argument>, <argument>CompletionRequest &amp;request</argument>,
<argument>unsigned complete_pos</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <call><name>CanInterpret</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>bool</name> <call><name>MatchesContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list></call></expr>;



























<expr><name>lldb</name><operator>::</operator><name>ExpressionResults</name> <call><name>Execute</name><argument_list>(<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>,
<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>UserExpressionSP</name> <operator>&amp;</operator><name>shared_ptr_to_me</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;




























<expr><name>virtual</name> <name>bool</name> <macro><name>FinalizeJITExecution</name><argument_list>(
<argument>DiagnosticManager &amp;diagnostic_manager</argument>, <argument>ExecutionContext &amp;exe_ctx</argument>,
<argument>lldb::ExpressionVariableSP &amp;result</argument>,
<argument>lldb::addr_t function_stack_bottom = LLDB_INVALID_ADDRESS</argument>,
<argument>lldb::addr_t function_stack_top = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Text</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>m_expr_text</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetUserText</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_expr_text</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>FunctionName</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><literal type="string">"$__lldb_expr"</literal></expr>;</return> }</block>



<name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>Language</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>m_language</name></expr>;</return> }</block>



<name>ResultType</name> <macro><name>DesiredResultType</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>m_desired_type</name></expr>;</return> }</block>


<name>bool</name> <macro><name>NeedsValidation</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>


<name>bool</name> <macro><name>NeedsVariableResolution</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>EvaluateExpressionOptions</name> <operator>*</operator><macro><name>GetOptions</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><operator>&amp;</operator><name>m_options</name></expr>;</return> }</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name>
<macro><name>GetResultAfterDematerialization</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ExpressionVariableSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>











































<specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ExpressionResults</name>
<macro><name>Evaluate</name><argument_list>(<argument>ExecutionContext &amp;exe_ctx</argument>, <argument>const EvaluateExpressionOptions &amp;options</argument>,
<argument>llvm::StringRef expr_cstr</argument>, <argument>llvm::StringRef expr_prefix</argument>,
<argument>lldb::ValueObjectSP &amp;result_valobj_sp</argument>, <argument>Status &amp;error</argument>,
<argument>std::string *fixed_expression = nullptr</argument>,
<argument>ValueObject *ctx_obj = nullptr</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>Status</name><operator>::</operator><name>ValueType</name> <name>kNoResult</name> <operator>=</operator>
<literal type="number">0x1001</literal></expr>;


<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetFixedText</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>m_fixed_text</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>m_fixed_text</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ExpressionResults</name>
<call><name>DoExecute</name><argument_list>(<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>, <argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>UserExpressionSP</name> <operator>&amp;</operator><name>shared_ptr_to_me</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetObjectPointer</name><argument_list>(<argument>lldb::StackFrameSP frame_sp</argument>,
<argument>ConstString &amp;object_name</argument>, <argument>Status &amp;err</argument>)</argument_list></macro></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>InstallContext</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>LockAndCheckContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Address</name></type> <name>m_address</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_expr_text</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_expr_prefix</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_fixed_text</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>m_language</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ResultType</name></type> <name>m_desired_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EvaluateExpressionOptions</name></type>
<name>m_options</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
