<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointLocationCollection.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTLOCATIONCOLLECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTLOCATIONCOLLECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BreakpointLocationCollection</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>BreakpointLocationCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>BreakpointLocationCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BreakpointLocationCollection</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>BreakpointLocationCollection</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>Add</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <operator>&amp;</operator><name>bp_loc_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>












<decl_stmt><decl><type><name>bool</name></type> <name>Remove</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_id</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_loc_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>FindByIDPair</name><argument_list>(<argument>lldb::break_id_t break_id</argument>,
<argument>lldb::break_id_t break_loc_id</argument>)</argument_list></macro></expr>;</expr_stmt>













<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name>
<macro><name>FindByIDPair</name><argument_list>(<argument>lldb::break_id_t break_id</argument>, <argument>lldb::break_id_t break_loc_id</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>GetByIndex</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>GetByIndex</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_break_loc_collection</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>









<function_decl><type><name>bool</name></type> <name>ShouldStop</name><parameter_list>(<parameter><decl><type><name>StoppointCallbackContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>












<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>











<function_decl><type><name>bool</name></type> <name>ValidForThisThread</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>bool</name> <macro><name>IsInternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>



<label><name>private</name>:</label>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <macro><name>GetIDPairIterator</name><argument_list>(<argument>lldb::break_id_t break_id</argument>,
<argument>lldb::break_id_t break_loc_id</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name>
<macro><name>GetIDPairConstIterator</name><argument_list>(<argument>lldb::break_id_t break_id</argument>,
<argument>lldb::break_id_t break_loc_id</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>collection</name></type> <name>m_break_loc_collection</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>mutex</name> <name>m_collection_mutex</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name><name>AdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name></expr></argument>,
<argument><expr><name>vector_adapter</name></expr></argument>&gt;</argument_list></name></type>
<name>BreakpointLocationCollectionIterable</name>;</typedef>
<function><type><name>BreakpointLocationCollectionIterable</name></type> <name>BreakpointLocations</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>BreakpointLocationCollectionIterable</name><argument_list>(<argument><expr><name>m_break_loc_collection</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
