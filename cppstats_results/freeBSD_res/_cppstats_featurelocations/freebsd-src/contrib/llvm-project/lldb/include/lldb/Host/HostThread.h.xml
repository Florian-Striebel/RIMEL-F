<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/HostThread.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_HOSTTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_HOSTTHREAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/HostNativeThreadForward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>HostNativeThreadBase</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>HostThread</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>HostThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>HostThread</name><argument_list>(<argument>lldb::thread_t thread</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>Join</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>thread_result_t</name> <operator>*</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>Status</name></type> <name>Cancel</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>thread_t</name> <call><name>Release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsJoinable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>HostNativeThread</name> <modifier>&amp;</modifier></type><name>GetNativeThread</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>HostNativeThread</name> <operator>&amp;</operator><macro><name>GetNativeThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>thread_result_t</name> <macro><name>GetResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>EqualsThread</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>thread_t</name> <name>thread</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>HostNativeThreadBase</name></expr></argument>&gt;</argument_list></name> <name>m_native_thread</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
