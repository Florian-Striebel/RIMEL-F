<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/ObjectFile.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_OBJECTFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_OBJECTFILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FileSpecList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Symtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/UnwindTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UUID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ObjectFileJITDelegate</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ObjectFileJITDelegate</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ObjectFileJITDelegate</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>uint32_t</name> <macro><name>GetAddressByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PopulateSymtab</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ObjectFile</name> <operator>*</operator><name>obj_file</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Symtab</name> <operator>&amp;</operator><name>symtab</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PopulateSectionList</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ObjectFile</name> <operator>*</operator><name>obj_file</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>SectionList</name> <operator>&amp;</operator><name>section_list</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>ArchSpec</name></type> <name>GetArchitecture</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>














<decl_stmt><decl><type><name>class</name></type> <name>ObjectFile</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>ObjectFile</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>PluginInterface</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>ModuleChild</name> <block>{<block_content>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>Module</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<enum>enum <name>Type</name> <block>{
<decl><name>eTypeInvalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>eTypeCoreFile</name></decl>,

<decl><name>eTypeExecutable</name></decl>,

<decl><name>eTypeDebugInfo</name></decl>,

<decl><name>eTypeDynamicLinker</name></decl>,

<decl><name>eTypeObjectFile</name></decl>,

<decl><name>eTypeSharedLibrary</name></decl>,

<decl><name>eTypeStubLibrary</name></decl>,

<decl><name>eTypeJIT</name></decl>,
<decl><name>eTypeUnknown</name></decl>
}</block>;</enum>

<enum>enum <name>Strata</name> <block>{
<decl><name>eStrataInvalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eStrataUnknown</name></decl>,
<decl><name>eStrataUser</name></decl>,
<decl><name>eStrataKernel</name></decl>,
<decl><name>eStrataRawImage</name></decl>,
<decl><name>eStrataJIT</name></decl>
}</block>;</enum>




<enum>enum <name>BinaryType</name> <block>{
<decl><name>eBinaryTypeInvalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eBinaryTypeUnknown</name></decl>,
<decl><name>eBinaryTypeKernel</name></decl>,
<decl><name>eBinaryTypeUser</name></decl>,
<decl><name>eBinaryTypeStandalone</name></decl>
}</block>;</enum>

<struct>struct <name>LoadableData</name> <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>Dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>Contents</name></expr>;</expr_stmt>
}</block>;</struct>






<macro><name>ObjectFile</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>const FileSpec *file_spec_ptr</argument>,
<argument>lldb::offset_t file_offset</argument>, <argument>lldb::offset_t length</argument>,
<argument>const lldb::DataBufferSP &amp;data_sp</argument>, <argument>lldb::offset_t data_offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>ObjectFile</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>const lldb::ProcessSP &amp;process_sp</argument>,
<argument>lldb::addr_t header_addr</argument>, <argument>lldb::DataBufferSP &amp;data_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<expr_stmt><expr><operator>~</operator><macro><name>ObjectFile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>









<function_decl><type><name>virtual</name> <name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
























<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ObjectFileSP</name>
<macro><name>FindPlugin</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>const FileSpec *file_spec</argument>,
<argument>lldb::offset_t file_offset</argument>, <argument>lldb::offset_t file_size</argument>,
<argument>lldb::DataBufferSP &amp;data_sp</argument>, <argument>lldb::offset_t &amp;data_offset</argument>)</argument_list></macro></expr>;</expr_stmt>
















<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ObjectFileSP</name> <macro><name>FindPlugin</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>,
<argument>const lldb::ProcessSP &amp;process_sp</argument>,
<argument>lldb::addr_t header_addr</argument>,
<argument>lldb::DataBufferSP &amp;file_data_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type>
<name>GetModuleSpecifications</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>file_offset</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>file_size</name></expr></argument>, <argument><expr><name>ModuleSpecList</name> <operator>&amp;</operator><name>specs</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <name>data_sp</name> <operator>=</operator> <name>lldb</name><operator>::</operator><call><name>DataBufferSP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>GetModuleSpecifications</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>data_offset</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>file_offset</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>file_size</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>ModuleSpecList</name> <operator>&amp;</operator><name>specs</name></expr></argument>)</argument_list></decl>;</decl_stmt>























<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>SplitArchivePathWithObject</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>path_with_object</name></expr></argument>, <argument><expr><name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>&amp;</operator><name>archive_file</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>ConstString</name> <operator>&amp;</operator><name>archive_object</name></expr></argument>, <argument><expr><name>bool</name> <name>must_exist</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>ID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isA</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>ClassID</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> </block_content>}</block></decl></decl_stmt>







<expr_stmt><expr><name>virtual</name> <name>uint32_t</name> <macro><name>GetAddressByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>











<decl_stmt><decl><type><name>virtual</name> <name>AddressClass</name></type> <name>GetAddressClass</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

















<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>GetDependentModules</name><parameter_list>(<parameter><decl><type><name>FileSpecList</name> <modifier>&amp;</modifier></type><name>file_list</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>






<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsExecutable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFileOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file_offset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_length</name></expr>;</return> }</block></expr></expr_stmt>






<function><type><name>virtual</name> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>GetFileSpec</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_file</name></expr>;</return> </block_content>}</block></function>






<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file</name></expr>;</return> }</block></expr></expr_stmt>






<function_decl><type><name>virtual</name> <name>ArchSpec</name></type> <name>GetArchitecture</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>









<function_decl><type><name>virtual</name> <name>SectionList</name> <modifier>*</modifier></type><name>GetSectionList</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>update_module_section_list</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>CreateSections</name><parameter_list>(<parameter><decl><type><name>SectionList</name> <modifier>&amp;</modifier></type><name>unified_section_list</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function><type><name>virtual</name> <name>void</name></type> <name>SectionFileAddressesChanged</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>









<function_decl><type><name>virtual</name> <name>Symtab</name> <modifier>*</modifier></type><name>GetSymtab</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>RelocateSection</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Section</name> <operator>*</operator><name>section</name></expr></argument>)</argument_list></decl>;</decl_stmt>












<function><type><name>virtual</name> <name>Symbol</name> <modifier>*</modifier></type><name>ResolveSymbolForAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>so_addr</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>verify_unique</name></decl></parameter>)</parameter_list> <block>{<block_content>







<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>







<function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsStripped</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>ClearSymtab</name><parameter_list>()</parameter_list>;</function_decl>










<function_decl><type><name>virtual</name> <name>UUID</name></type> <name>GetUUID</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>









<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>FileSpecList</name> <macro><name>GetReExportedLibraries</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>FileSpecList</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>SetLoadAddress</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>value</name></expr></argument>,
<argument><expr><name>bool</name> <name>value_is_offset</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>












<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ParseHeader</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>






















<function><type><name>virtual</name> <name>bool</name></type> <name>AllowAssemblyEmulationUnwindPlans</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>













<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>Address</name> <macro><name>GetImageInfoAddress</name><argument_list>(<argument>Target *target</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Address</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>Address</name> <macro><name>GetEntryPointAddress</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>Address</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>Address</name> <macro><name>GetBaseAddress</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><name>m_memory_addr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>uint32_t</name></type> <name>GetNumThreadContexts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>








<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetIdentifierString</name> <argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetAddressMask</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>























<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetCorefileMainBinaryInfo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><name>UUID</name> <operator>&amp;</operator><name>uuid</name></expr></argument>,
<argument><expr><name>ObjectFile</name><operator>::</operator><name>BinaryType</name> <operator>&amp;</operator><name>type</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>address</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>uuid</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>RegisterContextSP</name>
<macro><name>GetThreadContextAtIndex</name><argument_list>(<argument>uint32_t idx</argument>, <argument>lldb_private::Thread &amp;thread</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>RegisterContextSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>










<function_decl><type><name>virtual</name> <name>Type</name></type> <name>CalculateType</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function><type><name>virtual</name> <name>void</name></type> <name>SetType</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt> </block_content>}</block></function>












<function_decl><type><name>virtual</name> <name>Strata</name></type> <name>CalculateStrata</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>












<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>










<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <macro><name>GetMinimumOSVersion</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <macro><name>GetSDKVersion</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>








<function><type><name>virtual</name> <name>bool</name></type> <name>GetIsDynamicLinkEditor</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>


<function><type><name>Type</name></type> <name>GetType</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>eTypeInvalid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <call><name>CalculateType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>m_type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Strata</name></type> <name>GetStrata</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_strata</name> <operator>==</operator> <name>eStrataInvalid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_strata</name> <operator>=</operator> <call><name>CalculateStrata</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>m_strata</name></expr>;</return>
</block_content>}</block></function>




<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DataBufferSP</name> <macro><name>ReadMemory</name><argument_list>(<argument>const lldb::ProcessSP &amp;process_sp</argument>,
<argument>lldb::addr_t addr</argument>, <argument>size_t byte_size</argument>)</argument_list></macro></expr>;</expr_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>GetData</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>,
<argument><expr><name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>CopyData</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>dst</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>size_t</name></type> <name>ReadSectionData</name><argument_list>(<argument><expr><name>Section</name> <operator>*</operator><name>section</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>section_offset</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>dst</name></expr></argument>,
<argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>ReadSectionData</name><parameter_list>(<parameter><decl><type><name>Section</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><name>DataExtractor</name> <modifier>&amp;</modifier></type><name>section_data</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsInMemory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_memory_addr</name> <operator>!=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name>
<macro><name>StripLinkerSymbolAnnotations</name><argument_list>(<argument>llvm::StringRef symbol_name</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>symbol_name</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SymbolType</name> <macro><name>GetSymbolTypeFromName</name><argument_list>(
<argument>llvm::StringRef name</argument>,
<argument>lldb::SymbolType symbol_type_hint = lldb::eSymbolTypeUndefined</argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LoadableData</name></expr></argument>&gt;</argument_list></name> <call><name>GetLoadableData</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallFrameInfo</name></expr></argument>&gt;</argument_list></name> <call><name>CreateCallFrameInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>













<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>LoadCoreFileImages</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Process</name> <operator>&amp;</operator><name>process</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Type</name></type> <name>m_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Strata</name></type> <name>m_strata</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_file_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_length</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>DataExtractor</name></type>
<name>m_data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_memory_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>SectionList</name></expr></argument>&gt;</argument_list></name> <name>m_sections_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>Symtab</name></expr></argument>&gt;</argument_list></name> <name>m_symtab_up</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_synthetic_symbol_idx</name></decl>;</decl_stmt>











<function_decl><type><name>bool</name></type> <name>SetModulesArchitecture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>new_arch</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DataBufferSP</name> <macro><name>MapFileData</name><argument_list>(<argument>const FileSpec &amp;file</argument>, <argument>uint64_t Size</argument>,
<argument>uint64_t Offset</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ObjectFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ObjectFile</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectFile</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ObjectFile</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>format_provider</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>ObjectFile</name><operator>::</operator><name>Type</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>format</name><argument_list>(<argument>const lldb_private::ObjectFile::Type &amp;type</argument>,
<argument>raw_ostream &amp;OS</argument>, <argument>StringRef Style</argument>)</argument_list></macro></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>format_provider</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>ObjectFile</name><operator>::</operator><name>Strata</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>format</name><argument_list>(<argument>const lldb_private::ObjectFile::Strata &amp;strata</argument>,
<argument>raw_ostream &amp;OS</argument>, <argument>StringRef Style</argument>)</argument_list></macro></expr>;
}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
