<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Debugger.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_DEBUGGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_DEBUGGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FormatEntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/IOHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/StreamFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UserSettingsController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/HostThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Terminal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/TargetList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DynamicLibrary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Threading.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>repro</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DataRecorder</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>Debugger</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Debugger</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>UserID</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>Properties</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<enum>enum <block>{
<decl><name>eBroadcastBitProgress</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>ConstString</name></type> <name>GetStaticBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>


<function><type><name>Broadcaster</name> <modifier>&amp;</modifier></type><name>GetBroadcaster</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_broadcaster</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Broadcaster</name> <operator>&amp;</operator><macro><name>GetBroadcaster</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_broadcaster</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ProgressEventData</name> <range>: <expr><name>public</name> <name>EventData</name> <block>{

<expr><name>public</name><operator>:</operator>
<macro><name>ProgressEventData</name><argument_list>(<argument>uint64_t progress_id</argument>, <argument>const std::string &amp;message</argument>,
<argument>uint64_t completed</argument>, <argument>uint64_t total</argument>,
<argument>bool debugger_specific</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_message</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_id</name><argument_list>(<argument><expr><name>progress_id</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_completed</name><argument_list>(<argument><expr><name>completed</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>m_total</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_debugger_specific</name><argument_list>(<argument>debugger_specific</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>ConstString</name> <call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;

<expr><name>ConstString</name> <macro><name>GetFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>ProgressEventData</name> <operator>*</operator>
<call><name>GetEventDataFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>GetID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_id</name></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>GetCompleted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_completed</name></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>GetTotal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_total</name></expr>;</return> }</block>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>GetMessage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_message</name></expr>;</return> }</block>
<name>bool</name> <macro><name>IsDebuggerSpecific</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_debugger_specific</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_message</name></expr>;
<expr><specifier>const</specifier> <name>uint64_t</name> <name>m_id</name></expr>;
<expr><name>uint64_t</name> <name>m_completed</name></expr>;
<expr><specifier>const</specifier> <name>uint64_t</name> <name>m_total</name></expr>;
<expr><specifier>const</specifier> <name>bool</name> <name>m_debugger_specific</name></expr>;
<expr><call><name>ProgressEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProgressEventData</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ProgressEventData</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ProgressEventData</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>Debugger</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name>
<macro><name>CreateInstance</name><argument_list>(<argument>lldb::LogOutputCallback log_callback = nullptr</argument>,
<argument>void *baton = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>FindTargetWithProcessID</name><argument_list>(<argument>lldb::pid_t pid</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <call><name>FindTargetWithProcess</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>LoadPluginCallbackType</name></type> <name>load_plugin_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Terminate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsInitialize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsTerminate</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DebuggerSP</name> <operator>&amp;</operator><name>debugger_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name> <macro><name>FindDebuggerWithID</name><argument_list>(<argument>lldb::user_id_t id</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name>
<macro><name>FindDebuggerWithInstanceName</name><argument_list>(<argument>ConstString instance_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>GetNumDebuggers</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name> <macro><name>GetDebuggerAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>FormatDisassemblerAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><name>format</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>*</operator><name>sc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>*</operator><name>prev_sc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Address</name> <operator>*</operator><name>addr</name></expr></argument>, <argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetAsyncExecution</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetAsyncExecution</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <macro><name>GetInputFileSP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_input_file_sp</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <macro><name>GetOutputStreamSP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_output_stream_sp</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <macro><name>GetErrorStreamSP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_error_stream_sp</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>File</name> <modifier>&amp;</modifier></type><name>GetInputFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>m_input_file_sp</name></expr>;</return> </block_content>}</block></function>

<function><type><name>File</name> <modifier>&amp;</modifier></type><name>GetOutputFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_output_stream_sp</name><operator>-&gt;</operator><name>GetFile</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>File</name> <modifier>&amp;</modifier></type><name>GetErrorFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_error_stream_sp</name><operator>-&gt;</operator><name>GetFile</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>StreamFile</name> <modifier>&amp;</modifier></type><name>GetOutputStream</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>m_output_stream_sp</name></expr>;</return> </block_content>}</block></function>

<function><type><name>StreamFile</name> <modifier>&amp;</modifier></type><name>GetErrorStream</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>m_error_stream_sp</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>repro</name><operator>::</operator><name>DataRecorder</name> <operator>*</operator><call><name>GetInputRecorder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetInputFile</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>file</name></expr></argument>, <argument><expr><name>repro</name><operator>::</operator><name>DataRecorder</name> <operator>*</operator><name>recorder</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOutputFile</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetErrorFile</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SaveInputTerminalState</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RestoreInputTerminalState</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <call><name>GetAsyncOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <call><name>GetAsyncErrorStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>CommandInterpreter</name> <modifier>&amp;</modifier></type><name>GetCommandInterpreter</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>m_command_interpreter_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>m_command_interpreter_up</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ScriptInterpreter</name> <modifier>*</modifier></type>
<name>GetScriptInterpreter</name><argument_list>(<argument><expr><name>bool</name> <name>can_create</name> <operator>=</operator> <name>true</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name></expr></argument>&gt;</argument_list></name> <name>language</name> <operator>=</operator> <block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <macro><name>GetListener</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_listener_sp</name></expr>;</return> }</block></expr></expr_stmt>





<function_decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>GetSourceManager</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>GetSelectedTarget</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>m_target_list</name><operator>.</operator><name>GetSelectedTarget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>ExecutionContext</name></type> <name>GetSelectedExecutionContext</name><parameter_list>()</parameter_list>;</function_decl>








<function><type><name>TargetList</name> <modifier>&amp;</modifier></type><name>GetTargetList</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_target_list</name></expr>;</return> </block_content>}</block></function>

<function><type><name>PlatformList</name> <modifier>&amp;</modifier></type><name>GetPlatformList</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_platform_list</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>DispatchInputInterrupt</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DispatchInputEndOfFile</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>void</name></type> <name>AdoptTopIOHandlerFilesIfInvalid</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <operator>&amp;</operator><name>in</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <operator>&amp;</operator><name>out</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>RunIOHandlerAsync</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>reader_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>cancel_top_handler</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>RunIOHandlerSync</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>reader_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>RemoveIOHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>reader_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsTopIOHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>reader_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>CheckTopIOHandlerTypes</name><argument_list>(<argument><expr><name>IOHandler</name><operator>::</operator><name>Type</name> <name>top_type</name></expr></argument>,
<argument><expr><name>IOHandler</name><operator>::</operator><name>Type</name> <name>second_top_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>PrintAsync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_stdout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ConstString</name></type> <name>GetTopIOHandlerControlSequence</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetIOHandlerCommandPrefix</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetIOHandlerHelpPrologue</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearIOHandlers</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetCloseInputOnEOF</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetCloseInputOnEOF</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>EnableLog</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>channel</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>categories</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>log_file</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>log_options</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>error_stream</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetLoggingCallback</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LogOutputCallback</name> <name>log_callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<enum>enum <name>StopDisassemblyType</name> <block>{
<decl><name>eStopDisassemblyTypeNever</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eStopDisassemblyTypeNoDebugInfo</name></decl>,
<decl><name>eStopDisassemblyTypeNoSource</name></decl>,
<decl><name>eStopDisassemblyTypeAlways</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>Status</name></type> <name>SetPropertyValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>VarSetOperationType</name> <name>op</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>property_path</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetAutoConfirm</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><macro><name>GetDisassemblyFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><macro><name>GetFrameFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><macro><name>GetFrameFormatUnique</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetStopDisassemblyMaxSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><macro><name>GetThreadFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><macro><name>GetThreadStopFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <macro><name>GetScriptLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetScriptLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <name>script_lang</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetTerminalWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetTerminalWidth</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>term_width</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetPrompt</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPrompt</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>SetPrompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>delete</name></expr></init>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetReproducerPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetUseExternalEditor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetUseExternalEditor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_external_editor_p</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetUseColor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetUseColor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_color</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetUseAutosuggestion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetUseSourceCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetUseSourceCache</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_source_cache</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetHighlightSource</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopShowColumn</name> <macro><name>GetStopShowColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetStopShowColumnAnsiPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetStopShowColumnAnsiSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetStopSourceLineCount</name><argument_list>(<argument><expr><name>bool</name> <name>before</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>StopDisassemblyType</name> <macro><name>GetStopDisassemblyDisplay</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetDisassemblyLineCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetStopShowLineMarkerAnsiPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetStopShowLineMarkerAnsiSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetAutoOneLineSummaries</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetAutoIndent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetAutoIndent</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetPrintDecls</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetPrintDecls</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetTabSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetTabSize</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>tab_size</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetEscapeNonPrintables</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetNotifyVoid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>ConstString</name></type> <name>GetInstanceName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_instance_name</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>LoadPlugin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RunIOHandlers</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsForwardingEvents</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>EnableForwardEvents</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ListenerSP</name> <operator>&amp;</operator><name>listener_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CancelForwardEvents</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ListenerSP</name> <operator>&amp;</operator><name>listener_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsHandlingEvents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_event_handler_thread</name><operator>.</operator><name>IsJoinable</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>RunREPL</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>repl_options</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<function_decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>GetSelectedOrDummyTarget</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>prefer_dummy</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>Target</name> <modifier>&amp;</modifier></type><name>GetDummyTarget</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>m_dummy_target_sp</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BroadcasterManagerSP</name> <macro><name>GetBroadcasterManager</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_broadcaster_manager_sp</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>REPL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Progress</name></decl>;</decl_stmt>






























<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ReportProgress</name><argument_list>(<argument><expr><name>uint64_t</name> <name>progress_id</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>message</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>completed</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>total</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name></expr></argument>&gt;</argument_list></name> <name>debugger_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>StartEventHandlerThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StopEventHandlerThread</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>thread_result_t</name> <macro><name>EventHandlerThread</name><argument_list>(<argument>lldb::thread_arg_t arg</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>PushIOHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>reader_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>cancel_top_handler</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>PopIOHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>reader_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>HasIOHandlerThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>StartIOHandlerThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StopIOHandlerThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>JoinIOHandlerThread</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>thread_result_t</name> <macro><name>IOHandlerThread</name><argument_list>(<argument>lldb::thread_arg_t arg</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>DefaultEventHandler</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>HandleBreakpointEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleProcessEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleThreadEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_output_flush_mutex</name></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>FlushProcessOutput</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>&amp;</modifier></type><name>process</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush_stdout</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>flush_stderr</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>SourceManager</name><operator>::</operator><name>SourceFileCache</name> <operator>&amp;</operator><macro><name>GetSourceFileCache</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_source_file_cache</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>InstanceInitialize</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>m_input_file_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <name>m_output_stream_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <name>m_error_stream_sp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>repro</name><operator>::</operator><name>DataRecorder</name> <operator>*</operator><name>m_input_recorder</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BroadcasterManagerSP</name> <name>m_broadcaster_manager_sp</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name>TerminalState</name></type> <name>m_terminal_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TargetList</name></type> <name>m_target_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PlatformList</name></type> <name>m_platform_list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_listener_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SourceManager</name></expr></argument>&gt;</argument_list></name> <name>m_source_manager_up</name></expr>;</expr_stmt>



<expr_stmt><expr><name>SourceManager</name><operator>::</operator><name>SourceFileCache</name> <name>m_source_file_cache</name></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CommandInterpreter</name></expr></argument>&gt;</argument_list></name> <name>m_command_interpreter_up</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_script_interpreter_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ScriptInterpreterSP</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>eScriptLanguageUnknown</name></expr></argument>&gt;</argument_list></name>
<name>m_script_interpreters</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IOHandlerStack</name></type> <name>m_io_handler_stack</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_io_handler_synchronous_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_log_streams</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name></expr></argument>&gt;</argument_list></name> <name>m_log_callback_stream_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_instance_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LoadPluginCallbackType</name></type> <name>g_load_plugin_callback</name></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>DynamicLibrary</name></expr></argument>&gt;</argument_list></name> <name>LoadedPluginsList</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>LoadedPluginsList</name></type> <name>m_loaded_plugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HostThread</name></type> <name>m_event_handler_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HostThread</name></type> <name>m_io_handler_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Broadcaster</name></type> <name>m_sync_broadcaster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Broadcaster</name></type> <name>m_broadcaster</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_forward_listener_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>once_flag</name> <name>m_clear_once</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>m_dummy_target_sp</name></expr>;</expr_stmt>


<enum>enum <block>{
<decl><name>eBroadcastBitEventThreadIsListening</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>

<label><name>private</name>:</label>


<macro><name>Debugger</name><argument_list>(<argument>lldb::LogOutputCallback m_log_callback</argument>, <argument>void *baton</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>Debugger</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Debugger</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Debugger</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Debugger</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
