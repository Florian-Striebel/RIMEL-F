<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBAttachInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBATTACHINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBATTACHINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBAttachInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBAttachInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>SBAttachInfo</name><argument_list>(<argument>lldb::pid_t pid</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>












<macro><name>SBAttachInfo</name><argument_list>(<argument>const char *path</argument>, <argument>bool wait_for</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>























<macro><name>SBAttachInfo</name><argument_list>(<argument>const char *path</argument>, <argument>bool wait_for</argument>, <argument>bool async</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SBAttachInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBAttachInfo</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBAttachInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SBAttachInfo</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SBAttachInfo</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <call><name>GetProcessID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetProcessID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetExecutable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetExecutable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <name>exe_file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>GetWaitForLaunch</name><parameter_list>()</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>SetWaitForLaunch</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>void</name></type> <name>SetWaitForLaunch</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetIgnoreExisting</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetIgnoreExisting</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetResumeCount</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetResumeCount</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetProcessPluginName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetProcessPluginName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plugin_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetUserID</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetGroupID</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>UserIDIsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GroupIDIsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetUserID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetGroupID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>gid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetEffectiveUserID</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetEffectiveGroupID</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>EffectiveUserIDIsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>EffectiveGroupIDIsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetEffectiveUserID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetEffectiveGroupID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>gid</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <call><name>GetParentProcessID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetParentProcessID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>ParentProcessIDIsValid</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><name>SBListener</name></type> <name>GetListener</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>SetListener</name><parameter_list>(<parameter><decl><type><name>SBListener</name> <modifier>&amp;</modifier></type><name>listener</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>ProcessAttachInfo</name> <operator>&amp;</operator><call><name>ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ProcessAttachInfoSP</name></type> <name>m_opaque_sp</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
