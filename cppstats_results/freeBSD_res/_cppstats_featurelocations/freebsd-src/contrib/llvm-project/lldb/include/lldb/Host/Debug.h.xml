<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/Debug.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_DEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_DEBUG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>


<struct>struct <name>ResumeAction</name> <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>signal</name></decl>;</decl_stmt>

}</block>;</struct>





<decl_stmt><decl><type><name>class</name></type> <name>ResumeActionList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ResumeActionList</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_actions</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_signal_handled</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<macro><name>ResumeActionList</name><argument_list>(<argument>lldb::StateType default_action</argument>, <argument>int signal</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_actions</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_signal_handled</name><argument_list>()</argument_list></macro> <expr><block>{
<expr><call><name>SetDefaultThreadActionIfNeeded</name><argument_list>(<argument><expr><name>default_action</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>ResumeActionList</name><argument_list>(<argument>const ResumeAction *actions</argument>, <argument>size_t num_actions</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_actions</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_signal_handled</name><argument_list>()</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>actions</name> <operator>&amp;&amp;</operator> <name>num_actions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_actions</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>actions</name></expr></argument>, <argument><expr><name>actions</name> <operator>+</operator> <name>num_actions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_signal_handled</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>num_actions</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

~ResumeActionList(</block></if></if_stmt>) <operator>=</operator> default</block></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_actions</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ResumeAction</name> <modifier>&amp;</modifier></type><name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_actions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_signal_handled</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>AppendAction</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>, <argument><expr><name>int</name> <name>signal</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ResumeAction</name></type> <name>action</name> <init>= <expr><block>{<expr><name>tid</name></expr>, <expr><name>state</name></expr>, <expr><name>signal</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Append</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>AppendResumeAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AppendAction</name><argument_list>(<argument><expr><name>LLDB_INVALID_THREAD_ID</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>eStateRunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AppendSuspendAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AppendAction</name><argument_list>(<argument><expr><name>LLDB_INVALID_THREAD_ID</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>eStateStopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AppendStepAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AppendAction</name><argument_list>(<argument><expr><name>LLDB_INVALID_THREAD_ID</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>eStateStepping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ResumeAction</name> <modifier>*</modifier></type><name>GetActionForThread</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>,
<argument><expr><name>bool</name> <name>default_ok</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_actions</name> <init>= <expr><call><name><name>m_actions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_actions</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tid</name> <operator>==</operator> <name>tid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>m_actions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>default_ok</name> <operator>&amp;&amp;</operator> <name>tid</name> <operator>!=</operator> <name>LLDB_INVALID_THREAD_ID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>GetActionForThread</name><argument_list>(<argument><expr><name>LLDB_INVALID_THREAD_ID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>NumActionsWithState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_actions</name> <init>= <expr><call><name><name>m_actions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_actions</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetDefaultThreadActionIfNeeded</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>action</name></expr></argument>, <argument><expr><name>int</name> <name>signal</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetActionForThread</name><argument_list>(<argument><expr><name>LLDB_INVALID_THREAD_ID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ResumeAction</name></type> <name>default_action</name> <init>= <expr><block>{<expr><name>LLDB_INVALID_THREAD_ID</name></expr>, <expr><name>action</name></expr>, <expr><name>signal</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>m_actions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>default_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_signal_handled</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSignalHandledForThread</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>!=</operator> <name>LLDB_INVALID_THREAD_ID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_actions</name> <init>= <expr><call><name><name>m_actions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_actions</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tid</name> <operator>==</operator> <name>tid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m_signal_handled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ResumeAction</name> <operator>*</operator><macro><name>GetFirst</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_actions</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_actions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_actions</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_signal_handled</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ResumeAction</name></expr></argument>&gt;</argument_list></name> <name>m_actions</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_signal_handled</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>ThreadStopInfo</name> <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopReason</name> <name>reason</name></expr>;</expr_stmt>
<union>union <block>{

<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>signo</name></decl>;</decl_stmt>
}</block> <decl><name>signal</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
}</block> <decl><name>exception</name></decl>;</struct>


<struct>struct <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>child_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>child_tid</name></expr>;</expr_stmt>
}</block> <decl><name>fork</name></decl>;</struct>
}</block> <decl><name>details</name></decl>;</union>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
