<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointSiteList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTSITELIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTSITELIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointSite.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>BreakpointSiteList</name> <block>{<block_content>



<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Process</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>BreakpointSiteList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>BreakpointSiteList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <call><name>Add</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <operator>&amp;</operator><name>bp_site_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <macro><name>FindByAddress</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <macro><name>FindByID</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro></expr>;</expr_stmt>











<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <macro><name>FindByID</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <macro><name>FindIDByAddress</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro></expr>;</expr_stmt>













<decl_stmt><decl><type><name>bool</name></type> <name>BreakpointSiteContainsBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>bp_site_id</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>bp_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEach</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>BreakpointSite</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>Remove</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>breakID</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>RemoveByAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FindInRange</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>lower_bound</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>upper_bound</name></expr></argument>,
<argument><expr><name>BreakpointSiteList</name> <operator>&amp;</operator><name>bp_site_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>BreakpointSiteSPMapFunc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <operator>&amp;</operator><name>bp</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>












<decl_stmt><decl><type><name>bool</name></type> <name>ShouldStop</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>breakID</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_bp_site_list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_bp_site_list</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <macro><name>GetIDIterator</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <macro><name>GetIDConstIterator</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_bp_site_list</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
