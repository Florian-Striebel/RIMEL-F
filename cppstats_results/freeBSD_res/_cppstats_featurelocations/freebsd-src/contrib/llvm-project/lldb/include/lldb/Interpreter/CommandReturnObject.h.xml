<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/CommandReturnObject.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_COMMANDRETURNOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_COMMANDRETURNOBJECT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/StreamFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StreamString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StreamTee.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FormatVariadic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/WithColor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CommandReturnObject</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>CommandReturnObject</name><argument_list>(<argument>bool colors</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>CommandReturnObject</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetOutputData</name><argument_list>()</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <call><name>stream_sp</name><argument_list>(<argument><expr><call><name><name>m_out_stream</name><operator>.</operator><name>GetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eStreamStringIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>stream_sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>static_pointer_cast</name><argument_list type="generic">&lt;<argument><expr><name>StreamString</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetString</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>StringRef</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetErrorData</name><argument_list>()</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <call><name>stream_sp</name><argument_list>(<argument><expr><call><name><name>m_err_stream</name><operator>.</operator><name>GetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eStreamStringIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>stream_sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>static_pointer_cast</name><argument_list type="generic">&lt;<argument><expr><name>StreamString</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetString</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>StringRef</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>Stream</name> <modifier>&amp;</modifier></type><name>GetOutputStream</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <call><name>stream_sp</name><argument_list>(<argument><expr><call><name><name>m_out_stream</name><operator>.</operator><name>GetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eStreamStringIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stream_sp</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>StreamString</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_out_stream</name><operator>.</operator><name>SetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eStreamStringIndex</name></expr></argument>, <argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>m_out_stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Stream</name> <modifier>&amp;</modifier></type><name>GetErrorStream</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <call><name>stream_sp</name><argument_list>(<argument><expr><call><name><name>m_err_stream</name><operator>.</operator><name>GetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eStreamStringIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stream_sp</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>StreamString</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_err_stream</name><operator>.</operator><name>SetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eStreamStringIndex</name></expr></argument>, <argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>m_err_stream</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>SetImmediateOutputFile</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>file_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_suppress_immediate_output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <macro><name>stream_sp</name><argument_list>(<argument>new StreamFile(file_sp)</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_out_stream</name><operator>.</operator><name>SetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eImmediateStreamIndex</name></expr></argument>, <argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetImmediateErrorFile</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>file_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_suppress_immediate_output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <macro><name>stream_sp</name><argument_list>(<argument>new StreamFile(file_sp)</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_err_stream</name><operator>.</operator><name>SetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eImmediateStreamIndex</name></expr></argument>, <argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetImmediateOutputStream</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StreamSP</name> <operator>&amp;</operator><name>stream_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_suppress_immediate_output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>m_out_stream</name><operator>.</operator><name>SetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eImmediateStreamIndex</name></expr></argument>, <argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetImmediateErrorStream</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StreamSP</name> <operator>&amp;</operator><name>stream_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_suppress_immediate_output</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>m_err_stream</name><operator>.</operator><name>SetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eImmediateStreamIndex</name></expr></argument>, <argument><expr><name>stream_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <macro><name>GetImmediateOutputStream</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>m_out_stream</name><operator>.</operator><name>GetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eImmediateStreamIndex</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamSP</name> <macro><name>GetImmediateErrorStream</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>m_err_stream</name><operator>.</operator><name>GetStreamAtIndex</name></name><argument_list>(<argument><expr><name>eImmediateStreamIndex</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>AppendMessage</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>in_string</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>AppendMessageWithFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendWarning</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>in_string</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>AppendWarningWithFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>in_string</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendRawError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>in_string</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>AppendErrorWithFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>AppendMessageWithFormatv</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name></expr></argument>, <argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>AppendMessage</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>formatv</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>AppendWarningWithFormatv</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name></expr></argument>, <argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>AppendWarning</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>formatv</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>AppendErrorWithFormatv</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name></expr></argument>, <argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>AppendError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>formatv</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>void</name></type> <name>SetError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fallback_error_cstr</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ReturnStatus</name> <call><name>GetStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetStatus</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ReturnStatus</name> <name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>Succeeded</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>HasResult</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetDidChangeProcessState</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetDidChangeProcessState</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetInteractive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetInteractive</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetSuppressImmediateOutput</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetSuppressImmediateOutput</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<enum>enum <block>{ <decl><name>eStreamStringIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>eImmediateStreamIndex</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><name>StreamTee</name></type> <name>m_out_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamTee</name></type> <name>m_err_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ReturnStatus</name> <name>m_status</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eReturnStatusStarted</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_did_change_process_state</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_suppress_immediate_output</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_interactive</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
