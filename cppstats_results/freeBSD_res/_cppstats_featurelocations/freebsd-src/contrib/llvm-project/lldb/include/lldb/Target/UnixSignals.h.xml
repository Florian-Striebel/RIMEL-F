<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/UnixSignals.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_UNIXSIGNALS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_UNIXSIGNALS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>UnixSignals</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>UnixSignalsSP</name> <call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>UnixSignalsSP</name> <call><name>CreateForHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UnixSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>UnixSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSignalAsCString</name><argument_list>(<argument><expr><name>int32_t</name> <name>signo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SignalIsValid</name><argument_list>(<argument><expr><name>int32_t</name> <name>signo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>GetSignalNumberFromName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSignalInfo</name><argument_list>(<argument><expr><name>int32_t</name> <name>signo</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>should_suppress</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>should_stop</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>should_notify</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetShouldSuppress</name><argument_list>(<argument><expr><name>int32_t</name> <name>signo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetShouldSuppress</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetShouldSuppress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetShouldStop</name><argument_list>(<argument><expr><name>int32_t</name> <name>signo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetShouldStop</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SetShouldStop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetShouldNotify</name><argument_list>(<argument><expr><name>int32_t</name> <name>signo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetShouldNotify</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetShouldNotify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>signal_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>int32_t</name> <macro><name>GetFirstSignalNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>GetNextSignalNumber</name><argument_list>(<argument><expr><name>int32_t</name> <name>current_signal</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>int32_t</name> <macro><name>GetNumSignals</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>GetSignalAtIndex</name><argument_list>(<argument><expr><name>int32_t</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConstString</name></type> <name>GetShortName</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<function_decl><type><name>void</name></type> <name>AddSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>default_suppress</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>default_stop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>default_notify</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RemoveSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>uint64_t</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name> <call><name>GetFilteredSignals</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>should_suppress</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>should_stop</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>should_notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>


<struct>struct <name>Signal</name> <block>{
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_alias</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_description</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_suppress</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>m_stop</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>m_notify</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<macro><name>Signal</name><argument_list>(<argument>const char *name</argument>, <argument>bool default_suppress</argument>, <argument>bool default_stop</argument>,
<argument>bool default_notify</argument>, <argument>const char *description</argument>, <argument>const char *alias</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>Signal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>Signal</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>collection</name></type> <name>m_signals</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>UnixSignals</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnixSignals</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UnixSignals</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>UnixSignals</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
