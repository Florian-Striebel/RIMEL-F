<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBCommunication.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBCOMMUNICATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBCOMMUNICATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBError.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBCommunication</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>FLAGS_ANONYMOUS_ENUM</name><argument_list>()</argument_list></macro><block>{<block_content>
<expr><name>eBroadcastBitDisconnected</name> <operator>=</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitReadThreadGotBytes</name> <operator>=</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitReadThreadDidExit</name> <operator>=</operator>
<operator>(</operator><literal type="number">1</literal>
<operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitReadThreadShouldExit</name> <operator>=</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eBroadcastBitPacketAvailable</name> <operator>=</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>eAllEventBits</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr></block_content>}</block><empty_stmt>;</empty_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReadThreadBytesReceived</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<expr_stmt><expr><call><name>SBCommunication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SBCommunication</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>broadcaster_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SBCommunication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <call><name>GetBroadcaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>AdoptFileDesriptor</name><argument_list>(<argument>int fd</argument>, <argument>bool owns_fd</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <call><name>Connect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <call><name>Disconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsConnected</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>GetCloseOnEOF</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetCloseOnEOF</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>size_t</name></type> <name>Read</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>timeout_usec</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>Write</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>src_len</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>ReadThreadStart</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ReadThreadStop</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ReadThreadIsRunning</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetReadThreadBytesReceivedCallback</name><parameter_list>(<parameter><decl><type><name>ReadThreadBytesReceived</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_baton</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>SBCommunication</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBCommunication</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SBCommunication</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SBCommunication</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Communication</name> <operator>*</operator><name>m_opaque</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_opaque_owned</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
