<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/SymbolVendor.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_SYMBOLVENDOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_SYMBOLVENDOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SourceModule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TypeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>SymbolVendor</name> <range>: <expr><name>public</name> <name>ModuleChild</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>PluginInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>SymbolVendor</name> <modifier>*</modifier></type><name>FindPlugin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>*</operator><name>feedback_strm</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><call><name>SymbolVendor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddSymbolFileRepresentation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ObjectFileSP</name> <operator>&amp;</operator><name>objfile_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>SymbolFile</name> <modifier>*</modifier></type><name>GetSymbolFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_sym_file_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>ConstString</name> <macro><name>GetPluginName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetPluginVersion</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SymbolFile</name></expr></argument>&gt;</argument_list></name> <name>m_sym_file_up</name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
