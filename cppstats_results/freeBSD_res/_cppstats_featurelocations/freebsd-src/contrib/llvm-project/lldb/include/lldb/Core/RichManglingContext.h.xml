<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/RichManglingContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_RICHMANGLINGCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_RICHMANGLINGCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Any.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Demangle/Demangle.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>RichManglingContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>RichManglingContext</name><argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>m_ipd_buf</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>malloc</name><argument_list>(<argument><expr><name>m_ipd_buf_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_ipd_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><operator>~</operator><call><name>RichManglingContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>FromItaniumName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>mangled</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>FromCxxMethodName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>demangled</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>IsCtorOrDtor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>ParseFunctionBaseName</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>ParseFunctionDeclContextName</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>ParseFullName</name><parameter_list>()</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetBufferRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>m_provider</name> <operator>!=</operator> <name>None</name> <operator>&amp;&amp;</operator> <literal type="string">"Initialize a provider first"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>m_buffer</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<enum>enum <name>InfoProvider</name> <block>{ <decl><name>None</name></decl>, <decl><name>ItaniumPartialDemangler</name></decl>, <decl><name>PluginCxxLanguage</name></decl> }</block>;</enum>


<decl_stmt><decl><type><name>InfoProvider</name></type> <name>m_provider</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>m_buffer</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>ItaniumPartialDemangler</name> <name>m_ipd</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_ipd_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_ipd_buf_size</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Any</name> <name>m_cxx_method_parser</name></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>ResetCxxMethodParser</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ResetProvider</name><parameter_list>(<parameter><decl><type><name>InfoProvider</name></type> <name>new_provider</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>processIPDStrResult</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipd_res</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>res_len</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ParserT</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>ParserT</name> <modifier>*</modifier></type><name>get</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Any</name> <name>parser</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>parser</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>any_isa</name><argument_list type="generic">&lt;<argument><expr><name>ParserT</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>any_cast</name><argument_list type="generic">&lt;<argument><expr><name>ParserT</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
