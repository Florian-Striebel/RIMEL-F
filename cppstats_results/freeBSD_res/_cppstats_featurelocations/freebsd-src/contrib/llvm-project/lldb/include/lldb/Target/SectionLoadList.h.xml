<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/SectionLoadList.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_SECTIONLOADLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_SECTIONLOADLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Section.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SectionLoadList</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>SectionLoadList</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_addr_to_sect</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_sect_to_addr</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_mutex</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<call><name>SectionLoadList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SectionLoadList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>SectionLoadList</name><argument_list>()</argument_list></macro> <block>{


<expr><call><name>Clear</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>SectionLoadList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetSectionLoadAddress</name><argument_list>(<argument>const lldb::SectionSP &amp;section_sp</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ResolveLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>,
<argument><expr><name>bool</name> <name>allow_section_end</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetSectionLoadAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>bool</name> <name>warn_multiple</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>SetSectionUnloaded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>SetSectionUnloaded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SectionSP</name></expr></argument>&gt;</argument_list></name> <name>addr_to_sect_collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Section</name> <operator>*</operator></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>sect_to_addr_collection</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>addr_to_sect_collection</name></type> <name>m_addr_to_sect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sect_to_addr_collection</name></type> <name>m_sect_to_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
