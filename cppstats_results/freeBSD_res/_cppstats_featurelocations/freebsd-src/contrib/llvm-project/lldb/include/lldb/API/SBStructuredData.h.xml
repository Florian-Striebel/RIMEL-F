<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBStructuredData.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBSTRUCTUREDDATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBSTRUCTUREDDATA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBModule.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBStructuredData</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBStructuredData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBStructuredData</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBStructuredData</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>StructuredDataImpl</name> <operator>*</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBStructuredData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBStructuredData</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>SetFromJSON</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>SetFromJSON</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>GetAsJSON</name><argument_list>(<argument>lldb::SBStream &amp;stream</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <macro><name>GetDescription</name><argument_list>(<argument>lldb::SBStream &amp;stream</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StructuredDataType</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>GetKeys</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>keys</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <macro><name>GetValueForKey</name><argument_list>(<argument>const char *key</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <macro><name>GetItemAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetIntegerValue</name><argument_list>(<argument><expr><name>uint64_t</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>double</name></type> <name>GetFloatValue</name><argument_list>(<argument><expr><name>double</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>GetBooleanValue</name><argument_list>(<argument><expr><name>bool</name> <name>fail_value</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
















<decl_stmt><decl><type><name>size_t</name></type> <name>GetStringValue</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBLaunchInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBProcess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThreadPlan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTrace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StructuredDataImplUP</name></type> <name>m_impl_up</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
