<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/Breakpoint.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointLocationCollection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointLocationList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/Stoppoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/StoppointHitCounter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SearchFilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

















































<decl_stmt><decl><type><name>class</name></type> <name>Breakpoint</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Breakpoint</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>Stoppoint</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>ConstString</name></type> <name>GetEventIdentifier</name><parameter_list>()</parameter_list>;</function_decl>



<enum>enum <name>MatchType</name> <block>{ <decl><name>Exact</name></decl>, <decl><name>Regexp</name></decl>, <decl><name>Glob</name></decl> }</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OptionNames</name> <range>: <expr><name>uint32_t</name> <block>{ <expr><name>Names</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>Hardware</name></expr>, <expr><name>LastOptionName</name></expr> }</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
<modifier>*</modifier></type><name><name>g_option_names</name><index>[<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OptionNames</name><operator>::</operator><name>LastOptionName</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetKey</name><parameter_list>(<parameter><decl><type><name>OptionNames</name></type> <name>enum_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>g_option_names</name><index>[<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>enum_value</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>BreakpointEventData</name> <range>: <expr><name>public</name> <name>EventData</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>BreakpointEventData</name><argument_list>(<argument>lldb::BreakpointEventType sub_type</argument>,
<argument>const lldb::BreakpointSP &amp;new_breakpoint_sp</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>BreakpointEventData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>ConstString</name> <call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;

<expr><name>ConstString</name> <macro><name>GetFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>BreakpointEventType</name> <macro><name>GetBreakpointEventType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <operator>&amp;</operator><call><name>GetBreakpoint</name><argument_list>()</argument_list></call></expr>;

<expr><name>BreakpointLocationCollection</name> <operator>&amp;</operator><macro><name>GetBreakpointLocationCollection</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_locations</name></expr>;</return>
}</block>

<name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointEventType</name>
<call><name>GetBreakpointEventTypeFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSP</name>
<call><name>GetBreakpointFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name>
<macro><name>GetBreakpointLocationAtIndexFromEvent</name><argument_list>(<argument>const lldb::EventSP &amp;event_sp</argument>,
<argument>uint32_t loc_idx</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>size_t</name>
<call><name>GetNumBreakpointLocationsFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>EventSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>BreakpointEventData</name> <operator>*</operator>
<call><name>GetEventDataFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>BreakpointEventType</name> <name>m_breakpoint_event</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <name>m_new_breakpoint_sp</name></expr>;
<expr><name>BreakpointLocationCollection</name> <name>m_locations</name></expr>;

<expr><call><name>BreakpointEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointEventData</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>BreakpointEventData</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>BreakpointEventData</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateFromStructuredData</name><argument_list>(
<argument>lldb::TargetSP target_sp</argument>, <argument>StructuredData::ObjectSP &amp;data_object_sp</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>
<name>SerializedBreakpointMatchesNames</name><argument_list>(<argument><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <operator>&amp;</operator><name>bkpt_object_sp</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <call><name>SerializeToStructuredData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSerializationKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"Breakpoint"</literal></expr>;</return> </block_content>}</block></function>





<expr_stmt><expr><operator>~</operator><macro><name>Breakpoint</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>IsInternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>






<function_decl><type><name>void</name></type> <name>ClearAllBreakpointSites</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>ResolveBreakpoint</name><parameter_list>()</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>ResolveBreakpointInModules</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>send_event</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>ResolveBreakpointInModules</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>,
<parameter><decl><type><name>BreakpointLocationCollection</name> <modifier>&amp;</modifier></type><name>new_locations</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>ModulesChanged</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>changed_modules</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>load_event</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>delete_locations</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>









<decl_stmt><decl><type><name>void</name></type> <name>ModuleReplaced</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>old_module_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>new_module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <call><name>AddLocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>new_location</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <call><name>FindLocationByAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <call><name>FindLocationIDByAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>FindLocationByID</name><argument_list>(<argument>lldb::break_id_t bp_loc_id</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>GetLocationAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>














<function_decl><type><name>void</name></type> <name>RemoveInvalidLocations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>void</name></type> <name>SetEnabled</name><argument_list>(<argument><expr><name>bool</name> <name>enable</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>SetIgnoreCount</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>uint32_t</name> <macro><name>GetIgnoreCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>uint32_t</name> <macro><name>GetHitCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>SetOneShot</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>one_shot</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>bool</name> <macro><name>IsOneShot</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><name>void</name></type> <name>SetAutoContinue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_continue</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>bool</name> <macro><name>IsAutoContinue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>SetThreadID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>thread_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <macro><name>GetThreadID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetThreadIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetThreadIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetThreadName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetThreadName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetQueueName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queue_name</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetQueueName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<function_decl><type><name>void</name></type> <name>SetCallback</name><parameter_list>(<parameter><decl><type><name>BreakpointHitCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_synchronous</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetCallback</name><argument_list>(<argument><expr><name>BreakpointHitCallback</name> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BatonSP</name> <operator>&amp;</operator><name>callback_baton_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_synchronous</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ClearCallback</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>SetCondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>condition</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetConditionText</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<expr_stmt><expr><name>size_t</name> <macro><name>GetNumResolvedLocations</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>HasResolvedLocations</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>GetNumLocations</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_locations</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<function><type><name>void</name></type> <name>SetBreakpointKind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_kind_description</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>





<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetBreakpointKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_kind_description</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>




<function><type><name>Target</name> <modifier>&amp;</modifier></type><name>GetTarget</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_target</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Target</name> <operator>&amp;</operator><macro><name>GetTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_target</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <call><name>GetTargetSP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>GetResolverDescription</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>bool</name></type> <name>GetMatchingFileLine</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>line_number</name></decl></parameter>,
<parameter><decl><type><name>BreakpointLocationCollection</name> <modifier>&amp;</modifier></type><name>loc_coll</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetFilterDescription</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>BreakpointOptions</name> <modifier>&amp;</modifier></type><name>GetOptions</name><parameter_list>()</parameter_list>;</function_decl>







<expr_stmt><expr><specifier>const</specifier> <name>BreakpointOptions</name> <operator>&amp;</operator><macro><name>GetOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<decl_stmt><decl><type><name>bool</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>bp_loc_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsHardware</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_hardware</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointResolverSP</name> <macro><name>GetResolver</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_resolver_sp</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <macro><name>GetSearchFilter</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_filter_sp</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>AddName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>new_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>RemoveName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_to_remove</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name_to_remove</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_name_list</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>name_to_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name>bool</name></type> <name>MatchesName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_name_list</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>m_name_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>GetNames</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>names</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>name</name> <range>: <expr><name>m_name_list</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>











<decl_stmt><decl><type><name>void</name></type> <name>SetPrecondition</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointPreconditionSP</name> <name>precondition_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_precondition_sp</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>precondition_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>bool</name></type> <name>EvaluatePrecondition</name><parameter_list>(<parameter><decl><type><name>StoppointCallbackContext</name> <modifier>&amp;</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointPreconditionSP</name> <macro><name>GetPrecondition</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_precondition_sp</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>BreakpointName</name><operator>::</operator><name>Permissions</name> <operator>&amp;</operator><macro><name>GetPermissions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_permissions</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>BreakpointName</name><operator>::</operator><name>Permissions</name> <operator>&amp;</operator><macro><name>GetPermissions</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_permissions</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>AllowList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetPermissions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetAllowList</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>AllowDisable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetPermissions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetAllowDisable</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>AllowDelete</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetPermissions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetAllowDelete</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CopyFromBreakpoint</name><argument_list>(<argument>lldb::TargetSP new_target</argument>,
<argument>const Breakpoint &amp;bp_to_copy_from</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Target</name></decl>;</decl_stmt>






























<macro><name>Breakpoint</name><argument_list>(<argument>Target &amp;target</argument>, <argument>lldb::SearchFilterSP &amp;filter_sp</argument>,
<argument>lldb::BreakpointResolverSP &amp;resolver_sp</argument>, <argument>bool hardware</argument>,
<argument>bool resolve_indirect_symbols = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>BreakpointLocation</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>DecrementIgnoreCount</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>Breakpoint</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>new_target</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Breakpoint</name> <operator>&amp;</operator><name>bp_to_copy_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_being_created</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>
<name>m_hardware</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>m_target</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_name_list</name></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<name>m_filter_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointResolverSP</name>
<name>m_resolver_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointPreconditionSP</name> <name>m_precondition_sp</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name>BreakpointOptions</name></type> <name>m_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BreakpointLocationList</name></type>
<name>m_locations</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_kind_description</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_resolve_indirect_symbols</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>StoppointHitCounter</name></type> <name>m_hit_counter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BreakpointName</name><operator>::</operator><name>Permissions</name> <name>m_permissions</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SendBreakpointChangedEvent</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointEventType</name> <name>eventKind</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SendBreakpointChangedEvent</name><parameter_list>(<parameter><decl><type><name>BreakpointEventData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>Breakpoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Breakpoint</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Breakpoint</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Breakpoint</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
