<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/common/NativeProcessProtocol.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_COMMON_NATIVEPROCESSPROTOCOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_COMMON_NATIVEPROCESSPROTOCOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"NativeBreakpointList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"NativeThreadProtocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"NativeWatchpointList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/MainLoop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/TraceGDBRemotePackets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UnimplementedError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<expr_stmt><expr><call><name>LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryRegionInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ResumeActionList</name></decl>;</decl_stmt>

<struct>struct <name>SVR4LibraryInfo</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>link_map</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>base_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>ld_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>next</name></expr>;</expr_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>NativeProcessProtocol</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>NativeProcessProtocol</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Resume</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ResumeActionList</name> <modifier>&amp;</modifier></type><name>resume_actions</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Halt</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Detach</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>









<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Interrupt</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>Kill</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>IgnoreSignals</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>signals</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>GetMemoryRegionInfo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>MemoryRegionInfo</name> <operator>&amp;</operator><name>range_info</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>ReadMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>size_t</name> <operator>&amp;</operator><name>bytes_read</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>ReadMemoryWithoutTrap</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>size_t</name> <operator>&amp;</operator><name>bytes_read</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>ReadMemoryTags</name><argument_list>(<argument><expr><name>int32_t</name> <name>type</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>tags</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>WriteMemoryTags</name><argument_list>(<argument><expr><name>int32_t</name> <name>type</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>tags</name></expr></argument>)</argument_list></decl>;</decl_stmt>






















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>ReadCStringFromMemory</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>char *buffer</argument>, <argument>size_t max_size</argument>,
<argument>size_t &amp;total_bytes_read</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>WriteMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>size_t</name> <operator>&amp;</operator><name>bytes_written</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <macro><name>AllocateMemory</name><argument_list>(<argument>size_t size</argument>,
<argument>uint32_t permissions</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>UnimplementedError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>DeallocateMemory</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>UnimplementedError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetSharedLibraryInfoAddress</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SVR4LibraryInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>GetLoadedSVR4Libraries</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Not implemented"</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsAlive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>UpdateThreads</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><macro><name>GetArchitecture</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>size</name></expr></argument>,
<argument><expr><name>bool</name> <name>hardware</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>RemoveBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>bool</name> <name>hardware</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>HardwareBreakpointMap</name> <operator>&amp;</operator><macro><name>GetHardwareBreakpointMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetHardwareBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>RemoveHardwareBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>NativeWatchpointList</name><operator>::</operator><name>WatchpointMap</name> <operator>&amp;</operator><macro><name>GetWatchpointMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>GetHardwareDebugSupportInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetWatchpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>watch_flags</name></expr></argument>, <argument><expr><name>bool</name> <name>hardware</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>RemoveWatchpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <macro><name>GetID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_pid</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetState</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsRunning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_state</name> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eStateRunning</name> <operator>||</operator> <call><name>IsStepping</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsStepping</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_state</name> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eStateStepping</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>CanResume</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_state</name> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eStateStopped</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetArchitecture</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetByteOrder</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetAddressByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetArchitecture</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetAddressByteSize</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>GetAuxvData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>WaitStatus</name></expr></argument>&gt;</argument_list></name> <call><name>GetExitStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>SetExitStatus</name><parameter_list>(<parameter><decl><type><name>WaitStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bNotifyStateChange</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>NativeThreadProtocol</name> <modifier>*</modifier></type><name>GetThreadAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>NativeThreadProtocol</name> <modifier>*</modifier></type><name>GetThreadByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetCurrentThreadID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_current_thread_id</name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <macro><name>GetCurrentThreadID</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_current_thread_id</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>NativeThreadProtocol</name> <modifier>*</modifier></type><name>GetCurrentThread</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetThreadByID</name><argument_list>(<argument><expr><name>m_current_thread_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>virtual</name> <name>int</name></type> <name>GetTerminalFileDescriptor</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_terminal_fd</name></expr>;</return> </block_content>}</block></function>



<function><type><name>uint32_t</name></type> <name>GetStopID</name><parameter_list>()</parameter_list> const;</function>


<decl_stmt><decl><type><name>class</name></type> <name>NativeDelegate</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>NativeDelegate</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>InitializeDelegate</name><parameter_list>(<parameter><decl><type><name>NativeProcessProtocol</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>ProcessStateChanged</name><argument_list>(<argument><expr><name>NativeProcessProtocol</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>DidExec</name><parameter_list>(<parameter><decl><type><name>NativeProcessProtocol</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type>
<name>NewSubprocess</name><argument_list>(<argument><expr><name>NativeProcessProtocol</name> <operator>*</operator><name>parent_process</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NativeProcessProtocol</name></expr></argument>&gt;</argument_list></name> <name>child_process</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>GetLoadedModuleFileSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_path</name></decl></parameter>,
<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>GetFileLoadAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>file_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>load_addr</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Extension</name> <block>{<block_content>
<expr_stmt><expr><name>multiprocess</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>fork</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>vfork</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>pass_signals</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>auxv</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>libraries_svr4</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr><operator>,</operator>
<expr><name>memory_tagging</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr><operator>,</operator>

<macro><name>LLVM_MARK_AS_BITMASK_ENUM</name><argument_list>(<argument>memory_tagging</argument>)</argument_list></macro></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Factory</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Factory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


















<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NativeProcessProtocol</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>Launch</name><argument_list>(<argument>ProcessLaunchInfo &amp;launch_info</argument>, <argument>NativeDelegate &amp;native_delegate</argument>,
<argument>MainLoop &amp;mainloop</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



















<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NativeProcessProtocol</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>Attach</name><argument_list>(<argument>lldb::pid_t pid</argument>, <argument>NativeDelegate &amp;native_delegate</argument>,
<argument>MainLoop &amp;mainloop</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>Extension</name> <macro><name>GetSupportedExtensions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

















<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>TraceStart</name><argument_list>(<argument>llvm::StringRef json_params</argument>,
<argument>llvm::StringRef type</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Unsupported tracing type '%s'"</literal></expr></argument>,
<argument><expr><call><name><name>type</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>TraceStop</name><argument_list>(<argument>const TraceStopRequest &amp;request</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Unsupported tracing type '%s'"</literal></expr></argument>,
<argument><expr><call><name><name>request</name><operator>.</operator><name>type</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>json</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>
<macro><name>TraceGetState</name><argument_list>(<argument>llvm::StringRef type</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Unsupported tracing type '%s'"</literal></expr></argument>,
<argument><expr><call><name><name>type</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>TraceGetBinaryData</name><argument_list>(<argument>const TraceGetBinaryDataRequest &amp;request</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Unsupported data kind '%s' for the '%s' tracing technology"</literal></expr></argument>,
<argument><expr><call><name><name>request</name><operator>.</operator><name>kind</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>request</name><operator>.</operator><name>type</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TraceSupportedResponse</name></expr></argument>&gt;</argument_list></name> <macro><name>TraceSupported</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>UnimplementedError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<function><type><name>virtual</name> <name>void</name></type> <name>SetEnabledExtensions</name><parameter_list>(<parameter><decl><type><name>Extension</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_enabled_extensions</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<struct>struct <name>SoftwareBreakpoint</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref_count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>saved_opcodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>breakpoint_opcodes</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>SoftwareBreakpoint</name></expr></argument>&gt;</argument_list></name> <name>m_software_breakpoints</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>m_pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NativeThreadProtocol</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_threads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>m_current_thread_id</name> <operator>=</operator> <name>LLDB_INVALID_THREAD_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_threads_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>m_state</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eStateInvalid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_state_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>WaitStatus</name></expr></argument>&gt;</argument_list></name> <name>m_exit_status</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>NativeDelegate</name> <modifier>&amp;</modifier></type><name>m_delegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NativeWatchpointList</name></type> <name>m_watchpoint_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HardwareBreakpointMap</name></type> <name>m_hw_breakpoints_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_terminal_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_stop_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>m_signals_to_ignore</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Extension</name></type> <name>m_enabled_extensions</name></decl>;</decl_stmt>





<macro><name>NativeProcessProtocol</name><argument_list>(<argument>lldb::pid_t pid</argument>, <argument>int terminal_fd</argument>,
<argument>NativeDelegate &amp;delegate</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>, <argument><expr><name>bool</name> <name>notify_delegates</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>DoStopIDBumped</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>newBumpId</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>Status</name></type> <name>SetSoftwareBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>size_hint</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Status</name></type> <name>RemoveSoftwareBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>GetSoftwareBreakpointTrapOpcode</name><argument_list>(<argument>size_t size_hint</argument>)</argument_list></macro></expr>;</expr_stmt>





<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetSoftwareBreakpointPCOffset</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>FixupBreakpointPCAsNeeded</name><parameter_list>(<parameter><decl><type><name>NativeThreadProtocol</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>NotifyDidExec</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>NativeThreadProtocol</name> <modifier>*</modifier></type><name>GetThreadByIDUnlocked</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>SynchronouslyNotifyProcessStateChanged</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>SoftwareBreakpoint</name></expr></argument>&gt;</argument_list></name>
<macro><name>EnableSoftwareBreakpoint</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>uint32_t size_hint</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
