<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ModuleCache.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_MODULECACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_MODULECACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UUID</name></decl>;</decl_stmt>




















<decl_stmt><decl><type><name>class</name></type> <name>ModuleCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>ModuleDownloader</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>Status</name><operator>(</operator><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SymfileDownloader</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>Status</name><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>GetAndPut</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>root_dir_spec</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>hostname</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ModuleDownloader</name> <operator>&amp;</operator><name>module_downloader</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymfileDownloader</name> <operator>&amp;</operator><name>symfile_downloader</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>cached_module_sp</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>did_create_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>Status</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>root_dir_spec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ModuleSpec</name> <modifier>&amp;</modifier></type><name>module_spec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>tmp_file</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>target_file</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Status</name></type> <name>Get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>root_dir_spec</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>hostname</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>cached_module_sp</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>did_create_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ModuleWP</name></expr></argument>&gt;</argument_list></name> <name>m_loaded_modules</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
