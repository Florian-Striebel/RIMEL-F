<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/IOStreamMacros.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>liblldb_IOStreamMacros_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>liblldb_IOStreamMacros_h_</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAW_HEXBASE</name></cpp:macro> <cpp:value>std::setfill('0') &lt;&lt; std::hex &lt;&lt; std::right</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXBASE</name></cpp:macro> <cpp:value>'0' &lt;&lt; 'x' &lt;&lt; RAW_HEXBASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAWHEX8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RAW_HEXBASE &lt;&lt; std::setw(2) &lt;&lt; ((uint32_t)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAWHEX16</name></cpp:macro> <cpp:value>RAW_HEXBASE &lt;&lt; std::setw(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAWHEX32</name></cpp:macro> <cpp:value>RAW_HEXBASE &lt;&lt; std::setw(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAWHEX64</name></cpp:macro> <cpp:value>RAW_HEXBASE &lt;&lt; std::setw(16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEXBASE &lt;&lt; std::setw(2) &lt;&lt; ((uint32_t)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX16</name></cpp:macro> <cpp:value>HEXBASE &lt;&lt; std::setw(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX32</name></cpp:macro> <cpp:value>HEXBASE &lt;&lt; std::setw(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX64</name></cpp:macro> <cpp:value>HEXBASE &lt;&lt; std::setw(16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAW_HEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RAW_HEXBASE &lt;&lt; std::setw(sizeof(x) * 2) &lt;&lt; (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEXBASE &lt;&lt; std::setw(sizeof(x) * 2) &lt;&lt; (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HEXBASE &lt;&lt; std::setw((sz)) &lt;&lt; (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_WIDTH</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::setfill(' ') &lt;&lt; std::setw(w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_STRING_WIDTH</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::left &lt;&lt; std::setfill(' ') &lt;&lt; std::setw(w) &lt;&lt; (s) &lt;&lt; std::right</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECIMAL</name></cpp:macro> <cpp:value>std::dec &lt;&lt; std::setfill(' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECIMAL_WIDTH</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DECIMAL &lt;&lt; std::setw(w)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_WITH_SPACES</name><parameter_list>(<parameter><type><name>iword_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::setfill(' ') &lt;&lt; std::setw((iword_idx)) &lt;&lt; ""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_WITH_TABS</name><parameter_list>(<parameter><type><name>iword_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::setfill('\t') &lt;&lt; std::setw((iword_idx)) &lt;&lt; ""</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
