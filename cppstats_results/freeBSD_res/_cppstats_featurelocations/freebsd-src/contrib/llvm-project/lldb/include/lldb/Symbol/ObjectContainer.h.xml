<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/ObjectContainer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_OBJECTCONTAINER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_OBJECTCONTAINER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>










<decl_stmt><decl><type><name>class</name></type> <name>ObjectContainer</name> <range>: <expr><name>public</name> <name>PluginInterface</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>ModuleChild</name> <block>{<block_content>
<label><name>public</name>:</label>





<macro><name>ObjectContainer</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>const FileSpec *file</argument>,
<argument>lldb::offset_t file_offset</argument>, <argument>lldb::offset_t length</argument>,
<argument>lldb::DataBufferSP &amp;data_sp</argument>, <argument>lldb::offset_t data_offset</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>ModuleChild</name><argument_list>(<argument><expr><name>module_sp</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_file</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_offset</name><argument_list>(<argument><expr><name>file_offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_length</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_data</name><argument_list>()</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_file</name> <operator>=</operator> <operator>*</operator><name>file</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data_sp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_data</name><operator>.</operator><name>SetData</name></name><argument_list>(<argument><expr><name>data_sp</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>





<expr_stmt><expr><operator>~</operator><macro><name>ObjectContainer</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>









<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetArchitectureAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>, <argument><expr><name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_offset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_length</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>size_t</name> <macro><name>GetNumObjects</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>










<expr_stmt><expr><name>virtual</name> <name>size_t</name> <macro><name>GetNumArchitectures</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>












<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ParseHeader</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
















<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ObjectFileSP</name> <call><name>GetObjectFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>*</operator><name>file</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function><type><name>virtual</name> <name>bool</name></type> <name>ObjectAtIndexIsContainer</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>object_idx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>ObjectFile</name> <modifier>*</modifier></type><name>GetObjectFileAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>object_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>ObjectContainer</name> <modifier>*</modifier></type><name>GetObjectContainerAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>object_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetObjectNameAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>object_idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name>
<name>m_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_length</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DataExtractor</name></type>
<name>m_data</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ObjectContainer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ObjectContainer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectContainer</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ObjectContainer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
