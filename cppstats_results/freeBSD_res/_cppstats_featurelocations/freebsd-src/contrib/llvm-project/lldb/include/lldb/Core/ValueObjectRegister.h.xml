<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/ValueObjectRegister.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_VALUEOBJECTREGISTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_VALUEOBJECTREGISTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RegisterValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContextScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Scalar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ValueObjectRegisterSet</name> <range>: <expr><name>public</name> <name>ValueObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>ValueObjectRegisterSet</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>Create</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>,
<argument>lldb::RegisterContextSP &amp;reg_ctx_sp</argument>,
<argument>uint32_t set_idx</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueType</name> <macro><name>GetValueType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><name>eValueTypeRegisterSet</name></expr>;</return>
}</block>

<name>ConstString</name> <macro><name>GetTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ConstString</name> <macro><name>GetQualifiedTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>CalculateNumChildren</name><argument_list>(<argument>uint32_t max</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ValueObject</name> <operator>*</operator><macro><name>CreateChildAtIndex</name><argument_list>(<argument>size_t idx</argument>, <argument>bool synthetic_array_member</argument>,
<argument>int32_t synthetic_index</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetChildMemberWithName</name><argument_list>(<argument>ConstString name</argument>,
<argument>bool can_create</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>GetIndexOfChildWithName</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>UpdateValue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>CompilerType</name> <macro><name>GetCompilerTypeImpl</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <name>m_reg_ctx_sp</name></expr>;
<expr><specifier>const</specifier> <name>RegisterSet</name> <operator>*</operator><name>m_reg_set</name></expr>;
<expr><name>uint32_t</name> <name>m_reg_set_idx</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>ValueObjectRegisterContext</name></expr>;

<macro><name>ValueObjectRegisterSet</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>,
<argument>ValueObjectManager &amp;manager</argument>,
<argument>lldb::RegisterContextSP &amp;reg_ctx_sp</argument>, <argument>uint32_t set_idx</argument>)</argument_list></macro>;


<expr><call><name>ValueObjectRegisterSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueObjectRegisterSet</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ValueObjectRegisterSet</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ValueObjectRegisterSet</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ValueObjectRegister</name> <range>: <expr><name>public</name> <name>ValueObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>ValueObjectRegister</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>Create</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>,
<argument>lldb::RegisterContextSP &amp;reg_ctx_sp</argument>,
<argument>uint32_t reg_num</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueType</name> <macro><name>GetValueType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><name>eValueTypeRegister</name></expr>;</return>
}</block>

<name>ConstString</name> <macro><name>GetTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>CalculateNumChildren</name><argument_list>(<argument>uint32_t max</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>SetValueFromCString</name><argument_list>(<argument>const char *value_str</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>SetData</name><argument_list>(<argument>DataExtractor &amp;data</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ResolveValue</name><argument_list>(<argument>Scalar &amp;scalar</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name>
<macro><name>GetExpressionPath</name><argument_list>(<argument>Stream &amp;s</argument>,
<argument>GetExpressionPathFormat epformat =
eGetExpressionPathFormatDereferencePointers</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>UpdateValue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>CompilerType</name> <macro><name>GetCompilerTypeImpl</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <name>m_reg_ctx_sp</name></expr>;
<expr><name>RegisterInfo</name> <name>m_reg_info</name></expr>;
<expr><name>RegisterValue</name> <name>m_reg_value</name></expr>;
<expr><name>ConstString</name> <name>m_type_name</name></expr>;
<expr><name>CompilerType</name> <name>m_compiler_type</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>ConstructObject</name><argument_list>(<argument>uint32_t reg_num</argument>)</argument_list></macro></expr>;

<expr><name>friend</name> <name>class</name> <name>ValueObjectRegisterSet</name></expr>;

<macro><name>ValueObjectRegister</name><argument_list>(<argument>ValueObject &amp;parent</argument>, <argument>lldb::RegisterContextSP &amp;reg_ctx_sp</argument>,
<argument>uint32_t reg_num</argument>)</argument_list></macro>;
<macro><name>ValueObjectRegister</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>,
<argument>ValueObjectManager &amp;manager</argument>,
<argument>lldb::RegisterContextSP &amp;reg_ctx_sp</argument>, <argument>uint32_t reg_num</argument>)</argument_list></macro>;


<expr><call><name>ValueObjectRegister</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueObjectRegister</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ValueObjectRegister</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ValueObjectRegister</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
