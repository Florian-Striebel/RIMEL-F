<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/ExpressionParser.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_EXPRESSIONPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_EXPRESSIONPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IRExecutionUnit</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ExpressionParser</name> <block>{<block_content>
<label><name>public</name>:</label>











<macro><name>ExpressionParser</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>, <argument>Expression &amp;expr</argument>,
<argument>bool generate_debug_info</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_expr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_generate_debug_info</name><argument_list>(<argument>generate_debug_info</argument>)</argument_list></macro> <expr><block>{}</block>


<name>virtual</name> <operator>~</operator><call><name>ExpressionParser</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>































<function_decl><type><name>virtual</name> <name>bool</name></type> <name>Complete</name><parameter_list>(<parameter><decl><type><name>CompletionRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>typed_pos</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>










<function><type><name>virtual</name> <name>bool</name></type> <name>RewriteExpression</name><parameter_list>(<parameter><decl><type><name>DiagnosticManager</name> <modifier>&amp;</modifier></type><name>diagnostic_manager</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>































<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type>
<name>PrepareForExecution</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>func_addr</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>func_end</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IRExecutionUnit</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>execution_unit_sp</name></expr></argument>,
<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>can_interpret</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>ExecutionPolicy</name> <name>execution_policy</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetGenerateDebugInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_generate_debug_info</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Expression</name> <modifier>&amp;</modifier></type><name>m_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_generate_debug_info</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
