<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/Type.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_TYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_TYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Declaration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerDecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<struct>struct <name>CompilerContext</name> <block>{
<macro><name>CompilerContext</name><argument_list>(<argument>CompilerContextKind t</argument>, <argument>ConstString n</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>kind</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>name</name><argument_list>(<argument>n</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CompilerContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>kind</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>kind</name></name> <operator>&amp;&amp;</operator> <name>name</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>name</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CompilerContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>Dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CompilerContextKind</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>name</name></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>bool</name></type> <name>contextMatches</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CompilerContext</name></expr></argument>&gt;</argument_list></name> <name>context_chain</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CompilerContext</name></expr></argument>&gt;</argument_list></name> <name>pattern</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolFileType</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>SymbolFileType</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>UserID</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>SymbolFileType</name><argument_list>(<argument>SymbolFile &amp;symbol_file</argument>, <argument>lldb::user_id_t uid</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>UserID</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_symbol_file</name><argument_list>(<argument>symbol_file</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>SymbolFileType</name><argument_list>(<argument><expr><name>SymbolFile</name> <operator>&amp;</operator><name>symbol_file</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SymbolFileType</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>Type</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> <block>{<block_content> <return>return <expr><call><name>GetType</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block>

Type *GetType(</block></decl>);</decl_stmt>
<expr_stmt><expr><name>SymbolFile</name> <operator>&amp;</operator><macro><name>GetSymbolFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_symbol_file</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>SymbolFile</name> <modifier>&amp;</modifier></type><name>m_symbol_file</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSP</name> <name>m_type_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Type</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>UserID</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>EncodingDataType</name> <block>{
<decl><name>eEncodingInvalid</name></decl>,
<decl><name>eEncodingIsUID</name></decl>,
<decl><name>eEncodingIsConstUID</name></decl>,

<decl><name>eEncodingIsRestrictUID</name></decl>,

<decl><name>eEncodingIsVolatileUID</name></decl>,

<decl><name>eEncodingIsTypedefUID</name></decl>,

<decl><name>eEncodingIsPointerUID</name></decl>,

<decl><name>eEncodingIsLValueReferenceUID</name></decl>,

<decl><name>eEncodingIsRValueReferenceUID</name></decl>,

<decl><name>eEncodingIsAtomicUID</name></decl>,

<decl><name>eEncodingIsSyntheticUID</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ResolveState</name> <range>: <expr><name>unsigned</name> <name>char</name> <block>{
<expr><name>Unresolved</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>Forward</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><name>Layout</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><name>Full</name> <operator>=</operator> <literal type="number">3</literal></expr>
}</block></expr></range></decl>;</decl_stmt>

<macro><name>Type</name><argument_list>(<argument>lldb::user_id_t uid</argument>, <argument>SymbolFile *symbol_file</argument>, <argument>ConstString name</argument>,
<argument>llvm::Optional&lt;uint64_t&gt; byte_size</argument>, <argument>SymbolContextScope *context</argument>,
<argument>lldb::user_id_t encoding_uid</argument>, <argument>EncodingDataType encoding_uid_type</argument>,
<argument>const Declaration &amp;decl</argument>, <argument>const CompilerType &amp;compiler_qual_type</argument>,
<argument>ResolveState compiler_type_resolve_state</argument>, <argument>uint32_t opaque_payload = <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<expr_stmt><expr><call><name>Type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_context</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eDescriptionLevelFull</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>DumpTypeName</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <call><name>GetModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <call><name>GetExeModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>, <argument><expr><name>bool</name> <name>show_name</name></expr></argument>,
<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>SymbolFile</name> <modifier>*</modifier></type><name>GetSymbolFile</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_symbol_file</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>SymbolFile</name> <operator>*</operator><macro><name>GetSymbolFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_symbol_file</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>ConstString</name></type> <name>GetName</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <call><name>GetByteSize</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNumChildren</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>omit_empty_base_classes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsAggregateType</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>IsValidType</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_encoding_uid_type</name> <operator>!=</operator> <name>eEncodingInvalid</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsTypedef</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_encoding_uid_type</name> <operator>==</operator> <name>eEncodingIsTypedefUID</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSP</name> <call><name>GetTypedefType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>ConstString</name></type> <name>GetQualifiedName</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>DumpValue</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>data_offset</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_type</name></expr></argument>, <argument><expr><name>bool</name> <name>show_summary</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eFormatDefault</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>DumpValueInMemory</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>address</name></expr></argument>, <argument><expr><name>AddressType</name> <name>address_type</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_types</name></expr></argument>, <argument><expr><name>bool</name> <name>show_summary</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReadFromMemory</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>address</name></expr></argument>,
<argument><expr><name>AddressType</name> <name>address_type</name></expr></argument>, <argument><expr><name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WriteToMemory</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>address</name></expr></argument>,
<argument><expr><name>AddressType</name> <name>address_type</name></expr></argument>, <argument><expr><name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetIsDeclaration</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetIsDeclaration</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetIsExternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetIsExternal</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <call><name>GetFormat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Encoding</name> <call><name>GetEncoding</name><argument_list>(<argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>GetSymbolContextScope</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_context</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>SymbolContextScope</name> <operator>*</operator><macro><name>GetSymbolContextScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_context</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>SetSymbolContextScope</name><parameter_list>(<parameter><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_context</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>Declaration</name> <operator>&amp;</operator><macro><name>GetDeclaration</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><name>CompilerType</name></type> <name>GetFullCompilerType</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>CompilerType</name></type> <name>GetLayoutCompilerType</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>CompilerType</name></type> <name>GetForwardCompilerType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetTypeScopeAndBasename</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name><operator>&amp;</operator> <name>name</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>scope</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>basename</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeClass</name> <operator>&amp;</operator><name>type_class</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>SetEncodingType</name><parameter_list>(<parameter><decl><type><name>Type</name> <modifier>*</modifier></type><name>encoding_type</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_encoding_type</name> <operator>=</operator> <name>encoding_type</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>uint32_t</name></type> <name>GetEncodingMask</name><parameter_list>()</parameter_list>;</function_decl>

<typedef>typedef <type><name>uint32_t</name></type> <name>Payload</name>;</typedef>

<function><type><name>Payload</name></type> <name>GetPayload</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_payload</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetPayload</name><parameter_list>(<parameter><decl><type><name>Payload</name></type> <name>opaque_payload</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_payload</name> <operator>=</operator> <name>opaque_payload</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolFile</name> <modifier>*</modifier></type><name>m_symbol_file</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>m_context</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Type</name> <modifier>*</modifier></type><name>m_encoding_type</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>m_encoding_uid</name> <operator>=</operator> <name>LLDB_INVALID_UID</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EncodingDataType</name></type> <name>m_encoding_uid_type</name> <init>= <expr><name>eEncodingInvalid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_byte_size</name> <range>: <expr><literal type="number">63</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_byte_size_has_value</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Declaration</name></type> <name>m_decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_compiler_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ResolveState</name></type> <name>m_compiler_type_resolve_state</name> <init>= <expr><name>ResolveState</name><operator>::</operator><name>Unresolved</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Payload</name></type> <name>m_payload</name></decl>;</decl_stmt>

<function_decl><type><name>Type</name> <modifier>*</modifier></type><name>GetEncodingType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ResolveCompilerType</name><parameter_list>(<parameter><decl><type><name>ResolveState</name></type> <name>compiler_type_resolve_state</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>TypeImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>TypeImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypeImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypeImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>compiler_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypeImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>dynamic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypeImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>compiler_type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>dynamic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>compiler_type</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>dynamic</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>compiler_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>dynamic</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TypeImpl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>TypeImpl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>GetModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetDisplayTypeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>TypeImpl</name> <macro><name>GetPointerType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>TypeImpl</name> <macro><name>GetPointeeType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>TypeImpl</name> <macro><name>GetReferenceType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>TypeImpl</name> <macro><name>GetTypedefedType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>TypeImpl</name> <macro><name>GetDereferencedType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>TypeImpl</name> <macro><name>GetUnqualifiedType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>TypeImpl</name> <macro><name>GetCanonicalType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>CompilerType</name></type> <name>GetCompilerType</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>prefer_dynamic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TypeSystem</name> <modifier>*</modifier></type><name>GetTypeSystem</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>prefer_dynamic</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>CheckModule</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CheckExeModule</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CheckModuleCommon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleWP</name> <operator>&amp;</operator><name>input_module_wp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleWP</name> <name>m_module_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleWP</name> <name>m_exe_module_wp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_static_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_dynamic_type</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeListImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeListImpl</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_content</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>Append</name><argument_list>(<argument>const lldb::TypeImplSP &amp;type</argument>)</argument_list></macro> <block>{ <expr><call><name><name>m_content</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>class</name> <name>AppendVisitor</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>AppendVisitor</name><argument_list>(<argument><expr><name>TypeListImpl</name> <operator>&amp;</operator><name>type_list</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_type_list</name><argument_list>(<argument>type_list</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeImplSP</name> <operator>&amp;</operator><name>type</name><operator>)</operator> <block>{ <expr><call><name><name>m_type_list</name><operator>.</operator><name>Append</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>TypeListImpl</name> <operator>&amp;</operator><name>m_type_list</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Append</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeList</name> <operator>&amp;</operator><name>type_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeImplSP</name> <macro><name>GetTypeAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>TypeImplSP</name> <name>type_sp</name></expr>;
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name>GetSize</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type_sp</name> <operator>=</operator> <name><name>m_content</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>type_sp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TypeImplSP</name></expr></argument>&gt;</argument_list></name> <name>m_content</name></expr>;</expr_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>TypeMemberImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeMemberImpl</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>m_type_impl_sp</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_name</name><argument_list>()</argument_list></macro>

<expr><block>{}</block>

<macro><name>TypeMemberImpl</name><argument_list>(<argument>const lldb::TypeImplSP &amp;type_impl_sp</argument>, <argument>uint64_t bit_offset</argument>,
<argument>ConstString name</argument>, <argument>uint32_t bitfield_bit_size = <literal type="number">0</literal></argument>,
<argument>bool is_bitfield = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_type_impl_sp</name><argument_list>(<argument><expr><name>type_impl_sp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_bit_offset</name><argument_list>(<argument><expr><name>bit_offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_bitfield_bit_size</name><argument_list>(<argument><expr><name>bitfield_bit_size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_is_bitfield</name><argument_list>(<argument>is_bitfield</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>TypeMemberImpl</name><argument_list>(<argument>const lldb::TypeImplSP &amp;type_impl_sp</argument>, <argument>uint64_t bit_offset</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_type_impl_sp</name><argument_list>(<argument><expr><name>type_impl_sp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_bit_offset</name><argument_list>(<argument><expr><name>bit_offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_name</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_bitfield_bit_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_is_bitfield</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>m_type_impl_sp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_name</name> <operator>=</operator> <call><name><name>m_type_impl_sp</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeImplSP</name> <operator>&amp;</operator><macro><name>GetTypeImpl</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_type_impl_sp</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetBitOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_bit_offset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetBitfieldBitSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_bitfield_bit_size</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetBitfieldBitSize</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>bitfield_bit_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_bitfield_bit_size</name> <operator>=</operator> <name>bitfield_bit_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetIsBitfield</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_bitfield</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsBitfield</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_bitfield</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_is_bitfield</name> <operator>=</operator> <name>is_bitfield</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeImplSP</name> <name>m_type_impl_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_bit_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_bitfield_bit_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_bitfield</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>











<decl_stmt><decl><type><name>class</name></type> <name>TypeAndOrName</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeAndOrName</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TypeAndOrName</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TypeAndOrName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>compiler_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TypeAndOrName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TypeAndOrName</name><argument_list>(<argument><expr><name>ConstString</name> <operator>&amp;</operator><name>type_const_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TypeAndOrName</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>TypeAndOrName</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetCompilerType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_compiler_type</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>SetName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_name_cstr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetTypeSP</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeSP</name> <name>type_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetCompilerType</name><parameter_list>(<parameter><decl><type><name>CompilerType</name></type> <name>compiler_type</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasCompilerType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>HasCompilerType</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>explicit</name> <name>operator</name></type> <name>bool</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><call><name>IsEmpty</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_compiler_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_type_name</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeMemberFunctionImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeMemberFunctionImpl</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_type</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_decl</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_name</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<call><name>TypeMemberFunctionImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompilerDecl</name> <operator>&amp;</operator><name>decl</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>MemberFunctionKind</name> <operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_decl</name><argument_list>(<argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_kind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetMangledName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetReturnType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetNumArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetArgumentAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>MemberFunctionKind</name> <macro><name>GetKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>GetDescription</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetPrintableTypeName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompilerDecl</name></type> <name>m_decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>MemberFunctionKind</name> <name>m_kind</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eMemberFunctionKindUnknown</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeEnumMemberImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeEnumMemberImpl</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_integer_type_sp</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_name</name><argument_list>(<argument><expr><literal type="string">"&lt;invalid&gt;"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_value</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<macro><name>TypeEnumMemberImpl</name><argument_list>(<argument>const lldb::TypeImplSP &amp;integer_type_sp</argument>,
<argument>ConstString name</argument>, <argument>const llvm::APSInt &amp;value</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypeEnumMemberImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeEnumMemberImpl</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>TypeEnumMemberImpl</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeEnumMemberImpl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_valid</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeImplSP</name> <operator>&amp;</operator><macro><name>GetIntegerType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_integer_type_sp</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetValueAsUnsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_value</name><operator>.</operator><name>getZExtValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>int64_t</name> <macro><name>GetValueAsSigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_value</name><operator>.</operator><name>getSExtValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeImplSP</name> <name>m_integer_type_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>m_value</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeEnumMemberListImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeEnumMemberListImpl</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_content</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>Append</name><argument_list>(<argument>const lldb::TypeEnumMemberImplSP &amp;type</argument>)</argument_list></macro> <block>{
<expr><call><name><name>m_content</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <call><name>Append</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeEnumMemberListImpl</name> <operator>&amp;</operator><name>type_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeEnumMemberImplSP</name> <macro><name>GetTypeEnumMemberAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>TypeEnumMemberImplSP</name> <name>enum_member</name></expr>;
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name>GetSize</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>enum_member</name> <operator>=</operator> <name><name>m_content</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>enum_member</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TypeEnumMemberImplSP</name></expr></argument>&gt;</argument_list></name> <name>m_content</name></expr>;</expr_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
