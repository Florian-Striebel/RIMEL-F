<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/LanguageRuntime.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_LANGUAGERUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_LANGUAGERUNTIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointResolver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointResolverName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/LLVMUserExpression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/DeclVendor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Runtime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ExceptionSearchFilter</name> <range>: <expr><name>public</name> <name>SearchFilter</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ExceptionSearchFilter</name><argument_list>(<argument>const lldb::TargetSP &amp;target_sp</argument>,
<argument>lldb::LanguageType language</argument>,
<argument>bool update_module_list = true</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>ExceptionSearchFilter</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const FileSpec &amp;spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Search</name><argument_list>(<argument>Searcher &amp;searcher</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>SearchFilter</name> <operator>*</operator>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>data_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>LanguageType</name> <name>m_language</name></expr>;
<expr><name>LanguageRuntime</name> <operator>*</operator><name>m_language_runtime</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <name>m_filter_sp</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <macro><name>DoCreateCopy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <call><name>UpdateModuleListIfNeeded</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LanguageRuntime</name> <range>: <expr><name>public</name> <name>Runtime</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>PluginInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>LanguageRuntime</name> <modifier>*</modifier></type><name>FindPlugin</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitializeCommands</name><parameter_list>(<parameter><decl><type><name>CommandObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguageType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>GetObjectDescription</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>object</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>GetObjectDescription</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Value</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>ExecutionContextScope</name> <modifier>*</modifier></type><name>exe_scope</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetDynamicTypeAndAddress</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>in_value</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>,
<argument><expr><name>TypeAndOrName</name> <operator>&amp;</operator><name>class_type_or_name</name></expr></argument>,
<argument><expr><name>Address</name> <operator>&amp;</operator><name>address</name></expr></argument>,
<argument><expr><name>Value</name><operator>::</operator><name>ValueType</name> <operator>&amp;</operator><name>value_type</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function><type><name>virtual</name> <name>CompilerType</name></type> <name>GetConcreteType</name><parameter_list>(<parameter><decl><type><name>ExecutionContextScope</name> <modifier>*</modifier></type><name>exe_scope</name></decl></parameter>,
<parameter><decl><type><name>ConstString</name></type> <name>abstract_type_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CompilerType</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name>virtual</name> <name>bool</name></type> <name>CouldHaveDynamicValue</name><parameter_list>(<parameter><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>in_value</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>






<function_decl><type><name>virtual</name> <name>TypeAndOrName</name></type> <name>FixUpDynamicType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeAndOrName</name> <modifier>&amp;</modifier></type><name>type_and_or_name</name></decl></parameter>,
<parameter><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>static_value</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>void</name></type> <name>SetExceptionBreakpoints</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>ClearExceptionBreakpoints</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>ExceptionBreakpointsAreSet</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ExceptionBreakpointsExplainStop</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <name>stop_reason</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSP</name>
<macro><name>CreateExceptionBreakpoint</name><argument_list>(<argument>Target &amp;target</argument>, <argument>lldb::LanguageType language</argument>,
<argument>bool catch_bp</argument>, <argument>bool throw_bp</argument>,
<argument>bool is_internal = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BreakpointPreconditionSP</name>
<macro><name>GetExceptionPrecondition</name><argument_list>(<argument>lldb::LanguageType language</argument>, <argument>bool throw_bp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetExceptionObjectForThread</name><argument_list>(
<argument>lldb::ThreadSP thread_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ValueObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetBacktraceThreadFromException</name><argument_list>(
<argument>lldb::ValueObjectSP thread_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ThreadSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>DeclVendor</name> <modifier>*</modifier></type><name>GetDeclVendor</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>BreakpointResolverSP</name>
<macro><name>CreateExceptionResolver</name><argument_list>(<argument>const lldb::BreakpointSP &amp;bkpt</argument>,
<argument>bool catch_bp</argument>, <argument>bool throw_bp</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <macro><name>CreateExceptionSearchFilter</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>m_process</name><operator>-&gt;</operator><name>GetTarget</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetSearchFilterForModule</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>bool</name></type> <name>GetTypeBitSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>compiler_type</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>&amp;</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SymbolsDidLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return;</return> </block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>GetStepThroughTrampolinePlan</name><argument_list>(<argument>Thread &amp;thread</argument>,
<argument>bool stop_others</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<function><type><name>virtual</name> <name>bool</name></type> <name>IsAllowedRuntimeValue</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CompilerType</name></expr></argument>&gt;</argument_list></name> <macro><name>GetRuntimeType</name><argument_list>(<argument>CompilerType base_type</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>ModulesDidLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list> override <block>{<block_content/>}</block></function>




<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetIRPasses</name><argument_list>(<argument><expr><name>LLVMUserExpression</name><operator>::</operator><name>IRPasses</name> <operator>&amp;</operator><name>custom_passes</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>LookupRuntimeSymbol</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LLDB_INVALID_ADDRESS</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isA</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>ClassID</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>ID</name></decl>;</decl_stmt>






























<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>UnwindPlanSP</name>
<call><name>GetRuntimeUnwindPlan</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>RegisterContext</name> <operator>*</operator><name>regctx</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>behaves_like_zeroth_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>



<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>UnwindPlanSP</name>
<macro><name>GetRuntimeUnwindPlan</name><argument_list>(<argument>lldb::ProcessSP process_sp</argument>,
<argument>lldb_private::RegisterContext *regctx</argument>,
<argument>bool &amp;behaves_like_zeroth_frame</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>UnwindPlanSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><call><name>LanguageRuntime</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
