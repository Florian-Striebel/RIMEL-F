<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/Socket.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_SOCKET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/SocketAddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/IOObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Predicate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/windows/windows.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StringRef</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>SOCKET</name></type> <name>NativeSocket</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>NativeSocket</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>class</name></type> <name>TCPSocket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UDPSocket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Socket</name> <range>: <expr><name>public</name> <name>IOObject</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>SocketProtocol</name> <block>{
<expr><name>ProtocolTcp</name></expr>,
<expr><name>ProtocolUdp</name></expr>,
<expr><name>ProtocolUnixDomain</name></expr>,
<expr><name>ProtocolUnixAbstract</name></expr>
}</block></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>NativeSocket</name> <name>kInvalidSocketValue</name></expr>;

<expr><operator>~</operator><macro><name>Socket</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>Error</name> <call><name>Initialize</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>void</name> <call><name>Terminate</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Socket</name></expr></argument>&gt;</argument_list></name> <macro><name>Create</name><argument_list>(<argument>const SocketProtocol protocol</argument>,
<argument>bool child_processes_inherit</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>Connect</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>Status</name> <macro><name>Listen</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>int backlog</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>Status</name> <call><name>Accept</name><argument_list>(<argument><expr><name>Socket</name> <operator>*</operator><operator>&amp;</operator><name>socket</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;




<expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TCPSocket</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>TcpListen</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>, <argument>bool child_processes_inherit</argument>,
<argument>Predicate&lt;uint16_t&gt; *predicate</argument>, <argument>int backlog = <literal type="number">5</literal></argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Socket</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>TcpConnect</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>, <argument>bool child_processes_inherit</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UDPSocket</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>UdpConnect</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>, <argument>bool child_processes_inherit</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>Status</name> <macro><name>UnixDomainConnect</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>,
<argument>bool child_processes_inherit</argument>,
<argument>Socket *&amp;socket</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>Status</name> <macro><name>UnixDomainAccept</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>,
<argument>bool child_processes_inherit</argument>, <argument>Socket *&amp;socket</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>Status</name> <macro><name>UnixAbstractConnect</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>,
<argument>bool child_processes_inherit</argument>,
<argument>Socket *&amp;socket</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>Status</name> <macro><name>UnixAbstractAccept</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>,
<argument>bool child_processes_inherit</argument>,
<argument>Socket *&amp;socket</argument>)</argument_list></macro></expr>;

<expr><name>int</name> <macro><name>GetOption</name><argument_list>(<argument>int level</argument>, <argument>int option_name</argument>, <argument>int &amp;option_value</argument>)</argument_list></macro></expr>;
<expr><name>int</name> <macro><name>SetOption</name><argument_list>(<argument>int level</argument>, <argument>int option_name</argument>, <argument>int option_value</argument>)</argument_list></macro></expr>;

<expr><name>NativeSocket</name> <macro><name>GetNativeSocket</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_socket</name></expr>;</return> }</block>
<name>SocketProtocol</name> <macro><name>GetSocketProtocol</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_protocol</name></expr>;</return> }</block>

<name>Status</name> <macro><name>Read</name><argument_list>(<argument>void *buf</argument>, <argument>size_t &amp;num_bytes</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Write</name><argument_list>(<argument>const void *buf</argument>, <argument>size_t &amp;num_bytes</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>PreDisconnect</name><argument_list>()</argument_list></call></expr>;
<expr><name>Status</name> <macro><name>Close</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>m_socket</name> <operator>!=</operator> <name>kInvalidSocketValue</name></expr>;</return> }</block>
<name>WaitableHandle</name> <macro><name>GetWaitableHandle</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>DecodeHostAndPort</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>,
<argument>std::string &amp;host_str</argument>, <argument>std::string &amp;port_str</argument>,
<argument>int32_t &amp;port</argument>, <argument>Status *error_ptr</argument>)</argument_list></macro></expr>;


<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetRemoteConnectionURI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></expr>;

<expr><name>protected</name><operator>:</operator>
<macro><name>Socket</name><argument_list>(<argument>SocketProtocol protocol</argument>, <argument>bool should_close</argument>,
<argument>bool m_child_process_inherit</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>size_t</name> <macro><name>Send</name><argument_list>(<argument>const void *buf</argument>, <argument>const size_t num_bytes</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>SetLastError</name><argument_list>(<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>NativeSocket</name> <macro><name>CreateSocket</name><argument_list>(<argument>const int domain</argument>, <argument>const int type</argument>,
<argument>const int protocol</argument>,
<argument>bool child_processes_inherit</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>NativeSocket</name> <macro><name>AcceptSocket</name><argument_list>(<argument>NativeSocket sockfd</argument>, <argument>struct sockaddr *addr</argument>,
<argument>socklen_t *addrlen</argument>,
<argument>bool child_processes_inherit</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;

<expr><name>SocketProtocol</name> <name>m_protocol</name></expr>;
<expr><name>NativeSocket</name> <name>m_socket</name></expr>;
<expr><name>bool</name> <name>m_child_processes_inherit</name></expr>;
<expr><name>bool</name> <name>m_should_close_fd</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
