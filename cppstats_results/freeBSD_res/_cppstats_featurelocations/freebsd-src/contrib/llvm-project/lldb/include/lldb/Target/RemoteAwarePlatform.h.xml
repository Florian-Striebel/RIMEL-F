<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/RemoteAwarePlatform.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_REMOTEAWAREPLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_REMOTEAWAREPLATFORM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Platform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>RemoteAwarePlatform</name> <range>: <expr><name>public</name> <name>Platform</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>Platform</name><operator>::</operator><name>Platform</name></expr>;

<expr><name>bool</name> <macro><name>GetModuleSpec</name><argument_list>(<argument>const FileSpec &amp;module_file_spec</argument>, <argument>const ArchSpec &amp;arch</argument>,
<argument>ModuleSpec &amp;module_spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name>
<macro><name>ResolveExecutable</name><argument_list>(<argument>const ModuleSpec &amp;module_spec</argument>, <argument>lldb::ModuleSP &amp;module_sp</argument>,
<argument>const FileSpecList *module_search_paths_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <macro><name>OpenFile</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>File::OpenOptions flags</argument>,
<argument>uint32_t mode</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CloseFile</name><argument_list>(<argument>lldb::user_id_t fd</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>uint64_t</name> <macro><name>ReadFile</name><argument_list>(<argument>lldb::user_id_t fd</argument>, <argument>uint64_t offset</argument>, <argument>void *dst</argument>,
<argument>uint64_t dst_len</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>uint64_t</name> <macro><name>WriteFile</name><argument_list>(<argument>lldb::user_id_t fd</argument>, <argument>uint64_t offset</argument>, <argument>const void *src</argument>,
<argument>uint64_t src_len</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <macro><name>GetFileSize</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>CreateSymlink</name><argument_list>(<argument>const FileSpec &amp;src</argument>, <argument>const FileSpec &amp;dst</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>GetFileExists</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>Unlink</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>FileSpec</name> <macro><name>GetRemoteWorkingDirectory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>SetRemoteWorkingDirectory</name><argument_list>(<argument>const FileSpec &amp;working_dir</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>MakeDirectory</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>uint32_t mode</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>GetFilePermissions</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>,
<argument>uint32_t &amp;file_permissions</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>SetFilePermissions</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>,
<argument>uint32_t file_permissions</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CalculateMD5</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>uint64_t &amp;low</argument>,
<argument>uint64_t &amp;high</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>GetFileWithUUID</name><argument_list>(<argument>const FileSpec &amp;platform_file</argument>, <argument>const UUID *uuid</argument>,
<argument>FileSpec &amp;local_file</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>GetRemoteOSVersion</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>GetRemoteOSBuildString</name><argument_list>(<argument>std::string &amp;s</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>GetRemoteOSKernelDescription</name><argument_list>(<argument>std::string &amp;s</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>ArchSpec</name> <macro><name>GetRemoteSystemArchitecture</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>RunShellCommand</name><argument_list>(<argument>llvm::StringRef command</argument>, <argument>const FileSpec &amp;working_dir</argument>,
<argument>int *status_ptr</argument>, <argument>int *signo_ptr</argument>,
<argument>std::string *command_output</argument>,
<argument>const Timeout&lt;std::micro&gt; &amp;timeout</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>RunShellCommand</name><argument_list>(<argument>llvm::StringRef interpreter</argument>, <argument>llvm::StringRef command</argument>,
<argument>const FileSpec &amp;working_dir</argument>, <argument>int *status_ptr</argument>,
<argument>int *signo_ptr</argument>, <argument>std::string *command_output</argument>,
<argument>const Timeout&lt;std::micro&gt; &amp;timeout</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetHostname</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>UserIDResolver</name> <operator>&amp;</operator><macro><name>GetUserIDResolver</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>lldb_private</name><operator>::</operator><name>Environment</name> <macro><name>GetEnvironment</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsConnected</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>GetProcessInfo</name><argument_list>(<argument>lldb::pid_t pid</argument>, <argument>ProcessInstanceInfo &amp;proc_info</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>uint32_t</name> <macro><name>FindProcesses</name><argument_list>(<argument>const ProcessInstanceInfoMatch &amp;match_info</argument>,
<argument>ProcessInstanceInfoList &amp;process_infos</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>ConnectProcess</name><argument_list>(<argument>llvm::StringRef connect_url</argument>,
<argument>llvm::StringRef plugin_name</argument>,
<argument>Debugger &amp;debugger</argument>, <argument>Target *target</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>LaunchProcess</name><argument_list>(<argument>ProcessLaunchInfo &amp;launch_info</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>KillProcess</name><argument_list>(<argument>const lldb::pid_t pid</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>ConnectToWaitingProcesses</name><argument_list>(<argument>Debugger &amp;debugger</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>PlatformSP</name> <name>m_remote_platform_sp</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
