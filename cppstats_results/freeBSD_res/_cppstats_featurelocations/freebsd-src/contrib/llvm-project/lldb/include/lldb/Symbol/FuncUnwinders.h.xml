<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/FuncUnwinders.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_FUNCUNWINDERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_FUNCUNWINDERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>UnwindTable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FuncUnwinders</name> <block>{<block_content>
<label><name>public</name>:</label>



















<macro><name>FuncUnwinders</name><argument_list>(<argument>lldb_private::UnwindTable &amp;unwind_table</argument>, <argument>AddressRange range</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>FuncUnwinders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetUnwindPlanAtCallSite</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetUnwindPlanAtNonCallSite</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetUnwindPlanFastUnwind</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name>
<call><name>GetUnwindPlanArchitectureDefault</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name>
<call><name>GetUnwindPlanArchitectureDefaultAtFunctionEntry</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Address</name> <modifier>&amp;</modifier></type><name>GetFirstNonPrologueInsn</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><macro><name>GetFunctionStartAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ContainsAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>m_range</name><operator>.</operator><name>ContainsFileAddress</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function_decl><type><name>Address</name></type> <name>GetLSDAAddress</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>Address</name></type> <name>GetPersonalityRoutinePtrAddress</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetAssemblyUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetObjectFileUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetObjectFileAugmentedUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetEHFrameUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetEHFrameAugmentedUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetDebugFrameUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetDebugFrameAugmentedUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetCompactUnwindUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetArmUnwindUnwindPlan</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetSymbolFileUnwindPlan</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetArchDefaultUnwindPlan</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <call><name>GetArchDefaultAtFuncEntryUnwindPlan</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindAssemblySP</name> <call><name>GetUnwindAssemblyProfiler</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <call><name>CompareUnwindPlansForIdenticalInitialPCLocation</name><argument_list>(
<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UnwindTable</name> <modifier>&amp;</modifier></type><name>m_unwind_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AddressRange</name></type> <name>m_range</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_assembly_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_object_file_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_eh_frame_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_debug_frame_sp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_object_file_augmented_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_eh_frame_augmented_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_debug_frame_augmented_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name></expr></argument>&gt;</argument_list></name> <name>m_unwind_plan_compact_unwind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_arm_unwind_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_symbol_file_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_fast_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_arch_default_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>UnwindPlanSP</name> <name>m_unwind_plan_arch_default_at_func_entry_sp</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>m_tried_unwind_plan_assembly</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>m_tried_unwind_plan_eh_frame</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_plan_object_file</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_plan_debug_frame</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_plan_object_file_augmented</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_plan_eh_frame_augmented</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_plan_debug_frame_augmented</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_plan_compact_unwind</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_plan_arm_unwind</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>m_tried_unwind_plan_symbol_file</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_fast</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>m_tried_unwind_arch_default</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_tried_unwind_arch_default_at_func_entry</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Address</name></type> <name>m_first_non_prologue_insn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FuncUnwinders</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FuncUnwinders</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FuncUnwinders</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FuncUnwinders</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
