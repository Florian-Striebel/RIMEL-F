<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/CommandAlias.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_COMMANDALIAS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_COMMANDALIAS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/CommandObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Args.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandAlias</name> <range>: <expr><name>public</name> <name>CommandObject</name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CommandAlias</name></expr></argument>&gt;</argument_list></name> <name>UniquePointer</name></expr>;</expr_stmt></typedef>

<macro><name>CommandAlias</name><argument_list>(<argument>CommandInterpreter &amp;interpreter</argument>, <argument>lldb::CommandObjectSP cmd_sp</argument>,
<argument>llvm::StringRef options_args</argument>, <argument>llvm::StringRef name</argument>,
<argument>llvm::StringRef help = llvm::StringRef()</argument>,
<argument>llvm::StringRef syntax = llvm::StringRef()</argument>, <argument>uint32_t flags = <literal type="number">0</literal></argument>)</argument_list></macro></block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetAliasExpansion</name><argument_list>(<argument><expr><name>StreamString</name> <operator>&amp;</operator><name>help_string</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_underlying_command_sp</name> <operator>&amp;&amp;</operator> <name>m_option_args_sp</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>WantsRawCommandString</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>WantsCompletion</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleCompletion</name><argument_list>(<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>HandleArgumentCompletion</name><argument_list>(<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>,
<argument><expr><name>OptionElementVector</name> <operator>&amp;</operator><name>opt_element_vector</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Options</name> <operator>*</operator><macro><name>GetOptions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><name>bool</name></type> <name>IsAlias</name><parameter_list>()</parameter_list> override <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsDashDashCommand</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetHelp</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetHelpLong</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetHelp</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetHelpLong</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Execute</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>args_string</name></expr></argument>, <argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <macro><name>GetUnderlyingCommand</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_underlying_command_sp</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>OptionArgVectorSP</name> <macro><name>GetOptionArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_option_args_sp</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOptionString</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_option_string</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name></expr></argument>, <argument><expr><name>OptionArgVectorSP</name></expr></argument>&gt;</argument_list></name> <call><name>Desugar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<function_decl><type><name>bool</name></type> <name>IsNestedAlias</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <name>m_underlying_command_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_option_string</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>OptionArgVectorSP</name></type> <name>m_option_args_sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_dashdash_alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_did_set_help</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_did_set_help_long</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
