<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/Symbol.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_SYMBOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_SYMBOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Mangled.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name> <range>: <expr><name>public</name> <name>SymbolContextScope</name> <block>{
<expr><name>public</name><operator>:</operator>



<call><name>Symbol</name><argument_list>()</argument_list></call></expr>;

<macro><name>Symbol</name><argument_list>(<argument>uint32_t symID</argument>, <argument>llvm::StringRef name</argument>, <argument>lldb::SymbolType type</argument>,
<argument>bool external</argument>, <argument>bool is_debug</argument>, <argument>bool is_trampoline</argument>, <argument>bool is_artificial</argument>,
<argument>const lldb::SectionSP &amp;section_sp</argument>, <argument>lldb::addr_t value</argument>,
<argument>lldb::addr_t size</argument>, <argument>bool size_is_valid</argument>,
<argument>bool contains_linker_annotations</argument>, <argument>uint32_t flags</argument>)</argument_list></macro>;

<macro><name>Symbol</name><argument_list>(<argument>uint32_t symID</argument>, <argument>const Mangled &amp;mangled</argument>, <argument>lldb::SymbolType type</argument>,
<argument>bool external</argument>, <argument>bool is_debug</argument>, <argument>bool is_trampoline</argument>, <argument>bool is_artificial</argument>,
<argument>const AddressRange &amp;range</argument>, <argument>bool size_is_valid</argument>,
<argument>bool contains_linker_annotations</argument>, <argument>uint32_t flags</argument>)</argument_list></macro>;

<expr><call><name>Symbol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;

<expr><name>void</name> <call><name>Clear</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>Compare</name><argument_list>(<argument>ConstString name</argument>, <argument>lldb::SymbolType type</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>, <argument>Target *target</argument>, <argument>uint32_t index</argument>,
<argument>Mangled::NamePreference name_preference =
Mangled::ePreferDemangled</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>ValueIsAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>Address</name> <operator>&amp;</operator><macro><name>GetAddressRef</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_addr_range</name><operator>.</operator><name>GetBaseAddress</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><macro><name>GetAddressRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_addr_range</name><operator>.</operator><name>GetBaseAddress</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFileAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLoadAddress</name><argument_list>(<argument>Target *target</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>Address</name> <macro><name>GetAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{








<if_stmt><if>if <condition>(<expr><call><name>ValueIsAddress</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>m_addr_range</name><operator>.</operator><name>GetBaseAddress</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Address</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>





<name>uint64_t</name> <macro><name>GetIntegerValue</name><argument_list>(<argument>uint64_t fail_value = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>ValueIsAddress</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><name>fail_value</name></expr>;</return>
<expr_stmt/>}</block_content> else <block>{<block_content>

<return>return <expr><call><name><name>m_addr_range</name><operator>.</operator><name>GetBaseAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetOffset</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
}

lldb::addr_t ResolveCallableAddress(Target &amp;target</block></block></if></if_stmt>) <specifier>const</specifier></block></expr>;

<expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ConstString</name> <macro><name>GetNameNoArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ConstString</name> <macro><name>GetDisplayName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <macro><name>GetID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_uid</name></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<return>return <expr><call><name>GetMangled</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GuessLanguage</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>SetID</name><argument_list>(<argument>uint32_t uid</argument>)</argument_list></macro> <block>{ <expr><name>m_uid</name> <operator>=</operator> <name>uid</name></expr>; }</block>

<name>Mangled</name> <operator>&amp;</operator><macro><name>GetMangled</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>SynthesizeNameIfNeeded</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>m_mangled</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>Mangled</name> <operator>&amp;</operator><macro><name>GetMangled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>SynthesizeNameIfNeeded</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>m_mangled</name></expr>;</return>
}</block>

<name>ConstString</name> <macro><name>GetReExportedSymbolName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>FileSpec</name> <macro><name>GetReExportedSymbolSharedLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetReExportedSymbolName</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <call><name>SetReExportedSymbolSharedLibrary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>fspec</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Symbol</name> <operator>*</operator><macro><name>ResolveReExportedSymbol</name><argument_list>(<argument>Target &amp;target</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <macro><name>GetSiblingIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>lldb</name><operator>::</operator><name>SymbolType</name><operator>)</operator><name>m_type</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetType</name><argument_list>(<argument>lldb::SymbolType type</argument>)</argument_list></macro> <block>{ <expr><name>m_type</name> <operator>=</operator> <operator>(</operator><name>lldb</name><operator>::</operator><name>SymbolType</name><operator>)</operator><name>type</name></expr>; }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetTypeAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <macro><name>GetFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_flags</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetFlags</name><argument_list>(<argument>uint32_t flags</argument>)</argument_list></macro> <block>{ <expr><name>m_flags</name> <operator>=</operator> <name>flags</name></expr>; }</block>

<name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>,
<argument>Target *target</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>IsSynthetic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_synthetic</name></expr>;</return> }</block>

<name>bool</name> <macro><name>IsSyntheticWithAutoGeneratedName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetIsSynthetic</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_is_synthetic</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>GetSizeIsSynthesized</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_size_is_synthesized</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetSizeIsSynthesized</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_size_is_synthesized</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>IsDebug</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_debug</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetDebug</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_is_debug</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>IsExternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_external</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetExternal</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_is_external</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>IsTrampoline</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>IsIndirect</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>IsWeak</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_weak</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetIsWeak</name> <argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_is_weak</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>GetByteSizeIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_size_is_valid</name></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetByteSize</name><argument_list>(<argument>lldb::addr_t size</argument>)</argument_list></macro> <block>{
<expr><name>m_size_is_valid</name> <operator>=</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;
<expr><call><name><name>m_addr_range</name><operator>.</operator><name>SetByteSize</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>GetSizeIsSibling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_size_is_sibling</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetSizeIsSibling</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_size_is_sibling</name> <operator>=</operator> <name>b</name></expr>; }</block>



<name>uint32_t</name> <call><name>GetPrologueByteSize</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetDemangledNameIsSynthesized</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_demangled_is_synthesized</name></expr>;</return>
}</block>

<name>void</name> <macro><name>SetDemangledNameIsSynthesized</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_demangled_is_synthesized</name> <operator>=</operator> <name>b</name></expr>; }</block>

<name>bool</name> <macro><name>ContainsLinkerAnnotations</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_contains_linker_annotations</name></expr>;</return>
}</block>
<name>void</name> <macro><name>SetContainsLinkerAnnotations</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{
<expr><name>m_contains_linker_annotations</name> <operator>=</operator> <name>b</name></expr>;
}</block>



<name>void</name> <macro><name>CalculateSymbolContext</name><argument_list>(<argument>SymbolContext *sc</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>CalculateSymbolContextModule</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Symbol</name> <operator>*</operator><macro><name>CalculateSymbolContextSymbol</name><argument_list>()</argument_list></macro> <name>override</name></expr>;




<expr><name>void</name> <macro><name>DumpSymbolContext</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>DisassemblerSP</name> <macro><name>GetInstructions</name><argument_list>(<argument>const ExecutionContext &amp;exe_ctx</argument>,
<argument>const char *flavor</argument>,
<argument>bool prefer_file_cache</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDisassembly</name><argument_list>(<argument>const ExecutionContext &amp;exe_ctx</argument>, <argument>const char *flavor</argument>,
<argument>bool prefer_file_cache</argument>, <argument>Stream &amp;strm</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>ContainsFileAddress</name><argument_list>(<argument>lldb::addr_t file_addr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetSyntheticSymbolPrefix</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><literal type="string">"___lldb_unnamed_symbol"</literal></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>




<name>Symbol</name> <operator>*</operator><macro><name>ResolveReExportedSymbolInModuleSpec</name><argument_list>(
<argument>Target &amp;target</argument>, <argument>ConstString &amp;reexport_name</argument>,
<argument>lldb_private::ModuleSpec &amp;module_spec</argument>,
<argument>lldb_private::ModuleList &amp;seen_modules</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SynthesizeNameIfNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <name>m_uid</name> <operator>=</operator>
<name>UINT32_MAX</name></expr>;
<expr><name>uint16_t</name> <name>m_type_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint16_t</name> <name>m_type_data_resolved</name> <operator>:</operator> <literal type="number">1</literal></expr>,

<expr><name>m_is_synthetic</name> <operator>:</operator> <literal type="number">1</literal></expr>,


<expr><name>m_is_debug</name> <operator>:</operator> <literal type="number">1</literal></expr>,

<expr><name>m_is_external</name> <operator>:</operator> <literal type="number">1</literal></expr>,
<expr><name>m_size_is_sibling</name> <operator>:</operator> <literal type="number">1</literal></expr>,

<expr><name>m_size_is_synthesized</name> <operator>:</operator> <literal type="number">1</literal></expr>,


<expr><name>m_size_is_valid</name> <operator>:</operator> <literal type="number">1</literal></expr>,
<expr><name>m_demangled_is_synthesized</name> <operator>:</operator> <literal type="number">1</literal></expr>,


<expr><name>m_contains_linker_annotations</name> <operator>:</operator> <literal type="number">1</literal></expr>,


<expr><name>m_is_weak</name> <operator>:</operator> <literal type="number">1</literal></expr>,
<expr><name>m_type</name> <operator>:</operator> <literal type="number">6</literal></expr>;
<expr><name>mutable</name> <name>Mangled</name> <name>m_mangled</name></expr>;
<expr><name>AddressRange</name> <name>m_addr_range</name></expr>;


<expr><name>uint32_t</name> <name>m_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
