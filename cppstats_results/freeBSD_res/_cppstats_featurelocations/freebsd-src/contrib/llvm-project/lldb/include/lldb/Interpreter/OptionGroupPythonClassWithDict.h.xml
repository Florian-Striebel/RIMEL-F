<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionGroupPythonClassWithDict.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONGROUPPYTHONCLASSWITHDICT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONGROUPPYTHONCLASSWITHDICT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/Options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>







<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupPythonClassWithDict</name> <range>: <expr><name>public</name> <name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>OptionKind</name> <block>{
<expr><name>eScriptClass</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>,
<expr><name>eDictKey</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
<expr><name>eDictValue</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>,
<expr><name>ePythonFunction</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>,
<expr><name>eAllOptions</name> <operator>=</operator> <operator>(</operator><name>eScriptClass</name> <operator>|</operator> <name>eDictKey</name> <operator>|</operator> <name>eDictValue</name> <operator>|</operator> <name>ePythonFunction</name><operator>)</operator></expr>
}</block></expr>;

<macro><name>OptionGroupPythonClassWithDict</name><argument_list>(<argument>const char *class_use</argument>, <argument>bool is_class = true</argument>,
<argument>int class_option = <literal type="char">'C'</literal></argument>, <argument>int key_option = <literal type="char">'k'</literal></argument>,
<argument>int value_option = <literal type="char">'v'</literal></argument>,
<argument>uint16_t required_options = eScriptClass |
ePythonFunction</argument>)</argument_list></macro>;

<expr><operator>~</operator><macro><name>OptionGroupPythonClassWithDict</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_option_definition</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>Status</name> <macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>OptionParsingFinished</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>DictionarySP</name> <macro><name>GetStructuredData</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_dict_sp</name></expr>;</return>
}</block>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>GetName</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_name</name></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_current_key</name></expr>;
<expr><name>StructuredData</name><operator>::</operator><name>DictionarySP</name> <name>m_dict_sp</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_class_usage_text</name></expr>, <expr><name>m_key_usage_text</name></expr>, <expr><name>m_value_usage_text</name></expr>;
<expr><name>bool</name> <name>m_is_class</name></expr>;
<expr><name>OptionDefinition</name> <name><name>m_option_definition</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;
<expr><name>Flags</name> <name>m_required_options</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
