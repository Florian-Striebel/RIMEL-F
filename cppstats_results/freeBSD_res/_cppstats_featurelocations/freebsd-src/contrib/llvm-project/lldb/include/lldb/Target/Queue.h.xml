<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Queue.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_QUEUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_QUEUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/QueueItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>











<decl_stmt><decl><type><name>class</name></type> <name>Queue</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Queue</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Queue</name><argument_list>(<argument>lldb::ProcessSP process_sp</argument>, <argument>lldb::queue_id_t queue_id</argument>,
<argument>const char *queue_name</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><call><name>Queue</name><argument_list>()</argument_list></call></expr>;











<expr><name>lldb</name><operator>::</operator><name>queue_id_t</name> <call><name>GetID</name><argument_list>()</argument_list></call></expr>;






<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetName</name><argument_list>()</argument_list></call></expr>;













<expr><name>uint32_t</name> <call><name>GetIndexID</name><argument_list>()</argument_list></call></expr>;









<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name></expr></argument>&gt;</argument_list></name> <call><name>GetThreads</name><argument_list>()</argument_list></call></expr>;









<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>QueueItemSP</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>GetPendingItems</name><argument_list>()</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_process_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>







<name>uint32_t</name> <macro><name>GetNumRunningWorkItems</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>uint32_t</name> <macro><name>GetNumPendingWorkItems</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;









<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLibdispatchQueueAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetNumRunningWorkItems</name><argument_list>(<argument>uint32_t count</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>SetNumPendingWorkItems</name><argument_list>(<argument>uint32_t count</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>SetLibdispatchQueueAddress</name><argument_list>(<argument>lldb::addr_t dispatch_queue_t_addr</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>PushPendingQueueItem</name><argument_list>(<argument>lldb::QueueItemSP item</argument>)</argument_list></macro> <block>{
<expr><call><name><name>m_pending_items</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>lldb</name><operator>::</operator><name>QueueKind</name> <call><name>GetKind</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetKind</name><argument_list>(<argument>lldb::QueueKind kind</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>


<name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>queue_id_t</name> <name>m_queue_id</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_queue_name</name></expr>;
<expr><name>uint32_t</name> <name>m_running_work_items_count</name></expr>;
<expr><name>uint32_t</name> <name>m_pending_work_items_count</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>QueueItemSP</name></expr></argument>&gt;</argument_list></name> <name>m_pending_items</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_dispatch_queue_t_addr</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>QueueKind</name> <name>m_kind</name></expr>;

<expr><call><name>Queue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Queue</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>Queue</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Queue</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
