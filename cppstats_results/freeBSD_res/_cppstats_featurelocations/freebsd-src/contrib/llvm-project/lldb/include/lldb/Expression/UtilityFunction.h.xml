<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/UtilityFunction.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_UTILITYFUNCTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_UTILITYFUNCTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/Expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>









<decl_stmt><decl><type><name>class</name></type> <name>UtilityFunction</name> <range>: <expr><name>public</name> <name>Expression</name> <block>{

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> }</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Expression *obj</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>obj</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>











<macro><name>UtilityFunction</name><argument_list>(<argument>ExecutionContextScope &amp;exe_scope</argument>, <argument>std::string text</argument>,
<argument>std::string name</argument>, <argument>bool enable_debugging</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>UtilityFunction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;











<expr><name>virtual</name> <name>bool</name> <call><name>Install</name><argument_list>(<argument><expr><name>DiagnosticManager</name> <operator>&amp;</operator><name>diagnostic_manager</name></expr></argument>,
<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;












<expr><name>bool</name> <macro><name>ContainsAddress</name><argument_list>(<argument>lldb::addr_t address</argument>)</argument_list></macro> <block>{


<return>return <expr><operator>(</operator><name>address</name> <operator>&gt;=</operator> <name>m_jit_start_addr</name> <operator>&amp;&amp;</operator> <name>address</name> <operator>&lt;</operator> <name>m_jit_end_addr</name><operator>)</operator></expr>;</return>
}</block>



<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Text</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>m_function_text</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>FunctionName</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>m_function_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>ExpressionVariableList</name> <operator>*</operator><macro><name>LocalVariables</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>


<name>bool</name> <macro><name>NeedsValidation</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>


<name>bool</name> <macro><name>NeedsVariableResolution</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>




<name>FunctionCaller</name> <operator>*</operator><macro><name>MakeFunctionCaller</name><argument_list>(<argument>const CompilerType &amp;return_type</argument>,
<argument>const ValueList &amp;arg_value_list</argument>,
<argument>lldb::ThreadSP compilation_thread</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro></expr>;



<expr><name>FunctionCaller</name> <operator>*</operator><macro><name>GetFunctionCaller</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_caller_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IRExecutionUnit</name></expr></argument>&gt;</argument_list></name> <name>m_execution_unit_sp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>ModuleWP</name> <name>m_jit_module_wp</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>m_function_text</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>m_function_name</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FunctionCaller</name></expr></argument>&gt;</argument_list></name> <name>m_caller_up</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
