<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/FormattersContainer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_FORMATTERSCONTAINER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_FORMATTERSCONTAINER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatClasses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeFormat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeSummary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeSynthetic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RegularExpression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringLexer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IFormatChangeListener</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>IFormatChangeListener</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>Changed</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>GetCurrentRevision</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TypeMatcher</name> <block>{<block_content>
<decl_stmt><decl><type><name>RegularExpression</name></type> <name>m_type_name_regex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_type_name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_is_regex</name></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>ConstString</name></type> <name>StripTypeName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>type</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>type_cstr</name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>AsCString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringLexer</name></type> <name>type_lexer</name><argument_list>(<argument><expr><name>type_cstr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>type_lexer</name><operator>.</operator><name>AdvanceIf</name></name><argument_list>(<argument><expr><literal type="string">"class "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>type_lexer</name><operator>.</operator><name>AdvanceIf</name></name><argument_list>(<argument><expr><literal type="string">"enum "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>type_lexer</name><operator>.</operator><name>AdvanceIf</name></name><argument_list>(<argument><expr><literal type="string">"struct "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>type_lexer</name><operator>.</operator><name>AdvanceIf</name></name><argument_list>(<argument><expr><literal type="string">"union "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><macro><name>type_lexer</name></macro><operator>.</operator><macro><name>NextIf</name><argument_list>(<argument>{<literal type="char">' '</literal></argument>, <argument><literal type="char">'\t'</literal></argument>, <argument><literal type="char">'\v'</literal></argument>, <argument><literal type="char">'\f'</literal>}</argument>)</argument_list></macro><operator>.</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<return>return <expr><call><name>ConstString</name><argument_list>(<argument><expr><call><name><name>type_lexer</name><operator>.</operator><name>GetUnlexed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeMatcher</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<macro><name>TypeMatcher</name><argument_list>(<argument>ConstString type_name</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_type_name</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_is_regex</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>TypeMatcher</name><argument_list>(<argument>RegularExpression regex</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_type_name_regex</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_is_regex</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{}</block>


<name>bool</name> <macro><name>Matches</name><argument_list>(<argument>ConstString type_name</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_is_regex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>m_type_name_regex</name><operator>.</operator><name>Execute</name></name><argument_list>(<argument><expr><call><name><name>type_name</name><operator>.</operator><name>GetStringRef</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>m_type_name</name> <operator>==</operator> <name>type_name</name> <operator>||</operator>
<call><name>StripTypeName</name><argument_list>(<argument><expr><name>m_type_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>StripTypeName</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>ConstString</name> <macro><name>GetMatchString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_is_regex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ConstString</name><argument_list>(<argument><expr><call><name><name>m_type_name_regex</name><operator>.</operator><name>GetText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>StripTypeName</name><argument_list>(<argument><expr><name>m_type_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>CreatedBySameMatchString</name><argument_list>(<argument><expr><name>TypeMatcher</name> <name>other</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>GetMatchString</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>GetMatchString</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ValueType</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>FormattersContainer</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ValueType</name></expr></argument>&gt;</argument_list></name> <name>ValueSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>TypeMatcher</name></expr></argument>, <argument><expr><name>ValueSP</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>MapType</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>TypeMatcher</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>ValueSP</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>ForEachCallback</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>ValueType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>SharedPointer</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TypeCategoryImpl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FormattersContainer</name><argument_list>(<argument><expr><name>IFormatChangeListener</name> <operator>*</operator><name>lst</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>listener</name><argument_list>(<argument>lst</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>Add</name><argument_list>(<argument>TypeMatcher matcher</argument>, <argument>const ValueSP &amp;entry</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>GetRevision</name></name><argument_list>()</argument_list></call> <operator>=</operator> <call><name><name>listener</name><operator>-&gt;</operator><name>GetCurrentRevision</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>GetRevision</name></name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Delete</name><argument_list>(<argument><expr><name>matcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>matcher</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>listener</name><operator>-&gt;</operator><name>Changed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><name>TypeMatcher</name></type> <name>matcher</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>m_map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <call><name><name>m_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>iter</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>CreatedBySameMatchString</name></name><argument_list>(<argument><expr><name>matcher</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>listener</name><operator>-&gt;</operator><name>Changed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ValueSP</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>formatter</name> <operator>:</operator> <name>llvm</name><operator>::</operator><call><name>reverse</name><argument_list>(<argument><expr><name>m_map</name></expr></argument>)</argument_list></call></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>formatter</name><operator>.</operator><name>first</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>formatter</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetExact</name><parameter_list>(<parameter><decl><type><name>TypeMatcher</name></type> <name>matcher</name></decl></parameter>, <parameter><decl><type><name>ValueSP</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>pos</name> <range>: <expr><name>m_map</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>pos</name><operator>.</operator><name>first</name><operator>.</operator><name>CreatedBySameMatchString</name></name><argument_list>(<argument><expr><name>matcher</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ValueSP</name></type> <name>GetAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ValueSP</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>m_map</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeNameSpecifierImplSP</name> <macro><name>GetTypeNameSpecifierAtIndex</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>lldb</name><operator>::</operator><call><name>TypeNameSpecifierImplSP</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<name>TypeMatcher</name> <name>type_matcher</name> <operator>=</operator> <name><name>m_map</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>first</name></block></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>TypeNameSpecifierImpl</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>type_matcher</name><operator>.</operator><name>GetMatchString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetStringRef</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}

void <macro><name>Clear</name><argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_map</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>listener</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>listener</name><operator>-&gt;</operator><name>Changed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>ForEach</name><parameter_list>(<parameter><decl><type><name>ForEachCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>pos</name> <range>: <expr><name>m_map</name></expr></range></decl></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeMatcher</name> <modifier>&amp;</modifier></type><name>type</name> <init>= <expr><name><name>pos</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callback</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetCount</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_map_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AutoComplete</name><parameter_list>(<parameter><decl><type><name>CompletionRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ForEach</name><argument_list>(<argument><expr><index>[<expr><operator>&amp;</operator><name>request</name></expr>]</index><operator>(</operator><specifier>const</specifier> <name>TypeMatcher</name> <operator>&amp;</operator><name>matcher</name><operator>,</operator> <specifier>const</specifier> <name>ValueSP</name> <operator>&amp;</operator><name>value</name><operator>)</operator> <block>{
<expr><call><name><name>request</name><operator>.</operator><name>TryCompleteCurrentArg</name></name><argument_list>(<argument><expr><call><name><name>matcher</name><operator>.</operator><name>GetMatchString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetStringRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
}

protected:
<expr_stmt><expr><call><name>FormattersContainer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormattersContainer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FormattersContainer</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FormattersContainer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormattersMatchVector</name> <modifier>&amp;</modifier></type><name>candidates</name></decl></parameter>, <parameter><decl><type><name>ValueSP</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>FormattersMatchCandidate</name> <modifier>&amp;</modifier></type><name>candidate</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Get</name><argument_list>(<argument><expr><call><name><name>candidate</name><operator>.</operator><name>GetTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>candidate</name><operator>.</operator><name>IsMatch</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>MapType</name></type> <name>m_map</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_map_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFormatChangeListener</name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
