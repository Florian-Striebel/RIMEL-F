<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBTypeSummary.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBTYPESUMMARY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBTYPESUMMARY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBTypeSummaryOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBTypeSummaryOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTypeSummaryOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeSummaryOptions</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTypeSummaryOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name> <operator>*</operator><name>lldb_object_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBTypeSummaryOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>GetLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryCapping</name> <call><name>GetCapping</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetCapping</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryCapping</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const</block></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name> <operator>*</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name> <operator>&amp;</operator><call><name>ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name> <operator>&amp;</operator><macro><name>ref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name> <operator>*</operator><name>lldb_object_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>TypeSummaryOptions</name></expr></argument>&gt;</argument_list></name> <name>m_opaque_up</name></expr>;</expr_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>SBTypeSummary</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBTypeSummary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>FormatCallback</name>)<parameter_list>(<parameter><decl><type><name>SBValue</name></type></decl></parameter>, <parameter><decl><type><name>SBTypeSummaryOptions</name></type></decl></parameter>, <parameter><decl><type><name>SBStream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>SBTypeSummary</name></type>
<name>CreateWithSummaryString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SBTypeSummary</name></type>
<name>CreateWithFunctionName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SBTypeSummary</name></type>
<name>CreateWithScriptCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SBTypeSummary</name></type> <name>CreateWithCallback</name><parameter_list>(<parameter><decl><type><name>FormatCallback</name></type> <name>cb</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>SBTypeSummary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeSummary</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBTypeSummary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsFunctionCode</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsFunctionName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsSummaryString</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetData</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetSummaryString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetFunctionName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetFunctionCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetOptions</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetOptions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeSummary</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeSummary</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>DoesPrintValue</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsEqualTo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBTypeSummary</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>lldb</name><operator>::</operator><name>SBTypeSummary</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>lldb</name><operator>::</operator><name>SBTypeSummary</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTypeCategory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <call><name>GetSP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator><name>typefilter_impl_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTypeSummary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>CopyOnWrite_Impl</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ChangeSummaryType</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>want_script</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
