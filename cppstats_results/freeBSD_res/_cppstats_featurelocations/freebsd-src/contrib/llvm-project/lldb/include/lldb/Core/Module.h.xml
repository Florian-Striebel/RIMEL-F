<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Module.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_MODULE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_MODULE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/ObjectFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TypeSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/PathMappingList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/XcodeSDK.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UUID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Chrono.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerDeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjectFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RegularExpression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VariableList</name></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>class</name></type> <name>Module</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Module</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>SymbolContextScope</name> <block>{<block_content>
<label><name>public</name>:</label>






<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>GetNumberAllocatedModules</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Module</name> <modifier>*</modifier></type><name>GetAllocatedModuleAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><call><name>GetAllocationModuleCollectionMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>























<macro><name>Module</name><argument_list>(
<argument>const FileSpec &amp;file_spec</argument>, <argument>const ArchSpec &amp;arch</argument>,
<argument>const ConstString *object_name = nullptr</argument>,
<argument>lldb::offset_t object_offset = <literal type="number">0</literal></argument>,
<argument>const llvm::sys::TimePoint&lt;&gt; &amp;object_mod_time = llvm::sys::TimePoint&lt;&gt;()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>Module</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ObjFilePlugin</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>CreateModuleFromObjectFile</name><argument_list>(<argument>Args &amp;&amp;... args</argument>)</argument_list></macro> <block>{



<expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>module_sp</name><argument_list>(<argument>new Module()</argument>)</argument_list></macro></expr>;
<expr><name><name>module_sp</name><operator>-&gt;</operator><name>m_objfile_sp</name></name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>ObjFilePlugin</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>module_sp</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>module_sp</name><operator>-&gt;</operator><name>m_did_load_objfile</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;




<expr><name>ArchSpec</name> <name>arch</name> <operator>=</operator> <call><name><name>module_sp</name><operator>-&gt;</operator><name>m_objfile_sp</name><operator>-&gt;</operator><name>GetArchitecture</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<name><name>module_sp</name><operator>-&gt;</operator><name>m_arch</name></name> <operator>=</operator> <name>arch</name></block></expr>;</expr_stmt>


<expr_stmt><expr><name><name>module_sp</name><operator>-&gt;</operator><name>m_file</name></name> <operator>=</operator> <call><name><name>module_sp</name><operator>-&gt;</operator><name>m_objfile_sp</name><operator>-&gt;</operator><name>GetFileSpec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>module_sp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><operator>~</operator><macro><name>Module</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>MatchesModuleSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleSpec</name> <modifier>&amp;</modifier></type><name>module_ref</name></decl></parameter>)</parameter_list>;</function_decl>





































<decl_stmt><decl><type><name>bool</name></type> <name>SetLoadAddress</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>value</name></expr></argument>, <argument><expr><name>bool</name> <name>value_is_offset</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>changed</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>CalculateSymbolContext</name><argument_list>(<argument><expr><name>SymbolContext</name> <operator>*</operator><name>sc</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>CalculateSymbolContextModule</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>GetDescription</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>s</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eDescriptionLevelFull</name></expr></argument>)</argument_list></decl>;</decl_stmt>


















<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetSpecificationDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>void</name></type> <name>DumpSymbolContext</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>















<decl_stmt><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>*</modifier></type><name>FindFirstSymbolWithNameAndType</name><argument_list>(
<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eSymbolTypeAny</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FindSymbolsWithNameAndType</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FindSymbolsMatchingRegExAndType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolType</name> <name>symbol_type</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>













<function_decl><type><name>void</name></type> <name>FindFunctionSymbols</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>name_type_mask</name></decl></parameter>,
<parameter><decl><type><name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>FindCompileUnits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>)</parameter_list>;</function_decl>



















<decl_stmt><decl><type><name>void</name></type> <name>FindFunctions</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CompilerDeclContext</name> <operator>&amp;</operator><name>parent_decl_ctx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <name>name_type_mask</name></expr></argument>, <argument><expr><name>bool</name> <name>symbols_ok</name></expr></argument>,
<argument><expr><name>bool</name> <name>inlines_ok</name></expr></argument>, <argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>













<function_decl><type><name>void</name></type> <name>FindFunctions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegularExpression</name> <modifier>&amp;</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>symbols_ok</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>inlines_ok</name></decl></parameter>, <parameter><decl><type><name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>)</parameter_list>;</function_decl>






















<decl_stmt><decl><type><name>void</name></type> <name>FindAddressesForLine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>,
<argument><expr><name>Function</name> <operator>*</operator><name>function</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Address</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>output_local</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Address</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>output_extern</name></expr></argument>)</argument_list></decl>;</decl_stmt>

















<function_decl><type><name>void</name></type> <name>FindGlobalVariables</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CompilerDeclContext</name> <modifier>&amp;</modifier></type><name>parent_decl_ctx</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>max_matches</name></decl></parameter>, <parameter><decl><type><name>VariableList</name> <modifier>&amp;</modifier></type><name>variable_list</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>FindGlobalVariables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegularExpression</name> <modifier>&amp;</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_matches</name></decl></parameter>,
<parameter><decl><type><name>VariableList</name> <modifier>&amp;</modifier></type><name>variable_list</name></decl></parameter>)</parameter_list>;</function_decl>































<decl_stmt><decl><type><name>void</name></type>
<name>FindTypes</name><argument_list>(<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>, <argument><expr><name>bool</name> <name>exact_match</name></expr></argument>, <argument><expr><name>size_t</name> <name>max_matches</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>SymbolFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>searched_symbol_files</name></expr></argument>,
<argument><expr><name>TypeList</name> <operator>&amp;</operator><name>types</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<decl_stmt><decl><type><name>void</name></type> <name>FindTypes</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CompilerContext</name></expr></argument>&gt;</argument_list></name> <name>pattern</name></expr></argument>, <argument><expr><name>LanguageSet</name> <name>languages</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>SymbolFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>searched_symbol_files</name></expr></argument>,
<argument><expr><name>TypeMap</name> <operator>&amp;</operator><name>types</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSP</name> <macro><name>FindFirstType</name><argument_list>(<argument>const SymbolContext &amp;sc</argument>,
<argument>ConstString type_name</argument>, <argument>bool exact_match</argument>)</argument_list></macro></expr>;</expr_stmt>











<function_decl><type><name>void</name></type> <name>FindTypesInNamespace</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CompilerDeclContext</name> <modifier>&amp;</modifier></type><name>parent_decl_ctx</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>max_matches</name></decl></parameter>, <parameter><decl><type><name>TypeList</name> <modifier>&amp;</modifier></type><name>type_list</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><macro><name>GetArchitecture</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file</name></expr>;</return> }</block></expr></expr_stmt>













<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetPlatformFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_platform_file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>m_platform_file</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>m_file</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetPlatformFileSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_platform_file</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetRemoteInstallFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_remote_install_file</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetRemoteInstallFileSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_remote_install_file</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetSymbolFileFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_symfile_spec</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>PreloadSymbols</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetSymbolFileFileSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetModificationTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_mod_time</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetObjectModificationTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_object_mod_time</name></expr>;</return>
}</block></expr></expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>RegisterXcodeSDK</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>sdk</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>sysroot</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function_decl><type><name>bool</name></type> <name>IsExecutable</name><parameter_list>()</parameter_list>;</function_decl>










<function_decl><type><name>bool</name></type> <name>IsLoadedInTarget</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>LoadScriptingResourceInTarget</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>feedback_stream</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>size_t</name></type> <name>GetNumCompileUnits</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CompUnitSP</name> <macro><name>GetCompileUnitAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetObjectName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetObjectOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_object_offset</name></expr>;</return> }</block></expr></expr_stmt>













<function_decl><type><name>virtual</name> <name>ObjectFile</name> <modifier>*</modifier></type><name>GetObjectFile</name><parameter_list>()</parameter_list>;</function_decl>










<function_decl><type><name>virtual</name> <name>SectionList</name> <modifier>*</modifier></type><name>GetSectionList</name><parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>virtual</name> <name>void</name></type> <name>SectionFileAddressesChanged</name><parameter_list>()</parameter_list>;</function_decl>












<function_decl><type><name>UnwindTable</name> <modifier>&amp;</modifier></type><name>GetUnwindTable</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>VersionTuple</name> <call><name>GetVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>












<decl_stmt><decl><type><name>ObjectFile</name> <modifier>*</modifier></type><name>GetMemoryObjectFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>header_addr</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size_to_read</name> <operator>=</operator> <literal type="number">512</literal></expr></argument>)</argument_list></decl>;</decl_stmt>









<function_decl><type><name>virtual</name> <name>SymbolFile</name> <modifier>*</modifier></type><name>GetSymbolFile</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>can_create</name> <init>= <expr><name>true</name></expr></init></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>feedback_strm</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symtab</name> <modifier>*</modifier></type><name>GetSymtab</name><parameter_list>()</parameter_list>;</function_decl>











<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>UUID</name> <operator>&amp;</operator><call><name>GetUUID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>











<function_decl><type><name>void</name></type> <name>ParseAllDebugSymbols</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ResolveFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>, <argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>






































<decl_stmt><decl><type><name>uint32_t</name></type> <name>ResolveSymbolContextForAddress</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>,
<argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>bool</name> <name>resolve_tail_call_address</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>








































<decl_stmt><decl><type><name>uint32_t</name></type> <name>ResolveSymbolContextForFilePath</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file_path</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>bool</name> <name>check_inlines</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>, <argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>









































<decl_stmt><decl><type><name>uint32_t</name></type> <name>ResolveSymbolContextsForFileSpec</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>bool</name> <name>check_inlines</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>, <argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetFileSpecAndObjectName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>ConstString</name></type> <name>object_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetIsDynamicLinkEditor</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TypeSystem</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<macro><name>GetTypeSystemForLanguage</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;</expr_stmt>






<function_decl><type><name>void</name></type> <name>LogMessage</name><parameter_list>(<parameter><decl><type><name>Log</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>3<operator>,</operator> 4</function_decl>)))<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>LogMessageVerboseBacktrace</name><parameter_list>(<parameter><decl><type><name>Log</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>3<operator>,</operator> 4</function_decl>)))<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>ReportWarning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>ReportError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>



<function_decl><type><name>void</name></type> <name>ReportErrorIfModifyDetected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>FileHasChanged</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>GetMutex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mutex</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>PathMappingList</name> <modifier>&amp;</modifier></type><name>GetSourceMappingList</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_source_mappings</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>PathMappingList</name> <operator>&amp;</operator><macro><name>GetSourceMappingList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_source_mappings</name></expr>;</return>
}</block></expr></expr_stmt>



















<decl_stmt><decl><type><name>bool</name></type> <name>FindSourceFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>orig_spec</name></expr></argument>, <argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>new_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>













<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>RemapSourceFile</name><argument_list>(<argument>llvm::StringRef path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>RemapSourceFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><name>delete</name></expr></init></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>MergeArchitecture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch_spec</name></decl></parameter>)</parameter_list>;</function_decl>






















<decl_stmt><decl><type><name>class</name></type> <name>LookupInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>LookupInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_name</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_lookup_name</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<macro><name>LookupInfo</name><argument_list>(<argument>ConstString name</argument>, <argument>lldb::FunctionNameType name_type_mask</argument>,
<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetLookupName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_lookup_name</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetLookupName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_lookup_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <macro><name>GetNameTypeMask</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name_type_mask</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetNameTypeMask</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <name>mask</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_name_type_mask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Prune</name><argument_list>(<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>, <argument><expr><name>size_t</name> <name>start_idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ConstString</name></type> <name>m_lookup_name</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>m_language</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eLanguageTypeUnknown</name></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <name>m_name_type_mask</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eFunctionNameTypeNone</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>m_match_name_after_lookup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>m_mod_time</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ArchSpec</name></type> <name>m_arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UUID</name></type> <name>m_uuid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_platform_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_remote_install_file</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_symfile_spec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ConstString</name></type> <name>m_object_name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_object_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>m_object_mod_time</name></expr>;</expr_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <name>m_data_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ObjectFileSP</name> <name>m_objfile_sp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>UnwindTable</name></expr></argument>&gt;</argument_list></name> <name>m_unwind_table</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SymbolVendorUP</name>
<name>m_symfile_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>SymbolVendorUP</name></expr></argument>&gt;</argument_list></name>
<name>m_old_symfiles</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>TypeSystemMap</name></type> <name>m_type_system_map</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>PathMappingList</name></type> <name>m_source_mappings</name> <init>=
<expr><name>ModuleList</name><operator>::</operator><call><name>GetGlobalModuleListProperties</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetSymlinkMappings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionListUP</name> <name>m_sections_up</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_did_load_objfile</name><block>{<expr><name>false</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_did_load_symfile</name><block>{<expr><name>false</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_did_set_uuid</name><block>{<expr><name>false</name></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>m_file_has_changed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>m_first_file_changed_log</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


































<decl_stmt><decl><type><name>uint32_t</name></type> <name>ResolveSymbolContextForAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>vm_addr</name></expr></argument>,
<argument><expr><name>bool</name> <name>vm_addr_is_file_addr</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>,
<argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>, <argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SymbolIndicesToSymbolContextList</name><argument_list>(<argument><expr><name>Symtab</name> <operator>*</operator><name>symtab</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>symbol_indexes</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetArchitecture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>new_arch</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetUUID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>UUID</name> <operator>&amp;</operator><name>uuid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SectionList</name> <modifier>*</modifier></type><name>GetUnifiedSectionList</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ModuleList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ObjectFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SymbolFile</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Module</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FindTypes_Impl</name><argument_list>(
<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompilerDeclContext</name> <operator>&amp;</operator><name>parent_decl_ctx</name></expr></argument>,
<argument><expr><name>size_t</name> <name>max_matches</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>SymbolFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>searched_symbol_files</name></expr></argument>,
<argument><expr><name>TypeMap</name> <operator>&amp;</operator><name>types</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Module</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Module</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Module</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
