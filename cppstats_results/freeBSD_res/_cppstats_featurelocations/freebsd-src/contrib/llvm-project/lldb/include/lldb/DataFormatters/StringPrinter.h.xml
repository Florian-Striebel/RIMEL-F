<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/StringPrinter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_STRINGPRINTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_STRINGPRINTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>formatters</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StringPrinter</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>StringElementType</name> <block>{<block_content> <expr_stmt><expr><name>ASCII</name></expr><operator>,</operator> <expr><name>UTF8</name></expr><operator>,</operator> <expr><name>UTF16</name></expr><operator>,</operator> <expr><name>UTF32</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>GetPrintableElementType</name> <block>{<block_content> <expr_stmt><expr><name>ASCII</name></expr><operator>,</operator> <expr><name>UTF8</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>EscapeStyle</name> <block>{<block_content> <expr_stmt><expr><name>CXX</name></expr><operator>,</operator> <expr><name>Swift</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DumpToStreamOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DumpToStreamOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>void</name></type> <name>SetStream</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_stream</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>Stream</name> <operator>*</operator><macro><name>GetStream</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stream</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPrefixToken</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>p</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_prefix_token</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPrefixToken</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>nullptr_t</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_prefix_token</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPrefixToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_prefix_token</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSuffixToken</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>p</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_suffix_token</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSuffixToken</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>nullptr_t</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_suffix_token</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetSuffixToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_suffix_token</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetQuote</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_quote</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>char</name> <macro><name>GetQuote</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_quote</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetSourceSize</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_source_size</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetSourceSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_source_size</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetNeedsZeroTermination</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_needs_zero_termination</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetNeedsZeroTermination</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_needs_zero_termination</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetBinaryZeroIsTerminator</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_zero_is_terminator</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetBinaryZeroIsTerminator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_zero_is_terminator</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetEscapeNonPrintables</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_escape_non_printables</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetEscapeNonPrintables</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_escape_non_printables</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIgnoreMaxLength</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_ignore_max_length</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetIgnoreMaxLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_ignore_max_length</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetEscapeStyle</name><parameter_list>(<parameter><decl><type><name>EscapeStyle</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_escape_style</name> <operator>=</operator> <name>style</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>EscapeStyle</name> <macro><name>GetEscapeStyle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_escape_style</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>m_stream</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_prefix_token</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_suffix_token</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>m_quote</name> <init>= <expr><literal type="char">'"'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_source_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_needs_zero_termination</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_escape_non_printables</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_ignore_max_length</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_zero_is_terminator</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EscapeStyle</name></type> <name>m_escape_style</name> <init>= <expr><name>EscapeStyle</name><operator>::</operator><name>CXX</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ReadStringAndDumpToStreamOptions</name> <range>: <expr><name>public</name> <name>DumpToStreamOptions</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ReadStringAndDumpToStreamOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><call><name>ReadStringAndDumpToStreamOptions</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetLocation</name><argument_list>(<argument>uint64_t l</argument>)</argument_list></macro> <block>{ <expr><name>m_location</name> <operator>=</operator> <name>l</name></expr>; }</block>

<name>uint64_t</name> <macro><name>GetLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_location</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetProcessSP</name><argument_list>(<argument>lldb::ProcessSP p</argument>)</argument_list></macro> <block>{ <expr><name>m_process_sp</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcessSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_process_sp</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetHasSourceSize</name><argument_list>(<argument>bool e</argument>)</argument_list></macro> <block>{ <expr><name>m_has_source_size</name> <operator>=</operator> <name>e</name></expr>; }</block>

<name>bool</name> <macro><name>HasSourceSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_has_source_size</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>uint64_t</name> <name>m_location</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <name>m_process_sp</name></expr>;

<expr><name>bool</name> <name>m_has_source_size</name> <operator>=</operator> <name>false</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ReadBufferAndDumpToStreamOptions</name> <range>: <expr><name>public</name> <name>DumpToStreamOptions</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ReadBufferAndDumpToStreamOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><call><name>ReadBufferAndDumpToStreamOptions</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>ReadBufferAndDumpToStreamOptions</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>ReadStringAndDumpToStreamOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetData</name><argument_list>(<argument>DataExtractor d</argument>)</argument_list></macro> <block>{ <expr><name>m_data</name> <operator>=</operator> <name>d</name></expr>; }</block>

<name>lldb_private</name><operator>::</operator><name>DataExtractor</name> <macro><name>GetData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_data</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetIsTruncated</name><argument_list>(<argument>bool t</argument>)</argument_list></macro> <block>{ <expr><name>m_is_truncated</name> <operator>=</operator> <name>t</name></expr>; }</block>

<name>bool</name> <macro><name>GetIsTruncated</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_truncated</name></expr>;</return> }</block>
<name>private</name><operator>:</operator>
<name>DataExtractor</name> <name>m_data</name></expr>;
<expr><name>bool</name> <name>m_is_truncated</name> <operator>=</operator> <name>false</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>StringElementType</name> <name>element_type</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type>
<name>ReadStringAndDumpToStream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReadStringAndDumpToStreamOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>StringElementType</name> <name>element_type</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type>
<name>ReadBufferAndDumpToStream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReadBufferAndDumpToStreamOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
