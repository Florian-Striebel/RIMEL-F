<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBExpressionOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBEXPRESSIONOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBEXPRESSIONOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBExpressionOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBExpressionOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBExpressionOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBExpressionOptions</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBExpressionOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SBExpressionOptions</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBExpressionOptions</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetCoerceResultToId</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetCoerceResultToId</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>coerce</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetUnwindOnError</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetUnwindOnError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>unwind</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetIgnoreBreakpoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetIgnoreBreakpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <macro><name>GetFetchDynamicValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetFetchDynamicValue</name><argument_list>(
<argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>dynamic</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eDynamicCanRunTarget</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetTimeoutInMicroSeconds</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>SetTimeoutInMicroSeconds</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetOneThreadTimeoutInMicroSeconds</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>SetOneThreadTimeoutInMicroSeconds</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetTryAllThreads</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetTryAllThreads</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>run_others</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetStopOthers</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetStopOthers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop_others</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetTrapExceptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetTrapExceptions</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>trap_exceptions</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetCancelCallback</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionCancelCallback</name> <name>callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>GetGenerateDebugInfo</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetGenerateDebugInfo</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetSuppressPersistentResult</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetSuppressPersistentResult</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetPrefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetAutoApplyFixIts</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetAutoApplyFixIts</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetRetriesWithFixIts</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>retries</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>GetRetriesWithFixIts</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetTopLevel</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetTopLevel</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>GetAllowJIT</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>SetAllowJIT</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allow</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>EvaluateExpressionOptions</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>EvaluateExpressionOptions</name> <operator>&amp;</operator><macro><name>ref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>EvaluateExpressionOptions</name></expr></argument>&gt;</argument_list></name> <name>m_opaque_up</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
