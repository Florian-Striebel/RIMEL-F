<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointIDList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTIDLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTIDLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>BreakpointIDList</name> <block>{<block_content>
<label><name>public</name>:</label>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointID</name></expr></argument>&gt;</argument_list></name> <name>BreakpointIDArray</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><call><name>BreakpointIDList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>BreakpointIDList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BreakpointID</name> <modifier>&amp;</modifier></type><name>GetBreakpointIDAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>RemoveBreakpointIDAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AddBreakpointID</name><parameter_list>(<parameter><decl><type><name>BreakpointID</name></type> <name>bp_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AddBreakpointID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bp_id</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>FindBreakpointID</name><argument_list>(<argument><expr><name>BreakpointID</name> <operator>&amp;</operator><name>bp_id</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>position</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FindBreakpointID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>bp_id</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>position</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>InsertStringArray</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>string_array</name></expr></argument>,
<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>SplitIDRangeExpression</name><argument_list>(<argument>llvm::StringRef in_string</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>FindAndReplaceIDRanges</name><argument_list>(<argument><expr><name>Args</name> <operator>&amp;</operator><name>old_args</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,
<argument><expr><name>bool</name> <name>allow_locations</name></expr></argument>,
<argument><expr><name>BreakpointName</name><operator>::</operator><name>Permissions</name>
<operator>::</operator><name>PermissionKinds</name> <name>purpose</name></expr></argument>,
<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>,
<argument><expr><name>Args</name> <operator>&amp;</operator><name>new_args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>BreakpointIDArray</name></type> <name>m_breakpoint_ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BreakpointID</name></type> <name>m_invalid_id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BreakpointIDList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointIDList</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BreakpointIDList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>BreakpointIDList</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
