<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/common/NativeWatchpointList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_COMMON_NATIVEWATCHPOINTLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_COMMON_NATIVEWATCHPOINTLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<struct>struct <name>NativeWatchpoint</name> <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_addr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_watch_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_hardware</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWatchpointList</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>Status</name></type> <name>Add</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>watch_flags</name></expr></argument>,
<argument><expr><name>bool</name> <name>hardware</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>Remove</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>WatchpointMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>NativeWatchpoint</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>WatchpointMap</name> <operator>&amp;</operator><macro><name>GetWatchpointMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>WatchpointMap</name></type> <name>m_watchpoints</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
