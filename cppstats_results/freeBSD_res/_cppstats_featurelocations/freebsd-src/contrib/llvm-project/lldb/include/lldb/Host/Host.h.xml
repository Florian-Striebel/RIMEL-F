<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/Host.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_HOST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_HOST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/HostThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Environment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Timeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cerrno&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdarg&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProcessLaunchInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProcessInstanceInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProcessInstanceInfoMatch</name></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ProcessInstanceInfo</name></expr></argument>&gt;</argument_list></name> <name>ProcessInstanceInfoList</name></expr>;</expr_stmt></typedef>


<struct>struct <name>WaitStatus</name> <block>{
<enum>enum <name>Type</name> : <type><name>uint8_t</name></type> <block>{
<decl><name>Exit</name></decl>,

<decl><name>Signal</name></decl>,

<decl><name>Stop</name></decl>,

}</block>;</enum>

<decl_stmt><decl><type><name>Type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>status</name></decl>;</decl_stmt>

<macro><name>WaitStatus</name><argument_list>(<argument>Type type</argument>, <argument>uint8_t status</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>status</name><argument_list>(<argument>status</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>WaitStatus</name> <macro><name>Decode</name><argument_list>(<argument>int wstatus</argument>)</argument_list></macro></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>WaitStatus</name> <name>a</name><operator>,</operator> <name>WaitStatus</name> <name>b</name><operator>)</operator> <block>{
<return>return <expr><name><name>a</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>status</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>WaitStatus</name> <name>a</name><operator>,</operator> <name>WaitStatus</name> <name>b</name><operator>)</operator> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>Host</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator>
<name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name>, <name>bool</name> <name>exited</name>,
<name>int</name> <name>signal</name>,
<name>int</name> <name>status</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>MonitorChildProcessCallback</name></expr>;</expr_stmt></typedef>

































<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>HostThread</name></expr></argument>&gt;</argument_list></name>
<macro><name>StartMonitoringChildProcess</name><argument_list>(<argument>const MonitorChildProcessCallback &amp;callback</argument>,
<argument>lldb::pid_t pid</argument>, <argument>bool monitor_signals</argument>)</argument_list></macro></expr>;</expr_stmt>

<enum>enum <name>SystemLogType</name> <block>{ <decl><name>eSystemLogWarning</name></decl>, <decl><name>eSystemLogError</name></decl> }</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SystemLog</name><parameter_list>(<parameter><decl><type><name>SystemLogType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)</block_content></block></decl>)</decl_stmt>)</block_content></block></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SystemLog</name><parameter_list>(<parameter><decl><type><name>SystemLogType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>pid_t</name> <call><name>GetCurrentProcessID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Kill</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>, <argument><expr><name>int</name> <name>signo</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>thread_t</name> <call><name>GetCurrentThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSignalAsCString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><specifier>static</specifier> <name>FileSpec</name></type> <name>GetModuleFileSpecForHostAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>host_addr</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetBundleDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>bundle_directory</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ResolveExecutableInBundle</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>FindProcesses</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcessInstanceInfoMatch</name> <modifier>&amp;</modifier></type><name>match_info</name></decl></parameter>,
<parameter><decl><type><name>ProcessInstanceInfoList</name> <modifier>&amp;</modifier></type><name>proc_infos</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>TidMap</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>TidPair</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>FindProcessThreads</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>, <argument><expr><name>TidMap</name> <operator>&amp;</operator><name>tids_to_attach</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetProcessInfo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>, <argument><expr><name>ProcessInstanceInfo</name> <operator>&amp;</operator><name>proc_info</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>Status</name></type> <name>LaunchProcess</name><parameter_list>(<parameter><decl><type><name>ProcessLaunchInfo</name> <modifier>&amp;</modifier></type><name>launch_info</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>static</specifier> <name>Status</name></type> <name>ShellExpandArguments</name><parameter_list>(<parameter><decl><type><name>ProcessLaunchInfo</name> <modifier>&amp;</modifier></type><name>launch_info</name></decl></parameter>)</parameter_list>;</function_decl>









<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>RunShellCommand</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>command</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>working_dir</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>status_ptr</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>signo_ptr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>command_output</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>,
<argument><expr><name>bool</name> <name>run_in_shell</name> <operator>=</operator> <name>true</name></expr></argument>,
<argument><expr><name>bool</name> <name>hide_stderr</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>RunShellCommand</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>shell</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>command</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>working_dir</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>status_ptr</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>signo_ptr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>command_output</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>,
<argument><expr><name>bool</name> <name>run_in_shell</name> <operator>=</operator> <name>true</name></expr></argument>,
<argument><expr><name>bool</name> <name>hide_stderr</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>RunShellCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>working_dir</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>status_ptr</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>signo_ptr</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>command_output</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>,
<argument><expr><name>bool</name> <name>run_in_shell</name> <operator>=</operator> <name>true</name></expr></argument>,
<argument><expr><name>bool</name> <name>hide_stderr</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>RunShellCommand</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>shell</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>working_dir</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>status_ptr</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>signo_ptr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>command_output</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>,
<argument><expr><name>bool</name> <name>run_in_shell</name> <operator>=</operator> <name>true</name></expr></argument>,
<argument><expr><name>bool</name> <name>hide_stderr</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>OpenFileInExternalEditor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>line_no</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Environment</name></type> <name>GetEnvironment</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Connection</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateDefaultConnection</name><argument_list>(<argument>llvm::StringRef url</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>FindProcessesImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcessInstanceInfoMatch</name> <modifier>&amp;</modifier></type><name>match_info</name></decl></parameter>,
<parameter><decl><type><name>ProcessInstanceInfoList</name> <modifier>&amp;</modifier></type><name>proc_infos</name></decl></parameter>)</parameter_list>;</function_decl>
};

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>format_provider</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>WaitStatus</name></expr></argument>&gt;</argument_list></name> <block>{


<expr><specifier>static</specifier> <name>void</name> <macro><name>format</name><argument_list>(<argument>const lldb_private::WaitStatus &amp;WS</argument>, <argument>raw_ostream &amp;OS</argument>,
<argument>llvm::StringRef Options</argument>)</argument_list></macro></expr>;
}</block></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
