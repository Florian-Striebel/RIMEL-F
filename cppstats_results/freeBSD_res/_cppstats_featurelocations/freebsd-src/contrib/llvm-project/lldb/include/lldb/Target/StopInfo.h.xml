<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/StopInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_STOPINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_STOPINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>StopInfo</name> <block>{<block_content>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>Process</name><operator>::</operator><name>ProcessEventData</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ThreadPlanBase</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<macro><name>StopInfo</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>uint64_t value</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>StopInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>thread_sp</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_thread_wp</name> <operator>=</operator> <name>thread_sp</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_thread_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>










<expr_stmt><expr><name>uint64_t</name> <macro><name>GetValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_value</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StopReason</name> <macro><name>GetStopReason</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<function><type><name>virtual</name> <name>bool</name></type> <name>ShouldStopSynchronous</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>OverrideShouldNotify</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>override_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_override_should_notify</name> <operator>=</operator> <ternary><condition><expr><name>override_value</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>virtual</name> <name>bool</name></type> <name>ShouldNotify</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_override_should_notify</name> <operator>==</operator> <name>eLazyBoolCalculate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DoShouldNotify</name><argument_list>(<argument><expr><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>m_override_should_notify</name> <operator>==</operator> <name>eLazyBoolYes</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>WillResume</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>resume_state</name></expr></argument>)</argument_list> <block>{<block_content>

</block_content>}</block></decl></decl_stmt>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDescription</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_description</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetDescription</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc_cstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>desc_cstr</name> <operator>&amp;&amp;</operator> <name><name>desc_cstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_description</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>desc_cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_description</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>IsValidForOperatingSystemThread</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>








<function><type><name>void</name></type> <name>OverrideShouldStop</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>override_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_override_should_stop</name> <operator>=</operator> <ternary><condition><expr><name>override_value</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetOverrideShouldStop</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>m_override_should_stop</name> <operator>!=</operator> <name>eLazyBoolCalculate</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetOverriddenShouldStopValue</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>m_override_should_stop</name> <operator>==</operator> <name>eLazyBoolYes</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>GetExtendedInfo</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_extended_info</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name>
<macro><name>CreateStopReasonWithBreakpointSiteID</name><argument_list>(<argument>Thread &amp;thread</argument>,
<argument>lldb::break_id_t break_id</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <macro><name>CreateStopReasonWithBreakpointSiteID</name><argument_list>(
<argument>Thread &amp;thread</argument>, <argument>lldb::break_id_t break_id</argument>, <argument>bool should_stop</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <macro><name>CreateStopReasonWithWatchpointID</name><argument_list>(
<argument>Thread &amp;thread</argument>, <argument>lldb::break_id_t watch_id</argument>,
<argument>lldb::addr_t watch_hit_addr = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name>
<macro><name>CreateStopReasonWithSignal</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>int signo</argument>,
<argument>const char *description = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <call><name>CreateStopReasonToTrace</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name>
<macro><name>CreateStopReasonWithPlan</name><argument_list>(<argument>lldb::ThreadPlanSP &amp;plan</argument>,
<argument>lldb::ValueObjectSP return_valobj_sp</argument>,
<argument>lldb::ExpressionVariableSP expression_variable_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name>
<call><name>CreateStopReasonWithException</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <call><name>CreateStopReasonWithExec</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name>
<call><name>CreateStopReasonProcessorTrace</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<call><name>GetReturnValueObject</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <operator>&amp;</operator><name>stop_info_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name>
<call><name>GetExpressionVariable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <operator>&amp;</operator><name>stop_info_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<call><name>GetCrashingDereference</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <operator>&amp;</operator><name>stop_info_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>*</operator><name>crashing_address</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>




<function><type><name>virtual</name> <name>void</name></type> <name>PerformAction</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>DoShouldNotify</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>








<function><type><name>virtual</name> <name>bool</name></type> <name>ShouldStop</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadWP</name> <name>m_thread_wp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_stop_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_resume_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_description</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_override_should_notify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_override_should_stop</name></decl>;</decl_stmt>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name>
<name>m_extended_info</name></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>HasTargetRunSinceMe</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>MakeStopInfoValid</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Thread</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StopInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StopInfo</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>StopInfo</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>StopInfo</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
