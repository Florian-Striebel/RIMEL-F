<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBThreadPlan.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBTHREADPLAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBTHREADPLAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBThreadPlan</name> <block>{<block_content>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBThreadPlan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBThreadPlan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThreadPlan</name> <operator>&amp;</operator><name>threadPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBThreadPlan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <operator>&amp;</operator><name>lldb_object_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBThreadPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBThreadPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>class_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <operator>&amp;</operator><name>args_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBThreadPlan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopReason</name> <call><name>GetStopReason</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>size_t</name></type> <name>GetStopReasonDataCount</name><parameter_list>()</parameter_list>;</function_decl>




















<function_decl><type><name>uint64_t</name></type> <name>GetStopReasonDataAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>SBThread</name> <macro><name>GetThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThreadPlan</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBThreadPlan</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetPlanComplete</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsPlanComplete</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsPlanStale</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetStopOthers</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetStopOthers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop_others</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepOverRange</name><argument_list>(<argument><expr><name>SBAddress</name> <operator>&amp;</operator><name>start_address</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>range_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepOverRange</name><argument_list>(<argument><expr><name>SBAddress</name> <operator>&amp;</operator><name>start_address</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>range_size</name></expr></argument>,
<argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepInRange</name><argument_list>(<argument><expr><name>SBAddress</name> <operator>&amp;</operator><name>start_address</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>range_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepInRange</name><argument_list>(<argument><expr><name>SBAddress</name> <operator>&amp;</operator><name>start_address</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>range_size</name></expr></argument>,
<argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepOut</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>frame_idx_to_step_to</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>first_insn</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepOut</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>frame_idx_to_step_to</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>first_insn</name></decl></parameter>, <parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForRunToAddress</name><parameter_list>(<parameter><decl><type><name>SBAddress</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForRunToAddress</name><parameter_list>(<parameter><decl><type><name>SBAddress</name></type> <name>address</name></decl></parameter>,
<parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepScripted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script_class_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepScripted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script_class_name</name></decl></parameter>,
<parameter><decl><type><name>SBError</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>SBThreadPlan</name></type> <name>QueueThreadPlanForStepScripted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>script_class_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <operator>&amp;</operator><name>args_data</name></expr></argument>,
<argument><expr><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBreakpointLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBProcess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>QueueImpl</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBQueueItem</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>GetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_opaque_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>ThreadPlan</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetSP</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>SetThreadPlan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <operator>&amp;</operator><name>lldb_object_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanWP</name> <name>m_opaque_wp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
