<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/WatchpointOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_WATCHPOINTOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_WATCHPOINTOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Baton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>WatchpointOptions</name> <block>{<block_content>
<label><name>public</name>:</label>



<expr_stmt><expr><call><name>WatchpointOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WatchpointOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WatchpointOptions</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>WatchpointOptions</name> <modifier>*</modifier></type><name>CopyOptionsNoCallback</name><parameter_list>(<parameter><decl><type><name>WatchpointOptions</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>











<macro><name>WatchpointOptions</name><argument_list>(<argument>WatchpointHitCallback callback</argument>, <argument>void *baton</argument>,
<argument>lldb::tid_t thread_id = LLDB_INVALID_THREAD_ID</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>WatchpointOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>WatchpointOptions</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>WatchpointOptions</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>








































<decl_stmt><decl><type><name>void</name></type> <name>SetCallback</name><argument_list>(<argument><expr><name>WatchpointHitCallback</name> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BatonSP</name> <operator>&amp;</operator><name>baton_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>synchronous</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>ClearCallback</name><parameter_list>()</parameter_list>;</function_decl>



















<decl_stmt><decl><type><name>bool</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>watch_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function><type><name>bool</name></type> <name>IsCallbackSynchronous</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_callback_is_synchronous</name></expr>;</return> </block_content>}</block></function>





<function_decl><type><name>Baton</name> <modifier>*</modifier></type><name>GetBaton</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>const</specifier> <name>Baton</name> <operator>*</operator><macro><name>GetBaton</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><specifier>const</specifier> <name>ThreadSpec</name> <operator>*</operator><macro><name>GetThreadSpecNoCreate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>ThreadSpec</name> <modifier>*</modifier></type><name>GetThreadSpec</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetThreadID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>thread_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>GetCallbackDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>HasCallback</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>NullCallback</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>, <argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>watch_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<struct>struct <name>CommandData</name> <block>{
<expr_stmt><expr><call><name>CommandData</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>user_source</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>script_source</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><call><name>CommandData</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>StringList</name></type> <name>user_source</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>script_source</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stop_on_error</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>CommandBaton</name> <range>: <expr><name>public</name> <name><name>TypedBaton</name><argument_list type="generic">&lt;<argument><expr><name>CommandData</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CommandBaton</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CommandData</name></expr></argument>&gt;</argument_list></name> <name>Data</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TypedBaton</name><argument_list>(<argument>std::move(Data)</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>llvm::raw_ostream &amp;s</argument>, <argument>lldb::DescriptionLevel level</argument>,
<argument>unsigned indentation</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<label><name>protected</name>:</label>


<label><name>private</name>:</label>

<decl_stmt><decl><type><name>WatchpointHitCallback</name></type> <name>m_callback</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BatonSP</name> <name>m_callback_baton_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_callback_is_synchronous</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ThreadSpec</name></expr></argument>&gt;</argument_list></name>
<name>m_thread_spec_up</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
