<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Progress.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_PROGRESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_PROGRESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>





































<decl_stmt><decl><type><name>class</name></type> <name>Progress</name> <block>{<block_content>
<label><name>public</name>:</label>














<macro><name>Progress</name><argument_list>(<argument>std::string title</argument>, <argument>uint64_t total = UINT64_MAX</argument>,
<argument>lldb_private::Debugger *debugger = nullptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>






<expr_stmt><expr><operator>~</operator><call><name>Progress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>









<function_decl><type><name>void</name></type> <name>Increment</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>amount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>ReportProgress</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>g_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_title</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>m_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_completed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>m_total</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name></expr></argument>&gt;</argument_list></name> <name>m_debugger_id</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>m_complete</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
