<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Mangled.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_MANGLED_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_MANGLED_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>











<decl_stmt><decl><type><name>class</name></type> <name>Mangled</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>NamePreference</name> <block>{
<decl><name>ePreferMangled</name></decl>,
<decl><name>ePreferDemangled</name></decl>,
<decl><name>ePreferDemangledWithoutArguments</name></decl>
}</block>;</enum>

<enum>enum <name>ManglingScheme</name> <block>{
<decl><name>eManglingSchemeNone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eManglingSchemeMSVC</name></decl>,
<decl><name>eManglingSchemeItanium</name></decl>,
<decl><name>eManglingSchemeRustV0</name></decl>
}</block>;</enum>




<expr_stmt><expr><call><name>Mangled</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>








<function_decl><type><name>explicit</name></type> <name>Mangled</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>explicit</name></type> <name>Mangled</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>















<expr_stmt><expr><name>operator</name> <name>void</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>















<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>















<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Mangled</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Mangled</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>DumpDebug</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>ConstString</name> <macro><name>GetDemangledName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>ConstString</name> <macro><name>GetDisplayDemangledName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>SetDemangledName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_demangled</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetMangledName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_mangled</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt> </block_content>}</block></function>





<function><type><name>ConstString</name> <modifier>&amp;</modifier></type><name>GetMangledName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_mangled</name></expr>;</return> </block_content>}</block></function>





<expr_stmt><expr><name>ConstString</name> <macro><name>GetMangledName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mangled</name></expr>;</return> }</block></expr></expr_stmt>










<decl_stmt><decl><type><name>ConstString</name></type> <name>GetName</name><argument_list>(<argument><expr><name>NamePreference</name> <name>preference</name> <operator>=</operator> <name>ePreferDemangled</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>NameMatches</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_mangled</name> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>GetDemangledName</name><argument_list>()</argument_list></call> <operator>==</operator> <name>name</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>NameMatches</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegularExpression</name> <operator>&amp;</operator><name>regex</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>












<function_decl><type><name>void</name></type> <name>SetValue</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_mangled</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>SetValue</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GuessLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>SkipMangledNameFn</name> <init>= <expr><call><name>bool</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>ManglingScheme</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>























<function_decl><type><name>bool</name></type> <name>DemangleWithRichManglingInfo</name><parameter_list>(<parameter><decl><type><name>RichManglingContext</name> <modifier>&amp;</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>SkipMangledNameFn</name> <modifier>*</modifier></type><name>skip_mangled_name</name></decl></parameter>)</parameter_list>;</function_decl>








<expr_stmt><expr><specifier>static</specifier> <name>Mangled</name><operator>::</operator><name>ManglingScheme</name> <call><name>GetManglingScheme</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <specifier>const</specifier> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_mangled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>ConstString</name></type> <name>m_demangled</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>Stream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>Stream</name> <operator>&amp;</operator><name>s</name><operator>,</operator> <specifier>const</specifier> <name>Mangled</name> <operator>&amp;</operator><name>obj</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
