<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/DynamicLoader.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_DYNAMICLOADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_DYNAMICLOADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UUID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ModuleList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Thread</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>


















<decl_stmt><decl><type><name>class</name></type> <name>DynamicLoader</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{
<expr><name>public</name><operator>:</operator>












<specifier>static</specifier> <name>DynamicLoader</name> <operator>*</operator><call><name>FindPlugin</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>plugin_name</name></expr></argument>)</argument_list></call></expr>;


<expr><call><name>DynamicLoader</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;





<expr><name>virtual</name> <name>void</name> <call><name>DidAttach</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><name>virtual</name> <name>void</name> <call><name>DidLaunch</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;







<expr><name>virtual</name> <name>bool</name> <macro><name>ProcessDidExec</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>











<name>bool</name> <macro><name>GetStopWhenImagesChange</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;












<expr><name>void</name> <macro><name>SetStopWhenImagesChange</name><argument_list>(<argument>bool stop</argument>)</argument_list></macro></expr>;











<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>GetStepThroughTrampolinePlan</name><argument_list>(<argument>Thread &amp;thread</argument>,
<argument>bool stop_others</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

















<expr><name>virtual</name> <name>void</name> <macro><name>FindEquivalentSymbols</name><argument_list>(<argument>Symbol *original_symbol</argument>,
<argument>ModuleList &amp;module_list</argument>,
<argument>SymbolContextList &amp;equivalent_symbols</argument>)</argument_list></macro> <block>{}</block>











<name>virtual</name> <name>Status</name> <call><name>CanLoadImage</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;





















<expr><name>virtual</name> <name>bool</name> <macro><name>AlwaysRelyOnEHUnwindInfo</name><argument_list>(<argument>SymbolContext &amp;sym_ctx</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>













<name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetThreadLocalData</name><argument_list>(<argument>const lldb::ModuleSP module</argument>,
<argument>const lldb::ThreadSP thread</argument>,
<argument>lldb::addr_t tls_file_addr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LLDB_INVALID_ADDRESS</name></expr>;</return>
}</block>



<name>virtual</name> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>LoadModuleAtAddress</name><argument_list>(<argument>const lldb_private::FileSpec &amp;file</argument>,
<argument>lldb::addr_t link_map_addr</argument>,
<argument>lldb::addr_t base_addr</argument>,
<argument>bool base_addr_is_offset</argument>)</argument_list></macro></expr>;



































<expr><name>virtual</name> <name>bool</name> <macro><name>GetSharedCacheInformation</name><argument_list>(<argument>lldb::addr_t &amp;base_address</argument>, <argument>UUID &amp;uuid</argument>,
<argument>LazyBool &amp;using_shared_cache</argument>,
<argument>LazyBool &amp;private_shared_cache</argument>)</argument_list></macro> <block>{
<expr><name>base_address</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;
<expr><call><name><name>uuid</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>using_shared_cache</name> <operator>=</operator> <name>eLazyBoolCalculate</name></expr>;
<expr><name>private_shared_cache</name> <operator>=</operator> <name>eLazyBoolCalculate</name></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>







<name>virtual</name> <name>bool</name> <macro><name>IsFullyInitialized</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>




<name>lldb</name><operator>::</operator><name>ModuleSP</name> <call><name>GetTargetExecutable</name><argument_list>()</argument_list></call></expr>;









<expr><name>virtual</name> <name>void</name> <macro><name>UpdateLoadedSections</name><argument_list>(<argument>lldb::ModuleSP module</argument>,
<argument>lldb::addr_t link_map_addr</argument>,
<argument>lldb::addr_t base_addr</argument>,
<argument>bool base_addr_is_offset</argument>)</argument_list></macro></expr>;



<expr><name>void</name> <macro><name>UpdateLoadedSectionsCommon</name><argument_list>(<argument>lldb::ModuleSP module</argument>, <argument>lldb::addr_t base_addr</argument>,
<argument>bool base_addr_is_offset</argument>)</argument_list></macro></expr>;




<expr><name>virtual</name> <name>void</name> <macro><name>UnloadSections</name><argument_list>(<argument>const lldb::ModuleSP module</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>UnloadSectionsCommon</name><argument_list>(<argument>const lldb::ModuleSP module</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>SectionList</name> <operator>*</operator>
<macro><name>GetSectionListFromModule</name><argument_list>(<argument>const lldb::ModuleSP module</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>int64_t</name> <macro><name>ReadUnsignedIntWithSizeInBytes</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>int size_in_bytes</argument>)</argument_list></macro></expr>;



<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>ReadPointer</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>LoadOperatingSystemPlugin</name><argument_list>(<argument>bool flush</argument>)</argument_list></macro></expr>;



<expr><name>Process</name>
<operator>*</operator><name>m_process</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
