<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Runtime.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_RUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_RUNTIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Process.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Runtime</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Runtime</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_process</name><argument_list>(<argument>process</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>Runtime</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Runtime</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Runtime</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Runtime</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Runtime</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<function><type><name>Process</name> <modifier>*</modifier></type><name>GetProcess</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_process</name></expr>;</return> </block_content>}</block></function>
<function><type><name>Target</name> <modifier>&amp;</modifier></type><name>GetTargetRef</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_process</name><operator>-&gt;</operator><name>GetTarget</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>ModulesDidLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>m_process</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
