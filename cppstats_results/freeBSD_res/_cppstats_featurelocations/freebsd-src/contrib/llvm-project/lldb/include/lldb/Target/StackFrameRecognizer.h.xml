<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/StackFrameRecognizer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_STACKFRAMERECOGNIZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_STACKFRAMERECOGNIZER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObjectList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/VariableList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StopInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>







<decl_stmt><decl><type><name>class</name></type> <name>RecognizedStackFrame</name>
<range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>RecognizedStackFrame</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectListSP</name> <macro><name>GetRecognizedArguments</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_arguments</name></expr>;</return>
}</block>
<name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetExceptionObject</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ValueObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>virtual</name> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetMostRelevantFrame</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>RecognizedStackFrame</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetStopDescription</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_stop_desc</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>ValueObjectListSP</name> <name>m_arguments</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_stop_desc</name></expr>;
}</block></expr></range></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>StackFrameRecognizer</name>
<range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>StackFrameRecognizer</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>lldb</name><operator>::</operator><name>RecognizedStackFrameSP</name> <macro><name>RecognizeFrame</name><argument_list>(
<argument>lldb::StackFrameSP frame</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>RecognizedStackFrameSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr>;
<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block>

<name>virtual</name> <operator>~</operator><call><name>StackFrameRecognizer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
}</block></expr></range></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>ScriptedStackFrameRecognizer</name> <range>: <expr><name>public</name> <name>StackFrameRecognizer</name> <block>{
<expr><name>lldb_private</name><operator>::</operator><name>ScriptInterpreter</name> <operator>*</operator><name>m_interpreter</name></expr>;
<expr><name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>m_python_object_sp</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_python_class</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ScriptedStackFrameRecognizer</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ScriptInterpreter</name> <operator>*</operator><name>interpreter</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>pclass</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>ScriptedStackFrameRecognizer</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name>GetPythonClassName</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPythonClassName</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_python_class</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>RecognizedStackFrameSP</name> <macro><name>RecognizeFrame</name><argument_list>(
<argument>lldb::StackFrameSP frame</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>ScriptedStackFrameRecognizer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScriptedStackFrameRecognizer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ScriptedStackFrameRecognizer</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ScriptedStackFrameRecognizer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>StackFrameRecognizerManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>AddRecognizer</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameRecognizerSP</name> <name>recognizer</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>module</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>symbols</name></expr></argument>,
<argument><expr><name>bool</name> <name>first_instruction_only</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddRecognizer</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameRecognizerSP</name> <name>recognizer</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>RegularExpressionSP</name> <name>module</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>RegularExpressionSP</name> <name>symbol</name></expr></argument>,
<argument><expr><name>bool</name> <name>first_instruction_only</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEach</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;
<argument><expr><name>void</name><operator>(</operator><name>uint32_t</name> <name>recognizer_id</name>, <name>std</name><operator>::</operator><name>string</name> <name>recognizer_name</name>,
<name>std</name><operator>::</operator><name>string</name> <name>module</name>, <name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>symbols</name>,
<name>bool</name> <name>regexp</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>RemoveRecognizerWithID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>recognizer_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RemoveAllRecognizers</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameRecognizerSP</name> <macro><name>GetRecognizerForFrame</name><argument_list>(<argument>lldb::StackFrameSP frame</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RecognizedStackFrameSP</name> <macro><name>RecognizeFrame</name><argument_list>(<argument>lldb::StackFrameSP frame</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<struct>struct <name>RegisteredEntry</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>recognizer_id</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameRecognizerSP</name> <name>recognizer</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>module</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegularExpressionSP</name> <name>module_regexp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>symbols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegularExpressionSP</name> <name>symbol_regexp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first_instruction_only</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>RegisteredEntry</name></expr></argument>&gt;</argument_list></name> <name>m_recognizers</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>ValueObjectRecognizerSynthesizedValue</name> <range>: <expr><name>public</name> <name>ValueObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>Create</name><argument_list>(<argument>ValueObject &amp;parent</argument>, <argument>lldb::ValueType type</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>new</name> <call><name>ValueObjectRecognizerSynthesizedValue</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><call><name>GetSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<macro><name>ValueObjectRecognizerSynthesizedValue</name><argument_list>(<argument>ValueObject &amp;parent</argument>,
<argument>lldb::ValueType type</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ValueObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_type</name><argument_list>(<argument>type</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>SetName</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name><name>m_parent</name><operator>-&gt;</operator><name>GetByteSize</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>lldb</name><operator>::</operator><name>ValueType</name> <macro><name>GetValueType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block>
<name>bool</name> <macro><name>UpdateValue</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_parent</name><operator>-&gt;</operator><name>UpdateValueIfNeeded</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<name>m_value</name> <operator>=</operator> <call><name><name>m_parent</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>()</argument_list></call></block></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>
<function><type><name>size_t</name></type> <name>CalculateNumChildren</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>max</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl></parameter>)</parameter_list> override <block>{<block_content>
<return>return <expr><call><name><name>m_parent</name><operator>-&gt;</operator><name>GetNumChildren</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>CompilerType</name></type> <name>GetCompilerTypeImpl</name><parameter_list>()</parameter_list> override <block>{<block_content>
<return>return <expr><call><name><name>m_parent</name><operator>-&gt;</operator><name>GetCompilerType</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>IsSynthetic</name><parameter_list>()</parameter_list> override <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueType</name> <name>m_type</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
