<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/SocketAddress.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_SOCKETADDRESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_SOCKETADDRESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/windows/windows.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>ADDRESS_FAMILY</name></type> <name>sa_family_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SocketAddress</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SocketAddress</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetAddressInfo</name><argument_list>(<argument>const char *hostname</argument>, <argument>const char *servname</argument>, <argument>int ai_family</argument>,
<argument>int ai_socktype</argument>, <argument>int ai_protocol</argument>, <argument>int ai_flags = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SocketAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketAddress</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>addrinfo</name> <operator>*</operator><name>addr_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketAddress</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketAddress</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketAddress</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SocketAddress</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr_storage</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SocketAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>SocketAddress</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> struct <name>addrinfo</name> <operator>*</operator><name>addr_info</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SocketAddress</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>&amp;</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SocketAddress</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>&amp;</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SocketAddress</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>&amp;</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SocketAddress</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_storage</name> <operator>&amp;</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SocketAddress</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SocketAddress</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>socklen_t</name> <macro><name>GetLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>socklen_t</name></type> <name>GetMaxLength</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>sa_family_t</name> <macro><name>GetFamily</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>SetFamily</name><parameter_list>(<parameter><decl><type><name>sa_family_t</name></type> <name>family</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetIPAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>uint16_t</name> <macro><name>GetPort</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>SetPort</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type>
<name>getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,


<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ai_family</name> <init>= <expr><name>PF_UNSPEC</name></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ai_socktype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ai_protocol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ai_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>SetToLocalhost</name><parameter_list>(<parameter><decl><type><name>sa_family_t</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetToAnyAddress</name><parameter_list>(<parameter><decl><type><name>sa_family_t</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsAnyAddr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsLocalhost</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>&amp;</modifier><name>sockaddr</name></type>() <block>{<block_content>
<return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa</name></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> struct <name>sockaddr</name> <operator>&amp;</operator><macro><name>sockaddr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa</name></name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>&amp;</modifier><name>sockaddr_in</name></type>() <block>{<block_content>
<return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv4</name></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>&amp;</operator><macro><name>sockaddr_in</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv4</name></name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>&amp;</modifier><name>sockaddr_in6</name></type>() <block>{<block_content>
<return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv6</name></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>&amp;</operator><macro><name>sockaddr_in6</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv6</name></name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>&amp;</modifier><name>sockaddr_storage</name></type>() <block>{<block_content>
<return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa_storage</name></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> struct <name>sockaddr_storage</name> <operator>&amp;</operator><macro><name>sockaddr_storage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>m_socket_addr</name><operator>.</operator><name>sa_storage</name></name></expr>;</return>
}</block></expr></expr_stmt>






<function><type><name>operator</name> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type>() <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa</name></name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>operator</name> <specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa</name></name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>operator</name> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type>() <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv4</name></name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>operator</name> <specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv4</name></name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>operator</name> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type>() <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv6</name></name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>operator</name> <specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa_ipv6</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>operator</name> <specifier>const</specifier> struct <name>sockaddr_storage</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa_storage</name></name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>operator</name> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type>() <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>m_socket_addr</name><operator>.</operator><name>sa_storage</name></name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<typedef>typedef <type><union>union <name>sockaddr_tag</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa_ipv4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sa_ipv6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa_storage</name></decl>;</decl_stmt>
}</block></union></type> <name>sockaddr_t</name>;</typedef>


<decl_stmt><decl><type><name>sockaddr_t</name></type> <name>m_socket_addr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
