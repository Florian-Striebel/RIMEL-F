<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBModule.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBMODULE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBMODULE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBSymbolContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBValueList.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBModule</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBModule</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SBModule</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SBModule</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>SBModule</name><argument_list>(<argument>lldb::SBProcess &amp;process</argument>, <argument>lldb::addr_t header_addr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <macro><name>GetFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <macro><name>GetPlatformFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetPlatformFileSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>platform_file</name></expr></argument>)</argument_list></decl>;</decl_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <call><name>GetRemoteInstallFileSpec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

















<decl_stmt><decl><type><name>bool</name></type> <name>SetRemoteInstallFileSpec</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <call><name>GetByteOrder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetAddressByteSize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTriple</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><macro><name>GetUUIDBytes</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetUUIDString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBModule</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBModule</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSection</name> <call><name>FindSection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>sect_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <macro><name>ResolveFileAddress</name><argument_list>(<argument>lldb::addr_t vm_addr</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContext</name>
<macro><name>ResolveSymbolContextForAddress</name><argument_list>(<argument>const lldb::SBAddress &amp;addr</argument>,
<argument>uint32_t resolve_scope</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNumCompileUnits</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <call><name>GetCompileUnitAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContextList</name>
<call><name>FindCompileUnits</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>sb_file_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>size_t</name></type> <name>GetNumSymbols</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbol</name> <macro><name>GetSymbolAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbol</name> <macro><name>FindSymbol</name><argument_list>(<argument>const char *name</argument>,
<argument>lldb::SymbolType type = eSymbolTypeAny</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContextList</name> <macro><name>FindSymbols</name><argument_list>(<argument>const char *name</argument>,
<argument>lldb::SymbolType type = eSymbolTypeAny</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>size_t</name></type> <name>GetNumSections</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSection</name> <macro><name>GetSectionAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSymbolContextList</name>
<macro><name>FindFunctions</name><argument_list>(<argument>const char *name</argument>,
<argument>uint32_t name_type_mask = lldb::eFunctionNameTypeAny</argument>)</argument_list></macro></expr>;</expr_stmt>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValueList</name> <macro><name>FindGlobalVariables</name><argument_list>(<argument>lldb::SBTarget &amp;target</argument>,
<argument>const char *name</argument>, <argument>uint32_t max_matches</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>FindFirstGlobalVariable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>FindFirstType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeList</name> <call><name>FindTypes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <macro><name>GetTypeByID</name><argument_list>(<argument>lldb::user_id_t uid</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <macro><name>GetBasicType</name><argument_list>(<argument>lldb::BasicType type</argument>)</argument_list></macro></expr>;</expr_stmt>













<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeList</name> <macro><name>GetTypes</name><argument_list>(<argument>uint32_t type_mask = lldb::eTypeClassAny</argument>)</argument_list></macro></expr>;</expr_stmt>







































<function_decl><type><name>uint32_t</name></type> <name>GetVersion</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>versions</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_versions</name></decl></parameter>)</parameter_list>;</function_decl>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <macro><name>GetSymbolFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <macro><name>GetObjectFileHeaderAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <macro><name>GetObjectFileEntryPointAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetNumberAllocatedModules</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GarbageCollectAllocatedModules</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>explicit</name></type> <name>SBModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>ModuleSP</name> <macro><name>GetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetSP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleSP</name> <modifier>&amp;</modifier></type><name>module_sp</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
