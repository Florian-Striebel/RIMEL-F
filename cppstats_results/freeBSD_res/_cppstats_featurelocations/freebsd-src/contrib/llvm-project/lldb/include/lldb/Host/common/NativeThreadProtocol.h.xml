<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/common/NativeThreadProtocol.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_COMMON_NATIVETHREADPROTOCOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_COMMON_NATIVETHREADPROTOCOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeThreadProtocol</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>NativeThreadProtocol</name><argument_list>(<argument>NativeProcessProtocol &amp;process</argument>, <argument>lldb::tid_t tid</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>NativeThreadProtocol</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetName</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetState</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>NativeRegisterContext</name> <modifier>&amp;</modifier></type><name>GetRegisterContext</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetStopReason</name><argument_list>(<argument><expr><name>ThreadStopInfo</name> <operator>&amp;</operator><name>stop_info</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <macro><name>GetID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_tid</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>NativeProcessProtocol</name> <modifier>&amp;</modifier></type><name>GetProcess</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_process</name></expr>;</return> </block_content>}</block></function>


<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetWatchpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>watch_flags</name></expr></argument>, <argument><expr><name>bool</name> <name>hardware</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>RemoveWatchpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetHardwareBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>RemoveHardwareBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>NativeProcessProtocol</name> <modifier>&amp;</modifier></type><name>m_process</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>m_tid</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
