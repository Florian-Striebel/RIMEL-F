<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/UserSettingsController.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_USERSETTINGSCONTROLLER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_USERSETTINGSCONTROLLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Property</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Properties</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Properties</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>Properties</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>collection_sp</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>m_collection_sp</name><argument_list>(<argument>collection_sp</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>Properties</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <macro><name>GetValueProperties</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<return>return <expr><name>m_collection_sp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>GetPropertyValue</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>llvm::StringRef property_path</argument>,
<argument>bool will_modify</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>SetPropertyValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>VarSetOperationType</name> <name>op</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>property_path</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>DumpPropertyValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>property_path</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>dump_mask</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>DumpAllPropertyValues</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dump_mask</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DumpAllDescriptions</name><argument_list>(<argument><expr><name>CommandInterpreter</name> <operator>&amp;</operator><name>interpreter</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>Apropos</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>keyword</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Property</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>matching_properties</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <macro><name>GetSubProperty</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>ConstString name</argument>)</argument_list></macro></expr>;</expr_stmt>








<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExperimentalSettingsName</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsSettingExperimental</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>setting</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <name>m_collection_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
