<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/SectionLoadHistory.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_SECTIONLOADHISTORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_SECTIONLOADHISTORY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SectionLoadHistory</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum_decl>enum : <macro><name>unsigned</name></macro> <block>{


<decl><name>eStopIDNow</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>
}</block>;</enum_decl>

<expr_stmt><expr><call><name>SectionLoadHistory</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_stop_id_to_section_load_list</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_mutex</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>SectionLoadHistory</name><argument_list>()</argument_list></macro> <block>{


<expr><call><name>Clear</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>SectionLoadList</name> <operator>&amp;</operator><call><name>GetCurrentSectionLoadList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetLastStopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetSectionLoadAddress</name><argument_list>(<argument>uint32_t stop_id</argument>,
<argument>const lldb::SectionSP &amp;section_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ResolveLoadAddress</name><argument_list>(<argument><expr><name>uint32_t</name> <name>stop_id</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetSectionLoadAddress</name><argument_list>(<argument><expr><name>uint32_t</name> <name>stop_id</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>bool</name> <name>warn_multiple</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>SetSectionUnloaded</name><argument_list>(<argument><expr><name>uint32_t</name> <name>stop_id</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>SetSectionUnloaded</name><argument_list>(<argument><expr><name>uint32_t</name> <name>stop_id</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<function_decl><type><name>SectionLoadList</name> <modifier>*</modifier></type><name>GetSectionLoadListForStopID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>stop_id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>read_only</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SectionLoadListSP</name></expr></argument>&gt;</argument_list></name> <name>StopIDToSectionLoadList</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>StopIDToSectionLoadList</name></type> <name>m_stop_id_to_section_load_list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>SectionLoadHistory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SectionLoadHistory</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SectionLoadHistory</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SectionLoadHistory</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
