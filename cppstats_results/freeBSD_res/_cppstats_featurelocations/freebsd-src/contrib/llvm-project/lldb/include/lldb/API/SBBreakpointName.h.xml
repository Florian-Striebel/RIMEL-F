<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBBreakpointName.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBBREAKPOINTNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBBREAKPOINTNAME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>SBBreakpointNameImpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBBreakpointName</name> <block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><call><name>SBBreakpointName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBBreakpointName</name><argument_list>(<argument><expr><name>SBTarget</name> <operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBBreakpointName</name><argument_list>(<argument><expr><name>SBBreakpoint</name> <operator>&amp;</operator><name>bkpt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBBreakpointName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBreakpointName</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBBreakpointName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBreakpointName</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBreakpointName</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBreakpointName</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBreakpointName</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsEnabled</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetOneShot</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>one_shot</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsOneShot</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetIgnoreCount</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetIgnoreCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetCondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>condition</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetCondition</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetAutoContinue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_continue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetAutoContinue</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetThreadID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>sb_thread_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <call><name>GetThreadID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetThreadIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetThreadIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetThreadName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetThreadName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetQueueName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queue_name</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetQueueName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetCallback</name><parameter_list>(<parameter><decl><type><name>SBBreakpointHitCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetScriptCallbackFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>callback_function_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetScriptCallbackFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>callback_function_name</name></decl></parameter>,
<parameter><decl><type><name>SBStructuredData</name> <modifier>&amp;</modifier></type><name>extra_args</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetCommandLineCommands</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>commands</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetCommandLineCommands</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>commands</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBError</name></type> <name>SetScriptCallbackBody</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script_body_text</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetHelpString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetHelpString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help_string</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetAllowList</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>SetAllowList</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetAllowDelete</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetAllowDelete</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetAllowDisable</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetAllowDisable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>BreakpointName</name> <operator>*</operator><macro><name>GetBreakpointName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>UpdateName</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>BreakpointName</name> <operator>&amp;</operator><name>bp_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SBBreakpointNameImpl</name></expr></argument>&gt;</argument_list></name> <name>m_impl_up</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
