<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/ScriptInterpreter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_SCRIPTINTERPRETER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_SCRIPTINTERPRETER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Communication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SearchFilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/StreamFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/PseudoTerminal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/ScriptedProcessInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ScriptInterpreterLocker</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ScriptInterpreterLocker</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ScriptInterpreterLocker</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ScriptInterpreterLocker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScriptInterpreterLocker</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScriptInterpreterLocker</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ScriptInterpreterLocker</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ExecuteScriptOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ExecuteScriptOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetEnableIO</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_enable_io</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetSetLLDBGlobals</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_set_lldb_globals</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>GetMaskoutErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_maskout_errors</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ExecuteScriptOptions</name> <modifier>&amp;</modifier></type><name>SetEnableIO</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_enable_io</name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ExecuteScriptOptions</name> <modifier>&amp;</modifier></type><name>SetSetLLDBGlobals</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_set_lldb_globals</name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ExecuteScriptOptions</name> <modifier>&amp;</modifier></type><name>SetMaskoutErrors</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>maskout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_maskout_errors</name> <operator>=</operator> <name>maskout</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>m_enable_io</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_set_lldb_globals</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_maskout_errors</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LoadScriptOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>LoadScriptOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetInitSession</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_init_session</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>GetSilent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_silent</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>LoadScriptOptions</name> <modifier>&amp;</modifier></type><name>SetInitSession</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_init_session</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>LoadScriptOptions</name> <modifier>&amp;</modifier></type><name>SetSilent</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_silent</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>m_init_session</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_silent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ScriptInterpreterIORedirect</name> <block>{<block_content>
<label><name>public</name>:</label>



<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ScriptInterpreterIORedirect</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>Create</name><argument_list>(<argument>bool enable_io</argument>, <argument>Debugger &amp;debugger</argument>, <argument>CommandReturnObject *result</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ScriptInterpreterIORedirect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <macro><name>GetInputFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_input_file_sp</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <macro><name>GetOutputFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_output_file_sp</name><operator>-&gt;</operator><name>GetFileSP</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <macro><name>GetErrorFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_error_file_sp</name><operator>-&gt;</operator><name>GetFileSP</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>Flush</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ScriptInterpreterIORedirect</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>input</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ScriptInterpreterIORedirect</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><name>CommandReturnObject</name> <operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>m_input_file_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <name>m_output_file_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <name>m_error_file_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Communication</name></type> <name>m_communication</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_disconnect</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ScriptInterpreter</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>ScriptReturnType</name> <block>{
<expr><name>eScriptReturnTypeCharPtr</name></expr>,
<expr><name>eScriptReturnTypeBool</name></expr>,
<expr><name>eScriptReturnTypeShortInt</name></expr>,
<expr><name>eScriptReturnTypeShortIntUnsigned</name></expr>,
<expr><name>eScriptReturnTypeInt</name></expr>,
<expr><name>eScriptReturnTypeIntUnsigned</name></expr>,
<expr><name>eScriptReturnTypeLongInt</name></expr>,
<expr><name>eScriptReturnTypeLongIntUnsigned</name></expr>,
<expr><name>eScriptReturnTypeLongLong</name></expr>,
<expr><name>eScriptReturnTypeLongLongUnsigned</name></expr>,
<expr><name>eScriptReturnTypeFloat</name></expr>,
<expr><name>eScriptReturnTypeDouble</name></expr>,
<expr><name>eScriptReturnTypeChar</name></expr>,
<expr><name>eScriptReturnTypeCharStrOrNone</name></expr>,
<expr><name>eScriptReturnTypeOpaqueObject</name></expr>
}</block></expr>;

<macro><name>ScriptInterpreter</name><argument_list>(
<argument>Debugger &amp;debugger</argument>, <argument>lldb::ScriptLanguage script_lang</argument>,
<argument>lldb::ScriptedProcessInterfaceUP scripted_process_interface_up =
std::make_unique&lt;ScriptedProcessInterface&gt;()</argument>)</argument_list></macro>;

<expr><operator>~</operator><macro><name>ScriptInterpreter</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>Interrupt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>virtual</name> <name>bool</name> <macro><name>ExecuteOneLine</name><argument_list>(
<argument>llvm::StringRef command</argument>, <argument>CommandReturnObject *result</argument>,
<argument>const ExecuteScriptOptions &amp;options = ExecuteScriptOptions()</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>ExecuteInterpreterLoop</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>ExecuteOneLineWithReturn</name><argument_list>(
<argument>llvm::StringRef in_string</argument>, <argument>ScriptReturnType return_type</argument>, <argument>void *ret_value</argument>,
<argument>const ExecuteScriptOptions &amp;options = ExecuteScriptOptions()</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>Status</name> <macro><name>ExecuteMultipleLines</name><argument_list>(
<argument>const char *in_string</argument>,
<argument>const ExecuteScriptOptions &amp;options = ExecuteScriptOptions()</argument>)</argument_list></macro> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"not implemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>

<name>virtual</name> <name>Status</name>
<macro><name>ExportFunctionDefinitionToInterpreter</name><argument_list>(<argument>StringList &amp;function_def</argument>)</argument_list></macro> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"not implemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>

<name>virtual</name> <name>Status</name> <macro><name>GenerateBreakpointCommandCallbackData</name><argument_list>(
<argument>StringList &amp;input</argument>,
<argument>std::string &amp;output</argument>,
<argument>bool has_extra_args</argument>)</argument_list></macro> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"not implemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GenerateWatchpointCommandCallbackData</name><argument_list>(<argument>StringList &amp;input</argument>,
<argument>std::string &amp;output</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GenerateTypeScriptFunction</name><argument_list>(<argument>const char *oneliner</argument>,
<argument>std::string &amp;output</argument>,
<argument>const void *name_token = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GenerateTypeScriptFunction</name><argument_list>(<argument>StringList &amp;input</argument>,
<argument>std::string &amp;output</argument>,
<argument>const void *name_token = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GenerateScriptAliasFunction</name><argument_list>(<argument>StringList &amp;input</argument>,
<argument>std::string &amp;output</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GenerateTypeSynthClass</name><argument_list>(<argument>StringList &amp;input</argument>, <argument>std::string &amp;output</argument>,
<argument>const void *name_token = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GenerateTypeSynthClass</name><argument_list>(<argument>const char *oneliner</argument>, <argument>std::string &amp;output</argument>,
<argument>const void *name_token = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name>
<macro><name>CreateSyntheticScriptedProvider</name><argument_list>(<argument>const char *class_name</argument>,
<argument>lldb::ValueObjectSP valobj</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>GenericSP</name>
<macro><name>CreateScriptCommandObject</name><argument_list>(<argument>const char *class_name</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>GenericSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>GenericSP</name>
<macro><name>CreateFrameRecognizer</name><argument_list>(<argument>const char *class_name</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>GenericSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectListSP</name> <macro><name>GetRecognizedArguments</name><argument_list>(
<argument>const StructuredData::ObjectSP &amp;implementor</argument>,
<argument>lldb::StackFrameSP frame_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ValueObjectListSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>GenericSP</name>
<macro><name>OSPlugin_CreatePluginObject</name><argument_list>(<argument>const char *class_name</argument>,
<argument>lldb::ProcessSP process_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>GenericSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>DictionarySP</name>
<macro><name>OSPlugin_RegisterInfo</name><argument_list>(<argument>StructuredData::ObjectSP os_plugin_object_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>DictionarySP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ArraySP</name>
<macro><name>OSPlugin_ThreadsInfo</name><argument_list>(<argument>StructuredData::ObjectSP os_plugin_object_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ArraySP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>StringSP</name>
<macro><name>OSPlugin_RegisterContextData</name><argument_list>(<argument>StructuredData::ObjectSP os_plugin_object_sp</argument>,
<argument>lldb::tid_t thread_id</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>StringSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>DictionarySP</name>
<macro><name>OSPlugin_CreateThread</name><argument_list>(<argument>StructuredData::ObjectSP os_plugin_object_sp</argument>,
<argument>lldb::tid_t tid</argument>, <argument>lldb::addr_t context</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>DictionarySP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name>
<macro><name>CreateScriptedThreadPlan</name><argument_list>(<argument>const char *class_name</argument>,
<argument>StructuredDataImpl *args_data</argument>,
<argument>std::string &amp;error_str</argument>,
<argument>lldb::ThreadPlanSP thread_plan_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name>
<macro><name>ScriptedThreadPlanExplainsStop</name><argument_list>(<argument>StructuredData::ObjectSP implementor_sp</argument>,
<argument>Event *event</argument>, <argument>bool &amp;script_error</argument>)</argument_list></macro> <block>{
<expr><name>script_error</name> <operator>=</operator> <name>true</name></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name>
<macro><name>ScriptedThreadPlanShouldStop</name><argument_list>(<argument>StructuredData::ObjectSP implementor_sp</argument>,
<argument>Event *event</argument>, <argument>bool &amp;script_error</argument>)</argument_list></macro> <block>{
<expr><name>script_error</name> <operator>=</operator> <name>true</name></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name>
<macro><name>ScriptedThreadPlanIsStale</name><argument_list>(<argument>StructuredData::ObjectSP implementor_sp</argument>,
<argument>bool &amp;script_error</argument>)</argument_list></macro> <block>{
<expr><name>script_error</name> <operator>=</operator> <name>true</name></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>StateType</name>
<macro><name>ScriptedThreadPlanGetRunState</name><argument_list>(<argument>StructuredData::ObjectSP implementor_sp</argument>,
<argument>bool &amp;script_error</argument>)</argument_list></macro> <block>{
<expr><name>script_error</name> <operator>=</operator> <name>true</name></expr>;
<return>return <expr><name>lldb</name><operator>::</operator><name>eStateStepping</name></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>GenericSP</name>
<macro><name>CreateScriptedBreakpointResolver</name><argument_list>(<argument>const char *class_name</argument>,
<argument>StructuredDataImpl *args_data</argument>,
<argument>lldb::BreakpointSP &amp;bkpt_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>GenericSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name>
<macro><name>ScriptedBreakpointResolverSearchCallback</name><argument_list>(<argument>StructuredData::GenericSP implementor_sp</argument>,
<argument>SymbolContext *sym_ctx</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>SearchDepth</name>
<macro><name>ScriptedBreakpointResolverSearchDepth</name><argument_list>(<argument>StructuredData::GenericSP implementor_sp</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>lldb</name><operator>::</operator><name>eSearchDepthModule</name></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>GenericSP</name>
<macro><name>CreateScriptedStopHook</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>, <argument>const char *class_name</argument>,
<argument>StructuredDataImpl *args_data</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"Creating scripted stop-hooks with the current "</literal>
<literal type="string">"script interpreter is not supported."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>GenericSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>



<name>virtual</name> <name>bool</name>
<macro><name>ScriptedStopHookHandleStop</name><argument_list>(<argument>StructuredData::GenericSP implementor_sp</argument>,
<argument>ExecutionContext &amp;exc_ctx</argument>,
<argument>lldb::StreamSP stream_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name>
<macro><name>LoadPluginModule</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>lldb_private::Status &amp;error</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>StructuredData</name><operator>::</operator><name>DictionarySP</name>
<macro><name>GetDynamicSettings</name><argument_list>(<argument>StructuredData::ObjectSP plugin_module_sp</argument>, <argument>Target *target</argument>,
<argument>const char *setting_name</argument>, <argument>lldb_private::Status &amp;error</argument>)</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>DictionarySP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>Status</name> <macro><name>GenerateFunction</name><argument_list>(<argument>const char *signature</argument>,
<argument>const StringList &amp;input</argument>)</argument_list></macro> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <call><name>CollectDataForBreakpointCommandCallback</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointOptions</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name>
<call><name>CollectDataForWatchpointCommandCallback</name><argument_list>(<argument><expr><name>WatchpointOptions</name> <operator>*</operator><name>wp_options</name></expr></argument>,
<argument><expr><name>CommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;


<expr><name>Status</name> <call><name>SetBreakpointCommandCallback</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointOptions</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>bp_options_vec</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>callback_text</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>SetBreakpointCommandCallback</name><argument_list>(<argument>BreakpointOptions &amp;bp_options</argument>,
<argument>const char *callback_text</argument>)</argument_list></macro> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>


<name>virtual</name> <name>Status</name> <macro><name>SetBreakpointCommandCallback</name><argument_list>(
<argument>BreakpointOptions &amp;bp_options</argument>,
<argument>std::unique_ptr&lt;BreakpointOptions::CommandData&gt; &amp;data_up</argument>)</argument_list></macro> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>

<name>Status</name> <macro><name>SetBreakpointCommandCallbackFunction</name><argument_list>(
<argument>std::vector&lt;std::reference_wrapper&lt;BreakpointOptions&gt;&gt; &amp;bp_options_vec</argument>,
<argument>const char *function_name</argument>, <argument>StructuredData::ObjectSP extra_args_sp</argument>)</argument_list></macro></expr>;


<expr><name>virtual</name> <name>Status</name>
<macro><name>SetBreakpointCommandCallbackFunction</name><argument_list>(<argument>BreakpointOptions &amp;bp_options</argument>,
<argument>const char *function_name</argument>,
<argument>StructuredData::ObjectSP extra_args_sp</argument>)</argument_list></macro> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>


<name>virtual</name> <name>void</name> <macro><name>SetWatchpointCommandCallback</name><argument_list>(<argument>WatchpointOptions *wp_options</argument>,
<argument>const char *oneliner</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>bool</name> <macro><name>GetScriptedSummary</name><argument_list>(<argument>const char *function_name</argument>,
<argument>lldb::ValueObjectSP valobj</argument>,
<argument>StructuredData::ObjectSP &amp;callee_wrapper_sp</argument>,
<argument>const TypeSummaryOptions &amp;options</argument>,
<argument>std::string &amp;retval</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <block>{

}</block>

<name>virtual</name> <name>size_t</name>
<macro><name>CalculateNumChildren</name><argument_list>(<argument>const StructuredData::ObjectSP &amp;implementor</argument>,
<argument>uint32_t max</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>GetChildAtIndex</name><argument_list>(<argument>const StructuredData::ObjectSP &amp;implementor</argument>, <argument>uint32_t idx</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ValueObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>int</name>
<macro><name>GetIndexOfChildWithName</name><argument_list>(<argument>const StructuredData::ObjectSP &amp;implementor</argument>,
<argument>const char *child_name</argument>)</argument_list></macro> <block>{
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name>
<macro><name>UpdateSynthProviderInstance</name><argument_list>(<argument>const StructuredData::ObjectSP &amp;implementor</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>MightHaveChildrenSynthProviderInstance</name><argument_list>(
<argument>const StructuredData::ObjectSP &amp;implementor</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>GetSyntheticValue</name><argument_list>(<argument>const StructuredData::ObjectSP &amp;implementor</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>virtual</name> <name>ConstString</name>
<macro><name>GetSyntheticTypeName</name><argument_list>(<argument>const StructuredData::ObjectSP &amp;implementor</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name>
<macro><name>RunScriptBasedCommand</name><argument_list>(<argument>const char *impl_function</argument>, <argument>llvm::StringRef args</argument>,
<argument>ScriptedCommandSynchronicity synchronicity</argument>,
<argument>lldb_private::CommandReturnObject &amp;cmd_retobj</argument>,
<argument>Status &amp;error</argument>,
<argument>const lldb_private::ExecutionContext &amp;exe_ctx</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>RunScriptBasedCommand</name><argument_list>(
<argument>StructuredData::GenericSP impl_obj_sp</argument>, <argument>llvm::StringRef args</argument>,
<argument>ScriptedCommandSynchronicity synchronicity</argument>,
<argument>lldb_private::CommandReturnObject &amp;cmd_retobj</argument>, <argument>Status &amp;error</argument>,
<argument>const lldb_private::ExecutionContext &amp;exe_ctx</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>RunScriptFormatKeyword</name><argument_list>(<argument>const char *impl_function</argument>,
<argument>Process *process</argument>, <argument>std::string &amp;output</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>RunScriptFormatKeyword</name><argument_list>(<argument>const char *impl_function</argument>, <argument>Thread *thread</argument>,
<argument>std::string &amp;output</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>RunScriptFormatKeyword</name><argument_list>(<argument>const char *impl_function</argument>, <argument>Target *target</argument>,
<argument>std::string &amp;output</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>RunScriptFormatKeyword</name><argument_list>(<argument>const char *impl_function</argument>,
<argument>StackFrame *frame</argument>, <argument>std::string &amp;output</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>RunScriptFormatKeyword</name><argument_list>(<argument>const char *impl_function</argument>,
<argument>ValueObject *value</argument>, <argument>std::string &amp;output</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorString</name></name><argument_list>(<argument><expr><literal type="string">"unimplemented"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GetDocumentationForItem</name><argument_list>(<argument>const char *item</argument>, <argument>std::string &amp;dest</argument>)</argument_list></macro> <block>{
<expr><call><name><name>dest</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name>
<macro><name>GetShortHelpForCommandObject</name><argument_list>(<argument>StructuredData::GenericSP cmd_obj_sp</argument>,
<argument>std::string &amp;dest</argument>)</argument_list></macro> <block>{
<expr><call><name><name>dest</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>uint32_t</name>
<macro><name>GetFlagsForCommandObject</name><argument_list>(<argument>StructuredData::GenericSP cmd_obj_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GetLongHelpForCommandObject</name><argument_list>(<argument>StructuredData::GenericSP cmd_obj_sp</argument>,
<argument>std::string &amp;dest</argument>)</argument_list></macro> <block>{
<expr><call><name><name>dest</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>CheckObjectExists</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>virtual</name> <name>bool</name>
<macro><name>LoadScriptingModule</name><argument_list>(<argument>const char *filename</argument>, <argument>const LoadScriptOptions &amp;options</argument>,
<argument>lldb_private::Status &amp;error</argument>,
<argument>StructuredData::ObjectSP *module_sp = nullptr</argument>,
<argument>FileSpec extra_search_dir = {}</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>IsReservedWord</name><argument_list>(<argument>const char *word</argument>)</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ScriptInterpreterLocker</name></expr></argument>&gt;</argument_list></name> <call><name>AcquireInterpreterLock</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetScriptInterpreterPtyName</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetMaxPositionalArgumentsForCallable</name><argument_list>(<argument>const llvm::StringRef &amp;callable_name</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>createStringError</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unimplemented function"</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>LanguageToString</name><argument_list>(<argument>lldb::ScriptLanguage language</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <call><name>StringToLanguage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>string</name></expr></argument>)</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_script_lang</name></expr>;</return> }</block>

<name>ScriptedProcessInterface</name> <operator>&amp;</operator><macro><name>GetScriptedProcessInterface</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><operator>*</operator><name>m_scripted_process_interface_up</name></expr>;</return>
}</block>

<name>lldb</name><operator>::</operator><name>DataExtractorSP</name>
<macro><name>GetDataExtractorFromSBData</name><argument_list>(<argument>const lldb::SBData &amp;data</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>Status</name> <macro><name>GetStatusFromSBError</name><argument_list>(<argument>const lldb::SBError &amp;error</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>
<name>Debugger</name> <operator>&amp;</operator><name>m_debugger</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <name>m_script_lang</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>ScriptedProcessInterfaceUP</name> <name>m_scripted_process_interface_up</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
