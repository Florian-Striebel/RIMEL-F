<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBCommandInterpreter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBCOMMANDINTERPRETER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBCOMMANDINTERPRETER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDebugger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBCommandInterpreter</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <block>{
<decl><name>eBroadcastBitThreadShouldExit</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitResetPrompt</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitQuitCommandReceived</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitAsynchronousOutputData</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitAsynchronousErrorData</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>SBCommandInterpreter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCommandInterpreter</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBCommandInterpreter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCommandInterpreter</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCommandInterpreter</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GetArgumentTypeAsCString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>CommandArgumentType</name> <name>arg_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GetArgumentDescriptionAsCString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>CommandArgumentType</name> <name>arg_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>EventIsCommandInterpreterEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>CommandExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AliasExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <call><name>GetBroadcaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>HasCommands</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>HasAliases</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>HasAliasOptions</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <call><name>GetProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBDebugger</name> <call><name>GetDebugger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddMultiwordCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandPluginInterface</name> <operator>*</operator><name>impl</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandPluginInterface</name> <operator>*</operator><name>impl</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandPluginInterface</name> <operator>*</operator><name>impl</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>syntax</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>auto_repeat_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SourceInitFileInHomeDirectory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>SourceInitFileInHomeDirectory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_repl</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>SourceInitFileInCurrentWorkingDirectory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandReturnObject</name> <operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ReturnStatus</name> <macro><name>HandleCommand</name><argument_list>(<argument>const char *command_line</argument>,
<argument>lldb::SBCommandReturnObject &amp;result</argument>,
<argument>bool add_to_history = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ReturnStatus</name> <macro><name>HandleCommand</name><argument_list>(<argument>const char *command_line</argument>,
<argument>SBExecutionContext &amp;exe_ctx</argument>,
<argument>SBCommandReturnObject &amp;result</argument>,
<argument>bool add_to_history = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleCommandsFromFile</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBExecutionContext</name> <operator>&amp;</operator><name>override_context</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandInterpreterRunOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandReturnObject</name> <name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>


















<decl_stmt><decl><type><name>int</name></type> <name>HandleCompletion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>current_line</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cursor</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>last_char</name></expr></argument>, <argument><expr><name>int</name> <name>match_start_point</name></expr></argument>,
<argument><expr><name>int</name> <name>max_return_elements</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>HandleCompletion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>current_line</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>cursor_pos</name></expr></argument>,
<argument><expr><name>int</name> <name>match_start_point</name></expr></argument>, <argument><expr><name>int</name> <name>max_return_elements</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>HandleCompletionWithDescriptions</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>current_line</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>last_char</name></expr></argument>,
<argument><expr><name>int</name> <name>match_start_point</name></expr></argument>, <argument><expr><name>int</name> <name>max_return_elements</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>matches</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>descriptions</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>HandleCompletionWithDescriptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>current_line</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>cursor_pos</name></expr></argument>,
<argument><expr><name>int</name> <name>match_start_point</name></expr></argument>,
<argument><expr><name>int</name> <name>max_return_elements</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>matches</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBStringList</name> <operator>&amp;</operator><name>descriptions</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>WasInterrupted</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>SetCommandOverrideCallback</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>command_name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>CommandOverrideCallback</name> <name>callback</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SBCommandInterpreter</name><argument_list>(
<argument><expr><name>lldb_private</name><operator>::</operator><name>CommandInterpreter</name> <operator>*</operator><name>interpreter_ptr</name> <operator>=</operator>
<name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<function_decl><type><name>bool</name></type> <name>IsActive</name><parameter_list>()</parameter_list>;</function_decl>
















<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetIOHandlerControlSequence</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetPromptOnQuit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetPromptOnQuit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>AllowExitCodeOnQuit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allow</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>HasCustomQuitExitCode</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>GetQuitStatus</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>ResolveCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_line</name></decl></parameter>, <parameter><decl><type><name>SBCommandReturnObject</name> <modifier>&amp;</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>CommandInterpreter</name> <operator>&amp;</operator><call><name>ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>CommandInterpreter</name> <operator>*</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>reset</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>CommandInterpreter</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>CommandInterpreter</name> <operator>*</operator><name>m_opaque_ptr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SBCommandPluginInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>SBCommandPluginInterface</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>DoExecute</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBDebugger</name></expr></argument> , <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument> ,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandReturnObject</name> <operator>&amp;</operator></expr></argument> )</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SBCommand</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetHelp</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetHelpLong</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetHelp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetHelpLong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetFlags</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetFlags</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddMultiwordCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandPluginInterface</name> <operator>*</operator><name>impl</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandPluginInterface</name> <operator>*</operator><name>impl</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>syntax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>































<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommand</name> <call><name>AddCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBCommandPluginInterface</name> <operator>*</operator><name>impl</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>help</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>syntax</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>auto_repeat_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBCommandInterpreter</name></decl>;</decl_stmt>

<macro><name>SBCommand</name><argument_list>(<argument>lldb::CommandObjectSP cmd_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>CommandObjectSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
