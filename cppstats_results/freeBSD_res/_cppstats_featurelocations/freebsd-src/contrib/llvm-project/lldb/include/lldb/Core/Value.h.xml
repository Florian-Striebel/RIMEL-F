<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Value.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_VALUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_VALUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataBufferHeap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APInt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Variable</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Value</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ValueType</name> <block>{<block_content>
<expr_stmt><expr><name>Invalid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator>


<expr><name>Scalar</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>

<expr><name>FileAddress</name></expr><operator>,</operator>

<expr><name>LoadAddress</name></expr><operator>,</operator>


<expr><name>HostAddress</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ContextType</name> <block>{<block_content>


<expr_stmt><expr><name>Invalid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator>

<expr><name>RegisterInfo</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>

<expr><name>LLDBType</name></expr><operator>,</operator>

<expr><name>Variable</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>Value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Value</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Scalar</name> <operator>&amp;</operator><name>scalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>Value</name><argument_list>(<argument>const void *bytes</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>Value</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Value</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetBytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AppendBytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Value</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Value</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>GetCompilerType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetCompilerType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>compiler_type</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>ValueType</name> <macro><name>GetValueType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>AddressType</name> <macro><name>GetValueAddressType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ContextType</name> <macro><name>GetContextType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_context_type</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetValueType</name><parameter_list>(<parameter><decl><type><name>ValueType</name></type> <name>value_type</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_value_type</name> <operator>=</operator> <name>value_type</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ClearContext</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_context</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_context_type</name> <operator>=</operator> <name>ContextType</name><operator>::</operator><name>Invalid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetContext</name><parameter_list>(<parameter><decl><type><name>ContextType</name></type> <name>context_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_context_type</name> <operator>=</operator> <name>context_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_context</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m_context_type</name> <operator>==</operator> <name>ContextType</name><operator>::</operator><name>RegisterInfo</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RegisterInfo</name> <modifier>*</modifier></type><name>reg_info</name> <init>= <expr><call><name>GetRegisterInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reg_info</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eEncodingVector</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetValueType</name><argument_list>(<argument><expr><name>ValueType</name><operator>::</operator><name>Scalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>RegisterInfo</name> <operator>*</operator><macro><name>GetRegisterInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>Type</name> <modifier>*</modifier></type><name>GetType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>Scalar</name> <modifier>&amp;</modifier></type><name>ResolveValue</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>Scalar</name> <operator>&amp;</operator><macro><name>GetScalar</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_value</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>Scalar</name> <modifier>&amp;</modifier></type><name>GetScalar</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_value</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>size_t</name></type> <name>ResizeData</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>AppendDataToHostBuffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Value</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>DataBufferHeap</name> <modifier>&amp;</modifier></type><name>GetBuffer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_data_buffer</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>DataBufferHeap</name> <operator>&amp;</operator><macro><name>GetBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_data_buffer</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>bool</name></type> <name>ValueOf</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Variable</name> <modifier>*</modifier></type><name>GetVariable</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <call><name>GetValueDefaultFormat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint64_t</name></type> <name>GetValueByteSize</name><parameter_list>(<parameter><decl><type><name>Status</name> <modifier>*</modifier></type><name>error_ptr</name></decl></parameter>, <parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>GetValueAsData</name><parameter_list>(<parameter><decl><type><name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><name>DataExtractor</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetValueTypeAsCString</name><parameter_list>(<parameter><decl><type><name>ValueType</name></type> <name>context_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetContextTypeAsCString</name><parameter_list>(<parameter><decl><type><name>ContextType</name></type> <name>context_type</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ConvertToLoadAddress</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>Target</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetData</name><parameter_list>(<parameter><decl><type><name>DataExtractor</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Scalar</name></type> <name>m_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_compiler_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_context</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueType</name></type> <name>m_value_type</name> <init>= <expr><name>ValueType</name><operator>::</operator><name>Scalar</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ContextType</name></type> <name>m_context_type</name> <init>= <expr><name>ContextType</name><operator>::</operator><name>Invalid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataBufferHeap</name></type> <name>m_data_buffer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ValueList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ValueList</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_values</name><argument_list>()</argument_list></macro> <block>{}</block>

<call><name>ValueList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ValueList</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ValueList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ValueList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>PushValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Value</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>Value</name> <modifier>*</modifier></type><name>GetValueAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Value</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>collection</name></type> <name>m_values</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
