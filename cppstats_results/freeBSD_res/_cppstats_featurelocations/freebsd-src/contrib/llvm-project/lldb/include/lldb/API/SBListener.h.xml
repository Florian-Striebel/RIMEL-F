<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBListener.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBLISTENER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBLISTENER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBListener</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBListener</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBListener</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBListener</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBListener</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBListener</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>StartListeningForEventClass</name><parameter_list>(<parameter><decl><type><name>SBDebugger</name> <modifier>&amp;</modifier></type><name>debugger</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>broadcaster_class</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>event_mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>StopListeningForEventClass</name><parameter_list>(<parameter><decl><type><name>SBDebugger</name> <modifier>&amp;</modifier></type><name>debugger</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>broadcaster_class</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>event_mask</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>StartListeningForEvents</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>event_mask</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>StopListeningForEvents</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>event_mask</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>WaitForEvent</name><argument_list>(<argument><expr><name>uint32_t</name> <name>num_seconds</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WaitForEventForBroadcaster</name><argument_list>(<argument><expr><name>uint32_t</name> <name>num_seconds</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WaitForEventForBroadcasterWithType</name><argument_list>(
<argument><expr><name>uint32_t</name> <name>num_seconds</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>event_type_mask</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>PeekAtNextEvent</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>PeekAtNextEventForBroadcaster</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>PeekAtNextEventForBroadcasterWithType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>event_type_mask</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetNextEvent</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetNextEventForBroadcaster</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>GetNextEventForBroadcasterWithType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <operator>&amp;</operator><name>broadcaster</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>event_type_mask</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>sb_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>HandleBroadcastEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBAttachInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBroadcaster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBCommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBDebugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBLaunchInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SBListener</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ListenerSP</name> <operator>&amp;</operator><name>listener_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <call><name>GetSP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Listener</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const</block></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Listener</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>reset</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>listener_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ListenerSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Listener</name> <operator>*</operator><name>m_unused_ptr</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
