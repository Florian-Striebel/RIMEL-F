<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ProcessTrace.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_PROCESSTRACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_PROCESSTRACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/PostMortemProcess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>ProcessTrace</name> <range>: <expr><name>public</name> <name>PostMortemProcess</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>void</name> <call><name>Initialize</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>Terminate</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>ConstString</name> <call><name>GetPluginNameStatic</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetPluginDescriptionStatic</name><argument_list>()</argument_list></call></expr>;

<macro><name>ProcessTrace</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>, <argument>lldb::ListenerSP listener_sp</argument>)</argument_list></macro>;

<expr><operator>~</operator><macro><name>ProcessTrace</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CanDebug</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>,
<argument>bool plugin_specified_by_name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>DidAttach</name><argument_list>(<argument>ArchSpec &amp;process_arch</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>DynamicLoader</name> <operator>*</operator><macro><name>GetDynamicLoader</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>

<name>SystemRuntime</name> <operator>*</operator><macro><name>GetSystemRuntime</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>

<name>ConstString</name> <macro><name>GetPluginName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>uint32_t</name> <macro><name>GetPluginVersion</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>DoDestroy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>RefreshStateAfterStop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>WillResume</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><name>Status</name> <name>error</name></expr>;
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"error: %s does not support resuming processes"</literal></expr></argument>,
<argument><expr><call><name>GetPluginName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>error</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>WarnBeforeDetach</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>size_t</name> <macro><name>ReadMemory</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>void *buf</argument>, <argument>size_t size</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>DoReadMemory</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>void *buf</argument>, <argument>size_t size</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ArchSpec</name> <call><name>GetArchitecture</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetProcessInfo</name><argument_list>(<argument>ProcessInstanceInfo &amp;info</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <call><name>Clear</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>DoUpdateThreadList</name><argument_list>(<argument>ThreadList &amp;old_thread_list</argument>,
<argument>ThreadList &amp;new_thread_list</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>CreateInstance</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>,
<argument>lldb::ListenerSP listener_sp</argument>,
<argument>const FileSpec *crash_file_path</argument>,
<argument>bool can_connect</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
