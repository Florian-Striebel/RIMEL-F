<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/SourceLocationSpec.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_UTILITY_SOURCELOCATIONSPEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_UTILITY_SOURCELOCATIONSPEC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Declaration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>SourceLocationSpec</name> <block>{<block_content>
<label><name>public</name>:</label>




















<decl_stmt><decl><type><name>explicit</name></type> <name>SourceLocationSpec</name><argument_list>(<argument><expr><name>FileSpec</name> <name>file_spec</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name> <name>column</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>None</name></expr></argument>,
<argument><expr><name>bool</name> <name>check_inlines</name> <operator>=</operator> <name>false</name></expr></argument>,
<argument><expr><name>bool</name> <name>exact_match</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SourceLocationSpec</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>















<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>















<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>












<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocationSpec</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>












<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocationSpec</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>












<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocationSpec</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>























<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceLocationSpec</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceLocationSpec</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceLocationSpec</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceLocationSpec</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>full</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>FileSpec</name> <macro><name>GetFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_declaration</name><operator>.</operator><name>GetFile</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetLine</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetCheckInlines</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_check_inlines</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetExactMatch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_exact_match</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Declaration</name></type> <name>m_declaration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_check_inlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_exact_match</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>Stream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>Stream</name> <operator>&amp;</operator><name>s</name><operator>,</operator> <specifier>const</specifier> <name>SourceLocationSpec</name> <operator>&amp;</operator><name>loc</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
