<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/ValueObjectSyntheticFilter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_VALUEOBJECTSYNTHETICFILTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_VALUEOBJECTSYNTHETICFILTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Declaration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SyntheticChildrenFrontEnd</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ValueObjectSynthetic</name> <range>: <expr><name>public</name> <name>ValueObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>ValueObjectSynthetic</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ConstString</name> <macro><name>GetTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ConstString</name> <macro><name>GetQualifiedTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ConstString</name> <macro><name>GetDisplayTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>MightHaveChildren</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>CalculateNumChildren</name><argument_list>(<argument>uint32_t max</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueType</name> <macro><name>GetValueType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetChildAtIndex</name><argument_list>(<argument>size_t idx</argument>, <argument>bool can_create</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetChildMemberWithName</name><argument_list>(<argument>ConstString name</argument>,
<argument>bool can_create</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>GetIndexOfChildWithName</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>GetDynamicValue</name><argument_list>(<argument>lldb::DynamicValueType valueType</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsInScope</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>HasSyntheticValue</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>IsSynthetic</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>CalculateSyntheticValue</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

<name>bool</name> <macro><name>IsDynamic</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><name>m_parent</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator> <operator>?</operator> <call><name><name>m_parent</name><operator>-&gt;</operator><name>IsDynamic</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>false</name><operator>)</operator></expr>;</return>
}</block>

<name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetStaticValue</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_parent</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_parent</name><operator>-&gt;</operator><name>GetStaticValue</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>GetSP</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
}</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>DynamicValueType</name> <macro><name>GetDynamicValueType</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_parent</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_parent</name><operator>-&gt;</operator><name>GetDynamicValueType</name></name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><name>lldb</name><operator>::</operator><name>eNoDynamicValues</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block>

<name>ValueObject</name> <operator>*</operator><macro><name>GetParent</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_parent</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_parent</name><operator>-&gt;</operator><name>GetParent</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block>

<specifier>const</specifier> <name>ValueObject</name> <operator>*</operator><macro><name>GetParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_parent</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_parent</name><operator>-&gt;</operator><name>GetParent</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block>

<name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetNonSyntheticValue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CanProvideValue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>DoesProvideSyntheticValue</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><operator>(</operator><call><name>UpdateValueIfNeeded</name><argument_list>()</argument_list></call>, <name>m_provides_value</name> <operator>==</operator> <name>eLazyBoolYes</name><operator>)</operator></expr>;</return>
}</block>

<name>bool</name> <macro><name>GetIsConstant</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>SetValueFromCString</name><argument_list>(<argument>const char *value_str</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>SetFormat</name><argument_list>(<argument>lldb::Format format</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetPreferredDisplayLanguage</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <call><name>SetPreferredDisplayLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>IsSyntheticChildrenGenerated</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>SetSyntheticChildrenGenerated</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>GetDeclaration</name><argument_list>(<argument>Declaration &amp;decl</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>uint64_t</name> <macro><name>GetLanguageFlags</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>SetLanguageFlags</name><argument_list>(<argument>uint64_t flags</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>UpdateValue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>LazyBool</name> <macro><name>CanUpdateWithInvalidExecutionContext</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>eLazyBoolYes</name></expr>;</return>
}</block>

<name>CompilerType</name> <macro><name>GetCompilerTypeImpl</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>CreateSynthFilter</name><argument_list>()</argument_list></call></expr>;



<expr><name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name> <name>m_synth_sp</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildrenFrontEnd</name></expr></argument>&gt;</argument_list></name> <name>m_synth_filter_up</name></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>ValueObject</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ByIndexMap</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>NameToIndexMap</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name></expr></argument>&gt;</argument_list></name> <name>SyntheticChildrenCache</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>ByIndexMap</name><operator>::</operator><name>iterator</name> <name>ByIndexIterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>NameToIndexMap</name><operator>::</operator><name>iterator</name> <name>NameToIndexIterator</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_child_mutex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ByIndexMap</name></type> <name>m_children_byindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NameToIndexMap</name></type> <name>m_name_toindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SyntheticChildrenCache</name></type> <name>m_synthetic_children_cache</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_synthetic_children_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_parent_type_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_might_have_children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_provides_value</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ValueObject</name></decl>;</decl_stmt>
<macro><name>ValueObjectSynthetic</name><argument_list>(<argument>ValueObject &amp;parent</argument>, <argument>lldb::SyntheticChildrenSP filter</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>CopyValueData</name><parameter_list>(<parameter><decl><type><name>ValueObject</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>ValueObjectSynthetic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueObjectSynthetic</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ValueObjectSynthetic</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ValueObjectSynthetic</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
