<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointResolverFileRegex.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTRESOLVERFILEREGEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTRESOLVERFILEREGEX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointResolver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>BreakpointResolverFileRegex</name> <range>: <expr><name>public</name> <name>BreakpointResolver</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>BreakpointResolverFileRegex</name><argument_list>(
<argument>const lldb::BreakpointSP &amp;bkpt</argument>, <argument>RegularExpression regex</argument>,
<argument>const std::unordered_set&lt;std::string&gt; &amp;func_name_set</argument>, <argument>bool exact_match</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>BreakpointResolver</name> <operator>*</operator>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointSP</name> <operator>&amp;</operator><name>bkpt</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>options_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><operator>~</operator><macro><name>BreakpointResolverFileRegex</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>Searcher</name><operator>::</operator><name>CallbackReturn</name> <macro><name>SearchCallback</name><argument_list>(<argument>SearchFilter &amp;filter</argument>,
<argument>SymbolContext &amp;context</argument>,
<argument>Address *addr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>SearchDepth</name> <macro><name>GetDepth</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <call><name>AddFunctionName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>func_name</name></expr></argument>)</argument_list></call></expr>;


<expr><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const BreakpointResolverFileRegex *</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const BreakpointResolver *V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>-&gt;</operator><name>getResolverID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>BreakpointResolver</name><operator>::</operator><name>FileRegexResolver</name></expr>;</return>
}</block>

<name>lldb</name><operator>::</operator><name>BreakpointResolverSP</name>
<macro><name>CopyForBreakpoint</name><argument_list>(<argument>lldb::BreakpointSP &amp;breakpoint</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>Breakpoint</name></expr>;
<expr><name>RegularExpression</name>
<name>m_regex</name></expr>;
<expr><name>bool</name> <name>m_exact_match</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_function_names</name></expr>;



<expr><name>private</name><operator>:</operator>
<call><name>BreakpointResolverFileRegex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointResolverFileRegex</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>BreakpointResolverFileRegex</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>BreakpointResolverFileRegex</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
