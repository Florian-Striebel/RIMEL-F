<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/posix/PipePosix.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_POSIX_PIPEPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_POSIX_PIPEPOSIX_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/PipeBase.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>PipePosix</name> <range>: <expr><name>public</name> <name>PipeBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>int</name> <name>kInvalidDescriptor</name></expr>;

<expr><call><name>PipePosix</name><argument_list>()</argument_list></call></expr>;
<macro><name>PipePosix</name><argument_list>(<argument>lldb::pipe_t read</argument>, <argument>lldb::pipe_t write</argument>)</argument_list></macro>;
<expr><call><name>PipePosix</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PipePosix</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><call><name>PipePosix</name><argument_list>(<argument><expr><name>PipePosix</name> <operator>&amp;&amp;</operator><name>pipe_posix</name></expr></argument>)</argument_list></call></expr>;
<expr><name>PipePosix</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>PipePosix</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
<expr><name>PipePosix</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>PipePosix</name> <operator>&amp;&amp;</operator><name>pipe_posix</name><operator>)</operator></expr>;

<expr><operator>~</operator><macro><name>PipePosix</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>CreateNew</name><argument_list>(<argument>bool child_process_inherit</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>CreateNew</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>bool child_process_inherit</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>CreateWithUniqueName</name><argument_list>(<argument>llvm::StringRef prefix</argument>,
<argument>bool child_process_inherit</argument>,
<argument>llvm::SmallVectorImpl&lt;char&gt; &amp;name</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>OpenAsReader</name><argument_list>(<argument>llvm::StringRef name</argument>,
<argument>bool child_process_inherit</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name>
<macro><name>OpenAsWriterWithTimeout</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>bool child_process_inherit</argument>,
<argument>const std::chrono::microseconds &amp;timeout</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CanRead</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>CanWrite</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>pipe_t</name> <macro><name>GetReadPipe</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>pipe_t</name><argument_list>(<argument><expr><call><name>GetReadFileDescriptor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>lldb</name><operator>::</operator><name>pipe_t</name> <macro><name>GetWritePipe</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>pipe_t</name><argument_list>(<argument><expr><call><name>GetWriteFileDescriptor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>int</name> <macro><name>GetReadFileDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>int</name> <macro><name>GetWriteFileDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>int</name> <macro><name>ReleaseReadFileDescriptor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>int</name> <macro><name>ReleaseWriteFileDescriptor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>CloseReadFileDescriptor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>CloseWriteFileDescriptor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>Close</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>Delete</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>Write</name><argument_list>(<argument>const void *buf</argument>, <argument>size_t size</argument>, <argument>size_t &amp;bytes_written</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>ReadWithTimeout</name><argument_list>(<argument>void *buf</argument>, <argument>size_t size</argument>,
<argument>const std::chrono::microseconds &amp;timeout</argument>,
<argument>size_t &amp;bytes_read</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>int</name> <name><name>m_fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
