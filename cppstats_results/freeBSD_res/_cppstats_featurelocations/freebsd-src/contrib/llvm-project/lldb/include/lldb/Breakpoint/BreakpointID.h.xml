<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointID.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTID_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTID_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>BreakpointID</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>BreakpointID</name><argument_list>(<argument>lldb::break_id_t bp_id = LLDB_INVALID_BREAK_ID</argument>,
<argument>lldb::break_id_t loc_id = LLDB_INVALID_BREAK_ID</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>BreakpointID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <macro><name>GetBreakpointID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_break_id</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <macro><name>GetLocationID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_location_id</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>bp_id</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>loc_id</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_break_id</name> <operator>=</operator> <name>bp_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_location_id</name> <operator>=</operator> <name>loc_id</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetBreakpointID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>bp_id</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_break_id</name> <operator>=</operator> <name>bp_id</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetBreakpointLocationID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>loc_id</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_location_id</name> <operator>=</operator> <name>loc_id</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsRangeIdentifier</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsValidIDExpression</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <call><name>GetRangeSpecifiers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointID</name></expr></argument>&gt;</argument_list></name>
<macro><name>ParseCanonicalReference</name><argument_list>(<argument>llvm::StringRef input</argument>)</argument_list></macro></expr>;</expr_stmt>













<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>StringIsBreakpointName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>str</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>











<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>GetCanonicalReference</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_id</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_loc_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>m_break_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>m_location_id</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
