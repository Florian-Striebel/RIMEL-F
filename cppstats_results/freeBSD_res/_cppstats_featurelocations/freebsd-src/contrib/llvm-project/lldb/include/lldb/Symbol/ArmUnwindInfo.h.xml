<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/ArmUnwindInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_ARMUNWINDINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_ARMUNWINDINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/ObjectFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>











<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ArmUnwindInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ArmUnwindInfo</name><argument_list>(<argument><expr><name>ObjectFile</name> <operator>&amp;</operator><name>objfile</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>arm_exidx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>arm_extab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ArmUnwindInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>GetUnwindPlan</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<struct>struct <name>ArmExidxEntry</name> <block>{
<macro><name>ArmExidxEntry</name><argument_list>(<argument>uint32_t f</argument>, <argument>lldb::addr_t a</argument>, <argument>uint32_t d</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ArmExidxEntry</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>file_address</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>address</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>GetExceptionHandlingTableEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>GetByteAtOffset</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>uint16_t</name> <name>offset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetULEB128</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>uint16_t</name> <operator>&amp;</operator><name>offset</name></expr></argument>,
<argument><expr><name>uint16_t</name> <name>max_offset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>m_byte_order</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <name>m_arm_exidx_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <name>m_arm_extab_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DataExtractor</name></type> <name>m_arm_exidx_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataExtractor</name></type> <name>m_arm_extab_data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ArmExidxEntry</name></expr></argument>&gt;</argument_list></name> <name>m_exidx_entries</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
