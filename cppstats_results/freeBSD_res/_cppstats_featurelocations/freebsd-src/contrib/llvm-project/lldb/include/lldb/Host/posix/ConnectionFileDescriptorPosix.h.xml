<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/posix/ConnectionFileDescriptorPosix.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_POSIX_CONNECTIONFILEDESCRIPTORPOSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_POSIX_CONNECTIONFILEDESCRIPTORPOSIX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Pipe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/IOObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Predicate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SocketAddress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConnectionFileDescriptor</name> <range>: <expr><name>public</name> <name>Connection</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>LISTEN_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>ACCEPT_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>UNIX_ACCEPT_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>CONNECT_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>TCP_CONNECT_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>UDP_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>UNIX_CONNECT_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>UNIX_ABSTRACT_CONNECT_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>FD_SCHEME</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>FILE_SCHEME</name></expr>;

<macro><name>ConnectionFileDescriptor</name><argument_list>(<argument>bool child_processes_inherit = false</argument>)</argument_list></macro>;

<macro><name>ConnectionFileDescriptor</name><argument_list>(<argument>int fd</argument>, <argument>bool owns_fd</argument>)</argument_list></macro>;

<expr><call><name>ConnectionFileDescriptor</name><argument_list>(<argument><expr><name>Socket</name> <operator>*</operator><name>socket</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ConnectionFileDescriptor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsConnected</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>Connect</name><argument_list>(<argument>llvm::StringRef s</argument>, <argument>Status *error_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>Disconnect</name><argument_list>(<argument>Status *error_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>Read</name><argument_list>(<argument>void *dst</argument>, <argument>size_t dst_len</argument>, <argument>const Timeout&lt;std::micro&gt; &amp;timeout</argument>,
<argument>lldb::ConnectionStatus &amp;status</argument>, <argument>Status *error_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>Write</name><argument_list>(<argument>const void *src</argument>, <argument>size_t src_len</argument>, <argument>lldb::ConnectionStatus &amp;status</argument>,
<argument>Status *error_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetURI</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <call><name>BytesAvailable</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>,
<argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>InterruptRead</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>IOObjectSP</name> <macro><name>GetReadObject</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>m_read_sp</name></expr>;</return> }</block>

<name>uint16_t</name> <call><name>GetListeningPort</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetChildProcessesInherit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetChildProcessesInherit</name><argument_list>(<argument>bool child_processes_inherit</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <call><name>OpenCommandPipe</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>CloseCommandPipe</name><argument_list>()</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>SocketListenAndAccept</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>,
<argument>Status *error_ptr</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>ConnectTCP</name><argument_list>(<argument>llvm::StringRef host_and_port</argument>,
<argument>Status *error_ptr</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>ConnectUDP</name><argument_list>(<argument>llvm::StringRef args</argument>, <argument>Status *error_ptr</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>NamedSocketConnect</name><argument_list>(<argument>llvm::StringRef socket_name</argument>,
<argument>Status *error_ptr</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>NamedSocketAccept</name><argument_list>(<argument>llvm::StringRef socket_name</argument>,
<argument>Status *error_ptr</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>ConnectionStatus</name> <macro><name>UnixAbstractSocketConnect</name><argument_list>(<argument>llvm::StringRef socket_name</argument>,
<argument>Status *error_ptr</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>IOObjectSP</name> <name>m_read_sp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>IOObjectSP</name> <name>m_write_sp</name></expr>;

<expr><name><name>Predicate</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name>
<name>m_port_predicate</name></expr>;



<expr><name>Pipe</name> <name>m_pipe</name></expr>;
<expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_shutting_down</name></expr>;


<expr><name>bool</name> <name>m_waiting_for_accept</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>m_child_processes_inherit</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>m_uri</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <call><name>InitializeSocket</name><argument_list>(<argument><expr><name>Socket</name> <operator>*</operator><name>socket</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>ConnectionFileDescriptor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ConnectionFileDescriptor</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ConnectionFileDescriptor</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ConnectionFileDescriptor</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
