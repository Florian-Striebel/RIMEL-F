<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/PathMappingList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_PATHMAPPINGLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_PATHMAPPINGLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PathMappingList</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ChangedCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PathMappingList</name> <modifier>&amp;</modifier></type><name>path_list</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<expr_stmt><expr><call><name>PathMappingList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>PathMappingList</name><argument_list>(<argument>ChangedCallback callback</argument>, <argument>void *callback_baton</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>PathMappingList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PathMappingList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>PathMappingList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PathMappingList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PathMappingList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>ConstString</name></type> <name>replacement</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PathMappingList</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pair_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_pairs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_pairs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetPathsAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>, <argument><expr><name>ConstString</name> <operator>&amp;</operator><name>path</name></expr></argument>,
<argument><expr><name>ConstString</name> <operator>&amp;</operator><name>new_path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Insert</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>ConstString</name></type> <name>replacement</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>insert_idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Replace</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>ConstString</name></type> <name>replacement</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Replace</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>ConstString</name></type> <name>replacement</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>RemapPath</name><argument_list>(<argument><expr><name>ConstString</name> <name>path</name></expr></argument>, <argument><expr><name>ConstString</name> <operator>&amp;</operator><name>new_path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>&gt;</argument_list></name> <macro><name>RemapPath</name><argument_list>(<argument>llvm::StringRef path</argument>,
<argument>bool only_if_exists = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>RemapPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReverseRemapPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>fixed</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>














<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>&gt;</argument_list></name> <macro><name>FindFile</name><argument_list>(<argument>const FileSpec &amp;orig_spec</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>FindIndexForPath</name><argument_list>(<argument><expr><name>ConstString</name> <name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetModificationID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mod_id</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>, <argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>pair</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>iterator</name></type> <name>FindIteratorForPath</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>const_iterator</name></type> <name>FindIteratorForPath</name><argument_list>(<argument><expr><name>ConstString</name> <name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>collection</name></type> <name>m_pairs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChangedCallback</name></type> <name>m_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_callback_baton</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_mod_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
