<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/CompilerDecl.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_COMPILERDECL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_COMPILERDECL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>











<decl_stmt><decl><type><name>class</name></type> <name>CompilerDecl</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>CompilerDecl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>





<expr_stmt><expr><call><name>CompilerDecl</name><argument_list>(<argument><expr><name>TypeSystem</name> <operator>*</operator><name>type_system</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>decl</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_type_system</name><argument_list>(<argument><expr><name>type_system</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_opaque_decl</name><argument_list>(<argument>decl</argument>)</argument_list></macro> <expr><block>{}</block>



<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CompilerDecl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_type_system</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_type_system</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>m_opaque_decl</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>m_opaque_decl</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>m_type_system</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>m_type_system</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_type_system</name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name>m_opaque_decl</name> <operator>!=</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>TypeSystem</name> <operator>*</operator><macro><name>GetTypeSystem</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type_system</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>GetOpaqueDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_opaque_decl</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetDecl</name><parameter_list>(<parameter><decl><type><name>TypeSystem</name> <modifier>*</modifier></type><name>type_system</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>decl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type_system</name> <operator>=</operator> <name>type_system</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_opaque_decl</name> <operator>=</operator> <name>decl</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type_system</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_opaque_decl</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetMangledName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompilerDeclContext</name> <macro><name>GetDeclContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>CompilerType</name> <macro><name>GetFunctionReturnType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>size_t</name> <macro><name>GetNumFunctionArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetFunctionArgumentType</name><argument_list>(<argument><expr><name>size_t</name> <name>arg_idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>TypeSystem</name> <modifier>*</modifier></type><name>m_type_system</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_opaque_decl</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CompilerDecl</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>CompilerDecl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CompilerDecl</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>CompilerDecl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
