<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/IRExecutionUnit.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_IREXECUTIONUNIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_IREXECUTIONUNIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ExecutionEngine/SectionMemoryManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Module.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/IRMemoryMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/ObjectFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataBufferHeap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExecutionEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjectCache</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>


















<decl_stmt><decl><type><name>class</name></type> <name>IRExecutionUnit</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>IRExecutionUnit</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>IRMemoryMap</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>ObjectFileJITDelegate</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>IRExecutionUnit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>context_up</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Module</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>module_up</name></expr></argument>, <argument><expr><name>ConstString</name> <operator>&amp;</operator><name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>sym_ctx</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cpu_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><macro><name>IRExecutionUnit</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><name>ConstString</name></type> <name>GetFunctionName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_name</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>*</operator><macro><name>GetModule</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_module</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><macro><name>GetFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><name>m_module</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator> <operator>?</operator> <call><name><name>m_module</name><operator>-&gt;</operator><name>getFunction</name></name><argument_list>(<argument><expr><call><name><name>m_name</name><operator>.</operator><name>GetStringRef</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetRunnableInfo</name><argument_list>(<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>func_addr</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>func_end</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>WriteNow</name><argument_list>(<argument>const uint8_t *bytes</argument>, <argument>size_t size</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FreeNow</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>allocation</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetAddressByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>PopulateSymtab</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ObjectFile</name> <operator>*</operator><name>obj_file</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Symtab</name> <operator>&amp;</operator><name>symtab</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>PopulateSectionList</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ObjectFile</name> <operator>*</operator><name>obj_file</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>SectionList</name> <operator>&amp;</operator><name>section_list</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ArchSpec</name> <macro><name>GetArchitecture</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <call><name>GetJITModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>FindSymbol</name><argument_list>(<argument>ConstString name</argument>, <argument>bool &amp;missing_weak</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetStaticInitializers</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>static_initializers</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<struct>struct <name>JittedEntity</name> <block>{
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_local_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name>
<name>m_remote_addr</name></expr>;</expr_stmt>















<macro><name>JittedEntity</name><argument_list>(<argument>const char *name</argument>,
<argument>lldb::addr_t local_addr = LLDB_INVALID_ADDRESS</argument>,
<argument>lldb::addr_t remote_addr = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_local_addr</name><argument_list>(<argument><expr><name>local_addr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_remote_addr</name><argument_list>(<argument>remote_addr</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>JittedFunction</name></name></type> <range>: <expr><name>JittedEntity</name> <block>{
<expr><name>bool</name> <name>m_external</name></expr>;
<macro><name>JittedFunction</name><argument_list>(<argument>const char *name</argument>, <argument>bool external</argument>,
<argument>lldb::addr_t local_addr = LLDB_INVALID_ADDRESS</argument>,
<argument>lldb::addr_t remote_addr = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>JittedEntity</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>, <argument><expr><name>remote_addr</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_external</name><argument_list>(<argument>external</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>JittedGlobalVariable</name></name></type> <range>: <expr><name>JittedEntity</name> <block>{
<macro><name>JittedGlobalVariable</name><argument_list>(<argument>const char *name</argument>,
<argument>lldb::addr_t local_addr = LLDB_INVALID_ADDRESS</argument>,
<argument>lldb::addr_t remote_addr = LLDB_INVALID_ADDRESS</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>JittedEntity</name><argument_list>(<argument>name</argument>, <argument>local_addr</argument>, <argument>remote_addr</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>JittedFunction</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetJittedFunctions</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_jitted_functions</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>JittedGlobalVariable</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetJittedGlobalVariables</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_jitted_global_variables</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetRemoteAddressForLocal</name><argument_list>(<argument>lldb::addr_t local_address</argument>)</argument_list></macro></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <name>AddrRange</name></expr>;</expr_stmt></typedef>










<decl_stmt><decl><type><name>AddrRange</name></type> <name>GetRemoteRangeForLocal</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>local_address</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>CommitAllocations</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>ReportAllocations</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>ExecutionEngine</name> <operator>&amp;</operator><name>engine</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>WriteData</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>DisassembleFunction</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<struct_decl>struct <name>SearchSpec</name>;</struct_decl>

<decl_stmt><decl><type><name>void</name></type> <name>CollectCandidateCNames</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>C_specs</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CollectCandidateCPlusPlusNames</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CPP_specs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>C_specs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CollectFallbackNames</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>fallback_specs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>C_specs</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>FindInSymbols</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>specs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>symbol_was_missing_weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>FindInRuntimes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>specs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>FindInUserDefinedSymbols</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SearchSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>specs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>ReportSymbolLookupError</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryManager</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>SectionMemoryManager</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MemoryManager</name><argument_list>(<argument><expr><name>IRExecutionUnit</name> <operator>&amp;</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>MemoryManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;















<expr><name>uint8_t</name> <operator>*</operator><macro><name>allocateCodeSection</name><argument_list>(<argument>uintptr_t Size</argument>, <argument>unsigned Alignment</argument>,
<argument>unsigned SectionID</argument>,
<argument>llvm::StringRef SectionName</argument>)</argument_list></macro> <name>override</name></expr>;

















<expr><name>uint8_t</name> <operator>*</operator><macro><name>allocateDataSection</name><argument_list>(<argument>uintptr_t Size</argument>, <argument>unsigned Alignment</argument>,
<argument>unsigned SectionID</argument>,
<argument>llvm::StringRef SectionName</argument>,
<argument>bool IsReadOnly</argument>)</argument_list></macro> <name>override</name></expr>;









<expr><name>bool</name> <macro><name>finalizeMemory</name><argument_list>(<argument>std::string *ErrMsg</argument>)</argument_list></macro> <name>override</name> <block>{




<return>return <expr><name>false</name></expr>;</return>
}</block>


<name>void</name> <macro><name>registerEHFrames</name><argument_list>(<argument>uint8_t *Addr</argument>, <argument>uint64_t LoadAddr</argument>,
<argument>size_t Size</argument>)</argument_list></macro> <name>override</name> <block>{}</block>
<name>void</name> <macro><name>deregisterEHFrames</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

<name>uint64_t</name> <macro><name>getSymbolAddress</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>uint64_t</name> <call><name>GetSymbolAddressAndPresence</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>missing_weak</name></expr></argument>)</argument_list></call></expr>;

<expr><name>llvm</name><operator>::</operator><name>JITSymbol</name> <macro><name>findSymbol</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <operator>*</operator><macro><name>getPointerToNamedFunction</name><argument_list>(<argument>const std::string &amp;Name</argument>,
<argument>bool AbortOnFailure = true</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SectionMemoryManager</name></expr></argument>&gt;</argument_list></name> <name>m_default_mm_up</name></expr>;






<expr><name>IRExecutionUnit</name> <operator>&amp;</operator><name>m_parent</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>eSectionIDInvalid</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>AllocationKind</name> <block>{<block_content> <expr_stmt><expr><name>Stub</name></expr><operator>,</operator> <expr><name>Code</name></expr><operator>,</operator> <expr><name>Data</name></expr><operator>,</operator> <expr><name>Global</name></expr><operator>,</operator> <expr><name>Bytes</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SectionType</name>
<macro><name>GetSectionTypeFromSectionName</name><argument_list>(<argument>const llvm::StringRef &amp;name</argument>,
<argument>AllocationKind alloc_kind</argument>)</argument_list></macro></expr>;</expr_stmt>





<struct>struct <name>AllocationRecord</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_process_address</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>m_host_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_permissions</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionType</name> <name>m_sect_type</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m_alignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m_section_id</name></decl>;</decl_stmt>

<macro><name>AllocationRecord</name><argument_list>(<argument>uintptr_t host_address</argument>, <argument>uint32_t permissions</argument>,
<argument>lldb::SectionType sect_type</argument>, <argument>size_t size</argument>,
<argument>unsigned alignment</argument>, <argument>unsigned section_id</argument>, <argument>const char *name</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_name</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_process_address</name><argument_list>(<argument><expr><name>LLDB_INVALID_ADDRESS</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_host_address</name><argument_list>(<argument><expr><name>host_address</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_permissions</name><argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_sect_type</name><argument_list>(<argument><expr><name>sect_type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_alignment</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_section_id</name><argument_list>(<argument>section_id</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>dump</name><parameter_list>(<parameter><decl><type><name>Log</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>CommitOneAllocation</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>AllocationRecord</name> <operator>&amp;</operator><name>record</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>AllocationRecord</name></expr></argument>&gt;</argument_list></name> <name>RecordVector</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>RecordVector</name></type> <name>m_records</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name></expr></argument>&gt;</argument_list></name> <name>m_context_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>ExecutionEngine</name></expr></argument>&gt;</argument_list></name> <name>m_execution_engine_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>ObjectCache</name></expr></argument>&gt;</argument_list></name> <name>m_object_cache_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Module</name></expr></argument>&gt;</argument_list></name>
<name>m_module_up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>*</operator><name>m_module</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_cpu_features</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>JittedFunction</name></expr></argument>&gt;</argument_list></name> <name>m_jitted_functions</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>JittedGlobalVariable</name></expr></argument>&gt;</argument_list></name> <name>m_jitted_global_variables</name></expr>;</expr_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolContext</name></type> <name>m_sym_ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>m_failed_lookups</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_did_jit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_function_load_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_function_end_load_addr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_strip_underscore</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_reported_allocations</name></decl>;</decl_stmt>






</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
