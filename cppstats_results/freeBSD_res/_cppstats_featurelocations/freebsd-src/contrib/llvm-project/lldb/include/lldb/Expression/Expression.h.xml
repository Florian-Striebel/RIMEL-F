<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/Expression.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_EXPRESSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_EXPRESSION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/ExpressionTypeSystemHelper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RecordingMemoryManager</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>Expression</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>ResultType</name> <block>{ <decl><name>eResultTypeAny</name></decl>, <decl><name>eResultTypeId</name></decl> }</block>;</enum>

<expr_stmt><expr><call><name>Expression</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Expression</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>&amp;</operator><name>exe_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Expression</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Text</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FunctionName</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>Language</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><name>eLanguageTypeUnknown</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>virtual</name> <name>Materializer</name> <modifier>*</modifier></type><name>GetMaterializer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>



<function><type><name>virtual</name> <name>ResultType</name></type> <name>DesiredResultType</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>eResultTypeAny</name></expr>;</return> </block_content>}</block></function>




<function_decl><type><name>virtual</name> <name>bool</name></type> <name>NeedsValidation</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <name>bool</name></type> <name>NeedsVariableResolution</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>EvaluateExpressionOptions</name> <modifier>*</modifier></type><name>GetOptions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>StartAddress</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_jit_start_addr</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>WillStartExecuting</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>DidFinishExecuting</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>ExpressionTypeSystemHelper</name> <modifier>*</modifier></type><name>GetTypeSystemHelper</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isA</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>ClassID</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetWP</name> <name>m_target_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_jit_process_wp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_jit_start_addr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_jit_end_addr</name></expr>;</expr_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
