<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/DWARFExpression.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_DWARFEXPRESSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_DWARFEXPRESSION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Disassembler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>DWARFUnit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>












<decl_stmt><decl><type><name>class</name></type> <name>DWARFExpression</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DWARFExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<macro><name>DWARFExpression</name><argument_list>(<argument>lldb::ModuleSP module</argument>, <argument>const DataExtractor &amp;data</argument>,
<argument>const DWARFUnit *dwarf_cu</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DWARFExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



















<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>location_list_base_addr</name></expr></argument>, <argument><expr><name>ABI</name> <operator>*</operator><name>abi</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsLocationList</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
















<decl_stmt><decl><type><name>bool</name></type> <name>LocationListContainsAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>func_load_addr</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLocation_DW_OP_addr</name><argument_list>(<argument>uint32_t op_addr_idx</argument>, <argument>bool &amp;error</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Update_DW_OP_addr</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>UpdateValue</name><argument_list>(<argument><expr><name>uint64_t</name> <name>const_value</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>const_value_byte_size</name></expr></argument>,
<argument><expr><name>uint8_t</name> <name>addr_byte_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_module_wp</name> <operator>=</operator> <name>module</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>ContainsThreadLocalStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>LinkThreadLocalStorage</name><argument_list>(
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>new_module_sp</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name><operator>(</operator><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier>
<operator>&amp;</operator><name>link_address_callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<decl_stmt><decl><type><name>void</name></type> <name>SetLocationListAddresses</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>cu_file_addr</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>func_file_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>int</name></type> <name>GetRegisterKind</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>void</name></type> <name>SetRegisterKind</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>reg_kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>Evaluate</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>func_load_addr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Value</name> <operator>*</operator><name>initial_value_ptr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Value</name> <operator>*</operator><name>object_address_ptr</name></expr></argument>,
<argument><expr><name>Value</name> <operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>Evaluate</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>RegisterContext</name> <operator>*</operator><name>reg_ctx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>loclist_base_load_addr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Value</name> <operator>*</operator><name>initial_value_ptr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Value</name> <operator>*</operator><name>object_address_ptr</name></expr></argument>,
<argument><expr><name>Value</name> <operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







































<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>Evaluate</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>RegisterContext</name> <operator>*</operator><name>reg_ctx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>opcode_ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>opcodes</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DWARFUnit</name> <operator>*</operator><name>dwarf_cu</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>reg_set</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Value</name> <operator>*</operator><name>initial_value_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Value</name> <operator>*</operator><name>object_address_ptr</name></expr></argument>, <argument><expr><name>Value</name> <operator>&amp;</operator><name>result</name></expr></argument>,
<argument><expr><name>Status</name> <operator>*</operator><name>error_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetExpressionData</name><argument_list>(<argument><expr><name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>m_data</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>data</name><operator>.</operator><name>GetByteSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>DumpLocationForAddress</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>func_load_addr</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>address</name></expr></argument>,
<argument><expr><name>ABI</name> <operator>*</operator><name>abi</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>MatchesOperand</name><argument_list>(<argument><expr><name>StackFrame</name> <operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DataExtractor</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetLocationExpression</name><argument_list>(<argument>lldb::addr_t load_function_start</argument>,
<argument>lldb::addr_t addr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>














<decl_stmt><decl><type><name>void</name></type> <name>DumpLocation</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>, <argument><expr><name>ABI</name> <operator>*</operator><name>abi</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleWP</name> <name>m_module_wp</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>DataExtractor</name></type> <name>m_data</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>DWARFUnit</name> <modifier>*</modifier></type><name>m_dwarf_cu</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>m_reg_kind</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eRegisterKindDWARF</name></expr>;</expr_stmt>

<struct>struct <name>LoclistAddresses</name> <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>cu_file_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>func_file_addr</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>LoclistAddresses</name></expr></argument>&gt;</argument_list></name> <name>m_loclist_addresses</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
