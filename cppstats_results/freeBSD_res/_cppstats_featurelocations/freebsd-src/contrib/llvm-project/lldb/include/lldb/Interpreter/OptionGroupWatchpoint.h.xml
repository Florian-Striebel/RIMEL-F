<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionGroupWatchpoint.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONGROUPWATCHPOINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONGROUPWATCHPOINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/Options.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupWatchpoint</name> <range>: <expr><name>public</name> <name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionGroupWatchpoint</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>OptionGroupWatchpoint</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>IsWatchSizeSupported</name><argument_list>(<argument>uint32_t watch_size</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;




enum <expr><name>WatchType</name> <block>{
<expr><name>eWatchInvalid</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>eWatchRead</name></expr>,
<expr><name>eWatchWrite</name></expr>,
<expr><name>eWatchReadWrite</name></expr>
}</block></expr>;

<expr><name>WatchType</name> <name>watch_type</name></expr>;
<expr><name>uint32_t</name> <name>watch_size</name></expr>;
<expr><name>bool</name> <name>watch_type_specified</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>OptionGroupWatchpoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OptionGroupWatchpoint</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>OptionGroupWatchpoint</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>OptionGroupWatchpoint</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
