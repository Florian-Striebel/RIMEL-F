<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/LockFileBase.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_LOCKFILEBASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_LOCKFILEBASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LockFileBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>LockFileBase</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>Status</name></type> <name>WriteLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Status</name></type> <name>TryWriteLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>ReadLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Status</name></type> <name>TryReadLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>Unlock</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>Locker</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>Status</name><operator>(</operator><specifier>const</specifier> <name>uint64_t</name>, <specifier>const</specifier> <name>uint64_t</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<macro><name>LockFileBase</name><argument_list>(<argument>int fd</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsValidFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DoWriteLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DoTryWriteLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DoReadLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DoTryReadLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DoUnlock</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>Status</name></type> <name>DoLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Locker</name> <modifier>&amp;</modifier></type><name>locker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>m_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_locked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_len</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
