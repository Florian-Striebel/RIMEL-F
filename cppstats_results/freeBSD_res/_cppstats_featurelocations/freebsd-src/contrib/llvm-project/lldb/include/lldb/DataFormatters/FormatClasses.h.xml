<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/FormatClasses.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_FORMATCLASSES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_FORMATCLASSES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeFormat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeSummary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeSynthetic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>HardcodedFormatters</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FormatterType</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>HardcodedFormatterFinder</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FormatterType</name><operator>::</operator><name>SharedPointer</name><operator>(</operator>
<name>lldb_private</name><operator>::</operator><name>ValueObject</name> <operator>&amp;</operator>, <name>lldb</name><operator>::</operator><name>DynamicValueType</name>,
<name>FormatManager</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FormatterType</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>HardcodedFormatterFinders</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>HardcodedFormatterFinder</name><argument_list type="generic">&lt;<argument><expr><name>FormatterType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>HardcodedFormatterFinders</name><argument_list type="generic">&lt;<argument><expr><name>TypeFormatImpl</name></expr></argument>&gt;</argument_list></name></type> <name>HardcodedFormatFinder</name>;</typedef>
<typedef>typedef <type><name><name>HardcodedFormatterFinders</name><argument_list type="generic">&lt;<argument><expr><name>TypeSummaryImpl</name></expr></argument>&gt;</argument_list></name></type> <name>HardcodedSummaryFinder</name>;</typedef>
<typedef>typedef <type><name><name>HardcodedFormatterFinders</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildren</name></expr></argument>&gt;</argument_list></name></type> <name>HardcodedSyntheticFinder</name>;</typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FormattersMatchCandidate</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>FormattersMatchCandidate</name><argument_list>(<argument>ConstString name</argument>, <argument>bool strip_ptr</argument>,
<argument>bool strip_ref</argument>, <argument>bool strip_tydef</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_type_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_stripped_pointer</name><argument_list>(<argument><expr><name>strip_ptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_stripped_reference</name><argument_list>(<argument><expr><name>strip_ref</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_stripped_typedef</name><argument_list>(<argument>strip_tydef</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><call><name>FormattersMatchCandidate</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetTypeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type_name</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>DidStripPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stripped_pointer</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>DidStripReference</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stripped_reference</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>DidStripTypedef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stripped_typedef</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Formatter</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>IsMatch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Formatter</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>formatter_sp</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formatter_sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>formatter_sp</name><operator>-&gt;</operator><name>Cascades</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <call><name>DidStripTypedef</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>formatter_sp</name><operator>-&gt;</operator><name>SkipsPointers</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DidStripPointer</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>formatter_sp</name><operator>-&gt;</operator><name>SkipsReferences</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DidStripReference</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_type_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_stripped_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_stripped_reference</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_stripped_typedef</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FormattersMatchCandidate</name></expr></argument>&gt;</argument_list></name> <name>FormattersMatchVector</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>&gt;</argument_list></name> <name>CandidateLanguagesVector</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>FormattersMatchData</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FormattersMatchData</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>FormattersMatchVector</name></type> <name>GetMatchesVector</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>ConstString</name></type> <name>GetTypeForCache</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>CandidateLanguagesVector</name></type> <name>GetCandidateLanguages</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>GetValueObject</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <call><name>GetDynamicValueType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>m_valobj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>m_dynamic_value_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FormattersMatchVector</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_formatters_match_vector</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_type_for_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CandidateLanguagesVector</name></type> <name>m_candidate_languages</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeNameSpecifierImpl</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeNameSpecifierImpl</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_type</name><argument_list>()</argument_list></macro> <block>{}</block>

<macro><name>TypeNameSpecifierImpl</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>bool is_regex</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_is_regex</name><argument_list>(<argument><expr><name>is_regex</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type</name><argument_list>()</argument_list></macro> <expr><block>{
<expr><name><name>m_type</name><operator>.</operator><name>m_type_name</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
}</block>



<macro><name>TypeNameSpecifierImpl</name><argument_list>(<argument>lldb::TypeSP type</argument>)</argument_list></macro> <operator>:</operator> <call><name>m_is_regex</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type</name><argument_list>()</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m_type</name><operator>.</operator><name>m_type_name</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>type</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetStringRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_type</name><operator>.</operator><name>m_compiler_type</name></name> <operator>=</operator> <call><name><name>type</name><operator>-&gt;</operator><name>GetForwardCompilerType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

TypeNameSpecifierImpl(CompilerType type</block></if></if_stmt>) <operator>:</operator> <call><name>m_is_regex</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>,</operator> <macro><name>m_type</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_type</name><operator>.</operator><name>m_type_name</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>GetTypeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_type</name><operator>.</operator><name>m_compiler_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

const char *GetName(</block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>m_type</name><operator>.</operator><name>m_type_name</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>m_type</name><operator>.</operator><name>m_type_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></block></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>CompilerType</name></type> <name>GetCompilerType</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>m_type</name><operator>.</operator><name>m_compiler_type</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_type</name><operator>.</operator><name>m_compiler_type</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>CompilerType</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsRegex</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_is_regex</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_regex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>TypeOrName</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_type_name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>m_compiler_type</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>TypeOrName</name></type> <name>m_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypeNameSpecifierImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeNameSpecifierImpl</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeNameSpecifierImpl</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeNameSpecifierImpl</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
