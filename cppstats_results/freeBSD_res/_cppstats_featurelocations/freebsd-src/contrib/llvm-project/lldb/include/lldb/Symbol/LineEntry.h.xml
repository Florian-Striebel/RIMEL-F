<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/LineEntry.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_LINEENTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_LINEENTRY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<struct>struct <name>LineEntry</name> <block>{



<expr_stmt><expr><call><name>LineEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>LineEntry</name><argument_list>(<argument>const lldb::SectionSP &amp;section_sp</argument>, <argument>lldb::addr_t section_offset</argument>,
<argument>lldb::addr_t byte_size</argument>, <argument>const FileSpec &amp;file</argument>, <argument>uint32_t _line</argument>,
<argument>uint16_t _column</argument>, <argument>bool _is_start_of_statement</argument>,
<argument>bool _is_start_of_basic_block</argument>, <argument>bool _is_prologue_end</argument>,
<argument>bool _is_epilogue_begin</argument>, <argument>bool _is_terminal_entry</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

























<decl_stmt><decl><type><name>bool</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>bool</name> <name>show_file</name></expr></argument>, <argument><expr><name>Address</name><operator>::</operator><name>DumpStyle</name> <name>style</name></expr></argument>,
<argument><expr><name>Address</name><operator>::</operator><name>DumpStyle</name> <name>fallback_style</name></expr></argument>, <argument><expr><name>bool</name> <name>show_range</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>, <argument><expr><name>CompileUnit</name> <operator>*</operator><name>cu</name></expr></argument>,
<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>bool</name> <name>show_address_only</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>DumpStopContext</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_fullpaths</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineEntry</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LineEntry</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>






























<decl_stmt><decl><type><name>AddressRange</name></type>
<name>GetSameLineContiguousAddressRange</name><argument_list>(<argument><expr><name>bool</name> <name>include_inlined_functions</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>ApplyFileMappings</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AddressRange</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileSpec</name></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>original_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>line</name> <init>= <expr><name>LLDB_INVALID_LINE_NUMBER</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>column</name> <init>=
<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>is_start_of_statement</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>is_start_of_basic_block</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>is_prologue_end</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,


<decl><type ref="prev"/><name>is_epilogue_begin</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,


<decl><type ref="prev"/><name>is_terminal_entry</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


}</block>;</struct>











<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>LineEntry</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>LineEntry</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
