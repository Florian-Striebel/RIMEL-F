<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlan.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StopInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Target.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlanTracer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>


































































































































































































































































<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlan</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>ThreadPlan</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>UserID</name> <block>{<block_content>
<label><name>public</name>:</label>


<enum>enum <name>ThreadPlanKind</name> <block>{
<decl><name>eKindGeneric</name></decl>,
<decl><name>eKindNull</name></decl>,
<decl><name>eKindBase</name></decl>,
<decl><name>eKindCallFunction</name></decl>,
<decl><name>eKindPython</name></decl>,
<decl><name>eKindStepInstruction</name></decl>,
<decl><name>eKindStepOut</name></decl>,
<decl><name>eKindStepOverBreakpoint</name></decl>,
<decl><name>eKindStepOverRange</name></decl>,
<decl><name>eKindStepInRange</name></decl>,
<decl><name>eKindRunToAddress</name></decl>,
<decl><name>eKindStepThrough</name></decl>,
<decl><name>eKindStepUntil</name></decl>
}</block>;</enum>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ThreadPlan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>





<function_decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>GetThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>GetTarget</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>Target</name> <operator>&amp;</operator><macro><name>GetTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>ClearThreadCache</name><parameter_list>()</parameter_list>;</function_decl>












<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>










<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ValidatePlan</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>bool</name></type> <name>TracerExplainsStop</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_tracer_sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>m_tracer_sp</name><operator>-&gt;</operator><name>TracerExplainsStop</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <call><name>RunState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>PlanExplainsStop</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ShouldStop</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>







<function><type><name>virtual</name> <name>bool</name></type> <name>ShouldAutoContinue</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>




<function_decl><type><name>virtual</name> <name>Vote</name></type> <name>ShouldReportStop</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Vote</name></type> <name>ShouldReportRun</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>SetStopOthers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>StopOthers</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>bool</name></type> <name>WillResume</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>resume_state</name></expr></argument>, <argument><expr><name>bool</name> <name>current_plan</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>WillStop</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>bool</name></type> <name>IsMasterPlan</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_is_master_plan</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>SetIsMasterPlan</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>old_value</name> <init>= <expr><name>m_is_master_plan</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m_is_master_plan</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>old_value</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>OkayToDiscard</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SetOkayToDiscard</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_okay_to_discard</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>



<function_decl><type><name>virtual</name> <name>bool</name></type> <name>MischiefManaged</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>void</name></type> <name>ThreadDestroyed</name><parameter_list>()</parameter_list> <block>{<block_content>


</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetPrivate</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_plan_private</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetPrivate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_plan_private</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>DidPush</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>WillPop</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>ThreadPlanKind</name> <macro><name>GetKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_kind</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsPlanComplete</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetPlanComplete</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>bool</name></type> <name>IsPlanStale</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>PlanSucceeded</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_plan_succeeded</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>IsBasePlan</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanTracerSP</name> <operator>&amp;</operator><macro><name>GetThreadPlanTracer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_tracer_sp</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetThreadPlanTracer</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanTracerSP</name> <name>new_tracer_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_tracer_sp</name> <operator>=</operator> <name>new_tracer_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>DoTraceLog</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_tracer_sp</name> <operator>&amp;&amp;</operator> <call><name><name>m_tracer_sp</name><operator>-&gt;</operator><name>TracingEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_tracer_sp</name><operator>-&gt;</operator><name>Log</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetReturnValueObject</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ValueObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>








<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <macro><name>GetExpressionVariable</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ExpressionVariableSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<function><type><name>virtual</name> <name>void</name></type> <name>RestoreThreadState</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>IsVirtualStep</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>SetIterationCount</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_takes_iteration_count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_iteration_count</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>m_takes_iteration_count</name></expr>;</return>
</block_content>}</block></function>

<label><name>protected</name>:</label>

<macro><name>ThreadPlan</name><argument_list>(<argument>ThreadPlanKind kind</argument>, <argument>const char *name</argument>, <argument>Thread &amp;thread</argument>,
<argument>Vote report_stop_vote</argument>, <argument>Vote report_run_vote</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>DoWillResume</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>resume_state</name></expr></argument>, <argument><expr><name>bool</name> <name>current_plan</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>DoPlanExplainsStop</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<decl_stmt><decl><type><name>void</name></type> <name>PushPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <operator>&amp;</operator><name>thread_plan_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>GetThread</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushPlan</name><argument_list>(<argument><expr><name>thread_plan_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>thread_plan_sp</name><operator>-&gt;</operator><name>SetPrivate</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>thread_plan_sp</name><operator>-&gt;</operator><name>SetIsMasterPlan</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<function><type><name>ThreadPlan</name> <modifier>*</modifier></type><name>GetPreviousPlan</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>GetThread</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetPreviousPlan</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <macro><name>GetPrivateStopInfo</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>GetThread</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetPrivateStopInfo</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetStopInfo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <name>stop_reason_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>GetThread</name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetStopInfo</name><argument_list>(<argument><expr><name>stop_reason_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StateType</name> <call><name>GetPlanRunState</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsUsuallyUnexplainedStopReason</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StopReason</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>m_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Process</name> <modifier>&amp;</modifier></type><name>m_process</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>m_tid</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Vote</name></type> <name>m_report_stop_vote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vote</name></type> <name>m_report_run_vote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_takes_iteration_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_could_not_resolve_hw_bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>m_iteration_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>CachePlanExplainsStop</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>does_explain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_cached_plan_explains_stop</name> <operator>=</operator> <ternary><condition><expr><name>does_explain</name></expr> ?</condition><then> <expr><name>eLazyBoolYes</name></expr> </then><else>: <expr><name>eLazyBoolNo</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>user_id_t</name> <call><name>GetNextID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>m_thread</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ThreadPlanKind</name></type> <name>m_kind</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_plan_complete_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_cached_plan_explains_stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_plan_complete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_plan_private</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_okay_to_discard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_master_plan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_plan_succeeded</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanTracerSP</name> <name>m_tracer_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ThreadPlan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlan</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadPlan</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ThreadPlan</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanNull</name> <range>: <expr><name>public</name> <name>ThreadPlan</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ThreadPlanNull</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>ThreadPlanNull</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ValidatePlan</name><argument_list>(<argument>Stream *error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ShouldStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>MischiefManaged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>WillStop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsBasePlan</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>bool</name> <macro><name>OkayToDiscard</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<specifier>const</specifier> <name>Status</name> <operator>&amp;</operator><macro><name>GetStatus</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_status</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>DoPlanExplainsStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetPlanRunState</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><call><name>ThreadPlanNull</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlanNull</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ThreadPlanNull</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ThreadPlanNull</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
