<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/StreamFile.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_STREAMFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_STREAMFILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>StreamFile</name> <range>: <expr><name>public</name> <name>Stream</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>StreamFile</name><argument_list>(<argument>uint32_t flags</argument>, <argument>uint32_t addr_size</argument>, <argument>lldb::ByteOrder byte_order</argument>)</argument_list></macro></expr>;

<macro><name>StreamFile</name><argument_list>(<argument>int fd</argument>, <argument>bool transfer_ownership</argument>)</argument_list></macro>;

<macro><name>StreamFile</name><argument_list>(<argument>const char *path</argument>, <argument>File::OpenOptions options</argument>,
<argument>uint32_t permissions = lldb::eFilePermissionsFileDefault</argument>)</argument_list></macro>;

<macro><name>StreamFile</name><argument_list>(<argument>FILE *fh</argument>, <argument>bool transfer_ownership</argument>)</argument_list></macro>;

<expr><call><name>StreamFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>file</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_file_sp</name><argument_list>(<argument>file</argument>)</argument_list></macro> <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>; }</block></expr>;

<expr><operator>~</operator><macro><name>StreamFile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>File</name> <operator>&amp;</operator><macro><name>GetFile</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><name>m_file_sp</name></expr>;</return> }</block>

<specifier>const</specifier> <name>File</name> <operator>&amp;</operator><macro><name>GetFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>m_file_sp</name></expr>;</return> }</block>

<name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <macro><name>GetFileSP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_file_sp</name></expr>;</return> }</block>

<name>void</name> <macro><name>Flush</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>

<name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>m_file_sp</name></expr>;
<expr><name>size_t</name> <macro><name>WriteImpl</name><argument_list>(<argument>const void *s</argument>, <argument>size_t length</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>StreamFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StreamFile</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>StreamFile</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>StreamFile</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
