<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Initialization/SystemLifetimeManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INITIALIZATION_SYSTEMLIFETIMEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INITIALIZATION_SYSTEMLIFETIMEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Initialization/SystemInitializer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SystemLifetimeManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SystemLifetimeManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SystemLifetimeManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>Initialize</name><argument_list>(<argument>std::unique_ptr&lt;SystemInitializer&gt; initializer</argument>,
<argument>LoadPluginCallbackType plugin_callback</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Terminate</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SystemInitializer</name></expr></argument>&gt;</argument_list></name> <name>m_initializer</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>SystemLifetimeManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SystemLifetimeManager</name> <operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SystemLifetimeManager</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SystemLifetimeManager</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
