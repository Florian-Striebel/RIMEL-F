<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/Function.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_FUNCTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_FUNCTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Declaration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Mangled.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/DWARFExpression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContext</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>FunctionInfo</name> <block>{<block_content>
<label><name>public</name>:</label>











<expr_stmt><expr><call><name>FunctionInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Declaration</name> <operator>*</operator><name>decl_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<macro><name>FunctionInfo</name><argument_list>(<argument>ConstString name</argument>, <argument>const Declaration *decl_ptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>FunctionInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
















<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_fullpaths</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<function_decl><type><name>Declaration</name> <modifier>&amp;</modifier></type><name>GetDeclaration</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>const</specifier> <name>Declaration</name> <operator>&amp;</operator><macro><name>GetDeclaration</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>ConstString</name></type> <name>m_name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Declaration</name></type> <name>m_declaration</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>InlineFunctionInfo</name> <range>: <expr><name>public</name> <name>FunctionInfo</name> <block>{
<expr><name>public</name><operator>:</operator>



















<macro><name>InlineFunctionInfo</name><argument_list>(<argument>const char *name</argument>, <argument>llvm::StringRef mangled</argument>,
<argument>const Declaration *decl_ptr</argument>,
<argument>const Declaration *call_decl_ptr</argument>)</argument_list></macro></expr>;



















<macro><name>InlineFunctionInfo</name><argument_list>(<argument>ConstString name</argument>, <argument>const Mangled &amp;mangled</argument>,
<argument>const Declaration *decl_ptr</argument>,
<argument>const Declaration *call_decl_ptr</argument>)</argument_list></macro>;


<expr><operator>~</operator><macro><name>InlineFunctionInfo</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


















<expr><name>int</name> <call><name>Compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InlineFunctionInfo</name> <operator>&amp;</operator><name>lhs</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>InlineFunctionInfo</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;








<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>, <argument>bool show_fullpaths</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>DumpStopContext</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ConstString</name> <macro><name>GetDisplayName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;





<expr><name>Declaration</name> <operator>&amp;</operator><call><name>GetCallSite</name><argument_list>()</argument_list></call></expr>;





<expr><specifier>const</specifier> <name>Declaration</name> <operator>&amp;</operator><macro><name>GetCallSite</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;





<expr><name>Mangled</name> <operator>&amp;</operator><call><name>GetMangled</name><argument_list>()</argument_list></call></expr>;





<expr><specifier>const</specifier> <name>Mangled</name> <operator>&amp;</operator><macro><name>GetMangled</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;









<expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>


<name>Mangled</name> <name>m_mangled</name></expr>;

<expr><name>Declaration</name> <name>m_call_decl</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>





<struct>struct <name>CallSiteParameter</name> <block>{
<decl_stmt><decl><type><name>DWARFExpression</name></type> <name>LocationInCallee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWARFExpression</name></type> <name>LocationInCaller</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>using</name></type> <name>CallSiteParameterArray</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CallSiteParameter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>CallEdge</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>AddrType</name> <range>: <expr><name>uint8_t</name> <block>{ <expr><name>Call</name></expr>, <expr><name>AfterCall</name></expr> }</block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CallEdge</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>





<function_decl><type><name>virtual</name> <name>Function</name> <modifier>*</modifier></type><name>GetCallee</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>images</name></decl></parameter>,
<parameter><decl><type><name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetReturnPCAddress</name><argument_list>(<argument>Function &amp;caller</argument>, <argument>Target &amp;target</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>AddrType</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetCallerAddress</name><argument_list>(<argument>Function &amp;caller</argument>,
<argument>Target &amp;target</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><name>caller_address_type</name></expr>,
<macro><name>GetLoadAddress</name><argument_list>(<argument>caller_address</argument>, <argument>caller</argument>, <argument>target</argument>)</argument_list></macro>}</block></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsTailCall</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>is_tail_call</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CallSiteParameter</name></expr></argument>&gt;</argument_list></name> <macro><name>GetCallSiteParameters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>parameters</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetSortKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><name>is_tail_call</name></expr>, <macro><name>GetUnresolvedReturnPCAddress</name><argument_list>()</argument_list></macro>}</block></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<macro><name>CallEdge</name><argument_list>(<argument>AddrType caller_address_type</argument>, <argument>lldb::addr_t caller_address</argument>,
<argument>bool is_tail_call</argument>, <argument>CallSiteParameterArray &amp;&amp;parameters</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>caller_address</name><argument_list>(<argument><expr><name>caller_address</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>caller_address_type</name><argument_list>(<argument><expr><name>caller_address_type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>is_tail_call</name><argument_list>(<argument><expr><name>is_tail_call</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>parameters</name><argument_list>(<argument>std::move(parameters)</argument>)</argument_list></macro> <expr><block>{}</block>



<specifier>static</specifier> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLoadAddress</name><argument_list>(<argument>lldb::addr_t unresolved_pc</argument>,
<argument>Function &amp;caller</argument>, <argument>Target &amp;target</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetUnresolvedReturnPCAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>caller_address_type</name> <operator>==</operator> <name>AddrType</name><operator>::</operator><name>AfterCall</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_tail_call</name>
<operator>?</operator> <name>caller_address</name>
<operator>:</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>caller_address</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AddrType</name></type> <name>caller_address_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_tail_call</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CallSiteParameterArray</name></type> <name>parameters</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>DirectCallEdge</name> <range>: <expr><name>public</name> <name>CallEdge</name> <block>{
<expr><name>public</name><operator>:</operator>


<macro><name>DirectCallEdge</name><argument_list>(<argument>const char *symbol_name</argument>, <argument>AddrType caller_address_type</argument>,
<argument>lldb::addr_t caller_address</argument>, <argument>bool is_tail_call</argument>,
<argument>CallSiteParameterArray &amp;&amp;parameters</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>CallEdge</name><argument_list>(<argument>caller_address_type</argument>, <argument>caller_address</argument>, <argument>is_tail_call</argument>,
<argument>std::move(parameters)</argument>)</argument_list></macro> <block>{
<expr><name><name>lazy_callee</name><operator>.</operator><name>symbol_name</name></name> <operator>=</operator> <name>symbol_name</name></expr>;
}</block>

<name>Function</name> <operator>*</operator><macro><name>GetCallee</name><argument_list>(<argument>ModuleList &amp;images</argument>, <argument>ExecutionContext &amp;exe_ctx</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <call><name>ParseSymbolFileAndResolve</name><argument_list>(<argument><expr><name>ModuleList</name> <operator>&amp;</operator><name>images</name></expr></argument>)</argument_list></call></expr>;





<expr>union <block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>symbol_name</name></expr>;
<expr><name>Function</name> <operator>*</operator><name>def</name></expr>;
}</block> <name>lazy_callee</name></expr>;


<expr><name>bool</name> <name>resolved</name> <operator>=</operator> <name>false</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>IndirectCallEdge</name> <range>: <expr><name>public</name> <name>CallEdge</name> <block>{
<expr><name>public</name><operator>:</operator>


<macro><name>IndirectCallEdge</name><argument_list>(<argument>DWARFExpression call_target</argument>, <argument>AddrType caller_address_type</argument>,
<argument>lldb::addr_t caller_address</argument>, <argument>bool is_tail_call</argument>,
<argument>CallSiteParameterArray &amp;&amp;parameters</argument>)</argument_list></macro>
<operator>:</operator> <call><name>CallEdge</name><argument_list>(<argument><expr><name>caller_address_type</name></expr></argument>, <argument><expr><name>caller_address</name></expr></argument>, <argument><expr><name>is_tail_call</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>call_target</name><argument_list>(<argument>std::move(call_target)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>Function</name> <operator>*</operator><macro><name>GetCallee</name><argument_list>(<argument>ModuleList &amp;images</argument>, <argument>ExecutionContext &amp;exe_ctx</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>



<name>DWARFExpression</name> <name>call_target</name></expr>;
}</block></expr></range></decl>;</decl_stmt>





















<decl_stmt><decl><type><name>class</name></type> <name>Function</name> <range>: <expr><name>public</name> <name>UserID</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>SymbolContextScope</name> <block>{<block_content>
<label><name>public</name>:</label>




























<macro><name>Function</name><argument_list>(<argument>CompileUnit *comp_unit</argument>, <argument>lldb::user_id_t func_uid</argument>,
<argument>lldb::user_id_t func_type_uid</argument>, <argument>const Mangled &amp;mangled</argument>,
<argument>Type *func_type</argument>, <argument>const AddressRange &amp;range</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><operator>~</operator><macro><name>Function</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>CalculateSymbolContext</name><argument_list>(<argument><expr><name>SymbolContext</name> <operator>*</operator><name>sc</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>CalculateSymbolContextModule</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CompileUnit</name> <operator>*</operator><macro><name>CalculateSymbolContextCompileUnit</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Function</name> <operator>*</operator><macro><name>CalculateSymbolContextFunction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><specifier>const</specifier> <name>AddressRange</name> <modifier>&amp;</modifier></type><name>GetAddressRange</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_range</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<function_decl><type><name>void</name></type> <name>GetStartLineSourceInfo</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>source_file</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>line_no</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>GetEndLineSourceInfo</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>source_file</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>line_no</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallEdge</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <call><name>GetCallEdges</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallEdge</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <call><name>GetTailCallingEdges</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>CallEdge</name> <modifier>*</modifier></type><name>GetCallEdgeForReturnAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>return_pc</name></expr></argument>, <argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<function_decl><type><name>Block</name> <modifier>&amp;</modifier></type><name>GetBlock</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>can_create</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CompileUnit</name> <modifier>*</modifier></type><name>GetCompileUnit</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>const</specifier> <name>CompileUnit</name> <operator>*</operator><macro><name>GetCompileUnit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function><type><name>DWARFExpression</name> <modifier>&amp;</modifier></type><name>GetFrameBaseExpression</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_frame_base</name></expr>;</return> </block_content>}</block></function>





<expr_stmt><expr><specifier>const</specifier> <name>DWARFExpression</name> <operator>&amp;</operator><macro><name>GetFrameBaseExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_frame_base</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetNameNoArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetDisplayName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Mangled</name> <operator>&amp;</operator><macro><name>GetMangled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_mangled</name></expr>;</return> }</block></expr></expr_stmt>





<function_decl><type><name>CompilerDeclContext</name></type> <name>GetDeclContext</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>Type</name> <modifier>*</modifier></type><name>GetType</name><parameter_list>()</parameter_list>;</function_decl>






<expr_stmt><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>CompilerType</name></type> <name>GetCompilerType</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><name>uint32_t</name></type> <name>GetPrologueByteSize</name><parameter_list>()</parameter_list>;</function_decl>












<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>DumpSymbolContext</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>









<expr_stmt><expr><name>size_t</name> <macro><name>MemorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>














<function_decl><type><name>bool</name></type> <name>GetIsOptimized</name><parameter_list>()</parameter_list>;</function_decl>














<function_decl><type><name>bool</name></type> <name>IsTopLevelFunction</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DisassemblerSP</name> <macro><name>GetInstructions</name><argument_list>(<argument>const ExecutionContext &amp;exe_ctx</argument>,
<argument>const char *flavor</argument>,
<argument>bool force_live_memory = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>GetDisassembly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flavor</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_live_memory</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<enum>enum <block>{

<decl><name>flagsCalculatedPrologueSize</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>CompileUnit</name> <modifier>*</modifier></type><name>m_comp_unit</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>m_type_uid</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>Type</name> <modifier>*</modifier></type><name>m_type</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Mangled</name></type> <name>m_mangled</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Block</name></type> <name>m_block</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>AddressRange</name></type> <name>m_range</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>DWARFExpression</name></type> <name>m_frame_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_prologue_byte_size</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_call_edges_lock</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_call_edges_resolved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallEdge</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_call_edges</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Function</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Function</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Function</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Function</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
