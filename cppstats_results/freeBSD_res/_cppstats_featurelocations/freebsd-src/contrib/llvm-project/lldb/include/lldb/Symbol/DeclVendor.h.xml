<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/DeclVendor.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_DECLVENDOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_DECLVENDOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>DeclVendor</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>DeclVendorKind</name> <block>{
<decl><name>eClangDeclVendor</name></decl>,
<decl><name>eClangModuleDeclVendor</name></decl>,
<decl><name>eAppleObjCDeclVendor</name></decl>,
<decl><name>eLastClangDeclVendor</name></decl>,
}</block>;</enum>

<macro><name>DeclVendor</name><argument_list>(<argument>DeclVendorKind kind</argument>)</argument_list></macro> : <macro><name>m_kind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DeclVendor</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>DeclVendorKind</name> <macro><name>GetKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_kind</name></expr>;</return> }</block></expr></expr_stmt>

















<decl_stmt><decl><type><name>virtual</name> <name>uint32_t</name></type> <name>FindDecls</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><name>bool</name> <name>append</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>max_matches</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompilerDecl</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>decls</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>












<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompilerType</name></expr></argument>&gt;</argument_list></name> <macro><name>FindTypes</name><argument_list>(<argument>ConstString name</argument>, <argument>uint32_t max_matches</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>DeclVendor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclVendor</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DeclVendor</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DeclVendor</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DeclVendorKind</name></type> <name>m_kind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
