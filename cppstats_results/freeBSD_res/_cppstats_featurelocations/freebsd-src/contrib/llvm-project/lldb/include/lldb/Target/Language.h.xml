<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Language.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_LANGUAGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_LANGUAGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Highlighter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/DumpValueObjectOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatClasses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/StringPrinter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TypeSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Language</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>class</name> <name>TypeScavenger</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>class</name> <name>Result</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>bool</name> <call><name>IsValid</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>DumpToStream</name><argument_list>(<argument>Stream &amp;stream</argument>,
<argument>bool print_help_if_available</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>Result</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
}</block></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ResultSet</name></expr>;</expr_stmt></typedef>

<name>virtual</name> <operator>~</operator><call><name>TypeScavenger</name><argument_list>()</argument_list></call> <operator>=</operator> default</block></expr>;

<expr><name>size_t</name> <macro><name>Find</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>, <argument>const char *key</argument>,
<argument>ResultSet &amp;results</argument>, <argument>bool append = true</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>TypeScavenger</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>Find_Impl</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>,
<argument><expr><name>ResultSet</name> <operator>&amp;</operator><name>results</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ImageListTypeScavenger</name> <range>: <expr><name>public</name> <name>TypeScavenger</name> <block>{
<expr><name>class</name> <name>Result</name> <operator>:</operator> <name>public</name> <name>Language</name><operator>::</operator><name>TypeScavenger</name><operator>::</operator><name>Result</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Result</name><argument_list>(<argument>CompilerType type</argument>)</argument_list></macro>
<operator>:</operator> <name>Language</name><operator>::</operator><name>TypeScavenger</name><operator>::</operator><call><name>Result</name><argument_list>()</argument_list></call></expr>, <macro><name>m_compiler_type</name><argument_list>(<argument>type</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>m_compiler_type</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>bool</name> <macro><name>DumpToStream</name><argument_list>(<argument>Stream &amp;stream</argument>, <argument>bool print_help_if_available</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_compiler_type</name><operator>.</operator><name>DumpTypeDescription</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>EOL</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<operator>~</operator><macro><name>Result</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>private</name><operator>:</operator>
<name>CompilerType</name> <name>m_compiler_type</name></expr>;
}</block></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>ImageListTypeScavenger</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>ImageListTypeScavenger</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;





<expr><name>virtual</name> <name>CompilerType</name> <call><name>AdjustForInclusion</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>&amp;</operator><name>candidate</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>bool</name> <macro><name>Find_Impl</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>, <argument>const char *key</argument>,
<argument>ResultSet &amp;results</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>ScavengerTypes</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>EitherTypeScavenger</name> <range>: <expr><name>public</name> <name>TypeScavenger</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>EitherTypeScavenger</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>TypeScavenger</name><argument_list>()</argument_list></call></expr>, <macro><name>m_scavengers</name><argument_list>()</argument_list></macro> <expr><block>{
<for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeScavenger</name></expr></argument>&gt;</argument_list></name> <name>scavenger</name> <operator>:</operator> <block>{ <expr><name>std</name><operator>::</operator><macro><name>shared_ptr</name></macro><operator>&lt;</operator><name>TypeScavenger</name><operator>&gt;</operator><operator>(</operator><name>new</name> <call><name>ScavengerTypes</name><argument_list>()</argument_list></call><operator>)</operator><operator>...</operator></expr> }</block></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scavenger</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_scavengers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>scavenger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
}
protected:
bool Find_Impl(ExecutionContextScope *exe_scope</block><operator>,</operator> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>,
<decl><type ref="prev"/><name>ResultSet</name> <modifier>&amp;</modifier><name>results</name></decl>) override <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>append</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>scavenger</name> <operator>:</operator> <name>m_scavengers</name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scavenger</name> <operator>&amp;&amp;</operator> <call><name><name>scavenger</name><operator>-&gt;</operator><name>Find</name></name><argument_list>(<argument><expr><name>exe_scope</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></for>
<expr_stmt/>}</block_content>
private:
std::vector&lt;std::shared_ptr&lt;TypeScavenger&gt;&gt; m_scavengers</block>;</decl_stmt></for>
}</block></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>ScavengerTypes</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>UnionTypeScavenger</name> <operator>:</operator> <name>public</name> <name>TypeScavenger</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>UnionTypeScavenger</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>TypeScavenger</name><argument_list>()</argument_list></call></expr>, <macro><name>m_scavengers</name><argument_list>()</argument_list></macro> <expr><block>{
<for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeScavenger</name></expr></argument>&gt;</argument_list></name> <name>scavenger</name> <operator>:</operator> <block>{ <expr><name>std</name><operator>::</operator><macro><name>shared_ptr</name></macro><operator>&lt;</operator><name>TypeScavenger</name><operator>&gt;</operator><operator>(</operator><name>new</name> <call><name>ScavengerTypes</name><argument_list>()</argument_list></call><operator>)</operator><operator>...</operator></expr> }</block></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scavenger</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_scavengers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>scavenger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
}
protected:
bool Find_Impl(ExecutionContextScope *exe_scope</block><operator>,</operator> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>,
<decl><type ref="prev"/><name>ResultSet</name> <modifier>&amp;</modifier><name>results</name></decl>) override <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>append</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>scavenger</name> <operator>:</operator> <name>m_scavengers</name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scavenger</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>scavenger</name><operator>-&gt;</operator><name>Find</name></name><argument_list>(<argument><expr><name>exe_scope</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>append</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>success</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return success</block><empty_stmt>;</empty_stmt></for>
<expr_stmt/>}</block_content>
private:
std::vector&lt;std::shared_ptr&lt;TypeScavenger&gt;&gt; m_scavengers</block>;</decl_stmt></for>
}</block></expr>;

enum <expr><name>class</name> <name>FunctionNameRepresentation</name> <block>{
<expr><name>eName</name></expr>,
<expr><name>eNameWithArgs</name></expr>,
<expr><name>eNameWithNoArgs</name></expr>
}</block></expr>;

<expr><operator>~</operator><macro><name>Language</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>Language</name> <operator>*</operator><macro><name>FindPlugin</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>Language</name> <operator>*</operator><macro><name>FindPlugin</name><argument_list>(<argument>llvm::StringRef file_path</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>Language</name> <operator>*</operator><macro><name>FindPlugin</name><argument_list>(<argument>lldb::LanguageType language</argument>,
<argument>llvm::StringRef file_path</argument>)</argument_list></macro></expr>;


<expr><specifier>static</specifier> <name>void</name> <call><name>ForEach</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Language</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguageType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>IsTopLevelFunction</name><argument_list>(<argument><expr><name>Function</name> <operator>&amp;</operator><name>function</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>IsSourceFile</name><argument_list>(<argument>llvm::StringRef file_path</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>Highlighter</name> <operator>*</operator><macro><name>GetHighlighter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <call><name>GetFormatters</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>HardcodedFormatters</name><operator>::</operator><name>HardcodedFormatFinder</name> <call><name>GetHardcodedFormats</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>HardcodedFormatters</name><operator>::</operator><name>HardcodedSummaryFinder</name> <call><name>GetHardcodedSummaries</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>HardcodedFormatters</name><operator>::</operator><name>HardcodedSyntheticFinder</name>
<call><name>GetHardcodedSynthetics</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetPossibleFormattersMatches</name><argument_list>(<argument>ValueObject &amp;valobj</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeScavenger</name></expr></argument>&gt;</argument_list></name> <call><name>GetTypeScavenger</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetLanguageSpecificTypeLookupHelp</name><argument_list>()</argument_list></call></expr>;

<expr><name>class</name> <name>MethodNameVariant</name> <block>{
<expr><name>ConstString</name> <name>m_name</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>FunctionNameType</name> <name>m_type</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>MethodNameVariant</name><argument_list>(<argument>ConstString name</argument>, <argument>lldb::FunctionNameType type</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_type</name><argument_list>(<argument>type</argument>)</argument_list></macro> <expr><block>{}</block>
<name>ConstString</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block>
<name>lldb</name><operator>::</operator><name>FunctionNameType</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block>
}</expr>;



<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Language</name><operator>::</operator><name>MethodNameVariant</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetMethodNameVariants</name><argument_list>(<argument>ConstString method_name</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Language</name><operator>::</operator><name>MethodNameVariant</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr>;






<expr><name>virtual</name> <name>bool</name> <macro><name>SymbolNameFitsToLanguage</name><argument_list>(<argument>Mangled name</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>





<name>virtual</name> <name>bool</name> <macro><name>GetFormatterPrefixSuffix</name><argument_list>(<argument>ValueObject &amp;valobj</argument>,
<argument>ConstString type_hint</argument>,
<argument>std::string &amp;prefix</argument>,
<argument>std::string &amp;suffix</argument>)</argument_list></macro></expr>;



<expr><name>virtual</name> <name>DumpValueObjectOptions</name><operator>::</operator><name>DeclPrintingHelper</name> <call><name>GetDeclPrintingHelper</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>LazyBool</name> <call><name>IsLogicalTrue</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;



<expr><name>virtual</name> <name>bool</name> <call><name>IsNilReference</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>)</argument_list></call></expr>;



<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetNilReferenceSummaryString</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block>





<name>virtual</name> <name>bool</name> <call><name>IsUninitializedReference</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>valobj</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>GetFunctionDisplayName</name><argument_list>(<argument>const SymbolContext *sc</argument>,
<argument>const ExecutionContext *exe_ctx</argument>,
<argument>FunctionNameRepresentation representation</argument>,
<argument>Stream &amp;s</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>GetExceptionResolverDescription</name><argument_list>(<argument>bool catch_on</argument>, <argument>bool throw_on</argument>,
<argument>Stream &amp;s</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>void</name> <macro><name>GetDefaultExceptionResolverDescription</name><argument_list>(<argument>bool catch_on</argument>,
<argument>bool throw_on</argument>, <argument>Stream &amp;s</argument>)</argument_list></macro></expr>;




<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>LanguageType</name>
<call><name>GetLanguageTypeFromString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>string</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguageTypeFromString</name><argument_list>(<argument>llvm::StringRef string</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetNameForLanguageType</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>PrintAllLanguages</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>prefix</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>suffix</name></expr></argument>)</argument_list></call></expr>;


<expr><specifier>static</specifier> <name>void</name> <call><name>ForAllLanguages</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>lldb</name><operator>::</operator><name>LanguageType</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>LanguageIsCPlusPlus</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>LanguageIsObjC</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>LanguageIsC</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;


<expr><specifier>static</specifier> <name>bool</name> <macro><name>LanguageIsCFamily</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>LanguageIsPascal</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetPrimaryLanguage</name><argument_list>(<argument>lldb::LanguageType language</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>&gt;</argument_list></name> <call><name>GetSupportedLanguages</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>LanguageSet</name> <call><name>GetLanguagesSupportingTypeSystems</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>LanguageSet</name> <call><name>GetLanguagesSupportingTypeSystemsForExpressions</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>LanguageSet</name> <call><name>GetLanguagesSupportingREPLs</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>


<call><name>Language</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>Language</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Language</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>Language</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Language</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr>;

}</block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
