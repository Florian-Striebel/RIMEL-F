<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Target.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_TARGET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_TARGET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/WatchpointList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Architecture.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Disassembler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UserSettingsController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/Expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/ProcessLaunchInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TypeSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/PathMappingList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/SectionLoadHistory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/LLDBAssert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Timeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<function_decl><type><name>OptionEnumValues</name></type> <name>GetDynamicValueTypes</name><parameter_list>()</parameter_list>;</function_decl>

<enum>enum <name>InlineStrategy</name> <block>{
<decl><name>eInlineBreakpointsNever</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eInlineBreakpointsHeaders</name></decl>,
<decl><name>eInlineBreakpointsAlways</name></decl>
}</block>;</enum>

<enum>enum <name>LoadScriptFromSymFile</name> <block>{
<decl><name>eLoadScriptFromSymFileTrue</name></decl>,
<decl><name>eLoadScriptFromSymFileFalse</name></decl>,
<decl><name>eLoadScriptFromSymFileWarn</name></decl>
}</block>;</enum>

<enum>enum <name>LoadCWDlldbinitFile</name> <block>{
<decl><name>eLoadCWDlldbinitTrue</name></decl>,
<decl><name>eLoadCWDlldbinitFalse</name></decl>,
<decl><name>eLoadCWDlldbinitWarn</name></decl>
}</block>;</enum>

<enum>enum <name>LoadDependentFiles</name> <block>{
<decl><name>eLoadDependentsDefault</name></decl>,
<decl><name>eLoadDependentsYes</name></decl>,
<decl><name>eLoadDependentsNo</name></decl>,
}</block>;</enum>

<enum>enum <name>ImportStdModule</name> <block>{
<decl><name>eImportStdModuleFalse</name></decl>,
<decl><name>eImportStdModuleFallback</name></decl>,
<decl><name>eImportStdModuleTrue</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>TargetExperimentalProperties</name> <range>: <expr><name>public</name> <name>Properties</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>TargetExperimentalProperties</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TargetProperties</name> <range>: <expr><name>public</name> <name>Properties</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>TargetProperties</name><argument_list>(<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>TargetProperties</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ArchSpec</name> <macro><name>GetDefaultArchitecture</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetDefaultArchitecture</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetMoveToNearestCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <macro><name>GetPreferDynamicValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>SetPreferDynamicValue</name><argument_list>(<argument>lldb::DynamicValueType d</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetPreloadSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetPreloadSymbols</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDisableASLR</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetDisableASLR</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetInheritTCC</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetInheritTCC</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDetachOnError</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetDetachOnError</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDisableSTDIO</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetDisableSTDIO</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetDisassemblyFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>InlineStrategy</name> <macro><name>GetInlineStrategy</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetArg0</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetArg0</name><argument_list>(<argument>llvm::StringRef arg</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetRunArguments</name><argument_list>(<argument>Args &amp;args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetRunArguments</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Environment</name> <macro><name>GetEnvironment</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>SetEnvironment</name><argument_list>(<argument>Environment env</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetSkipPrologue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>PathMappingList</name> <operator>&amp;</operator><macro><name>GetSourcePathMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>FileSpecList</name> <call><name>GetExecutableSearchPaths</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>AppendExecutableSearchPaths</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>FileSpecList</name> <call><name>GetDebugFileSearchPaths</name><argument_list>()</argument_list></call></expr>;

<expr><name>FileSpecList</name> <call><name>GetClangModuleSearchPaths</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetEnableAutoImportClangModules</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ImportStdModule</name> <macro><name>GetImportStdModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetEnableAutoApplyFixIts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint64_t</name> <macro><name>GetNumberOfRetriesWithFixits</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetEnableNotifyAboutFixIts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetEnableSaveObjects</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetEnableSyntheticValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <macro><name>GetMaxZeroPaddingInFloatFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <macro><name>GetMaximumNumberOfChildrenToDisplay</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <macro><name>GetMaximumSizeOfStringSummary</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint32_t</name> <macro><name>GetMaximumMemReadSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>FileSpec</name> <macro><name>GetStandardInputPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>FileSpec</name> <macro><name>GetStandardErrorPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>FileSpec</name> <macro><name>GetStandardOutputPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetStandardInputPath</name><argument_list>(<argument>llvm::StringRef path</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>SetStandardOutputPath</name><argument_list>(<argument>llvm::StringRef path</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>SetStandardErrorPath</name><argument_list>(<argument>llvm::StringRef path</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>SetStandardInputPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>void</name> <call><name>SetStandardOutputPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>void</name> <call><name>SetStandardErrorPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>bool</name> <call><name>GetBreakpointsConsultPlatformAvoidList</name><argument_list>()</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <call><name>GetExpressionPrefixContents</name><argument_list>()</argument_list></call></expr>;

<expr><name>uint64_t</name> <macro><name>GetExprErrorLimit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetUseHexImmediates</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetUseFastStepping</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetDisplayExpressionsInCrashlogs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>LoadScriptFromSymFile</name> <macro><name>GetLoadScriptFromSymbolFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>LoadCWDlldbinitFile</name> <macro><name>GetLoadCWDlldbinitFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>Disassembler</name><operator>::</operator><name>HexImmediateStyle</name> <macro><name>GetHexImmediateStyle</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>MemoryModuleLoadLevel</name> <macro><name>GetMemoryModuleLoadLevel</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetUserSpecifiedTrapHandlerNames</name><argument_list>(<argument>Args &amp;args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetUserSpecifiedTrapHandlerNames</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetNonStopModeEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetNonStopModeEnabled</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDisplayRuntimeSupportValues</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetDisplayRuntimeSupportValues</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDisplayRecognizedArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetDisplayRecognizedArguments</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>ProcessLaunchInfo</name> <operator>&amp;</operator><macro><name>GetProcessLaunchInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetProcessLaunchInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessLaunchInfo</name> <operator>&amp;</operator><name>launch_info</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetInjectLocalVariables</name><argument_list>(<argument>ExecutionContext *exe_ctx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>SetInjectLocalVariables</name><argument_list>(<argument>ExecutionContext *exe_ctx</argument>, <argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>SetRequireHardwareBreakpoints</name><argument_list>(<argument>bool b</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetRequireHardwareBreakpoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetAutoInstallMainExecutable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>UpdateLaunchInfoFromProperties</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetDebugUtilityExpression</name><argument_list>(<argument>bool debug</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetDebugUtilityExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>

<name>void</name> <call><name>Arg0ValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>RunArgsValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>EnvVarsValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>InputPathValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>OutputPathValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>ErrorPathValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>DetachOnErrorValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>DisableASLRValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>InheritTCCValueChangedCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>DisableSTDIOValueChangedCallback</name><argument_list>()</argument_list></call></expr>;

<expr><name>Environment</name> <macro><name>ComputeEnvironment</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>ProcessLaunchInfo</name> <name>m_launch_info</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TargetExperimentalProperties</name></expr></argument>&gt;</argument_list></name> <name>m_experimental_properties_up</name></expr>;
<expr><name>Target</name> <operator>*</operator><name>m_target</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EvaluateExpressionOptions</name> <block>{<block_content>
<label><name>public</name>:</label>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4268</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <name>constexpr</name> <name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name> <name>default_timeout</name><block>{<expr><literal type="number">500</literal></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>ExecutionPolicy</name></type> <name>default_execution_policy</name> <init>=
<expr><name>eExecutionPolicyOnlyWhenNeeded</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EvaluateExpressionOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>ExecutionPolicy</name> <macro><name>GetExecutionPolicy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_execution_policy</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetExecutionPolicy</name><parameter_list>(<parameter><decl><type><name>ExecutionPolicy</name></type> <name>policy</name> <init>= <expr><name>eExecutionPolicyAlways</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_execution_policy</name> <operator>=</operator> <name>policy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_language</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_language</name> <operator>=</operator> <name>language</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>DoesCoerceToId</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_coerce_to_id</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name><name>m_prefix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <call><name><name>m_prefix</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetPrefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <name><name>prefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_prefix</name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_prefix</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetCoerceToId</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>coerce</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_coerce_to_id</name> <operator>=</operator> <name>coerce</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>DoesUnwindOnError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_unwind_on_error</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetUnwindOnError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>unwind</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_unwind_on_error</name> <operator>=</operator> <name>unwind</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>DoesIgnoreBreakpoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_ignore_breakpoints</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIgnoreBreakpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_ignore_breakpoints</name> <operator>=</operator> <name>ignore</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>DoesKeepInMemory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_keep_in_memory</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetKeepInMemory</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>keep</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_keep_in_memory</name> <operator>=</operator> <name>keep</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <macro><name>GetUseDynamic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_use_dynamic</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type>
<name>SetUseDynamic</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>dynamic</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eDynamicCanRunTarget</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_use_dynamic</name> <operator>=</operator> <name>dynamic</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetTimeout</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_timeout</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_timeout</name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetOneThreadTimeout</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_one_thread_timeout</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetOneThreadTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_one_thread_timeout</name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetTryAllThreads</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_try_others</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetTryAllThreads</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>try_others</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_try_others</name> <operator>=</operator> <name>try_others</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetStopOthers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stop_others</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetStopOthers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop_others</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_stop_others</name> <operator>=</operator> <name>stop_others</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetDebug</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_debug</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetDebug</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_debug</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m_debug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_generate_debug_info</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetGenerateDebugInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_generate_debug_info</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetGenerateDebugInfo</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_generate_debug_info</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetColorizeErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_ansi_color_errors</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetColorizeErrors</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_ansi_color_errors</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetTrapExceptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_trap_exceptions</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetTrapExceptions</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_trap_exceptions</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetREPLEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_repl</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetREPLEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_repl</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>SetCancelCallback</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionCancelCallback</name> <name>callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_cancel_callback_baton</name> <operator>=</operator> <name>baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_cancel_callback</name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>InvokeCancelCallback</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionEvaluationPhase</name> <name>phase</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_cancel_callback</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>m_cancel_callback</name><argument_list>(<argument><expr><name>phase</name></expr></argument>, <argument><expr><name>m_cancel_callback_baton</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>SetPoundLine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_pound_line_file</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_pound_line_line</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>m_pound_line_file</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_pound_line_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPoundLineFilePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name><name>m_pound_line_file</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <call><name><name>m_pound_line_file</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetPoundLineLine</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_pound_line_line</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetResultIsInternal</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_result_is_internal</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetResultIsInternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_result_is_internal</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetAutoApplyFixIts</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_auto_apply_fixits</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetAutoApplyFixIts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_auto_apply_fixits</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetRetriesWithFixIts</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>number_of_retries</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_retries_with_fixits</name> <operator>=</operator> <name>number_of_retries</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uint64_t</name> <macro><name>GetRetriesWithFixIts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_retries_with_fixits</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsForUtilityExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_running_utility_expression</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsForUtilityExpr</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_running_utility_expression</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ExecutionPolicy</name></type> <name>m_execution_policy</name> <init>= <expr><name>default_execution_policy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>m_language</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eLanguageTypeUnknown</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_prefix</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_coerce_to_id</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_unwind_on_error</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_ignore_breakpoints</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_keep_in_memory</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_try_others</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_stop_others</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_debug</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_trap_exceptions</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_repl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_generate_debug_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_ansi_color_errors</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_result_is_internal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_auto_apply_fixits</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m_retries_with_fixits</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_running_utility_expression</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>m_use_dynamic</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eNoDynamicValues</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name></type> <name>m_timeout</name> <init>= <expr><name>default_timeout</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Timeout</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>micro</name></expr></argument>&gt;</argument_list></name></type> <name>m_one_thread_timeout</name> <init>= <expr><name>llvm</name><operator>::</operator><name>None</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionCancelCallback</name> <name>m_cancel_callback</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_cancel_callback_baton</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>string</name> <name>m_pound_line_file</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>uint32_t</name></type> <name>m_pound_line_line</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Target</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>TargetProperties</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>Broadcaster</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>ExecutionContextScope</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>ModuleList</name>::<name>Notifier</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TargetList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Debugger</name></decl>;</decl_stmt>


<enum>enum <block>{
<decl><name>eBroadcastBitBreakpointChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitModulesLoaded</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitModulesUnloaded</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitWatchpointChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitSymbolsLoaded</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>



<function_decl><type><specifier>static</specifier> <name>ConstString</name> <modifier>&amp;</modifier></type><name>GetStaticBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>ConstString</name> <operator>&amp;</operator><macro><name>GetBroadcasterClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>GetStaticBroadcasterClass</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>TargetEventData</name> <range>: <expr><name>public</name> <name>EventData</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>TargetEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>TargetEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>TargetEventData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>ConstString</name> <call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;

<expr><name>ConstString</name> <macro><name>GetFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetEventData</name><operator>::</operator><call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetEventData</name> <operator>*</operator><call><name>GetEventDataFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <call><name>GetTargetFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>ModuleList</name> <call><name>GetModuleListFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><macro><name>GetTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_target_sp</name></expr>;</return> }</block>

<specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><macro><name>GetModuleList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_module_list</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>TargetSP</name> <name>m_target_sp</name></expr>;
<expr><name>ModuleList</name> <name>m_module_list</name></expr>;

<expr><call><name>TargetEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TargetEventData</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>TargetEventData</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>TargetEventData</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>Target</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsInitialize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsTerminate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>FileSpecList</name></type> <name>GetDefaultExecutableSearchPaths</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>FileSpecList</name></type> <name>GetDefaultDebugFileSearchPaths</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ArchSpec</name></type> <name>GetDefaultArchitecture</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetDefaultArchitecture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsDummyTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_dummy_target</name></expr>;</return> }</block></expr></expr_stmt>
































<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>GetOrCreateModule</name><argument_list>(<argument>const ModuleSpec &amp;module_spec</argument>, <argument>bool notify</argument>,
<argument>Status *error_ptr = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetPropertiesSP</name> <operator>&amp;</operator><call><name>GetGlobalProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><call><name>GetAPIMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>DeleteCurrentProcess</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>CleanupProcess</name><parameter_list>()</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><macro><name>CreateProcess</name><argument_list>(<argument>lldb::ListenerSP listener_sp</argument>,
<argument>llvm::StringRef plugin_name</argument>,
<argument>const FileSpec *crash_file</argument>,
<argument>bool can_connect</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><macro><name>GetProcessSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_valid</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>ProcessLaunchInfo</name> <modifier>&amp;</modifier></type><name>launch_info</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>Attach</name><parameter_list>(<parameter><decl><type><name>ProcessAttachInfo</name> <modifier>&amp;</modifier></type><name>attach_info</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>BreakpointList</name> <modifier>&amp;</modifier></type><name>GetBreakpointList</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>internal</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>BreakpointList</name> <modifier>&amp;</modifier></type><name>GetBreakpointList</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>GetLastCreatedBreakpoint</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_last_created_breakpoint</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>GetBreakpointByID</name><argument_list>(<argument>lldb::break_id_t break_id</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateBreakpoint</name><argument_list>(<argument>const FileSpecList *containingModules</argument>,
<argument>const FileSpec &amp;file</argument>, <argument>uint32_t line_no</argument>,
<argument>uint32_t column</argument>, <argument>lldb::addr_t offset</argument>,
<argument>LazyBool check_inlines</argument>,
<argument>LazyBool skip_prologue</argument>, <argument>bool internal</argument>,
<argument>bool request_hardware</argument>,
<argument>LazyBool move_to_nearest_code</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateSourceRegexBreakpoint</name><argument_list>(
<argument>const FileSpecList *containingModules</argument>,
<argument>const FileSpecList *source_file_list</argument>,
<argument>const std::unordered_set&lt;std::string&gt; &amp;function_names</argument>,
<argument>RegularExpression source_regex</argument>, <argument>bool internal</argument>, <argument>bool request_hardware</argument>,
<argument>LazyBool move_to_nearest_code</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateBreakpoint</name><argument_list>(<argument>lldb::addr_t load_addr</argument>, <argument>bool internal</argument>,
<argument>bool request_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateAddressInModuleBreakpoint</name><argument_list>(<argument>lldb::addr_t file_addr</argument>,
<argument>bool internal</argument>,
<argument>const FileSpec *file_spec</argument>,
<argument>bool request_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateBreakpoint</name><argument_list>(<argument>const Address &amp;addr</argument>, <argument>bool internal</argument>,
<argument>bool request_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateFuncRegexBreakpoint</name><argument_list>(
<argument>const FileSpecList *containingModules</argument>,
<argument>const FileSpecList *containingSourceFiles</argument>, <argument>RegularExpression func_regexp</argument>,
<argument>lldb::LanguageType requested_language</argument>, <argument>LazyBool skip_prologue</argument>,
<argument>bool internal</argument>, <argument>bool request_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateBreakpoint</name><argument_list>(
<argument>const FileSpecList *containingModules</argument>,
<argument>const FileSpecList *containingSourceFiles</argument>, <argument>const char *func_name</argument>,
<argument>lldb::FunctionNameType func_name_type_mask</argument>, <argument>lldb::LanguageType language</argument>,
<argument>lldb::addr_t offset</argument>, <argument>LazyBool skip_prologue</argument>, <argument>bool internal</argument>,
<argument>bool request_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name>
<macro><name>CreateExceptionBreakpoint</name><argument_list>(<argument>enum lldb::LanguageType language</argument>, <argument>bool catch_bp</argument>,
<argument>bool throw_bp</argument>, <argument>bool internal</argument>,
<argument>Args *additional_args = nullptr</argument>,
<argument>Status *additional_args_error = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateScriptedBreakpoint</name><argument_list>(
<argument>const llvm::StringRef class_name</argument>, <argument>const FileSpecList *containingModules</argument>,
<argument>const FileSpecList *containingSourceFiles</argument>, <argument>bool internal</argument>,
<argument>bool request_hardware</argument>, <argument>StructuredData::ObjectSP extra_args_sp</argument>,
<argument>Status *creation_error = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateBreakpoint</name><argument_list>(
<argument>const FileSpecList *containingModules</argument>,
<argument>const FileSpecList *containingSourceFiles</argument>, <argument>const char *func_names[]</argument>,
<argument>size_t num_names</argument>, <argument>lldb::FunctionNameType func_name_type_mask</argument>,
<argument>lldb::LanguageType language</argument>, <argument>lldb::addr_t offset</argument>, <argument>LazyBool skip_prologue</argument>,
<argument>bool internal</argument>, <argument>bool request_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name>
<macro><name>CreateBreakpoint</name><argument_list>(<argument>const FileSpecList *containingModules</argument>,
<argument>const FileSpecList *containingSourceFiles</argument>,
<argument>const std::vector&lt;std::string&gt; &amp;func_names</argument>,
<argument>lldb::FunctionNameType func_name_type_mask</argument>,
<argument>lldb::LanguageType language</argument>, <argument>lldb::addr_t m_offset</argument>,
<argument>LazyBool skip_prologue</argument>, <argument>bool internal</argument>,
<argument>bool request_hardware</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <macro><name>CreateBreakpoint</name><argument_list>(<argument>lldb::SearchFilterSP &amp;filter_sp</argument>,
<argument>lldb::BreakpointResolverSP &amp;resolver_sp</argument>,
<argument>bool internal</argument>, <argument>bool request_hardware</argument>,
<argument>bool resolve_indirect_symbols</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>WatchpointSP</name> <macro><name>CreateWatchpoint</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>size_t size</argument>,
<argument>const CompilerType *type</argument>, <argument>uint32_t kind</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>WatchpointSP</name> <macro><name>GetLastCreatedWatchpoint</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_last_created_watchpoint</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>WatchpointList</name> <modifier>&amp;</modifier></type><name>GetWatchpointList</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_watchpoint_list</name></expr>;</return> </block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>AddNameToBreakpoint</name><parameter_list>(<parameter><decl><type><name>BreakpointID</name> <modifier>&amp;</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>AddNameToBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <operator>&amp;</operator><name>bp_sp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>RemoveNameFromBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <operator>&amp;</operator><name>bp_sp</name></expr></argument>, <argument><expr><name>ConstString</name> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>BreakpointName</name> <modifier>*</modifier></type><name>FindBreakpointName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>can_create</name></decl></parameter>,
<parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DeleteBreakpointName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ConfigureBreakpointName</name><argument_list>(<argument><expr><name>BreakpointName</name> <operator>&amp;</operator><name>bp_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>BreakpointOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>BreakpointName</name><operator>::</operator><name>Permissions</name> <operator>&amp;</operator><name>permissions</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>ApplyNameToBreakpoints</name><parameter_list>(<parameter><decl><type><name>BreakpointName</name> <modifier>&amp;</modifier></type><name>bp_name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddBreakpointName</name><parameter_list>(<parameter><decl><type><name>BreakpointName</name> <modifier>*</modifier></type><name>bp_name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>GetBreakpointNames</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>RemoveAllBreakpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>internal_also</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>RemoveAllowedBreakpoints</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DisableAllBreakpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>internal_also</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DisableAllowedBreakpoints</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EnableAllBreakpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>internal_also</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EnableAllowedBreakpoints</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>DisableBreakpointByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>EnableBreakpointByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveBreakpointByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>break_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<function_decl><type><name>bool</name></type> <name>RemoveAllWatchpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>end_to_end</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DisableAllWatchpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>end_to_end</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>EnableAllWatchpoints</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>end_to_end</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ClearAllWatchpointHitCounts</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ClearAllWatchpointHistoricValues</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IgnoreAllWatchpoints</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ignore_count</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>DisableWatchpointByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>watch_id_t</name> <name>watch_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>EnableWatchpointByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>watch_id_t</name> <name>watch_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveWatchpointByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>watch_id_t</name> <name>watch_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IgnoreWatchpointByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>watch_id_t</name> <name>watch_id</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>ignore_count</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>Status</name></type> <name>SerializeBreakpointsToFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BreakpointIDList</name> <modifier>&amp;</modifier></type><name>bp_ids</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>append</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>CreateBreakpointsFromFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>BreakpointIDList</name> <modifier>&amp;</modifier></type><name>new_bps</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Status</name></type> <name>CreateBreakpointsFromFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>names</name></expr></argument>,
<argument><expr><name>BreakpointIDList</name> <operator>&amp;</operator><name>new_bps</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetCallableLoadAddress</name><argument_list>(
<argument>lldb::addr_t load_addr</argument>,
<argument>AddressClass addr_class = AddressClass::eInvalid</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name>
<macro><name>GetOpcodeLoadAddress</name><argument_list>(<argument>lldb::addr_t load_addr</argument>,
<argument>AddressClass addr_class = AddressClass::eInvalid</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetBreakableLoadAddress</name><argument_list>(<argument>lldb::addr_t addr</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>ModulesDidLoad</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ModulesDidUnload</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>delete_locations</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SymbolsDidLoad</name><parameter_list>(<parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearModules</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>delete_locations</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>DidExec</name><parameter_list>()</parameter_list>;</function_decl>
















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <call><name>GetExecutableModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>GetExecutableModulePointer</name><parameter_list>()</parameter_list>;</function_decl>


























<decl_stmt><decl><type><name>void</name></type> <name>SetExecutableModule</name><argument_list>(
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><name>LoadDependentFiles</name> <name>load_dependent_files</name> <operator>=</operator> <name>eLoadDependentsDefault</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>LoadScriptingResources</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Status</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>errors</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>*</operator><name>feedback_stream</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <name>continue_on_error</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>m_images</name><operator>.</operator><name>LoadScriptingResourcesInTarget</name></name><argument_list>(
<argument><expr><name>this</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>feedback_stream</name></expr></argument>, <argument><expr><name>continue_on_error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


















<expr_stmt><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><macro><name>GetImages</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_images</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>GetImages</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_images</name></expr>;</return> </block_content>}</block></function>
















<function_decl><type><name>bool</name></type> <name>ModuleIsExcludedForUnconstrainedSearches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>module_spec</name></decl></parameter>)</parameter_list>;</function_decl>



















<decl_stmt><decl><type><name>bool</name></type>
<name>ModuleIsExcludedForUnconstrainedSearches</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><macro><name>GetArchitecture</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_arch</name><operator>.</operator><name>GetSpec</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


























<function_decl><type><name>bool</name></type> <name>SetArchitecture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch_spec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set_platform</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>MergeArchitecture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch_spec</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>Architecture</name> <operator>*</operator><macro><name>GetArchitecturePlugin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_arch</name><operator>.</operator><name>GetPlugin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>GetDebugger</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_debugger</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>size_t</name></type> <name>ReadMemoryFromFileCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_len</name></decl></parameter>,
<parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>












<decl_stmt><decl><type><name>size_t</name></type> <name>ReadMemory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <name>dst_len</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>bool</name> <name>force_live_memory</name> <operator>=</operator> <name>false</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>*</operator><name>load_addr_ptr</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ReadCStringFromMemory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>out_str</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>ReadCStringFromMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>dst_max_len</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>result_error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>ReadScalarIntegerFromMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte_size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_signed</name></decl></parameter>, <parameter><decl><type><name>Scalar</name> <modifier>&amp;</modifier></type><name>scalar</name></decl></parameter>,
<parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>force_live_memory</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>ReadUnsignedIntegerFromMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>integer_byte_size</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>force_live_memory</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ReadPointerFromMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><name>Address</name> <modifier>&amp;</modifier></type><name>pointer_addr</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>force_live_memory</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SectionLoadList</name> <modifier>&amp;</modifier></type><name>GetSectionLoadList</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>m_section_load_history</name><operator>.</operator><name>GetCurrentSectionLoadList</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>Target</name> <modifier>*</modifier></type><name>GetTargetFromContexts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>*</modifier></type><name>sc_ptr</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>CalculateTarget</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>CalculateProcess</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>CalculateThread</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>CalculateStackFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CalculateExecutionContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function_decl><type><name>PathMappingList</name> <modifier>&amp;</modifier></type><name>GetImageSearchPathList</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TypeSystem</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<macro><name>GetScratchTypeSystemForLanguage</name><argument_list>(<argument>lldb::LanguageType language</argument>,
<argument>bool create_on_demand = true</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TypeSystem</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>GetScratchTypeSystems</name><argument_list>(<argument>bool create_on_demand = true</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PersistentExpressionState</name> <modifier>*</modifier></type>
<name>GetPersistentExpressionStateForLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>UserExpression</name> <modifier>*</modifier></type>
<name>GetUserExpressionForLanguage</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>expr</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>prefix</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>,
<argument><expr><name>Expression</name><operator>::</operator><name>ResultType</name> <name>desired_type</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>,
<argument><expr><name>ValueObject</name> <operator>*</operator><name>ctx_obj</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<decl_stmt><decl><type><name>FunctionCaller</name> <modifier>*</modifier></type><name>GetFunctionCallerForLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>return_type</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>function_address</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ValueList</name> <operator>&amp;</operator><name>arg_value_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UtilityFunction</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateUtilityFunction</name><argument_list>(<argument>std::string expression</argument>, <argument>std::string name</argument>,
<argument>lldb::LanguageType language</argument>, <argument>ExecutionContext &amp;exe_ctx</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>Status</name></type> <name>Install</name><parameter_list>(<parameter><decl><type><name>ProcessLaunchInfo</name> <modifier>*</modifier></type><name>launch_info</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>ResolveFileAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ResolveLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>, <argument><expr><name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>stop_id</name> <operator>=</operator> <name>SectionLoadHistory</name><operator>::</operator><name>eStopIDNow</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetSectionLoadAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>bool</name> <name>warn_multiple</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>UnloadModuleSections</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>UnloadModuleSections</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModuleList</name> <modifier>&amp;</modifier></type><name>module_list</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>SetSectionUnloaded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetSectionUnloaded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SectionSP</name> <operator>&amp;</operator><name>section_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ClearAllLoadedSections</name><parameter_list>()</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>void</name></type> <name>SetTrace</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TraceSP</name> <operator>&amp;</operator><name>trace_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TraceSP</name> <call><name>GetTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TraceSP</name></expr></argument>&gt;</argument_list></name> <call><name>CreateTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TraceSP</name></expr></argument>&gt;</argument_list></name> <call><name>GetTraceOrCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionResults</name> <macro><name>EvaluateExpression</name><argument_list>(
<argument>llvm::StringRef expression</argument>, <argument>ExecutionContextScope *exe_scope</argument>,
<argument>lldb::ValueObjectSP &amp;result_valobj_sp</argument>,
<argument>const EvaluateExpressionOptions &amp;options = EvaluateExpressionOptions()</argument>,
<argument>std::string *fixed_expression = nullptr</argument>, <argument>ValueObject *ctx_obj = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <macro><name>GetPersistentVariable</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetPersistentSymbol</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro></expr>;</expr_stmt>

















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>Address</name></expr></argument>&gt;</argument_list></name> <call><name>GetEntryPointAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>StopHook</name> <range>: <expr><name>public</name> <name>UserID</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StopHook</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StopHook</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>StopHook</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

enum <expr><name>class</name> <name>StopHookKind</name> <operator>:</operator> <name>uint32_t</name> <block>{ <expr><name>CommandBased</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>ScriptBased</name></expr> }</block></expr>;
enum <expr><name>class</name> <name>StopHookResult</name> <operator>:</operator> <name>uint32_t</name> <block>{
<expr><name>KeepStopped</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>RequestContinue</name></expr>,
<expr><name>AlreadyContinued</name></expr>
}</block></expr>;

<expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><macro><name>GetTarget</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_target_sp</name></expr>;</return> }</block>



<name>void</name> <call><name>SetSpecifier</name><argument_list>(<argument><expr><name>SymbolContextSpecifier</name> <operator>*</operator><name>specifier</name></expr></argument>)</argument_list></call></expr>;

<expr><name>SymbolContextSpecifier</name> <operator>*</operator><macro><name>GetSpecifier</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_specifier_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>bool</name> <call><name>ExecutionContextPasses</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list></call></expr>;





<expr><name>virtual</name> <name>StopHookResult</name> <macro><name>HandleStop</name><argument_list>(<argument>ExecutionContext &amp;exe_ctx</argument>,
<argument>lldb::StreamSP output</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>void</name> <call><name>SetThreadSpecifier</name><argument_list>(<argument><expr><name>ThreadSpec</name> <operator>*</operator><name>specifier</name></expr></argument>)</argument_list></call></expr>;

<expr><name>ThreadSpec</name> <operator>*</operator><macro><name>GetThreadSpecifier</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_thread_spec_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>bool</name> <macro><name>IsActive</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_active</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetIsActive</name><argument_list>(<argument>bool is_active</argument>)</argument_list></macro> <block>{ <expr><name>m_active</name> <operator>=</operator> <name>is_active</name></expr>; }</block>

<name>void</name> <macro><name>SetAutoContinue</name><argument_list>(<argument>bool auto_continue</argument>)</argument_list></macro> <block>{
<expr><name>m_auto_continue</name> <operator>=</operator> <name>auto_continue</name></expr>;
}</block>

<name>bool</name> <macro><name>GetAutoContinue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_auto_continue</name></expr>;</return> }</block>

<name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>GetSubclassDescription</name><argument_list>(<argument>Stream *s</argument>,
<argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>TargetSP</name> <name>m_target_sp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>SymbolContextSpecifierSP</name> <name>m_specifier_sp</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ThreadSpec</name></expr></argument>&gt;</argument_list></name> <name>m_thread_spec_up</name></expr>;
<expr><name>bool</name> <name>m_active</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>bool</name> <name>m_auto_continue</name> <operator>=</operator> <name>false</name></expr>;

<macro><name>StopHook</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>, <argument>lldb::user_id_t uid</argument>)</argument_list></macro>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StopHookCommandLine</name> <range>: <expr><name>public</name> <name>StopHook</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>StopHookCommandLine</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>StringList</name> <operator>&amp;</operator><macro><name>GetCommands</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_commands</name></expr>;</return> }</block>
<name>void</name> <call><name>SetActionFromString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>strings</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>SetActionFromStrings</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>strings</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StopHookResult</name> <macro><name>HandleStop</name><argument_list>(<argument>ExecutionContext &amp;exc_ctx</argument>,
<argument>lldb::StreamSP output_sp</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>GetSubclassDescription</name><argument_list>(<argument>Stream *s</argument>,
<argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>StringList</name> <name>m_commands</name></expr>;



<macro><name>StopHookCommandLine</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>, <argument>lldb::user_id_t uid</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>StopHook</name><argument_list>(<argument>target_sp</argument>, <argument>uid</argument>)</argument_list></macro> <expr><block>{}</block>
<name>friend</name> <name>class</name> <name>Target</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StopHookScripted</name> <range>: <expr><name>public</name> <name>StopHook</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>StopHookScripted</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>StopHookResult</name> <macro><name>HandleStop</name><argument_list>(<argument>ExecutionContext &amp;exc_ctx</argument>,
<argument>lldb::StreamSP output</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>SetScriptCallback</name><argument_list>(<argument>std::string class_name</argument>,
<argument>StructuredData::ObjectSP extra_args_sp</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>GetSubclassDescription</name><argument_list>(<argument>Stream *s</argument>,
<argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_class_name</name></expr>;


<expr><name>StructuredDataImpl</name> <operator>*</operator><name>m_extra_args</name></expr>;


<expr><name>StructuredData</name><operator>::</operator><name>GenericSP</name> <name>m_implementation_sp</name></expr>;




<macro><name>StopHookScripted</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>, <argument>lldb::user_id_t uid</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>StopHook</name><argument_list>(<argument>target_sp</argument>, <argument>uid</argument>)</argument_list></macro> <expr><block>{}</block>
<name>friend</name> <name>class</name> <name>Target</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>StopHook</name></expr></argument>&gt;</argument_list></name> <name>StopHookSP</name></expr>;</expr_stmt></typedef>



<decl_stmt><decl><type><name>StopHookSP</name></type> <name>CreateStopHook</name><argument_list>(<argument><expr><name>StopHook</name><operator>::</operator><name>StopHookKind</name> <name>kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>UndoCreateStopHook</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>uid</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>bool</name></type> <name>RunStopHooks</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetStopHookSize</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>SetSuppresStopHooks</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>suppress</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>old_value</name> <init>= <expr><name>m_suppress_stop_hooks</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m_suppress_stop_hooks</name> <operator>=</operator> <name>suppress</name></expr>;</expr_stmt>
<return>return <expr><name>old_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetSuppressStopHooks</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_suppress_stop_hooks</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveStopHookByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>uid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>RemoveAllStopHooks</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>StopHookSP</name></type> <name>GetStopHookByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>uid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetStopHookActiveStateByID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>uid</name></expr></argument>, <argument><expr><name>bool</name> <name>active_state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetAllStopHooksActiveState</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>active_state</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>size_t</name> <macro><name>GetNumStopHooks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_stop_hooks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>StopHookSP</name></type> <name>GetStopHookAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>GetNumStopHooks</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>StopHookSP</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>StopHookCollection</name><operator>::</operator><name>iterator</name> <name>pos</name> <operator>=</operator> <call><name><name>m_stop_hooks</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>GetPlatform</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_platform_sp</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPlatform</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><name>platform_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_platform_sp</name> <operator>=</operator> <name>platform_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>GetSourceManager</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>GetSearchFilterForModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>*</operator><name>containingModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>GetSearchFilterForModuleList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>containingModuleList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>GetSearchFilterForModuleAndCUList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>containingModules</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>containingSourceFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>REPLSP</name> <macro><name>GetREPL</name><argument_list>(<argument>Status &amp;err</argument>, <argument>lldb::LanguageType language</argument>,
<argument>const char *repl_options</argument>, <argument>bool can_create</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetREPL</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>REPLSP</name> <name>repl_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>StackFrameRecognizerManager</name> <modifier>&amp;</modifier></type><name>GetFrameRecognizerManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><name>m_frame_recognizer_manager_up</name></expr>;</return>
</block_content>}</block></function>

<label><name>protected</name>:</label>


<decl_stmt><decl><type><name>void</name></type> <name>NotifyModuleAdded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>NotifyModuleRemoved</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>NotifyModuleUpdated</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>old_module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>new_module_sp</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>NotifyWillClearList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>NotifyModulesRemoved</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>ModuleList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Arch</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>Arch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>Arch</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>spec</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><macro><name>GetSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_spec</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Architecture</name> <operator>*</operator><macro><name>GetPlugin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_plugin_up</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ArchSpec</name></type> <name>m_spec</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Architecture</name></expr></argument>&gt;</argument_list></name> <name>m_plugin_up</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>m_debugger</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <name>m_platform_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_private_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Arch</name></type> <name>m_arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ModuleList</name></type> <name>m_images</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SectionLoadHistory</name></type> <name>m_section_load_history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BreakpointList</name></type> <name>m_breakpoint_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BreakpointList</name></type> <name>m_internal_breakpoint_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>BreakpointNameList</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>, <argument><expr><name>BreakpointName</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BreakpointNameList</name></type> <name>m_breakpoint_names</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <name>m_last_created_breakpoint</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>WatchpointList</name></type> <name>m_watchpoint_list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>WatchpointSP</name> <name>m_last_created_watchpoint</name></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <name>m_process_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <name>m_search_filter_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PathMappingList</name></type> <name>m_image_search_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TypeSystemMap</name></type> <name>m_scratch_type_system_map</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>REPLSP</name></expr></argument>&gt;</argument_list></name> <name>REPLMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>REPLMap</name></type> <name>m_repl_map</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SourceManagerUP</name> <name>m_source_manager_up</name></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name></expr></argument>, <argument><expr><name>StopHookSP</name></expr></argument>&gt;</argument_list></name> <name>StopHookCollection</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>StopHookCollection</name></type> <name>m_stop_hooks</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>m_stop_hook_next_id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_latest_stop_hook_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_suppress_stop_hooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_is_dummy_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m_next_persistent_variable_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TraceSP</name> <name>m_trace_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameRecognizerManagerUP</name> <name>m_frame_recognizer_manager_up</name></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ImageSearchPathsChanged</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PathMappingList</name> <modifier>&amp;</modifier></type><name>path_list</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>)</parameter_list>;</function_decl>


<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>m_stats_storage</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_collecting_stats</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>SetCollectingStats</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_collecting_stats</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetCollectingStats</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_collecting_stats</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>IncrementStats</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>StatisticKind</name> <name>key</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetCollectingStats</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lldbassert</name><argument_list>(<argument><expr><name>key</name> <operator>&lt;</operator> <name>lldb_private</name><operator>::</operator><name>StatisticKind</name><operator>::</operator><name>StatisticMax</name> <operator>&amp;&amp;</operator>
<literal type="string">"invalid statistics!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_stats_storage</name><index>[<expr><name>key</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetStatistics</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_stats_storage</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>







<macro><name>Target</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>const ArchSpec &amp;target_arch</argument>,
<argument>const lldb::PlatformSP &amp;platform_sp</argument>, <argument>bool is_dummy_target</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<function_decl><type><name>bool</name></type> <name>ProcessIsValid</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>PrimeFromDummyTarget</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>AddBreakpoint</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSP</name> <name>breakpoint_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>internal</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>FinalizeFileActions</name><parameter_list>(<parameter><decl><type><name>ProcessLaunchInfo</name> <modifier>&amp;</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>Target</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Target</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Target</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Target</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
