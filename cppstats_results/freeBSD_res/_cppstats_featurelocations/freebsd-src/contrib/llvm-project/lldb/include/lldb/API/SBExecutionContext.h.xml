<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBExecutionContext.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBEXECUTIONCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBEXECUTIONCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBExecutionContext</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBCommandInterpreter</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBExecutionContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBExecutionContext</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>SBExecutionContext</name><argument_list>(<argument>lldb::ExecutionContextRefSP exe_ctx_ref_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SBExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <operator>&amp;</operator><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>SBExecutionContext</name><argument_list>(<argument>lldb::SBThread thread</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<expr_stmt><expr><call><name>SBExecutionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBFrame</name> <operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBExecutionContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SBExecutionContext</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBExecutionContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>SBTarget</name> <macro><name>GetTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>SBProcess</name> <macro><name>GetProcess</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>SBThread</name> <macro><name>GetThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>SBFrame</name> <macro><name>GetFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>reset</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ExecutionContextRefSP</name> <operator>&amp;</operator><name>event_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>ExecutionContextRef</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>mutable</name> <name>lldb</name><operator>::</operator><name>ExecutionContextRefSP</name> <name>m_exe_ctx_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
