<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/TypeList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_TYPELIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_TYPELIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TypeList</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>TypeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TypeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TypeList</name></type> <name>FindTypes</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Insert</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>Empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>GetSize</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeSP</name> <macro><name>GetTypeAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TypeSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>AdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>TypeSP</name></expr></argument>, <argument><expr><name>vector_adapter</name></expr></argument>&gt;</argument_list></name></type>
<name>TypeIterable</name>;</typedef>

<function><type><name>TypeIterable</name></type> <name>Types</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>TypeIterable</name><argument_list>(<argument><expr><name>m_types</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>ForEach</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEach</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator><name>type_sp</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>RemoveMismatchedTypes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qualified_typename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>exact_match</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>RemoveMismatchedTypes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>type_scope</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>type_basename</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeClass</name> <name>type_class</name></expr></argument>, <argument><expr><name>bool</name> <name>exact_match</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>RemoveMismatchedTypes</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TypeClass</name> <name>type_class</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>collection</name></type> <name>m_types</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypeList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeList</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeList</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
