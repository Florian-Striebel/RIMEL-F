<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/DataVisualization.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_DATAVISUALIZATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_DATAVISUALIZATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatClasses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormatManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>DataVisualization</name> <block>{<block_content>
<label><name>public</name>:</label>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ForceUpdate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetCurrentRevision</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShouldPrintAsOneLiner</name><parameter_list>(<parameter><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>valobj</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name> <macro><name>GetFormat</name><argument_list>(<argument>ValueObject &amp;valobj</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TypeFormatImplSP</name>
<macro><name>GetFormatForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name>
<macro><name>GetSummaryFormat</name><argument_list>(<argument>ValueObject &amp;valobj</argument>, <argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name>
<macro><name>GetSummaryForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TypeFilterImplSP</name>
<macro><name>GetFilterForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ScriptedSyntheticChildrenSP</name>
<macro><name>GetSyntheticForType</name><argument_list>(<argument>lldb::TypeNameSpecifierImplSP type_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SyntheticChildrenSP</name>
<macro><name>GetSyntheticChildren</name><argument_list>(<argument>ValueObject &amp;valobj</argument>, <argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>
<name>AnyMatches</name><argument_list>(<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>FormatCategoryItems</name> <name>items</name> <operator>=</operator>
<name>TypeCategoryImpl</name><operator>::</operator><name>ALL_ITEM_TYPES</name></expr></argument>,
<argument><expr><name>bool</name> <name>only_enabled</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>matching_category</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>FormatCategoryItems</name> <operator>*</operator><name>matching_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NamedSummaryFormats</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetSummaryFormat</name><argument_list>(<argument><expr><name>ConstString</name> <name>type</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Add</name><argument_list>(<argument><expr><name>ConstString</name> <name>type</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ForEach</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>TypeMatcher</name> <operator>&amp;</operator>,
<specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSummaryImplSP</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetCount</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Categories</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetCategory</name><argument_list>(<argument><expr><name>ConstString</name> <name>category</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <operator>&amp;</operator><name>entry</name></expr></argument>,
<argument><expr><name>bool</name> <name>allow_create</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetCategory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Clear</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Enable</name><argument_list>(<argument><expr><name>ConstString</name> <name>category</name></expr></argument>,
<argument><expr><name>TypeCategoryMap</name><operator>::</operator><name>Position</name> <operator>=</operator> <name>TypeCategoryMap</name><operator>::</operator><name>Default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Enable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Disable</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Disable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Enable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <operator>&amp;</operator><name>category</name></expr></argument>,
<argument><expr><name>TypeCategoryMap</name><operator>::</operator><name>Position</name> <operator>=</operator> <name>TypeCategoryMap</name><operator>::</operator><name>Default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Disable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <operator>&amp;</operator><name>category</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EnableStar</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DisableStar</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ForEach</name><argument_list>(<argument><expr><name>TypeCategoryMap</name><operator>::</operator><name>ForEachCallback</name> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetCount</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <call><name>GetCategoryAtIndex</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
