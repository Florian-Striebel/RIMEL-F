<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/XML.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_XML_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_XML_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_ENABLE_LIBXML2</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xmlreader.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StreamString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_ENABLE_LIBXML2</name></expr></cpp:if>
<typedef>typedef <type><name>xmlNodePtr</name></type> <name>XMLNodeImpl</name>;</typedef>
<typedef>typedef <type><name>xmlDocPtr</name></type> <name>XMLDocumentImpl</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>XMLNodeImpl</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>XMLDocumentImpl</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>XMLNode</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>NamePath</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>XMLNode</name> <operator>&amp;</operator><name>node</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>NodeCallback</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>name</name>,
<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>value</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>AttributeCallback</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>XMLNode</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>XMLNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>XMLNode</name><argument_list>(<argument>XMLNodeImpl node</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>XMLNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsElement</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetElementText</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>text</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetElementTextAsUnsigned</name><argument_list>(<argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>int</name> <name>base</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetElementTextAsFloat</name><argument_list>(<argument><expr><name>double</name> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>double</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>NameIs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>XMLNode</name> <macro><name>GetParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>XMLNode</name> <macro><name>GetSibling</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>XMLNode</name> <macro><name>GetChild</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetAttributeValue</name><argument_list>(<argument>const char *name</argument>,
<argument>const char *fail_value = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetAttributeValueAsUnsigned</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>value</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>int</name> <name>base</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>XMLNode</name></type> <name>FindFirstChildElementWithName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>XMLNode</name></type> <name>GetElementForPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamePath</name> <modifier>&amp;</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>ForEachSiblingNode</name><argument_list>(<argument><expr><name>NodeCallback</name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>ForEachSiblingElement</name><argument_list>(<argument><expr><name>NodeCallback</name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>ForEachSiblingElementWithName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>NodeCallback</name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEachChildNode</name><argument_list>(<argument><expr><name>NodeCallback</name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEachChildElement</name><argument_list>(<argument><expr><name>NodeCallback</name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEachChildElementWithName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>NodeCallback</name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ForEachAttribute</name><argument_list>(<argument><expr><name>AttributeCallback</name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>XMLNodeImpl</name></type> <name>m_node</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>XMLDocument</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>XMLDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>XMLDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ParseFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ParseMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xml_length</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><literal type="string">"untitled.xml"</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>XMLNode</name></type> <name>GetRootElement</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>required_name</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ErrorCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>XMLEnabled</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>XMLDocumentImpl</name></type> <name>m_document</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamString</name></type> <name>m_errors</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ApplePropertyList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ApplePropertyList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ApplePropertyList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ApplePropertyList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>ParseFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XMLNode</name></type> <name>GetValueNode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetValueAsString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <call><name>GetStructuredData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>





<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ExtractStringFromValueNode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>XMLNode</name> <operator>&amp;</operator><name>node</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XMLDocument</name></type> <name>m_xml_doc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XMLNode</name></type> <name>m_dict_node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
