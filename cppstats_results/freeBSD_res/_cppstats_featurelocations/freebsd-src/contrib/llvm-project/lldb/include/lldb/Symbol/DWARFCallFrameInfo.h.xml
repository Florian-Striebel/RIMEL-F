<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/DWARFCallFrameInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_DWARFCALLFRAMEINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_DWARFCALLFRAMEINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/dwarf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/ObjectFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/UnwindPlan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/VMRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>DWARFCallFrameInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Type</name> <block>{ <decl><name>EH</name></decl>, <decl><name>DWARF</name></decl> }</block>;</enum>

<macro><name>DWARFCallFrameInfo</name><argument_list>(<argument>ObjectFile &amp;objfile</argument>, <argument>lldb::SectionSP &amp;section</argument>, <argument>Type type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>DWARFCallFrameInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>




<function_decl><type><name>bool</name></type> <name>GetAddressRange</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>AddressRange</name> <modifier>&amp;</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>GetUnwindPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>GetUnwindPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AddressRange</name> <modifier>&amp;</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>RangeVector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>FunctionAddressAndSizeVector</name>;</typedef>















<function_decl><type><name>void</name></type>
<name>GetFunctionAddressAndSizeVector</name><parameter_list>(<parameter><decl><type><name>FunctionAddressAndSizeVector</name> <modifier>&amp;</modifier></type><name>function_info</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ForEachFDEEntries</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>lldb</name><operator>::</operator><name>addr_t</name>, <name>uint32_t</name>, <name>dw_offset_t</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<enum>enum <block>{ <decl><name>CFI_AUG_MAX_SIZE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><name>CFI_HEADER_SIZE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl> }</block>;</enum>
<enum>enum <name>CFIVersion</name> <block>{
<decl><name>CFI_VERSION1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CFI_VERSION3</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CFI_VERSION4</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>CIE</name> <block>{
<decl_stmt><decl><type><name>dw_offset_t</name></type> <name>cie_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>augmentation</name><index>[<expr><name>CFI_AUG_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>address_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>segment_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>data_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>return_addr_reg_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dw_offset_t</name></type> <name>inst_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>inst_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ptr_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lsda_addr_encoding</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>personality_loc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>UnwindPlan</name><operator>::</operator><name>Row</name> <name>initial_row</name></expr>;</expr_stmt>

<macro><name>CIE</name><argument_list>(<argument>dw_offset_t offset</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>cie_offset</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>version</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>code_align</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>data_align</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>return_addr_reg_num</name><argument_list>(<argument><expr><name>LLDB_INVALID_REGNUM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>inst_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>inst_length</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ptr_encoding</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>lsda_addr_encoding</name><argument_list>(<argument><expr><name>DW_EH_PE_omit</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>personality_loc</name><argument_list>(<argument><expr><name>LLDB_INVALID_ADDRESS</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>initial_row</name><argument_list>()</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CIE</name></expr></argument>&gt;</argument_list></name> <name>CIESP</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>dw_offset_t</name></expr></argument>, <argument><expr><name>CIESP</name></expr></argument>&gt;</argument_list></name> <name>cie_map_t</name></expr>;</expr_stmt></typedef>




<typedef>typedef <type><name><name>RangeDataVector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>dw_offset_t</name></expr></argument>&gt;</argument_list></name></type> <name>FDEEntryMap</name>;</typedef>

<expr_stmt><expr><name>bool</name> <macro><name>IsEHFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FDEEntryMap</name><operator>::</operator><name>Entry</name></expr></argument>&gt;</argument_list></name>
<call><name>GetFirstFDEEntryInRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AddressRange</name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>GetFDEIndex</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>FDEToUnwindPlan</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>startaddr</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>CIE</name> <modifier>*</modifier></type><name>GetCIE</name><parameter_list>(<parameter><decl><type><name>dw_offset_t</name></type> <name>cie_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetCFIData</name><parameter_list>()</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>bool</name></type> <name>HandleCommonDwarfOpcode</name><argument_list>(<argument><expr><name>uint8_t</name> <name>primary_opcode</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>extended_opcode</name></expr></argument>,
<argument><expr><name>int32_t</name> <name>data_align</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <operator>&amp;</operator><name>offset</name></expr></argument>,
<argument><expr><name>UnwindPlan</name><operator>::</operator><name>Row</name> <operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ObjectFile</name> <modifier>&amp;</modifier></type><name>m_objfile</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SectionSP</name> <name>m_section_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cie_map_t</name></type> <name>m_cie_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DataExtractor</name></type> <name>m_cfi_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_cfi_data_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FDEEntryMap</name></type> <name>m_fde_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_fde_index_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_fde_index_mutex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Type</name></type> <name>m_type</name></decl>;</decl_stmt>

<function_decl><type><name>CIESP</name></type>
<name>ParseCIE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cie_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <macro><name>GetRegisterKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_type</name> <operator>==</operator> <name>EH</name> <operator>?</operator> <name>lldb</name><operator>::</operator><name>eRegisterKindEHFrame</name> <operator>:</operator> <name>lldb</name><operator>::</operator><name>eRegisterKindDWARF</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
