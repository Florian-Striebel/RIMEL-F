<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Disassembler.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_DISASSEMBLER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_DISASSEMBLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/EmulateInstruction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FormatEntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Opcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/LineEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SmallVectorImpl</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AddressRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Debugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Disassembler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StackFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>
<struct_decl>struct <name>RegisterInfo</name>;</struct_decl>

<decl_stmt><decl><type><name>class</name></type> <name>Instruction</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Instruction</name><argument_list>(<argument>const Address &amp;address</argument>,
<argument>AddressClass addr_class = AddressClass::eInvalid</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Instruction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><macro><name>GetAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_address</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetMnemonic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CalculateMnemonicOperandsAndCommentIfNeeded</name><argument_list>(<argument><expr><name>exe_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>m_opcode_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOperands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CalculateMnemonicOperandsAndCommentIfNeeded</name><argument_list>(<argument><expr><name>exe_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>m_mnemonics</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetComment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CalculateMnemonicOperandsAndCommentIfNeeded</name><argument_list>(<argument><expr><name>exe_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>m_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>void</name></type>
<name>CalculateMnemonicOperandsAndComment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>AddressClass</name></type> <name>GetAddressClass</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SetAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>m_address_class</name> <operator>=</operator> <name>AddressClass</name><operator>::</operator><name>eInvalid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_address</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></function>


















































<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>max_opcode_byte_size</name></expr></argument>, <argument><expr><name>bool</name> <name>show_address</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_bytes</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>*</operator><name>sym_ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>*</operator><name>prev_sym_ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FormatEntity</name><operator>::</operator><name>Entry</name> <operator>*</operator><name>disassembly_addr_format</name></expr></argument>,
<argument><expr><name>size_t</name> <name>max_address_text_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>DoesBranch</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>HasDelaySlot</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CanSetBreakpoint</name> <parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>size_t</name></type> <name>Decode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Disassembler</name> <operator>&amp;</operator><name>disassembler</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>data_offset</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetDescription</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>)</argument_list> <block>{<block_content>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>ReadArray</name><argument_list>(<argument>FILE *in_file</argument>, <argument>Stream *out_stream</argument>,
<argument>OptionValue::Type data_type</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name> <call><name>ReadDictionary</name><argument_list>(<argument><expr><name>FILE</name> <operator>*</operator><name>in_file</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>out_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>DumpEmulation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>TestEmulation</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_file_name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>Emulate</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>evaluate_options</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>,
<argument><expr><name>EmulateInstruction</name><operator>::</operator><name>ReadMemoryCallback</name> <name>read_mem_callback</name></expr></argument>,
<argument><expr><name>EmulateInstruction</name><operator>::</operator><name>WriteMemoryCallback</name> <name>write_mem_calback</name></expr></argument>,
<argument><expr><name>EmulateInstruction</name><operator>::</operator><name>ReadRegisterCallback</name> <name>read_reg_callback</name></expr></argument>,
<argument><expr><name>EmulateInstruction</name><operator>::</operator><name>WriteRegisterCallback</name> <name>write_reg_callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Opcode</name> <operator>&amp;</operator><macro><name>GetOpcode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_opcode</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetData</name><parameter_list>(<parameter><decl><type><name>DataExtractor</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>Operand</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Type</name> <block>{<block_content>
<expr_stmt><expr><name>Invalid</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>Register</name></expr><operator>,</operator>
<expr><name>Immediate</name></expr><operator>,</operator>
<expr><name>Dereference</name></expr><operator>,</operator>
<expr><name>Sum</name></expr><operator>,</operator>
<expr><name>Product</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt> <expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>Type</name><operator>::</operator><name>Invalid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Operand</name></expr></argument>&gt;</argument_list></name> <name>m_children</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_immediate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>m_register</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_negative</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_clobbered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_type</name> <operator>!=</operator> <name>Type</name><operator>::</operator><name>Invalid</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>Operand</name></type> <name>BuildRegister</name><parameter_list>(<parameter><decl><type><name>ConstString</name> <modifier>&amp;</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>Operand</name></type> <name>BuildImmediate</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>imm</name></expr></argument>, <argument><expr><name>bool</name> <name>neg</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>Operand</name></type> <name>BuildImmediate</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>imm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Operand</name></type> <name>BuildDereference</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Operand</name> <modifier>&amp;</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Operand</name></type> <name>BuildSum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Operand</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Operand</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Operand</name></type> <name>BuildProduct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Operand</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Operand</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ParseOperands</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Operand</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>operands</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>virtual</name> <name>bool</name></type> <name>IsCall</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Address</name></type> <name>m_address</name></decl>;</decl_stmt>







<label><name>private</name>:</label>
<decl_stmt><decl><type><name>AddressClass</name></type> <name>m_address_class</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Opcode</name></type> <name>m_opcode</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_opcode_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_mnemonics</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_comment</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_calculated_strings</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>CalculateMnemonicOperandsAndCommentIfNeeded</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_calculated_strings</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_calculated_strings</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CalculateMnemonicOperandsAndComment</name><argument_list>(<argument><expr><name>exe_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>OperandMatchers</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>MatchBinaryOp</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>base</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>left</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>MatchUnaryOp</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>base</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>MatchRegOp</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterInfo</name> <operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <call><name>FetchRegOp</name><argument_list>(<argument><expr><name>ConstString</name> <operator>&amp;</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>MatchImmOp</name><argument_list>(<argument>int64_t imm</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <call><name>FetchImmOp</name><argument_list>(<argument><expr><name>int64_t</name> <operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Instruction</name><operator>::</operator><name>Operand</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<macro><name>MatchOpType</name><argument_list>(<argument>Instruction::Operand::Type type</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InstructionList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>InstructionList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>InstructionList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetMaxOpcocdeByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>InstructionSP</name> <macro><name>GetInstructionAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>InstructionSP</name> <call><name>GetInstructionAtAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

























<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetIndexOfNextBranchInstruction</name><argument_list>(<argument><expr><name>uint32_t</name> <name>start</name></expr></argument>,
<argument><expr><name>bool</name> <name>ignore_calls</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>found_calls</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetIndexOfInstructionAtLoadAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>load_addr</name></expr></argument>,
<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetIndexOfInstructionAtAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Append</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>InstructionSP</name> <operator>&amp;</operator><name>inst_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_address</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_bytes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>*</modifier></type><name>exe_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>InstructionSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>collection</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>collection</name></type> <name>m_instructions</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PseudoInstruction</name> <range>: <expr><name>public</name> <name>Instruction</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>PseudoInstruction</name><argument_list>()</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>PseudoInstruction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>DoesBranch</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>HasDelaySlot</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>CalculateMnemonicOperandsAndComment</name><argument_list>(
<argument>const ExecutionContext *exe_ctx</argument>)</argument_list></macro> <name>override</name> <block>{



}</block>

<name>size_t</name> <macro><name>Decode</name><argument_list>(<argument>const Disassembler &amp;disassembler</argument>, <argument>const DataExtractor &amp;data</argument>,
<argument>lldb::offset_t data_offset</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>SetOpcode</name><argument_list>(<argument>size_t opcode_size</argument>, <argument>void *opcode_data</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>SetDescription</name><argument_list>(<argument>llvm::StringRef description</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_description</name></expr>;

<expr><call><name>PseudoInstruction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PseudoInstruction</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>PseudoInstruction</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>PseudoInstruction</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Disassembler</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Disassembler</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>PluginInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <block>{
<decl><name>eOptionNone</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>,
<decl><name>eOptionShowBytes</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eOptionRawOuput</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eOptionMarkPCSourceLine</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,

<decl><name>eOptionMarkPCAddress</name> <init>=
<expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<enum>enum <name>HexImmediateStyle</name> <block>{
<decl><name>eHexStyleC</name></decl>,
<decl><name>eHexStyleAsm</name></decl>,
}</block>;</enum>






<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DisassemblerSP</name>
<call><name>FindPlugin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>flavor</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>plugin_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DisassemblerSP</name> <call><name>FindPluginForTarget</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>flavor</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>plugin_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>Limit</name> <block>{
<enum>enum <block>{ <decl><name>Bytes</name></decl>, <decl><name>Instructions</name></decl> }</block> <decl><name>kind</name></decl>;</enum>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>value</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DisassemblerSP</name> <macro><name>DisassembleRange</name><argument_list>(<argument>const ArchSpec &amp;arch</argument>,
<argument>const char *plugin_name</argument>,
<argument>const char *flavor</argument>,
<argument>Target &amp;target</argument>,
<argument>const AddressRange &amp;disasm_range</argument>,
<argument>bool force_live_memory = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>DisassemblerSP</name>
<macro><name>DisassembleBytes</name><argument_list>(<argument>const ArchSpec &amp;arch</argument>, <argument>const char *plugin_name</argument>,
<argument>const char *flavor</argument>, <argument>const Address &amp;start</argument>, <argument>const void *bytes</argument>,
<argument>size_t length</argument>, <argument>uint32_t max_num_instructions</argument>,
<argument>bool data_from_file</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Disassemble</name><parameter_list>(<parameter><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>debugger</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plugin_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flavor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>Limit</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mixed_source_and_assembly</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>num_mixed_context_lines</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Disassemble</name><parameter_list>(<parameter><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>debugger</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>,
<parameter><decl><type><name>StackFrame</name> <modifier>&amp;</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><call><name>Disassembler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>flavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>Disassembler</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>PrintInstructions</name><parameter_list>(<parameter><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>debugger</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>mixed_source_and_assembly</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>num_mixed_context_lines</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>ParseInstructions</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>Limit</name></type> <name>limit</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>error_strm_ptr</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>force_live_memory</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>size_t</name></type> <name>DecodeInstructions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>base_addr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>data_offset</name></expr></argument>,
<argument><expr><name>size_t</name> <name>num_instructions</name></expr></argument>, <argument><expr><name>bool</name> <name>append</name></expr></argument>,
<argument><expr><name>bool</name> <name>data_from_file</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>InstructionList</name> <modifier>&amp;</modifier></type><name>GetInstructionList</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>InstructionList</name> <operator>&amp;</operator><macro><name>GetInstructionList</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><macro><name>GetArchitecture</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_arch</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flavor</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>FlavorValidForArchSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>flavor</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>



<struct>struct <name>SourceLine</name> <block>{
<decl_stmt><decl><type><name>FileSpec</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>line</name> <init>= <expr><name>LLDB_INVALID_LINE_NUMBER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SourceLine</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>file</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SourceLine</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>file</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>file</name></name> <operator>&amp;&amp;</operator> <name>line</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>line</name></name> <operator>&amp;&amp;</operator> <name><name>rhs</name><operator>.</operator><name>column</name></name> <operator>==</operator> <name>column</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SourceLine</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>file</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>file</name></name> <operator>||</operator> <name>line</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>line</name></name> <operator>||</operator> <name>column</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>column</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>line</name> <operator>!=</operator> <name>LLDB_INVALID_LINE_NUMBER</name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>SourceLinesToDisplay</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SourceLine</name></expr></argument>&gt;</argument_list></name> <name>lines</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>current_source_line</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>print_source_context_end_eol</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SourceLinesToDisplay</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>lines</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>



<function_decl><type><specifier>static</specifier> <name>SourceLine</name></type> <name>GetFunctionDeclLineEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AddLineToSourceLineTables</name><argument_list>(
<argument><expr><name>SourceLine</name> <operator>&amp;</operator><name>line</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>source_lines_seen</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>ElideMixedSourceAndDisassemblyLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>SourceLine</name> <modifier>&amp;</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ElideMixedSourceAndDisassemblyLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionContext</name> <modifier>&amp;</modifier></type><name>exe_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>LineEntry</name> <modifier>&amp;</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SourceLine</name></type> <name>sl</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sl</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name><name>line</name><operator>.</operator><name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name><name>line</name><operator>.</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name><name>line</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>ElideMixedSourceAndDisassemblyLine</name><argument_list>(<argument><expr><name>exe_ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>ArchSpec</name></type> <name>m_arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InstructionList</name></type> <name>m_instruction_list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_base_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_flavor</name></expr>;</expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>Disassembler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Disassembler</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Disassembler</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Disassembler</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
