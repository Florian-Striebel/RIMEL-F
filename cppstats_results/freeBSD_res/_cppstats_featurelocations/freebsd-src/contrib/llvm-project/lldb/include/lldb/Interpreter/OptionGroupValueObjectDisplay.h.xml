<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionGroupValueObjectDisplay.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONGROUPVALUEOBJECTDISPLAY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONGROUPVALUEOBJECTDISPLAY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/Options.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupValueObjectDisplay</name> <range>: <expr><name>public</name> <name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionGroupValueObjectDisplay</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>OptionGroupValueObjectDisplay</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>AnyOptionWasSet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>show_types</name> <operator>||</operator> <name>no_summary_depth</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>show_location</name> <operator>||</operator>
<name>flat_output</name> <operator>||</operator> <name>use_objc</name> <operator>||</operator> <name>max_depth</name> <operator>!=</operator> <name>UINT32_MAX</name> <operator>||</operator>
<name>ptr_depth</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>use_synth</name> <operator>||</operator> <name>be_raw</name> <operator>||</operator> <name>ignore_cap</name> <operator>||</operator>
<name>run_validator</name></expr>;</return>
}</block>

<name>DumpValueObjectOptions</name> <macro><name>GetAsDumpOptions</name><argument_list>(
<argument>LanguageRuntimeDescriptionDisplayVerbosity lang_descr_verbosity =
eLanguageRuntimeDescriptionDisplayVerbosityFull</argument>,
<argument>lldb::Format format = lldb::eFormatDefault</argument>,
<argument>lldb::TypeSummaryImplSP summary_sp = lldb::TypeSummaryImplSP()</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <name>show_types</name> <operator>:</operator> <literal type="number">1</literal></expr>, <expr><name>show_location</name> <operator>:</operator> <literal type="number">1</literal></expr>, <expr><name>flat_output</name> <operator>:</operator> <literal type="number">1</literal></expr>, <expr><name>use_objc</name> <operator>:</operator> <literal type="number">1</literal></expr>,
<expr><name>use_synth</name> <operator>:</operator> <literal type="number">1</literal></expr>, <expr><name>be_raw</name> <operator>:</operator> <literal type="number">1</literal></expr>, <expr><name>ignore_cap</name> <operator>:</operator> <literal type="number">1</literal></expr>, <expr><name>run_validator</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>uint32_t</name> <name>no_summary_depth</name></expr>;
<expr><name>uint32_t</name> <name>max_depth</name></expr>;
<expr><name>uint32_t</name> <name>ptr_depth</name></expr>;
<expr><name>uint32_t</name> <name>elem_count</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
