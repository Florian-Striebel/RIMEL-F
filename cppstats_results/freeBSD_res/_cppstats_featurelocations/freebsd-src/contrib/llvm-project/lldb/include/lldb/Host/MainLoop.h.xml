<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/MainLoop.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_MAINLOOP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_MAINLOOP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/MainLoopBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;csignal&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_PPOLL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_SYS_EVENT_H</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL_POLLING_UNSUPPORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>















<decl_stmt><decl><type><name>class</name></type> <name>MainLoop</name> <range>: <expr><name>public</name> <name>MainLoopBase</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>class</name> <name>SignalHandle</name></expr>;

<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SignalHandle</name></expr></argument>&gt;</argument_list></name> <name>SignalHandleUP</name></expr>;</expr_stmt></typedef>

<call><name>MainLoop</name><argument_list>()</argument_list></call></block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>MainLoop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ReadHandleUP</name></type> <name>RegisterReadObject</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOObjectSP</name> <operator>&amp;</operator><name>object_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Callback</name> <operator>&amp;</operator><name>callback</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>








<function_decl><type><name>SignalHandleUP</name></type> <name>RegisterSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Callback</name> <modifier>&amp;</modifier></type><name>callback</name></decl></parameter>,
<parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>Status</name> <macro><name>Run</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>




<function><type><name>void</name></type> <name>RequestTermination</name><parameter_list>()</parameter_list> override <block>{<block_content> <expr_stmt><expr><name>m_terminate_request</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>UnregisterReadObject</name><argument_list>(<argument><expr><name>IOObject</name><operator>::</operator><name>WaitableHandle</name> <name>handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>UnregisterSignal</name><argument_list>(<argument><expr><name>int</name> <name>signo</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Callback</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>callback_it</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>ProcessReadObject</name><argument_list>(<argument><expr><name>IOObject</name><operator>::</operator><name>WaitableHandle</name> <name>handle</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>ProcessSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>SignalHandle</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>SignalHandle</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>m_mainloop</name><operator>.</operator><name>UnregisterSignal</name></name><argument_list>(<argument><expr><name>m_signo</name></expr></argument>, <argument><expr><name>m_callback_it</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<macro><name>SignalHandle</name><argument_list>(<argument>MainLoop &amp;mainloop</argument>, <argument>int signo</argument>,
<argument>std::list&lt;Callback&gt;::iterator callback_it</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_mainloop</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_signo</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_callback_it</name><argument_list>(<argument>callback_it</argument>)</argument_list></macro> <expr><block>{}</block>

<name>MainLoop</name> <operator>&amp;</operator><name>m_mainloop</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_signo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Callback</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>m_callback_it</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>MainLoop</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SignalHandle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SignalHandle</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SignalHandle</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SignalHandle</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>SignalInfo</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Callback</name></expr></argument>&gt;</argument_list></name> <name>callbacks</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SIGACTION</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>old_action</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name></type> <name>was_blocked</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>class</name></type> <name>RunImpl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>IOObject</name><operator>::</operator><name>WaitableHandle</name></expr></argument>, <argument><expr><name>Callback</name></expr></argument>&gt;</argument_list></name> <name>m_read_fds</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>SignalInfo</name></expr></argument>&gt;</argument_list></name> <name>m_signals</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_EVENT_H</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>m_kqueue</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name></type> <name>m_terminate_request</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
