<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanStack.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANSTACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANSTACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Target.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanStack</name> <block>{<block_content>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>Thread</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>ThreadPlanStack</name><argument_list>(<argument>const Thread &amp;thread</argument>, <argument>bool make_empty = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ThreadPlanStack</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>PlanStack</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DumpThreadPlans</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>desc_level</name></expr></argument>,
<argument><expr><name>bool</name> <name>include_internal</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>CheckpointCompletedPlans</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RestoreCompletedPlanCheckpoint</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>checkpoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DiscardCompletedPlanCheckpoint</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>checkpoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ThreadDestroyed</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>PushPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <name>new_plan_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <call><name>PopPlan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <call><name>DiscardPlan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>void</name></type> <name>DiscardPlansUpToPlan</name><parameter_list>(<parameter><decl><type><name>ThreadPlan</name> <modifier>*</modifier></type><name>up_to_plan_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DiscardAllPlans</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DiscardConsultingMasterPlans</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>GetCurrentPlan</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>GetCompletedPlan</name><argument_list>(<argument>bool skip_private = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>GetPlanByIndex</name><argument_list>(<argument>uint32_t plan_idx</argument>,
<argument>bool skip_private = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetReturnValueObject</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <macro><name>GetExpressionVariable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>AnyPlans</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>AnyCompletedPlans</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>AnyDiscardedPlans</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsPlanDone</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>plan</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>WasPlanDiscarded</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>plan</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadPlan</name> <modifier>*</modifier></type><name>GetPreviousPlan</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>current_plan</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>ThreadPlan</name> <operator>*</operator><macro><name>GetInnermostExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>WillResume</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>ClearThreadCache</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>PrintOneStack</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>stack_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>PlanStack</name> <operator>&amp;</operator><name>stack</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>desc_level</name></expr></argument>,
<argument><expr><name>bool</name> <name>include_internal</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>PlanStack</name></type> <name>m_plans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PlanStack</name></type> <name>m_completed_plans</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PlanStack</name></type> <name>m_discarded_plans</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>m_completed_plan_checkpoint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>PlanStack</name></expr></argument>&gt;</argument_list></name> <name>m_completed_plan_store</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_stack_mutex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanStackMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ThreadPlanStackMap</name><argument_list>(<argument><expr><name>Process</name> <operator>&amp;</operator><name>process</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_process</name><argument_list>(<argument>process</argument>)</argument_list></macro> <block>{}</block>
<operator>~</operator><call><name>ThreadPlanStackMap</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>Update</name><parameter_list>(<parameter><decl><type><name>ThreadList</name> <modifier>&amp;</modifier></type><name>current_threads</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>delete_missing</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>check_for_new</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>AddThread</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name> <operator>=</operator> <call><name><name>thread</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_plans_list</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveTID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>result</name> <init>= <expr><call><name><name>m_plans_list</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <call><name><name>m_plans_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>result</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>ThreadDestroyed</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_plans_list</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ThreadPlanStack</name> <modifier>*</modifier></type><name>Find</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>result</name> <init>= <expr><call><name><name>m_plans_list</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <call><name><name>m_plans_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>second</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>





<function><type><name>void</name></type> <name>ClearThreadCache</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>plan_list</name> <operator>:</operator> <name>m_plans_list</name></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>plan_list</name><operator>.</operator><name>second</name><operator>.</operator><name>ClearThreadCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>plan</name> <operator>:</operator> <name>m_plans_list</name></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>plan</name><operator>.</operator><name>second</name><operator>.</operator><name>ThreadDestroyed</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name><name>m_plans_list</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>DumpPlans</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>desc_level</name></expr></argument>, <argument><expr><name>bool</name> <name>internal</name></expr></argument>,
<argument><expr><name>bool</name> <name>ignore_boring</name></expr></argument>, <argument><expr><name>bool</name> <name>skip_unreported</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>DumpPlansForTID</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>desc_level</name></expr></argument>, <argument><expr><name>bool</name> <name>internal</name></expr></argument>,
<argument><expr><name>bool</name> <name>ignore_boring</name></expr></argument>, <argument><expr><name>bool</name> <name>skip_unreported</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>PrunePlansForTID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>tid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Process</name> <modifier>&amp;</modifier></type><name>m_process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PlansList</name> <init>= <expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name></expr></argument>, <argument><expr><name>ThreadPlanStack</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PlansList</name></type> <name>m_plans_list</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
