<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/CompileUnit.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_COMPILEUNIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_COMPILEUNIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FileSpecList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SourceLocationSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/DebugMacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/Function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/LineTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SourceModule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>











<decl_stmt><decl><type><name>class</name></type> <name>CompileUnit</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>CompileUnit</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>ModuleChild</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>UserID</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>SymbolContextScope</name> <block>{<block_content>
<label><name>public</name>:</label>


































<macro><name>CompileUnit</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>void *user_data</argument>,
<argument>const char *pathname</argument>, <argument>lldb::user_id_t uid</argument>,
<argument>lldb::LanguageType language</argument>, <argument>lldb_private::LazyBool is_optimized</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




































<macro><name>CompileUnit</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>, <argument>void *user_data</argument>,
<argument>const FileSpec &amp;file_spec</argument>, <argument>lldb::user_id_t uid</argument>,
<argument>lldb::LanguageType language</argument>, <argument>lldb_private::LazyBool is_optimized</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>void</name></type> <name>AddFunction</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>FunctionSP</name> <operator>&amp;</operator><name>function_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>CalculateSymbolContext</name><argument_list>(<argument><expr><name>SymbolContext</name> <operator>*</operator><name>sc</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <macro><name>CalculateSymbolContextModule</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CompileUnit</name> <operator>*</operator><macro><name>CalculateSymbolContextCompileUnit</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>DumpSymbolContext</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>GetLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>flagsParsedLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_language</name> <operator>=</operator> <name>language</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<decl_stmt><decl><type><name>void</name></type> <name>ForeachFunction</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>FunctionSP</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>lambda</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FunctionSP</name> <call><name>FindFunction</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>FunctionSP</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>matching_lambda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>bool</name> <name>show_context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




































<function_decl><type><name>uint32_t</name></type> <name>FindLineEntry</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>start_idx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>*</modifier></type><name>file_spec_ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>exact</name></decl></parameter>,
<parameter><decl><type><name>LineEntry</name> <modifier>*</modifier></type><name>line_entry</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><macro><name>GetPrimaryFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_file_spec</name></expr>;</return> }</block></expr></expr_stmt>










<function_decl><type><name>LineTable</name> <modifier>*</modifier></type><name>GetLineTable</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>DebugMacros</name> <modifier>*</modifier></type><name>GetDebugMacros</name><parameter_list>()</parameter_list>;</function_decl>
















<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ForEachExternalModule</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>SymbolFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>visited_symbol_files</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Module</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>lambda</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<function_decl><type><specifier>const</specifier> <name>FileSpecList</name> <modifier>&amp;</modifier></type><name>GetSupportFiles</name><parameter_list>()</parameter_list>;</function_decl>








<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SourceModule</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>GetImportedModules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>GetUserData</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name> <macro><name>GetVariableList</name><argument_list>(<argument>bool can_create</argument>)</argument_list></macro></expr>;</expr_stmt>















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FunctionSP</name> <macro><name>FindFunctionByUID</name><argument_list>(<argument>lldb::user_id_t uid</argument>)</argument_list></macro></expr>;</expr_stmt>









<function_decl><type><name>void</name></type> <name>SetLineTable</name><parameter_list>(<parameter><decl><type><name>LineTable</name> <modifier>*</modifier></type><name>line_table</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetSupportFiles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpecList</name> <modifier>&amp;</modifier></type><name>support_files</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetDebugMacros</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DebugMacrosSP</name> <modifier>&amp;</modifier></type><name>debug_macros</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>void</name></type> <name>SetVariableList</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name> <operator>&amp;</operator><name>variable_list_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

































<decl_stmt><decl><type><name>void</name></type> <name>ResolveSymbolContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceLocationSpec</name> <operator>&amp;</operator><name>src_location_spec</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SymbolContextItem</name> <name>resolve_scope</name></expr></argument>,
<argument><expr><name>SymbolContextList</name> <operator>&amp;</operator><name>sc_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>












<function_decl><type><name>bool</name></type> <name>GetIsOptimized</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>size_t</name> <macro><name>GetNumFunctions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_functions_by_uid</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_user_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>m_language</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>FunctionSP</name></expr></argument>&gt;</argument_list></name> <name>m_functions_by_uid</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SourceModule</name></expr></argument>&gt;</argument_list></name> <name>m_imported_modules</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FileSpec</name></type> <name>m_file_spec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FileSpecList</name></type> <name>m_support_files</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LineTable</name></expr></argument>&gt;</argument_list></name> <name>m_line_table_up</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DebugMacrosSP</name></type> <name>m_debug_macros_sp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>VariableListSP</name> <name>m_variables</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>m_is_optimized</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<enum>enum <block>{
<decl><name>flagsParsedAllFunctions</name> <init>=
<expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>flagsParsedVariables</name> <init>=
<expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>flagsParsedSupportFiles</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,

<decl><name>flagsParsedLineTable</name> <init>=
<expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>flagsParsedLanguage</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>flagsParsedImportedModules</name> <init>=
<expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
<decl><name>flagsParsedDebugMacros</name> <init>=
<expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>CompileUnit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompileUnit</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CompileUnit</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CompileUnit</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
