<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionGroupPlatform.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONGROUPPLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONGROUPPLATFORM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/Options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupPlatform</name> <range>: <expr><name>public</name> <name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>OptionGroupPlatform</name><argument_list>(<argument>bool include_platform_option</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>m_include_platform_option</name><argument_list>(<argument>include_platform_option</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>OptionGroupPlatform</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name> <macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <call><name>SetOptionValue</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>ExecutionContext</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>CreatePlatformWithOptions</name><argument_list>(<argument>CommandInterpreter &amp;interpreter</argument>,
<argument>const ArchSpec &amp;arch</argument>,
<argument>bool make_selected</argument>, <argument>Status &amp;error</argument>,
<argument>ArchSpec &amp;platform_arch</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>PlatformWasSpecified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>m_platform_name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>SetPlatformName</name><argument_list>(<argument>const char *platform_name</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>platform_name</name> <operator>&amp;&amp;</operator> <name><name>platform_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_platform_name</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_platform_name</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<name>ConstString</name> <macro><name>GetSDKRootDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_sdk_sysroot</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetSDKRootDirectory</name><argument_list>(<argument>ConstString sdk_root_directory</argument>)</argument_list></macro> <block>{
<expr><name>m_sdk_sysroot</name> <operator>=</operator> <name>sdk_root_directory</name></expr>;
}</block>

<name>ConstString</name> <macro><name>GetSDKBuild</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_sdk_build</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetSDKBuild</name><argument_list>(<argument>ConstString sdk_build</argument>)</argument_list></macro> <block>{ <expr><name>m_sdk_build</name> <operator>=</operator> <name>sdk_build</name></expr>; }</block>

<name>bool</name> <macro><name>PlatformMatches</name><argument_list>(<argument>const lldb::PlatformSP &amp;platform_sp</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_platform_name</name></expr>;
<expr><name>ConstString</name> <name>m_sdk_sysroot</name></expr>;
<expr><name>ConstString</name> <name>m_sdk_build</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>VersionTuple</name> <name>m_os_version</name></expr>;
<expr><name>bool</name> <name>m_include_platform_option</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
