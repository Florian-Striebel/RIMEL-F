<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Highlighter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_HIGHLIGHTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_HIGHLIGHTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<struct>struct <name>HighlightStyle</name> <block>{




<decl_stmt><decl><type><name>class</name></type> <name>ColorStyle</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_suffix</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ColorStyle</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>ColorStyle</name><argument_list>(<argument>llvm::StringRef prefix</argument>, <argument>llvm::StringRef suffix</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>Set</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<decl_stmt><decl><type><name>void</name></type> <name>Apply</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>Set</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>prefix</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>suffix</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>ColorStyle</name></type> <name>selected</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ColorStyle</name></type> <name>identifier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>string_literal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>scalar_literal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>keyword</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>comma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>colon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>semicolons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>operators</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ColorStyle</name></type> <name>braces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>square_brackets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorStyle</name></type> <name>parentheses</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ColorStyle</name></type> <name>pp_directive</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>HighlightStyle</name></type> <name>MakeVimStyle</name><parameter_list>()</parameter_list>;</function_decl>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>Highlighter</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Highlighter</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Highlighter</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Highlighter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Highlighter</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Highlighter</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Highlighter</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>















<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Highlight</name><argument_list>(<argument><expr><specifier>const</specifier> <name>HighlightStyle</name> <operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>line</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>cursor_pos</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>previous_lines</name></expr></argument>, <argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>Highlight</name><argument_list>(<argument>const HighlightStyle &amp;options</argument>, <argument>llvm::StringRef line</argument>,
<argument>llvm::Optional&lt;size_t&gt; cursor_pos</argument>,
<argument>llvm::StringRef previous_lines = <literal type="string">""</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DefaultHighlighter</name> <range>: <expr><name>public</name> <name>Highlighter</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"none"</literal></expr>;</return> }</block>

<name>void</name> <macro><name>Highlight</name><argument_list>(<argument>const HighlightStyle &amp;options</argument>, <argument>llvm::StringRef line</argument>,
<argument>llvm::Optional&lt;size_t&gt; cursor_pos</argument>,
<argument>llvm::StringRef previous_lines</argument>, <argument>Stream &amp;s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>HighlighterManager</name> <block>{<block_content>
<decl_stmt><decl><type><name>DefaultHighlighter</name></type> <name>m_default</name></decl>;</decl_stmt>

<label><name>public</name>:</label>









<decl_stmt><decl><type><specifier>const</specifier> <name>Highlighter</name> <modifier>&amp;</modifier></type><name>getHighlighterFor</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language_type</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>Highlighter</name> <operator>&amp;</operator><macro><name>getDefaultHighlighter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_default</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
