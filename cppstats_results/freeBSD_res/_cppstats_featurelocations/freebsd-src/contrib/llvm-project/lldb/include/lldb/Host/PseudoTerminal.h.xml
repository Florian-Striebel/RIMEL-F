<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/PseudoTerminal.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_PSEUDOTERMINAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_PSEUDOTERMINAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>PseudoTerminal</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <block>{
<decl><name>invalid_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>





<expr_stmt><expr><call><name>PseudoTerminal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><operator>~</operator><call><name>PseudoTerminal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>ClosePrimaryFileDescriptor</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>CloseSecondaryFileDescriptor</name><parameter_list>()</parameter_list>;</function_decl>




















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name></expr></argument>&gt;</argument_list></name> <call><name>Fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>













<expr_stmt><expr><name>int</name> <macro><name>GetPrimaryFileDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<expr_stmt><expr><name>int</name> <macro><name>GetSecondaryFileDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetSecondaryName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




















<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>OpenFirstAvailablePrimary</name><argument_list>(<argument>int oflag</argument>)</argument_list></macro></expr>;</expr_stmt>




















<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>OpenSecondary</name><argument_list>(<argument>int oflag</argument>)</argument_list></macro></expr>;</expr_stmt>











<function_decl><type><name>int</name></type> <name>ReleasePrimaryFileDescriptor</name><parameter_list>()</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> <name>ReleaseSecondaryFileDescriptor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>int</name></type> <name>m_primary_fd</name> <init>= <expr><name>invalid_fd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_secondary_fd</name> <init>= <expr><name>invalid_fd</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>PseudoTerminal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PseudoTerminal</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PseudoTerminal</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PseudoTerminal</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
