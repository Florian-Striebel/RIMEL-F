<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ABI.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_ABI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_ABI_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/UnwindPlan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/MC/MCRegisterInfo.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ABI</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{
<expr><name>public</name><operator>:</operator>
struct <name>CallArgument</name> <block>{
enum <expr><name>eType</name> <block>{
<expr><name>HostPointer</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>TargetValue</name></expr>,
}</block></expr>;
<expr><name>eType</name> <name>type</name></expr>;
<expr><name>size_t</name> <name>size</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>value</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>uint8_t</name><index>[]</index></name></expr></argument>&gt;</argument_list></name> <name>data_up</name></expr>;
}</block></expr>;

<expr><operator>~</operator><macro><name>ABI</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>size_t</name> <macro><name>GetRedZoneSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>PrepareTrivialCall</name><argument_list>(<argument>lldb_private::Thread &amp;thread</argument>, <argument>lldb::addr_t sp</argument>,
<argument>lldb::addr_t functionAddress</argument>,
<argument>lldb::addr_t returnAddress</argument>,
<argument>llvm::ArrayRef&lt;lldb::addr_t&gt; args</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;











<expr><name>virtual</name> <name>bool</name> <macro><name>PrepareTrivialCall</name><argument_list>(<argument>lldb_private::Thread &amp;thread</argument>, <argument>lldb::addr_t sp</argument>,
<argument>lldb::addr_t functionAddress</argument>,
<argument>lldb::addr_t returnAddress</argument>,
<argument>llvm::Type &amp;prototype</argument>,
<argument>llvm::ArrayRef&lt;CallArgument&gt; args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>GetArgumentValues</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>ValueList &amp;values</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetReturnValueObject</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>CompilerType &amp;type</argument>,
<argument>bool persistent = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetReturnValueObject</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>llvm::Type &amp;type</argument>,
<argument>bool persistent = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>virtual</name> <name>Status</name> <call><name>SetReturnValueObject</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>new_value</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>



<name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>GetReturnValueObjectImpl</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>CompilerType &amp;ast_type</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>GetReturnValueObjectImpl</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>llvm::Type &amp;ir_type</argument>)</argument_list></macro> <specifier>const</specifier></expr>;







<expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcessSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_process_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>public</name><operator>:</operator>
<name>virtual</name> <name>bool</name> <call><name>CreateFunctionEntryUnwindPlan</name><argument_list>(<argument><expr><name>UnwindPlan</name> <operator>&amp;</operator><name>unwind_plan</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>CreateDefaultUnwindPlan</name><argument_list>(<argument><expr><name>UnwindPlan</name> <operator>&amp;</operator><name>unwind_plan</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>RegisterIsVolatile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name>
<call><name>GetFallbackRegisterLocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><name>reg_info</name></expr></argument>,
<argument><expr><name>UnwindPlan</name><operator>::</operator><name>Row</name><operator>::</operator><name>RegisterLocation</name> <operator>&amp;</operator><name>unwind_regloc</name></expr></argument>)</argument_list></call></expr>;







<expr><name>virtual</name> <name>bool</name> <macro><name>CallFrameAddressIsValid</name><argument_list>(<argument>lldb::addr_t cfa</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>bool</name> <macro><name>CodeAddressIsValid</name><argument_list>(<argument>lldb::addr_t pc</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>FixCodeAddress</name><argument_list>(<argument>lldb::addr_t pc</argument>)</argument_list></macro> <block>{ <return>return <expr><name>pc</name></expr>;</return> }</block>
<name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>FixDataAddress</name><argument_list>(<argument>lldb::addr_t pc</argument>)</argument_list></macro> <block>{ <return>return <expr><name>pc</name></expr>;</return> }</block>


<name>llvm</name><operator>::</operator><name>MCRegisterInfo</name> <operator>&amp;</operator><macro><name>GetMCRegisterInfo</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><name>m_mc_register_info_up</name></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <call><name>AugmentRegisterInfo</name><argument_list>(<argument><expr><name>RegisterInfo</name> <operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>GetPointerReturnRegister</name><argument_list>(<argument>const char *&amp;name</argument>)</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ABISP</name> <macro><name>FindPlugin</name><argument_list>(<argument>lldb::ProcessSP process_sp</argument>, <argument>const ArchSpec &amp;arch</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<macro><name>ABI</name><argument_list>(<argument>lldb::ProcessSP process_sp</argument>, <argument>std::unique_ptr&lt;llvm::MCRegisterInfo&gt; info_up</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_process_wp</name><argument_list>(<argument><expr><name>process_sp</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_mc_register_info_up</name><argument_list>(<argument>std::move(info_up)</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>m_mc_register_info_up</name> <operator>&amp;&amp;</operator> <literal type="string">"ABI must have MCRegisterInfo"</literal></expr></argument>)</argument_list></call></expr>;
}</block>




<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MCRegisterInfo</name></expr></argument>&gt;</argument_list></name>
<call><name>MakeMCRegisterInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MCRegisterInfo</name></expr></argument>&gt;</argument_list></name> <name>m_mc_register_info_up</name></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>FixCodeAddress</name><argument_list>(<argument>lldb::addr_t pc</argument>, <argument>lldb::addr_t mask</argument>)</argument_list></macro> <block>{
<return>return <expr><name>pc</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<call><name>ABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ABI</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ABI</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ABI</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RegInfoBasedABI</name> <range>: <expr><name>public</name> <name>ABI</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>AugmentRegisterInfo</name><argument_list>(<argument>RegisterInfo &amp;info</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>using</name> <name>ABI</name><operator>::</operator><name>ABI</name></expr>;

<expr><name>bool</name> <macro><name>GetRegisterInfoByName</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>RegisterInfo &amp;info</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>RegisterInfo</name> <operator>*</operator><call><name>GetRegisterInfoArray</name><argument_list>(<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MCBasedABI</name> <range>: <expr><name>public</name> <name>ABI</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>AugmentRegisterInfo</name><argument_list>(<argument>RegisterInfo &amp;info</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><specifier>static</specifier> <name>void</name> <macro><name>MapRegisterName</name><argument_list>(<argument>std::string &amp;reg</argument>, <argument>llvm::StringRef from_prefix</argument>,
<argument>llvm::StringRef to_prefix</argument>)</argument_list></macro></expr>;
<expr><name>protected</name><operator>:</operator>
<name>using</name> <name>ABI</name><operator>::</operator><name>ABI</name></expr>;


<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetEHAndDWARFNums</name><argument_list>(<argument>llvm::StringRef reg</argument>)</argument_list></macro></expr>;


<expr><name>virtual</name> <name>uint32_t</name> <macro><name>GetGenericNum</name><argument_list>(<argument>llvm::StringRef reg</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetMCName</name><argument_list>(<argument>std::string reg</argument>)</argument_list></macro> <block>{ <return>return <expr><name>reg</name></expr>;</return> }</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
