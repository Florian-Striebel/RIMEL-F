<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/SearchFilter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_SEARCHFILTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_SEARCHFILTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/FileSpecList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Breakpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompileUnit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ModuleList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SearchFilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Target</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>Searcher</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>CallbackReturn</name> <block>{
<decl><name>eCallbackReturnStop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eCallbackReturnContinue</name></decl>,
<decl><name>eCallbackReturnPop</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>Searcher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Searcher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>CallbackReturn</name></type> <name>SearchCallback</name><parameter_list>(<parameter><decl><type><name>SearchFilter</name> <modifier>&amp;</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>SymbolContext</name> <modifier>&amp;</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>Address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>SearchDepth</name> <call><name>GetDepth</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>GetDescription</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

















<decl_stmt><decl><type><name>class</name></type> <name>SearchFilter</name> <block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><call><name>SearchFilter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>SearchFilter</name><argument_list>(<argument>const lldb::TargetSP &amp;target_sp</argument>, <argument>unsigned char filterType</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>SearchFilter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>









<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ModulePasses</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ModulePasses</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<function_decl><type><name>virtual</name> <name>bool</name></type> <name>AddressPasses</name><parameter_list>(<parameter><decl><type><name>Address</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>virtual</name> <name>bool</name></type> <name>CompUnitPasses</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>fileSpec</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>virtual</name> <name>bool</name></type> <name>CompUnitPasses</name><parameter_list>(<parameter><decl><type><name>CompileUnit</name> <modifier>&amp;</modifier></type><name>compUnit</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>virtual</name> <name>bool</name></type> <name>FunctionPasses</name><parameter_list>(<parameter><decl><type><name>Function</name> <modifier>&amp;</modifier></type><name>function</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>virtual</name> <name>void</name></type> <name>Search</name><parameter_list>(<parameter><decl><type><name>Searcher</name> <modifier>&amp;</modifier></type><name>searcher</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>virtual</name> <name>void</name></type> <name>SearchInModuleList</name><parameter_list>(<parameter><decl><type><name>Searcher</name> <modifier>&amp;</modifier></type><name>searcher</name></decl></parameter>, <parameter><decl><type><name>ModuleList</name> <modifier>&amp;</modifier></type><name>modules</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>GetFilterRequiredItems</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>GetDescription</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <call><name>CreateCopy</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name><operator>&amp;</operator> <name>target_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name><operator>&amp;</operator> <name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>data_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSerializationKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"SearchFilter"</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSerializationSubclassKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"Type"</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSerializationSubclassOptionsKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"Options"</literal></expr>;</return> </block_content>}</block></function>

<enum>enum <name>FilterTy</name> <block>{
<decl><name>Unconstrained</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>Exception</name></decl>,
<decl><name>ByModule</name></decl>,
<decl><name>ByModules</name></decl>,
<decl><name>ByModulesAndCU</name></decl>,
<decl><name>LastKnownFilterType</name> <init>= <expr><name>ByModulesAndCU</name></expr></init></decl>,
<decl><name>UnknownFilter</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>g_ty_to_name</name><index>[<expr><name>LastKnownFilterType</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name><name>enum</name> <name>FilterTy</name></name></type> <name>GetFilterTy</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SubclassID</name> <operator>&gt;</operator> <name>FilterTy</name><operator>::</operator><name>LastKnownFilterType</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FilterTy</name><operator>::</operator><name>UnknownFilter</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator>enum <name>FilterTy</name><operator>)</operator><name>SubclassID</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFilterName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>FilterTyToName</name><argument_list>(<argument><expr><call><name>GetFilterTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FilterTyToName</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>FilterTy</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>FilterTy</name></type> <name>NameToFilterTy</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>

<enum>enum <name>OptionNames</name> <block>{ <decl><name>ModList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>CUList</name></decl>, <decl><name>LanguageName</name></decl>, <decl><name>LastOptionName</name></decl> }</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>g_option_names</name><index>[<expr><name>LastOptionName</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetKey</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>OptionNames</name></name></type> <name>enum_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>g_option_names</name><index>[<expr><name>enum_value</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>DictionarySP</name>
<macro><name>WrapOptionsDict</name><argument_list>(<argument>StructuredData::DictionarySP options_dict_sp</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SerializeFileSpecList</name><argument_list>(<argument><expr><name>StructuredData</name><operator>::</operator><name>DictionarySP</name> <operator>&amp;</operator><name>options_dict_sp</name></expr></argument>,
<argument><expr><name>OptionNames</name> <name>name</name></expr></argument>, <argument><expr><name>FileSpecList</name> <operator>&amp;</operator><name>file_list</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<expr_stmt><expr><name>Searcher</name><operator>::</operator><name>CallbackReturn</name> <call><name>DoModuleIteration</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><name>Searcher</name> <operator>&amp;</operator><name>searcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Searcher</name><operator>::</operator><name>CallbackReturn</name> <call><name>DoModuleIteration</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><name>Searcher</name> <operator>&amp;</operator><name>searcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Searcher</name><operator>::</operator><name>CallbackReturn</name> <call><name>DoCUIteration</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><name>Searcher</name> <operator>&amp;</operator><name>searcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Searcher</name><operator>::</operator><name>CallbackReturn</name> <call><name>DoFunctionIteration</name><argument_list>(<argument><expr><name>Function</name> <operator>*</operator><name>function</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><name>Searcher</name> <operator>&amp;</operator><name>searcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <call><name>DoCreateCopy</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetTarget</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_target_sp</name> <operator>=</operator> <name>target_sp</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>m_target_sp</name></expr>;</expr_stmt>


<label><name>private</name>:</label>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>SubclassID</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>SearchFilterForUnconstrainedSearches</name> <range>: <expr><name>public</name> <name>SearchFilter</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SearchFilterForUnconstrainedSearches</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SearchFilter</name><argument_list>(<argument>target_sp</argument>, <argument>FilterTy::Unconstrained</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>SearchFilterForUnconstrainedSearches</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const FileSpec &amp;module_spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name><operator>&amp;</operator> <name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>data_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <macro><name>DoCreateCopy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>SearchFilterByModule</name> <range>: <expr><name>public</name> <name>SearchFilter</name> <block>{
<expr><name>public</name><operator>:</operator>








<call><name>SearchFilterByModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>targetSP</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>module</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>SearchFilterByModule</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const FileSpec &amp;spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>AddressPasses</name><argument_list>(<argument>Address &amp;address</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>uint32_t</name> <macro><name>GetFilterRequiredItems</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Search</name><argument_list>(<argument>Searcher &amp;searcher</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name><operator>&amp;</operator> <name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>data_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <macro><name>DoCreateCopy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>FileSpec</name> <name>m_module_spec</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SearchFilterByModuleList</name> <range>: <expr><name>public</name> <name>SearchFilter</name> <block>{
<expr><name>public</name><operator>:</operator>








<call><name>SearchFilterByModuleList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>targetSP</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>)</argument_list></call></expr>;

<macro><name>SearchFilterByModuleList</name><argument_list>(<argument>const lldb::TargetSP &amp;targetSP</argument>,
<argument>const FileSpecList &amp;module_list</argument>,
<argument>enum FilterTy filter_ty</argument>)</argument_list></macro>;

<expr><operator>~</operator><macro><name>SearchFilterByModuleList</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const lldb::ModuleSP &amp;module_sp</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ModulePasses</name><argument_list>(<argument>const FileSpec &amp;spec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>AddressPasses</name><argument_list>(<argument>Address &amp;address</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>uint32_t</name> <macro><name>GetFilterRequiredItems</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Search</name><argument_list>(<argument>Searcher &amp;searcher</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name><operator>&amp;</operator> <name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>data_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <call><name>SerializeUnwrapped</name><argument_list>(<argument><expr><name>StructuredData</name><operator>::</operator><name>DictionarySP</name> <operator>&amp;</operator><name>options_dict_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <macro><name>DoCreateCopy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>FileSpecList</name> <name>m_module_spec_list</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SearchFilterByModuleListAndCU</name> <range>: <expr><name>public</name> <name>SearchFilterByModuleList</name> <block>{
<expr><name>public</name><operator>:</operator>


<call><name>SearchFilterByModuleListAndCU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>targetSP</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>&amp;</operator><name>module_list</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>&amp;</operator><name>cu_list</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>SearchFilterByModuleListAndCU</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>AddressPasses</name><argument_list>(<argument>Address &amp;address</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CompUnitPasses</name><argument_list>(<argument>FileSpec &amp;fileSpec</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>CompUnitPasses</name><argument_list>(<argument>CompileUnit &amp;compUnit</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>uint32_t</name> <macro><name>GetFilterRequiredItems</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Search</name><argument_list>(<argument>Searcher &amp;searcher</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SearchFilterSP</name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name><operator>&amp;</operator> <name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>data_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>SerializeToStructuredData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>SearchFilterSP</name> <macro><name>DoCreateCopy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>FileSpecList</name> <name>m_cu_spec_list</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
