<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/PostfixExpression.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_POSTFIXEXPRESSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_POSTFIXEXPRESSION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>postfix</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>Node</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>BinaryOp</name></decl>,
<decl><name>InitialValue</name></decl>,
<decl><name>Integer</name></decl>,
<decl><name>Register</name></decl>,
<decl><name>Symbol</name></decl>,
<decl><name>UnaryOp</name></decl>,
}</block>;</enum>

<label><name>protected</name>:</label>
<macro><name>Node</name><argument_list>(<argument>Kind kind</argument>)</argument_list></macro> : <macro><name>m_kind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>public</name>:</label>
<expr_stmt><expr><name>Kind</name> <macro><name>GetKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_kind</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>m_kind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>BinaryOpNode</name> <range>: <expr><name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>OpType</name> <block>{
<expr><name>Align</name></expr>,
<expr><name>Minus</name></expr>,
<expr><name>Plus</name></expr>,
}</block></expr>;

<macro><name>BinaryOpNode</name><argument_list>(<argument>OpType op_type</argument>, <argument>Node &amp;left</argument>, <argument>Node &amp;right</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>Node</name><argument_list>(<argument><expr><name>BinaryOp</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_op_type</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>left</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_right</name><argument_list>(<argument>&amp;right</argument>)</argument_list></macro> <expr><block>{}</block>

<name>OpType</name> <macro><name>GetOpType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_op_type</name></expr>;</return> }</block>

<specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>Left</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_left</name></expr>;</return> }</block>
<name>Node</name> <operator>*</operator><operator>&amp;</operator><macro><name>Left</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_left</name></expr>;</return> }</block>

<specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>Right</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_right</name></expr>;</return> }</block>
<name>Node</name> <operator>*</operator><operator>&amp;</operator><macro><name>Right</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_right</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *node</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>BinaryOp</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>OpType</name> <name>m_op_type</name></expr>;
<expr><name>Node</name> <operator>*</operator><name>m_left</name></expr>;
<expr><name>Node</name> <operator>*</operator><name>m_right</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>InitialValueNode</name><range>: <expr><name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>InitialValueNode</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Node</name><argument_list>(<argument>InitialValue</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *node</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>InitialValue</name></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>IntegerNode</name> <operator>:</operator> <name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>IntegerNode</name><argument_list>(<argument>int64_t value</argument>)</argument_list></macro> <operator>:</operator> <call><name>Node</name><argument_list>(<argument><expr><name>Integer</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_value</name><argument_list>(<argument>value</argument>)</argument_list></macro> <expr><block>{}</block>

<name>int64_t</name> <macro><name>GetValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_value</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *node</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Integer</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>int64_t</name> <name>m_value</name></expr>;
}</block></expr>;





<expr><name>class</name> <name>RegisterNode</name> <operator>:</operator> <name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>RegisterNode</name><argument_list>(<argument>uint32_t reg_num</argument>)</argument_list></macro> <operator>:</operator> <call><name>Node</name><argument_list>(<argument><expr><name>Register</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_reg_num</name><argument_list>(<argument>reg_num</argument>)</argument_list></macro> <expr><block>{}</block>

<name>uint32_t</name> <macro><name>GetRegNum</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_reg_num</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *node</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Register</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>uint32_t</name> <name>m_reg_num</name></expr>;
}</block></expr>;



<expr><name>class</name> <name>SymbolNode</name> <operator>:</operator> <name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>SymbolNode</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro> <operator>:</operator> <call><name>Node</name><argument_list>(<argument><expr><name>Symbol</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_name</name><argument_list>(<argument>name</argument>)</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *node</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Symbol</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>StringRef</name> <name>m_name</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>UnaryOpNode</name> <operator>:</operator> <name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>OpType</name> <block>{
<expr><name>Deref</name></expr>,
}</block></expr>;

<macro><name>UnaryOpNode</name><argument_list>(<argument>OpType op_type</argument>, <argument>Node &amp;operand</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>Node</name><argument_list>(<argument><expr><name>UnaryOp</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_op_type</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_operand</name><argument_list>(<argument>&amp;operand</argument>)</argument_list></macro> <expr><block>{}</block>

<name>OpType</name> <macro><name>GetOpType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_op_type</name></expr>;</return> }</block>

<specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>Operand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_operand</name></expr>;</return> }</block>
<name>Node</name> <operator>*</operator><operator>&amp;</operator><macro><name>Operand</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_operand</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *node</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>UnaryOp</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>OpType</name> <name>m_op_type</name></expr>;
<expr><name>Node</name> <operator>*</operator><name>m_operand</name></expr>;
}</block></expr>;











<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ResultT</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>Visitor</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>Visitor</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>virtual</name> <name>ResultT</name> <call><name>Visit</name><argument_list>(<argument><expr><name>BinaryOpNode</name> <operator>&amp;</operator><name>binary</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>ResultT</name> <call><name>Visit</name><argument_list>(<argument><expr><name>InitialValueNode</name> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>ResultT</name> <call><name>Visit</name><argument_list>(<argument><expr><name>IntegerNode</name> <operator>&amp;</operator><name>integer</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>ResultT</name> <call><name>Visit</name><argument_list>(<argument><expr><name>RegisterNode</name> <operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>ResultT</name> <call><name>Visit</name><argument_list>(<argument><expr><name>SymbolNode</name> <operator>&amp;</operator><name>symbol</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>ResultT</name> <call><name>Visit</name><argument_list>(<argument><expr><name>UnaryOpNode</name> <operator>&amp;</operator><name>unary</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>ResultT</name> <macro><name>Dispatch</name><argument_list>(<argument>Node *&amp;node</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><call><name><name>node</name><operator>-&gt;</operator><name>GetKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Node</name><operator>::</operator><name>BinaryOp</name></expr>:</case>
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>BinaryOpNode</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Node</name><operator>::</operator><name>InitialValue</name></expr>:</case>
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>InitialValueNode</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Node</name><operator>::</operator><name>Integer</name></expr>:</case>
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>IntegerNode</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Node</name><operator>::</operator><name>Register</name></expr>:</case>
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>RegisterNode</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Node</name><operator>::</operator><name>Symbol</name></expr>:</case>
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>SymbolNode</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Node</name><operator>::</operator><name>UnaryOp</name></expr>:</case>
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>UnaryOpNode</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("Fully covered switch!"</block></switch>)</block></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>ResolveSymbols</name><argument_list>(<argument><expr><name>Node</name> <operator>*</operator><operator>&amp;</operator><name>node</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>Node</name> <operator>*</operator><operator>(</operator><name>SymbolNode</name> <operator>&amp;</operator><name>symbol</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>replacer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>T</name> <modifier>*</modifier></type><name>MakeNode</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_trivially_destructible</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"This object will not be destroyed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <macro><name>new</name> <argument_list>(<argument>alloc.Allocate&lt;T&gt;()</argument>)</argument_list></macro> <expr><call><name>T</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>ParseOneExpression</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>expr</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>alloc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>ParseFPOProgram</name><argument_list>(<argument>llvm::StringRef prog</argument>, <argument>llvm::BumpPtrAllocator &amp;alloc</argument>)</argument_list></macro></expr>;</expr_stmt>






<function_decl><type><name>void</name></type> <name>ToDWARF</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
