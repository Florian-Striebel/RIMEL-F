<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/CompilerType.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_COMPILERTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_COMPILERTYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>class</name></type> <name>CompilerType</name> <block>{<block_content>
<label><name>public</name>:</label>






<macro><name>CompilerType</name><argument_list>(<argument>TypeSystem *type_system</argument>, <argument>lldb::opaque_compiler_type_t type</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type_system</name><argument_list>(<argument>type_system</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>Verify</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"verification failed"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>CompilerType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_type</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_type</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type_system</name><argument_list>(<argument>rhs.m_type_system</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>CompilerType</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<expr><name>m_type</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_type</name></name></expr>;
<expr><name>m_type_system</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_type_system</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_type_system</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>m_type_system</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>m_type</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>m_type</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>m_type_system</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>m_type_system</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_type</name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name>m_type_system</name> <operator>!=</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name>m_type_system</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsArrayType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>element_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>*</operator><name>size</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>is_incomplete</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsVectorType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>element_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>*</operator><name>size</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsArrayOfScalarType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAggregateType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAnonymousType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsScopedEnumerationType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsBeingDefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsCharType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsCompleteType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsConst</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsCStringType</name><argument_list>(<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>length</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsDefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsFloatingPointType</name><argument_list>(<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>is_complex</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsFunctionType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>IsHomogeneousAggregate</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>base_type_ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetNumberOfFunctionArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetFunctionArgumentAtIndex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>size_t</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsVariadicFunctionType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsFunctionPointerType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>IsBlockPointerType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>function_pointer_type_ptr</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsIntegerType</name><argument_list>(<argument><expr><name>bool</name> <operator>&amp;</operator><name>is_signed</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsEnumerationType</name><argument_list>(<argument><expr><name>bool</name> <operator>&amp;</operator><name>is_signed</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsIntegerOrEnumerationType</name><argument_list>(<argument><expr><name>bool</name> <operator>&amp;</operator><name>is_signed</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsPolymorphicClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsPossibleDynamicType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>target_type</name></expr></argument>, <argument><expr><name>bool</name> <name>check_cplusplus</name></expr></argument>,
<argument><expr><name>bool</name> <name>check_objc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsPointerToScalarType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsRuntimeGeneratedType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsPointerType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>pointee_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsPointerOrReferenceType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>pointee_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsReferenceType</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>pointee_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>is_rvalue</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>ShouldTreatScalarValueAsAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsScalarType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsTypedefType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsVoidType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>GetCompleteType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>size_t</name> <macro><name>GetPointerByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>TypeSystem</name> <operator>*</operator><macro><name>GetTypeSystem</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type_system</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetTypeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>ConstString</name> <macro><name>GetDisplayTypeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type>
<name>GetTypeInfo</name><argument_list>(<argument><expr><name>CompilerType</name> <operator>*</operator><name>pointee_or_element_compiler_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>GetMinimumLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>opaque_compiler_type_t</name> <macro><name>GetOpaqueQualType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeClass</name> <macro><name>GetTypeClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetCompilerType</name><argument_list>(<argument><expr><name>TypeSystem</name> <operator>*</operator><name>type_system</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>opaque_compiler_type_t</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>GetTypeQualifiers</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetArrayElementType</name><argument_list>(<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetArrayType</name><argument_list>(<argument><expr><name>uint64_t</name> <name>size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetCanonicalType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetFullyUnqualifiedType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetEnumerationIntegerType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>int</name> <macro><name>GetFunctionArgumentCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetFunctionArgumentTypeAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetFunctionReturnType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetNumMemberFunctions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>TypeMemberFunctionImpl</name></type> <name>GetMemberFunctionAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>CompilerType</name> <macro><name>GetNonReferenceType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>CompilerType</name> <macro><name>GetPointeeType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>CompilerType</name> <macro><name>GetPointerType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>CompilerType</name> <macro><name>GetLValueReferenceType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>CompilerType</name> <macro><name>GetRValueReferenceType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>CompilerType</name> <macro><name>AddConstModifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>CompilerType</name> <macro><name>AddVolatileModifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>CompilerType</name> <macro><name>GetAtomicType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>CompilerType</name> <macro><name>AddRestrictModifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>CompilerType</name></type> <name>CreateTypedef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CompilerDeclContext</name> <operator>&amp;</operator><name>decl_ctx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>payload</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>CompilerType</name> <macro><name>GetTypedefedType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetBasicTypeFromAST</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BasicType</name> <name>basic_type</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<struct_decl>struct <name>IntegralTemplateArgument</name>;</struct_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetByteSize</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>GetBitSize</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Encoding</name> <macro><name>GetEncoding</name><argument_list>(<argument>uint64_t &amp;count</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <macro><name>GetFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetTypeBitAlign</name><argument_list>(<argument>ExecutionContextScope *exe_scope</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetNumChildren</name><argument_list>(<argument><expr><name>bool</name> <name>omit_empty_base_classes</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BasicType</name> <macro><name>GetBasicTypeEnumeration</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>BasicType</name> <macro><name>GetBasicTypeEnumeration</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>ForEachEnumerator</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>integer_type</name>, <name>ConstString</name> <name>name</name>,
<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>value</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumFields</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetFieldAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>name</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>*</operator><name>bit_offset_ptr</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>*</operator><name>bitfield_bit_size_ptr</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>is_bitfield_ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumDirectBaseClasses</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumVirtualBaseClasses</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetDirectBaseClassAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>*</operator><name>bit_offset_ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetVirtualBaseClassAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>*</operator><name>bit_offset_ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetIndexOfFieldWithName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>CompilerType</name> <operator>*</operator><name>field_compiler_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>*</operator><name>bit_offset_ptr</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>*</operator><name>bitfield_bit_size_ptr</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>is_bitfield_ptr</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetChildCompilerTypeAtIndex</name><argument_list>(
<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><name>bool</name> <name>transparent_pointers</name></expr></argument>,
<argument><expr><name>bool</name> <name>omit_empty_base_classes</name></expr></argument>, <argument><expr><name>bool</name> <name>ignore_array_bounds</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>child_name</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>child_byte_size</name></expr></argument>,
<argument><expr><name>int32_t</name> <operator>&amp;</operator><name>child_byte_offset</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>child_bitfield_bit_size</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>child_bitfield_bit_offset</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>child_is_base_class</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>child_is_deref_of_parent</name></expr></argument>, <argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>language_flags</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetIndexOfChildWithName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><name>bool</name> <name>omit_empty_base_classes</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>size_t</name></type>
<name>GetIndexOfChildMemberWithName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>bool</name> <name>omit_empty_base_classes</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>child_indexes</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetNumTemplateArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TemplateArgumentKind</name> <macro><name>GetTemplateArgumentKind</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>GetTypeTemplateArgument</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>IntegralTemplateArgument</name></expr></argument>&gt;</argument_list></name>
<macro><name>GetIntegralTemplateArgument</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CompilerType</name> <macro><name>GetTypeForFormatters</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LazyBool</name></type> <name>ShouldPrintAsOneLiner</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>*</operator><name>valobj</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsMeaninglessWithoutDynamicResolution</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name></type> <name>DumpValue</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>data_offset</name></expr></argument>,
<argument><expr><name>size_t</name> <name>data_byte_size</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>bitfield_bit_size</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>bitfield_bit_offset</name></expr></argument>, <argument><expr><name>bool</name> <name>show_types</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_summary</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>depth</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>DumpTypeValue</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>data_offset</name></expr></argument>, <argument><expr><name>size_t</name> <name>data_byte_size</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>bitfield_bit_size</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>bitfield_bit_offset</name></expr></argument>,
<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DumpSummary</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>data_offset</name></expr></argument>,
<argument><expr><name>size_t</name> <name>data_byte_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>DumpTypeDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name> <operator>=</operator>
<name>lldb</name><operator>::</operator><name>eDescriptionLevelFull</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>DumpTypeDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name> <operator>=</operator>
<name>lldb</name><operator>::</operator><name>eDescriptionLevelFull</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>GetValueAsScalar</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>data_offset</name></expr></argument>,
<argument><expr><name>size_t</name> <name>data_byte_size</name></expr></argument>, <argument><expr><name>Scalar</name> <operator>&amp;</operator><name>value</name></expr></argument>,
<argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_type_system</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>bool</name> <macro><name>Verify</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>opaque_compiler_type_t</name> <name>m_type</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TypeSystem</name> <modifier>*</modifier></type><name>m_type_system</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

struct <expr_stmt><expr><name>CompilerType</name><operator>::</operator><name>IntegralTemplateArgument</name> <block>{
<expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>value</name></expr>;
<expr><name>CompilerType</name> <name>type</name></expr>;
}</block></expr>;</expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
