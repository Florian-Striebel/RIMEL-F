<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ProcessStructReader.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_PROCESSSTRUCTREADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_PROCESSSTRUCTREADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/CompilerType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataBufferHeap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ProcessStructReader</name> <block>{<block_content>
<label><name>protected</name>:</label>
<struct>struct <name>FieldImpl</name> <block>{
<decl_stmt><decl><type><name>CompilerType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>, <argument><expr><name>FieldImpl</name></expr></argument>&gt;</argument_list></name> <name>m_fields</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DataExtractor</name></type> <name>m_data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>m_byte_order</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_addr_byte_size</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ProcessStructReader</name><argument_list>(<argument>Process *process</argument>, <argument>lldb::addr_t base_addr</argument>,
<argument>CompilerType struct_type</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base_addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>base_addr</name> <operator>==</operator> <name>LLDB_INVALID_ADDRESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_byte_order</name> <operator>=</operator> <call><name><name>process</name><operator>-&gt;</operator><name>GetByteOrder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_addr_byte_size</name> <operator>=</operator> <call><name><name>process</name><operator>-&gt;</operator><name>GetAddressByteSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>struct_type</name><operator>.</operator><name>GetNumFields</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bit_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitfield_bit_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_bitfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompilerType</name></type> <name>field_type</name> <init>= <expr><call><name><name>struct_type</name><operator>.</operator><name>GetFieldAtIndex</name></name><argument_list>(
<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitfield_bit_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_bitfield</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_bitfield</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>size</name> <init>= <expr><call><name><name>field_type</name><operator>.</operator><name>GetByteSize</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name> <operator>||</operator> <operator>*</operator><name>size</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>ConstString</name></type> <name>const_name</name> <init>= <expr><call><name>ConstString</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>byte_index</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>bit_offset</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>m_fields</name><index>[<expr><name>const_name</name></expr>]</index></name> <operator>=</operator>
<name>FieldImpl</name><block>{<expr><name>field_type</name></expr>, <expr><name>byte_index</name></expr>, <macro><name>static_cast</name></macro><expr><operator>&lt;</operator><name>size_t</name><operator>&gt;</operator><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>auto</name></type> <name>total_size</name> <init>= <expr><call><name><name>struct_type</name><operator>.</operator><name>GetByteSize</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>total_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataBufferSP</name> <macro><name>buffer_sp</name><argument_list>(<argument>new DataBufferHeap(*total_size, <literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Status</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>process</name><operator>-&gt;</operator><name>ReadMemoryFromInferior</name></name><argument_list>(<argument><expr><name>base_addr</name></expr></argument>, <argument><expr><call><name><name>buffer_sp</name><operator>-&gt;</operator><name>GetBytes</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>*</operator><name>total_size</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>Fail</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_data</name> <operator>=</operator> <call><name>DataExtractor</name><argument_list>(<argument><expr><name>buffer_sp</name></expr></argument>, <argument><expr><name>m_byte_order</name></expr></argument>, <argument><expr><name>m_addr_byte_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RetType</name></expr></argument>&gt;</argument_list></name>
<name>RetType</name></type> <name>GetField</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>RetType</name></type> <name>fail_value</name> <init>= <expr><call><name>RetType</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>m_fields</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>m_fields</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fail_value</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>size</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>RetType</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fail_value</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <call><name><name>m_data</name><operator>.</operator><name>GetByteSize</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fail_value</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>RetType</name><operator>)</operator><operator>(</operator><call><name><name>m_data</name><operator>.</operator><name>GetMaxU64</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>GetOffsetOf</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fail_value</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>m_fields</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>m_fields</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fail_value</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
