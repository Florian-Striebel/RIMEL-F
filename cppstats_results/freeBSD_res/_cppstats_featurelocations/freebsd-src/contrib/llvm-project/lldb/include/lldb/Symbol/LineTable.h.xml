<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/LineTable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_LINETABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_LINETABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ModuleChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Section.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/SourceLocationSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/LineEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>LineSequence</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>LineSequence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>LineSequence</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>LineSequence</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LineSequence</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LineSequence</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>LineSequence</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>LineTable</name> <block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><call><name>LineTable</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>*</operator><name>comp_unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>LineTable</name><argument_list>(<argument><expr><name>CompileUnit</name> <operator>*</operator><name>comp_unit</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LineSequence</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>sequences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>LineTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>














<decl_stmt><decl><type><name>void</name></type> <name>InsertLineEntry</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>uint16_t</name> <name>column</name></expr></argument>,
<argument><expr><name>uint16_t</name> <name>file_idx</name></expr></argument>, <argument><expr><name>bool</name> <name>is_start_of_statement</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_start_of_basic_block</name></expr></argument>, <argument><expr><name>bool</name> <name>is_prologue_end</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_epilogue_begin</name></expr></argument>, <argument><expr><name>bool</name> <name>is_terminal_entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LineSequence</name></expr></argument>&gt;</argument_list></name> <call><name>CreateLineSequenceContainer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AppendLineEntryToSequence</name><argument_list>(<argument><expr><name>LineSequence</name> <operator>*</operator><name>sequence</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>line</name></expr></argument>, <argument><expr><name>uint16_t</name> <name>column</name></expr></argument>,
<argument><expr><name>uint16_t</name> <name>file_idx</name></expr></argument>, <argument><expr><name>bool</name> <name>is_start_of_statement</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_start_of_basic_block</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_prologue_end</name></expr></argument>, <argument><expr><name>bool</name> <name>is_epilogue_begin</name></expr></argument>,
<argument><expr><name>bool</name> <name>is_terminal_entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>InsertSequence</name><parameter_list>(<parameter><decl><type><name>LineSequence</name> <modifier>*</modifier></type><name>sequence</name></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>Address</name><operator>::</operator><name>DumpStyle</name> <name>style</name></expr></argument>,
<argument><expr><name>Address</name><operator>::</operator><name>DumpStyle</name> <name>fallback_style</name></expr></argument>, <argument><expr><name>bool</name> <name>show_line_ranges</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>


















<function_decl><type><name>bool</name></type> <name>FindLineEntryByAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Address</name> <modifier>&amp;</modifier></type><name>so_addr</name></decl></parameter>, <parameter><decl><type><name>LineEntry</name> <modifier>&amp;</modifier></type><name>line_entry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>index_ptr</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>uint32_t</name></type>
<name>FindLineEntryIndexByFileIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>start_idx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>file_idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceLocationSpec</name> <modifier>&amp;</modifier></type><name>src_location_spec</name></decl></parameter>,
<parameter><decl><type><name>LineEntry</name> <modifier>*</modifier></type><name>line_entry_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>FindLineEntryIndexByFileIndex</name><argument_list>(
<argument><expr><name>uint32_t</name> <name>start_idx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>file_idx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceLocationSpec</name> <operator>&amp;</operator><name>src_location_spec</name></expr></argument>, <argument><expr><name>LineEntry</name> <operator>*</operator><name>line_entry_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> <name>FineLineEntriesForFileIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>file_idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>append</name></decl></parameter>,
<parameter><decl><type><name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>bool</name></type> <name>GetLineEntryAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>LineEntry</name> <modifier>&amp;</modifier></type><name>line_entry</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>uint32_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>lldb_private</name><operator>::</operator><name><name>RangeVector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name>
<name>FileAddressRanges</name></expr>;</expr_stmt></typedef>













<function_decl><type><name>size_t</name></type> <name>GetContiguousFileAddressRanges</name><parameter_list>(<parameter><decl><type><name>FileAddressRanges</name> <modifier>&amp;</modifier></type><name>file_ranges</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>append</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>RangeDataVector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name></type>
<name>FileRangeMap</name>;</typedef>

<function_decl><type><name>LineTable</name> <modifier>*</modifier></type><name>LinkLineTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileRangeMap</name> <modifier>&amp;</modifier></type><name>file_range_map</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<struct>struct <name>Entry</name> <block>{
<expr_stmt><expr><call><name>Entry</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>line</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>is_start_of_statement</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>is_start_of_basic_block</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>is_prologue_end</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>is_epilogue_begin</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>is_terminal_entry</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>Entry</name><argument_list>(<argument>lldb::addr_t _file_addr</argument>, <argument>uint32_t _line</argument>, <argument>uint16_t _column</argument>,
<argument>uint16_t _file_idx</argument>, <argument>bool _is_start_of_statement</argument>,
<argument>bool _is_start_of_basic_block</argument>, <argument>bool _is_prologue_end</argument>,
<argument>bool _is_epilogue_begin</argument>, <argument>bool _is_terminal_entry</argument>)</argument_list></macro>
<operator>:</operator> <call><name>file_addr</name><argument_list>(<argument><expr><name>_file_addr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>line</name><argument_list>(<argument><expr><name>_line</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>is_start_of_statement</name><argument_list>(<argument><expr><name>_is_start_of_statement</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>is_start_of_basic_block</name><argument_list>(<argument><expr><name>_is_start_of_basic_block</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>is_prologue_end</name><argument_list>(<argument><expr><name>_is_prologue_end</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>is_epilogue_begin</name><argument_list>(<argument><expr><name>_is_epilogue_begin</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>is_terminal_entry</name><argument_list>(<argument><expr><name>_is_terminal_entry</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>column</name><argument_list>(<argument><expr><name>_column</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>file_idx</name><argument_list>(<argument>_file_idx</argument>)</argument_list></macro> <expr><block>{}</block>

<name>int</name> <call><name>bsearch_compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>arrmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>file_addr</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>file_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_start_of_statement</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_start_of_basic_block</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_prologue_end</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_epilogue_begin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_terminal_entry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALAR_COMPARE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (a &lt; b) return -1; if (a &gt; b) return +1</cpp:value></cpp:define>




<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>file_addr</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>file_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>column</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>is_start_of_statement</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>is_start_of_statement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>is_start_of_basic_block</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>is_start_of_basic_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>is_prologue_end</name></name></expr></argument>, <argument><expr><name><name>lhs</name><operator>.</operator><name>is_prologue_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>is_epilogue_begin</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>is_epilogue_begin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>is_terminal_entry</name></name></expr></argument>, <argument><expr><name><name>lhs</name><operator>.</operator><name>is_terminal_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_COMPARE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>file_idx</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>file_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCALAR_COMPARE</name></cpp:undef>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>LessThanBinaryPredicate</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>LessThanBinaryPredicate</name><argument_list>(<argument><expr><name>LineTable</name> <operator>*</operator><name>line_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>LineTable</name><operator>::</operator><name>Entry</name> <operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name>LineTable</name><operator>::</operator><name>Entry</name> <operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LineSequence</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><operator>,</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LineSequence</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>LineTable</name> <modifier>*</modifier></type><name>m_line_table</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>EntryAddressLessThan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Entry</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>lhs</name><operator>.</operator><name>file_addr</name></name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>file_addr</name></name></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>file_addr</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>line</name> <range>: <expr><literal type="number">27</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>is_start_of_statement</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>is_start_of_basic_block</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>is_prologue_end</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>is_epilogue_begin</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>is_terminal_entry</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>file_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>EntrySearchInfo</name> <block>{
<decl_stmt><decl><type><name>LineTable</name> <modifier>*</modifier></type><name>line_table</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Section</name> <operator>*</operator><name>a_section</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Entry</name> <modifier>*</modifier></type><name>a_entry</name></decl>;</decl_stmt>
}</block>;</struct>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>Section</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<name>section_collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Entry</name></expr></argument>&gt;</argument_list></name>
<name>entry_collection</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>CompileUnit</name>
<modifier>*</modifier></type><name>m_comp_unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>entry_collection</name></type>
<name>m_entries</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>LineSequenceImpl</name> <range>: <expr><name>public</name> <name>LineSequence</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>LineSequenceImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>LineSequenceImpl</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>entry_collection</name>
<name>m_entries</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>ConvertEntryAtIndexToLineEntry</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>LineEntry</name> <modifier>&amp;</modifier></type><name>line_entry</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>LineTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LineTable</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LineTable</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>LineTable</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>uint32_t</name></type> <name>FindLineEntryIndexByFileIndexImpl</name><argument_list>(
<argument><expr><name>uint32_t</name> <name>start_idx</name></expr></argument>, <argument><expr><name>T</name> <name>file_idx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceLocationSpec</name> <operator>&amp;</operator><name>src_location_spec</name></expr></argument>, <argument><expr><name>LineEntry</name> <operator>*</operator><name>line_entry_ptr</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>T</name>, <name>uint16_t</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>file_idx_matcher</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>count</name> <init>= <expr><call><name><name>m_entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>best_match</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line_entry_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>best_match</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>line</name> <init>= <expr><call><name><name>src_location_spec</name><operator>.</operator><name>GetLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueOr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>column</name> <init>=
<expr><call><name><name>src_location_spec</name><operator>.</operator><name>GetColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueOr</name><argument_list>(<argument><expr><name>LLDB_INVALID_COLUMN_NUMBER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>exact_match</name> <init>= <expr><call><name><name>src_location_spec</name><operator>.</operator><name>GetExactMatch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>start_idx</name></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>is_terminal_entry</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_idx_matcher</name><argument_list>(<argument><expr><name>file_idx</name></expr></argument>, <argument><expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>file_idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <name>LLDB_INVALID_COLUMN_NUMBER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>&lt;</operator> <name>line</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>==</operator> <name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ConvertEntryAtIndexToLineEntry</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>*</operator><name>line_entry_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>exact_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>best_match</name> <operator>==</operator> <name>UINT32_MAX</name> <operator>||</operator>
<name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>&lt;</operator> <name><name>m_entries</name><index>[<expr><name>best_match</name></expr>]</index></name><operator>.</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>best_match</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>&lt;</operator> <name>line</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>==</operator> <name>line</name> <operator>&amp;&amp;</operator>
<name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>column</name> <operator>==</operator> <name>column</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ConvertEntryAtIndexToLineEntry</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>*</operator><name>line_entry_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>exact_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>best_match</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>best_match</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>&lt;</operator> <name><name>m_entries</name><index>[<expr><name>best_match</name></expr>]</index></name><operator>.</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>best_match</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>==</operator> <name><name>m_entries</name><index>[<expr><name>best_match</name></expr>]</index></name><operator>.</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>column</name> <operator>&amp;&amp;</operator>
<name><name>m_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>column</name> <operator>&lt;</operator> <name><name>m_entries</name><index>[<expr><name>best_match</name></expr>]</index></name><operator>.</operator><name>column</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>best_match</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_match</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line_entry_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ConvertEntryAtIndexToLineEntry</name><argument_list>(<argument><expr><name>best_match</name></expr></argument>, <argument><expr><operator>*</operator><name>line_entry_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>best_match</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
