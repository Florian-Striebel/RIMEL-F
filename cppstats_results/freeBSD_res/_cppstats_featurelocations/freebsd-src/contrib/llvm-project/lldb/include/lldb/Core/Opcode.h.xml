<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/Opcode.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_OPCODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_OPCODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/SwapByteOrder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SBInstruction</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DataExtractor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Opcode</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Type</name> <block>{
<decl><name>eTypeInvalid</name></decl>,
<decl><name>eType8</name></decl>,
<decl><name>eType16</name></decl>,
<decl><name>eType16_2</name></decl>,
<decl><name>eType32</name></decl>,
<decl><name>eType64</name></decl>,
<decl><name>eTypeBytes</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>Opcode</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>Opcode</name><argument_list>(<argument>uint8_t inst</argument>, <argument>lldb::ByteOrder order</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_byte_order</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type</name><argument_list>(<argument>eType8</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>m_data</name><operator>.</operator><name>inst8</name></name> <operator>=</operator> <name>inst</name></expr>;
}</block>

<macro><name>Opcode</name><argument_list>(<argument>uint16_t inst</argument>, <argument>lldb::ByteOrder order</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_byte_order</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type</name><argument_list>(<argument>eType16</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name> <operator>=</operator> <name>inst</name></expr>;
}</block>

<macro><name>Opcode</name><argument_list>(<argument>uint32_t inst</argument>, <argument>lldb::ByteOrder order</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_byte_order</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type</name><argument_list>(<argument>eType32</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name> <operator>=</operator> <name>inst</name></expr>;
}</block>

<macro><name>Opcode</name><argument_list>(<argument>uint64_t inst</argument>, <argument>lldb::ByteOrder order</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_byte_order</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_type</name><argument_list>(<argument>eType64</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>m_data</name><operator>.</operator><name>inst64</name></name> <operator>=</operator> <name>inst</name></expr>;
}</block>

<macro><name>Opcode</name><argument_list>(<argument>uint8_t *bytes</argument>, <argument>size_t length</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>m_byte_order</name><argument_list>(<argument>lldb::eByteOrderInvalid</argument>)</argument_list></macro> <block>{
<expr><call><name>SetOpcodeBytes</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <block>{
<expr><name>m_byte_order</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eByteOrderInvalid</name></expr>;
<expr><name>m_type</name> <operator>=</operator> <name>Opcode</name><operator>::</operator><name>eTypeInvalid</name></expr>;
}</block>

<name>Opcode</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>GetOpcode8</name><argument_list>(<argument><expr><name>uint8_t</name> <name>invalid_opcode</name> <operator>=</operator> <name>UINT8_MAX</name></expr></argument>)</argument_list> const <block>{<block_content>
<switch>switch <condition>(<expr><name>m_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeInvalid</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType8</name></expr>:</case>
<return>return <expr><name><name>m_data</name><operator>.</operator><name>inst8</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16_2</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType32</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType64</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeBytes</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>invalid_opcode</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>GetOpcode16</name><argument_list>(<argument><expr><name>uint16_t</name> <name>invalid_opcode</name> <operator>=</operator> <name>UINT16_MAX</name></expr></argument>)</argument_list> const <block>{<block_content>
<switch>switch <condition>(<expr><name>m_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeInvalid</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType8</name></expr>:</case>
<return>return <expr><name><name>m_data</name><operator>.</operator><name>inst8</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>GetEndianSwap</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name>ByteSwap_16</name><argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16_2</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType32</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType64</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeBytes</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>invalid_opcode</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetOpcode32</name><argument_list>(<argument><expr><name>uint32_t</name> <name>invalid_opcode</name> <operator>=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list> const <block>{<block_content>
<switch>switch <condition>(<expr><name>m_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeInvalid</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType8</name></expr>:</case>
<return>return <expr><name><name>m_data</name><operator>.</operator><name>inst8</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>GetEndianSwap</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name>ByteSwap_16</name><argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16_2</name></expr>:</case>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType32</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>GetEndianSwap</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name>ByteSwap_32</name><argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType64</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeBytes</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>invalid_opcode</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetOpcode64</name><argument_list>(<argument><expr><name>uint64_t</name> <name>invalid_opcode</name> <operator>=</operator> <name>UINT64_MAX</name></expr></argument>)</argument_list> const <block>{<block_content>
<switch>switch <condition>(<expr><name>m_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeInvalid</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType8</name></expr>:</case>
<return>return <expr><name><name>m_data</name><operator>.</operator><name>inst8</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>GetEndianSwap</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name>ByteSwap_16</name><argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16_2</name></expr>:</case>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType32</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>GetEndianSwap</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name>ByteSwap_32</name><argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType64</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>GetEndianSwap</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name>ByteSwap_64</name><argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst64</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>m_data</name><operator>.</operator><name>inst64</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeBytes</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>invalid_opcode</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOpcode8</name><argument_list>(<argument><expr><name>uint8_t</name> <name>inst</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>order</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>eType8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_data</name><operator>.</operator><name>inst8</name></name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_byte_order</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOpcode16</name><argument_list>(<argument><expr><name>uint16_t</name> <name>inst</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>order</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>eType16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_byte_order</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOpcode16_2</name><argument_list>(<argument><expr><name>uint32_t</name> <name>inst</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>order</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>eType16_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_byte_order</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOpcode32</name><argument_list>(<argument><expr><name>uint32_t</name> <name>inst</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>order</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>eType32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_byte_order</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOpcode64</name><argument_list>(<argument><expr><name>uint64_t</name> <name>inst</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>order</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>eType64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_data</name><operator>.</operator><name>inst64</name></name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_byte_order</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetOpcodeBytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>eTypeBytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_data</name><operator>.</operator><name>inst</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>length</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_byte_order</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eByteOrderInvalid</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>eTypeInvalid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_data</name><operator>.</operator><name>inst</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>Dump</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>min_byte_width</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>GetOpcodeBytes</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><name>m_type</name> <operator>==</operator> <name>Opcode</name><operator>::</operator><name>eTypeBytes</name><operator>)</operator> <operator>?</operator> <name><name>m_data</name><operator>.</operator><name>inst</name><operator>.</operator><name>bytes</name></name> <operator>:</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><name>m_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeInvalid</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType8</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst8</name></name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16_2</name></expr>:</case>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType32</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst32</name></name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType64</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m_data</name><operator>.</operator><name>inst64</name></name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeBytes</name></expr>:</case>
<return>return <expr><name><name>m_data</name><operator>.</operator><name>inst</name><operator>.</operator><name>length</name></name></expr>;</return>
<expr_stmt/>}</block_content>
return 0</block><empty_stmt>;</empty_stmt></switch>
}</block>


<name>uint32_t</name> <macro><name>GetData</name><argument_list>(<argument>DataExtractor &amp;data</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb</name><operator>::</operator><name>SBInstruction</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>GetOpcodeDataBytes</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><name>m_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeInvalid</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType8</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>m_data</name><operator>.</operator><name>inst8</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>m_data</name><operator>.</operator><name>inst16</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType16_2</name></expr>:</case>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType32</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>m_data</name><operator>.</operator><name>inst32</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eType64</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>m_data</name><operator>.</operator><name>inst64</name></name></expr>;</return>
<case>case <expr><name>Opcode</name><operator>::</operator><name>eTypeBytes</name></expr>:</case>
<return>return <expr><name><name>m_data</name><operator>.</operator><name>inst</name><operator>.</operator><name>bytes</name></name></expr>;</return>
<expr_stmt/>}</block_content>
return nullptr</block><empty_stmt>;</empty_stmt></switch>
}</block>

<name>lldb</name><operator>::</operator><name>ByteOrder</name> <macro><name>GetDataByteOrder</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetEndianSwap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_byte_order</name> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eByteOrderBig</name> <operator>&amp;&amp;</operator>
<name>endian</name><operator>::</operator><call><name>InlHostByteOrder</name><argument_list>()</argument_list></call> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eByteOrderLittle</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>m_byte_order</name> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eByteOrderLittle</name> <operator>&amp;&amp;</operator>
<name>endian</name><operator>::</operator><call><name>InlHostByteOrder</name><argument_list>()</argument_list></call> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eByteOrderBig</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>m_byte_order</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eByteOrderInvalid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Opcode</name><operator>::</operator><name>Type</name> <name>m_type</name> <operator>=</operator> <name>eTypeInvalid</name></expr>;</expr_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>inst8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>inst16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>inst32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>inst64</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bytes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block> <decl><name>inst</name></decl>;</struct>
}</block> <decl><name>m_data</name></decl>;</union>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
