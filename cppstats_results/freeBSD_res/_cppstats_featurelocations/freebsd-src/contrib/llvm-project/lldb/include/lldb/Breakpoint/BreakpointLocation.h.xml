<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointLocation.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTLOCATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTLOCATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/BreakpointOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Breakpoint/StoppointHitCounter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>















<decl_stmt><decl><type><name>class</name></type> <name>BreakpointLocation</name>
<range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointLocation</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<operator>~</operator><call><name>BreakpointLocation</name><argument_list>()</argument_list></call></expr>;




<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetLoadAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>Address</name> <operator>&amp;</operator><call><name>GetAddress</name><argument_list>()</argument_list></call></expr>;


<expr><name>Breakpoint</name> <operator>&amp;</operator><call><name>GetBreakpoint</name><argument_list>()</argument_list></call></expr>;

<expr><name>Target</name> <operator>&amp;</operator><call><name>GetTarget</name><argument_list>()</argument_list></call></expr>;










<expr><name>bool</name> <call><name>ShouldStop</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list></call></expr>;




<expr><name>void</name> <macro><name>SetEnabled</name><argument_list>(<argument>bool enabled</argument>)</argument_list></macro></expr>;





<expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>void</name> <macro><name>SetAutoContinue</name><argument_list>(<argument>bool auto_continue</argument>)</argument_list></macro></expr>;





<expr><name>bool</name> <macro><name>IsAutoContinue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>uint32_t</name> <macro><name>GetHitCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_hit_counter</name><operator>.</operator><name>GetValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>





<name>uint32_t</name> <macro><name>GetIgnoreCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;





<expr><name>void</name> <macro><name>SetIgnoreCount</name><argument_list>(<argument>uint32_t n</argument>)</argument_list></macro></expr>;














<expr><name>void</name> <macro><name>SetCallback</name><argument_list>(<argument>BreakpointHitCallback callback</argument>,
<argument>const lldb::BatonSP &amp;callback_baton_sp</argument>, <argument>bool is_synchronous</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>SetCallback</name><argument_list>(<argument>BreakpointHitCallback callback</argument>, <argument>void *baton</argument>,
<argument>bool is_synchronous</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>ClearCallback</name><argument_list>()</argument_list></call></expr>;





<expr><name>void</name> <call><name>SetCondition</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>condition</name></expr></argument>)</argument_list></call></expr>;






<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetConditionText</name><argument_list>(<argument>size_t *hash = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <call><name>ConditionSaysStop</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;





<expr><name>void</name> <macro><name>SetThreadID</name><argument_list>(<argument>lldb::tid_t thread_id</argument>)</argument_list></macro></expr>;

<expr><name>lldb</name><operator>::</operator><name>tid_t</name> <call><name>GetThreadID</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetThreadIndex</name><argument_list>(<argument>uint32_t index</argument>)</argument_list></macro></expr>;

<expr><name>uint32_t</name> <macro><name>GetThreadIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetThreadName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>thread_name</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetThreadName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>SetQueueName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>queue_name</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetQueueName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;








<expr><name>bool</name> <call><name>ResolveBreakpointSite</name><argument_list>()</argument_list></call></expr>;







<expr><name>bool</name> <call><name>ClearBreakpointSite</name><argument_list>()</argument_list></call></expr>;




<expr><name>bool</name> <macro><name>IsResolved</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <macro><name>GetBreakpointSite</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;













<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier></expr>;








<expr><name>BreakpointOptions</name> <operator>&amp;</operator><call><name>GetLocationOptions</name><argument_list>()</argument_list></call></expr>;










<expr><specifier>const</specifier> <name>BreakpointOptions</name> <operator>&amp;</operator>
<macro><name>GetOptionsSpecifyingKind</name><argument_list>(<argument>BreakpointOptions::OptionKind kind</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <call><name>ValidForThisThread</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;











<expr><name>bool</name> <call><name>InvokeCallback</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list></call></expr>;





<expr><name>bool</name> <call><name>IsCallbackSynchronous</name><argument_list>()</argument_list></call></expr>;







<expr><name>bool</name> <macro><name>ShouldResolveIndirectFunctions</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_should_resolve_indirect_functions</name></expr>;</return>
}</block>






<name>bool</name> <macro><name>IsIndirect</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_is_indirect</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetIsIndirect</name><argument_list>(<argument>bool is_indirect</argument>)</argument_list></macro> <block>{ <expr><name>m_is_indirect</name> <operator>=</operator> <name>is_indirect</name></expr>; }</block>






<name>bool</name> <macro><name>IsReExported</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_is_reexported</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetIsReExported</name><argument_list>(<argument>bool is_reexported</argument>)</argument_list></macro> <block>{ <expr><name>m_is_reexported</name> <operator>=</operator> <name>is_reexported</name></expr>; }</block>










<name>bool</name> <call><name>EquivalentToLocation</name><argument_list>(<argument><expr><name>BreakpointLocation</name> <operator>&amp;</operator><name>location</name></expr></argument>)</argument_list></call></expr>;


<expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <macro><name>GetID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_loc_id</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>BreakpointSite</name></expr>;
<expr><name>friend</name> <name>class</name> <name>BreakpointLocationList</name></expr>;
<expr><name>friend</name> <name>class</name> <name>Process</name></expr>;
<expr><name>friend</name> <name>class</name> <name>StopInfoBreakpoint</name></expr>;









<expr><name>bool</name> <call><name>SetBreakpointSite</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <operator>&amp;</operator><name>bp_site_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>DecrementIgnoreCount</name><argument_list>()</argument_list></call></expr>;





<expr><name>bool</name> <call><name>IgnoreCountShouldStop</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>SwapLocation</name><argument_list>(<argument>lldb::BreakpointLocationSP swap_from</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>BumpHitCount</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>UndoBumpHitCount</name><argument_list>()</argument_list></call></expr>;




















<macro><name>BreakpointLocation</name><argument_list>(<argument>lldb::break_id_t bid</argument>, <argument>Breakpoint &amp;owner</argument>,
<argument>const Address &amp;addr</argument>, <argument>lldb::tid_t tid</argument>, <argument>bool hardware</argument>,
<argument>bool check_for_resolver = true</argument>)</argument_list></macro>;


<expr><name>bool</name> <name>m_being_created</name></expr>;
<expr><name>bool</name> <name>m_should_resolve_indirect_functions</name></expr>;
<expr><name>bool</name> <name>m_is_reexported</name></expr>;
<expr><name>bool</name> <name>m_is_indirect</name></expr>;
<expr><name>Address</name> <name>m_address</name></expr>;
<expr><name>Breakpoint</name> <operator>&amp;</operator><name>m_owner</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointOptions</name></expr></argument>&gt;</argument_list></name> <name>m_options_up</name></expr>;



<expr><name>lldb</name><operator>::</operator><name>BreakpointSiteSP</name> <name>m_bp_site_sp</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>UserExpressionSP</name> <name>m_user_expression_sp</name></expr>;

<expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_condition_mutex</name></expr>;


<expr><name>size_t</name> <name>m_condition_hash</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>m_loc_id</name></expr>;
<expr><name>StoppointHitCounter</name> <name>m_hit_counter</name></expr>;


<expr><name>void</name> <macro><name>SetShouldResolveIndirectFunctions</name><argument_list>(<argument>bool do_resolve</argument>)</argument_list></macro> <block>{
<expr><name>m_should_resolve_indirect_functions</name> <operator>=</operator> <name>do_resolve</name></expr>;
}</block>

<name>void</name> <macro><name>SendBreakpointLocationChangedEvent</name><argument_list>(<argument>lldb::BreakpointEventType eventKind</argument>)</argument_list></macro></expr>;

<expr><call><name>BreakpointLocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointLocation</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>BreakpointLocation</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>BreakpointLocation</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
