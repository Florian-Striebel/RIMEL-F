<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/TypeMerger.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_TYPEMERGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_TYPEMERGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/CodeView/TypeHashing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>GloballyHashedType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>TypeIndex</name></expr>;</expr_stmt>

<struct_decl>struct <name>GHashState</name>;</struct_decl>

<decl_stmt><decl><type><name>class</name></type> <name>TypeMerger</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeMerger</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>TypeMerger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>TypeCollection</name> <operator>&amp;</operator><macro><name>getTypeTable</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>debugGHashes</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>typeTable</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>TypeCollection</name> <operator>&amp;</operator><macro><name>getIDTable</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>debugGHashes</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>idTable</name></expr>;</return>
}</block></expr></expr_stmt>



<function_decl><type><name>void</name></type> <name>mergeTypesWithGHash</name><parameter_list>()</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>TypeIndex</name></expr></argument>, <argument><expr><name>TypeIndex</name></expr></argument>&gt;</argument_list></name> <name>funcIdToType</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>MergingTypeTableBuilder</name> <name>typeTable</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>MergingTypeTableBuilder</name> <name>idTable</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>tpiCounts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>ipiCounts</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
