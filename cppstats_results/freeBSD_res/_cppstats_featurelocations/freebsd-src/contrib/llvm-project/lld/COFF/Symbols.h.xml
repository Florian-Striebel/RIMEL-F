<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/Symbols.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_SYMBOLS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_SYMBOLS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/COFF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><name>coff</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toCOFFString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>coff</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>COFFSymbolRef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>coff_import_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>coff_symbol_generic</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ArchiveFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolTable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{





<decl><name>DefinedRegularKind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>DefinedCommonKind</name></decl>,
<decl><name>DefinedLocalImportKind</name></decl>,
<decl><name>DefinedImportThunkKind</name></decl>,
<decl><name>DefinedImportDataKind</name></decl>,
<decl><name>DefinedAbsoluteKind</name></decl>,
<decl><name>DefinedSyntheticKind</name></decl>,

<decl><name>UndefinedKind</name></decl>,
<decl><name>LazyArchiveKind</name></decl>,
<decl><name>LazyObjectKind</name></decl>,
<decl><name>LazyDLLSymbolKind</name></decl>,

<decl><name>LastDefinedCOFFKind</name> <init>= <expr><name>DefinedCommonKind</name></expr></init></decl>,
<decl><name>LastDefinedKind</name> <init>= <expr><name>DefinedSyntheticKind</name></expr></init></decl>,
}</block>;</enum>

<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>symbolKind</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>StringRef</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>nameData</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>computeName</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>nameData</name></expr></argument>, <argument><expr><name>nameSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>replaceKeepingName</name><parameter_list>(<parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>other</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>InputFile</name> <modifier>*</modifier></type><name>getFile</name><parameter_list>()</parameter_list>;</function_decl>



<expr_stmt><expr><name>bool</name> <macro><name>isLive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isLazy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>symbolKind</name> <operator>==</operator> <name>LazyArchiveKind</name> <operator>||</operator> <name>symbolKind</name> <operator>==</operator> <name>LazyObjectKind</name> <operator>||</operator>
<name>symbolKind</name> <operator>==</operator> <name>LazyDLLSymbolKind</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>computeName</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name></type> <name>SymbolTable</name></decl>;</decl_stmt>
<macro><name>explicit</name></macro> <macro><name>Symbol</name><argument_list>(<argument>Kind k</argument>, <argument>StringRef n = <literal type="string">""</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>symbolKind</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>isExternal</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>isCOMDAT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>writtenToSymtab</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>pendingArchiveLoad</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>isGCRoot</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>isRuntimePseudoReloc</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>deferUndefined</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>canInline</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>nameSize</name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>nameData</name><argument_list>(<argument>n.empty() ? nullptr : n.data()</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>unsigned</name> <name>symbolKind</name> <operator>:</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>isExternal</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>unsigned</name></type> <name>isCOMDAT</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>writtenToSymtab</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>isUsedInRegularObj</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>pendingArchiveLoad</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>isGCRoot</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>isRuntimePseudoReloc</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>deferUndefined</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>canInline</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nameSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameData</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>Defined</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Defined</name><argument_list>(<argument>Kind k</argument>, <argument>StringRef n</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Symbol</name><argument_list>(<argument>k</argument>, <argument>n</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>LastDefinedKind</name></expr>;</return> }</block>



<name>uint64_t</name> <call><name>getRVA</name><argument_list>()</argument_list></call></expr>;



<expr><name>Chunk</name> <operator>*</operator><call><name>getChunk</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>DefinedCOFF</name> <range>: <expr><name>public</name> <name>Defined</name> <block>{
<expr><name>friend</name> <name>Symbol</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>DefinedCOFF</name><argument_list>(<argument>Kind k</argument>, <argument>InputFile *f</argument>, <argument>StringRef n</argument>, <argument>const coff_symbol_generic *s</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Defined</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <macro><name>sym</name><argument_list>(<argument>s</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>LastDefinedCOFFKind</name></expr>;</return>
}</block>

<name>InputFile</name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>file</name></expr>;</return> }</block>

<name>COFFSymbolRef</name> <call><name>getCOFFSymbol</name><argument_list>()</argument_list></call></expr>;

<expr><name>InputFile</name> <operator>*</operator><name>file</name></expr>;

<expr><name>protected</name><operator>:</operator>
<specifier>const</specifier> <name>coff_symbol_generic</name> <operator>*</operator><name>sym</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DefinedRegular</name> <range>: <expr><name>public</name> <name>DefinedCOFF</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefinedRegular</name><argument_list>(<argument>InputFile *f</argument>, <argument>StringRef n</argument>, <argument>bool isCOMDAT</argument>,
<argument>bool isExternal = false</argument>,
<argument>const coff_symbol_generic *s = nullptr</argument>,
<argument>SectionChunk *c = nullptr</argument>)</argument_list></macro>
<operator>:</operator> <call><name>DefinedCOFF</name><argument_list>(<argument><expr><name>DefinedRegularKind</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>, <macro><name>data</name><argument_list>(<argument>c ? &amp;c-&gt;repl : nullptr</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>isExternal</name></name> <operator>=</operator> <name>isExternal</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>isCOMDAT</name></name> <operator>=</operator> <name>isCOMDAT</name></expr>;
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedRegularKind</name></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getRVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>getRVA</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>Value</name></name></expr>;</return> }</block>
<name>SectionChunk</name> <operator>*</operator><macro><name>getChunk</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>data</name></expr>;</return> }</block>
<name>uint32_t</name> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>sym</name><operator>-&gt;</operator><name>Value</name></name></expr>;</return> }</block>

<name>SectionChunk</name> <operator>*</operator><operator>*</operator><name>data</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DefinedCommon</name> <range>: <expr><name>public</name> <name>DefinedCOFF</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefinedCommon</name><argument_list>(<argument>InputFile *f</argument>, <argument>StringRef n</argument>, <argument>uint64_t size</argument>,
<argument>const coff_symbol_generic *s = nullptr</argument>,
<argument>CommonChunk *c = nullptr</argument>)</argument_list></macro>
<operator>:</operator> <call><name>DefinedCOFF</name><argument_list>(<argument><expr><name>DefinedCommonKind</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>data</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>, <macro><name>size</name><argument_list>(<argument>size</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>isExternal</name></name> <operator>=</operator> <name>true</name></expr>;
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedCommonKind</name></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getRVA</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>data</name><operator>-&gt;</operator><name>getRVA</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>CommonChunk</name> <operator>*</operator><macro><name>getChunk</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>data</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>SymbolTable</name></expr>;
<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size</name></expr>;</return> }</block>
<name>CommonChunk</name> <operator>*</operator><name>data</name></expr>;
<expr><name>uint64_t</name> <name>size</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DefinedAbsolute</name> <range>: <expr><name>public</name> <name>Defined</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefinedAbsolute</name><argument_list>(<argument>StringRef n</argument>, <argument>COFFSymbolRef s</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Defined</name><argument_list>(<argument><expr><name>DefinedAbsoluteKind</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <macro><name>va</name><argument_list>(<argument>s.getValue()</argument>)</argument_list></macro> <expr><block>{
<expr><name>isExternal</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>isExternal</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<macro><name>DefinedAbsolute</name><argument_list>(<argument>StringRef n</argument>, <argument>uint64_t v</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Defined</name><argument_list>(<argument><expr><name>DefinedAbsoluteKind</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <macro><name>va</name><argument_list>(<argument>v</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedAbsoluteKind</name></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getRVA</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>va</name> <operator>-</operator> <name><name>config</name><operator>-&gt;</operator><name>imageBase</name></name></expr>;</return> }</block>
<name>void</name> <macro><name>setVA</name><argument_list>(<argument>uint64_t v</argument>)</argument_list></macro> <block>{ <expr><name>va</name> <operator>=</operator> <name>v</name></expr>; }</block>
<name>uint64_t</name> <macro><name>getVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>va</name></expr>;</return> }</block>




<specifier>static</specifier> <name>uint16_t</name> <name>numOutputSections</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>uint64_t</name> <name>va</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DefinedSynthetic</name> <range>: <expr><name>public</name> <name>Defined</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>DefinedSynthetic</name><argument_list>(<argument>StringRef name</argument>, <argument>Chunk *c</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Defined</name><argument_list>(<argument><expr><name>DefinedSyntheticKind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <macro><name>c</name><argument_list>(<argument>c</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedSyntheticKind</name></expr>;</return>
}</block>



<name>uint32_t</name> <macro><name>getRVA</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>c</name> <operator>?</operator> <call><name><name>c</name><operator>-&gt;</operator><name>getRVA</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="number">0</literal></expr>;</return> }</block>
<name>Chunk</name> <operator>*</operator><macro><name>getChunk</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>c</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>Chunk</name> <operator>*</operator><name>c</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>LazyArchive</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>LazyArchive</name><argument_list>(<argument>ArchiveFile *f</argument>, <argument>const Archive::Symbol s</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>LazyArchiveKind</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <macro><name>sym</name><argument_list>(<argument>s</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyArchiveKind</name></expr>;</return> }</block>

<name>MemoryBufferRef</name> <call><name>getMemberBuffer</name><argument_list>()</argument_list></call></expr>;

<expr><name>ArchiveFile</name> <operator>*</operator><name>file</name></expr>;
<expr><specifier>const</specifier> <name>Archive</name><operator>::</operator><name>Symbol</name> <name>sym</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LazyObject</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>LazyObject</name><argument_list>(<argument>LazyObjFile *f</argument>, <argument>StringRef n</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>LazyObjectKind</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <macro><name>file</name><argument_list>(<argument>f</argument>)</argument_list></macro> <expr><block>{}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyObjectKind</name></expr>;</return> }</block>
<name>LazyObjFile</name> <operator>*</operator><name>file</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>LazyDLLSymbol</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>LazyDLLSymbol</name><argument_list>(<argument>DLLFile *f</argument>, <argument>DLLFile::Symbol *s</argument>, <argument>StringRef n</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>LazyDLLSymbolKind</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <macro><name>sym</name><argument_list>(<argument>s</argument>)</argument_list></macro> <expr><block>{}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyDLLSymbolKind</name></expr>;</return>
}</block>

<name>DLLFile</name> <operator>*</operator><name>file</name></expr>;
<expr><name>DLLFile</name><operator>::</operator><name>Symbol</name> <operator>*</operator><name>sym</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Undefined</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>Undefined</name><argument_list>(<argument>StringRef n</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Symbol</name><argument_list>(<argument>UndefinedKind</argument>, <argument>n</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>UndefinedKind</name></expr>;</return> }</block>





<name>Symbol</name> <operator>*</operator><name>weakAlias</name> <operator>=</operator> <name>nullptr</name></expr>;




<expr><name>Defined</name> <operator>*</operator><call><name>getWeakAlias</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>DefinedImportData</name> <range>: <expr><name>public</name> <name>Defined</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefinedImportData</name><argument_list>(<argument>StringRef n</argument>, <argument>ImportFile *f</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Defined</name><argument_list>(<argument><expr><name>DefinedImportDataKind</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <macro><name>file</name><argument_list>(<argument>f</argument>)</argument_list></macro> <expr><block>{
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedImportDataKind</name></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getRVA</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>file</name><operator>-&gt;</operator><name>location</name><operator>-&gt;</operator><name>getRVA</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>Chunk</name> <operator>*</operator><macro><name>getChunk</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>file</name><operator>-&gt;</operator><name>location</name></name></expr>;</return> }</block>
<name>void</name> <macro><name>setLocation</name><argument_list>(<argument>Chunk *addressTable</argument>)</argument_list></macro> <block>{ <expr><name><name>file</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>addressTable</name></expr>; }</block>

<name>StringRef</name> <macro><name>getDLLName</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>file</name><operator>-&gt;</operator><name>dllName</name></name></expr>;</return> }</block>
<name>StringRef</name> <macro><name>getExternalName</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>file</name><operator>-&gt;</operator><name>externalName</name></name></expr>;</return> }</block>
<name>uint16_t</name> <macro><name>getOrdinal</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>file</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>OrdinalHint</name></name></expr>;</return> }</block>

<name>ImportFile</name> <operator>*</operator><name>file</name></expr>;






<expr><name>DefinedSynthetic</name> <operator>*</operator><name>loadThunkSym</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>DefinedImportThunk</name> <range>: <expr><name>public</name> <name>Defined</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefinedImportThunk</name><argument_list>(<argument>StringRef name</argument>, <argument>DefinedImportData *s</argument>, <argument>uint16_t machine</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedImportThunkKind</name></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getRVA</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>data</name><operator>-&gt;</operator><name>getRVA</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>Chunk</name> <operator>*</operator><macro><name>getChunk</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>data</name></expr>;</return> }</block>

<name>DefinedImportData</name> <operator>*</operator><name>wrappedSym</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>Chunk</name> <operator>*</operator><name>data</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>DefinedLocalImport</name> <range>: <expr><name>public</name> <name>Defined</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefinedLocalImport</name><argument_list>(<argument>StringRef n</argument>, <argument>Defined *s</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Defined</name><argument_list>(<argument><expr><name>DefinedLocalImportKind</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <macro><name>data</name><argument_list>(<argument>make&lt;LocalImportChunk&gt;(s)</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedLocalImportKind</name></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getRVA</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>data</name><operator>-&gt;</operator><name>getRVA</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>Chunk</name> <operator>*</operator><macro><name>getChunk</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>data</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>LocalImportChunk</name> <operator>*</operator><name>data</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>uint64_t</name> <name>Defined</name><operator>::</operator><macro><name>getRVA</name><argument_list>()</argument_list></macro> <block>{
<switch>switch <condition>(<expr><call><name>kind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DefinedAbsoluteKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAbsolute</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedSyntheticKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedSynthetic</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedImportDataKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedImportData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedImportThunkKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedImportThunk</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedLocalImportKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedLocalImport</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedCommonKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedCommon</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedRegularKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedRegular</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>LazyArchiveKind</name></expr>:</case>
<case>case <expr><name>LazyObjectKind</name></expr>:</case>
<case>case <expr><name>LazyDLLSymbolKind</name></expr>:</case>
<case>case <expr><name>UndefinedKind</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Cannot get the address for an undefined symbol."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
llvm_unreachable("unknown symbol kind"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>Chunk</name> <operator>*</operator><name>Defined</name><operator>::</operator><macro><name>getChunk</name><argument_list>()</argument_list></macro> <block>{
<switch>switch <condition>(<expr><call><name>kind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DefinedRegularKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedRegular</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getChunk</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedAbsoluteKind</name></expr>:</case>
<return>return <expr><name>nullptr</name></expr>;</return>
<case>case <expr><name>DefinedSyntheticKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedSynthetic</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getChunk</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedImportDataKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedImportData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getChunk</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedImportThunkKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedImportThunk</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getChunk</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedLocalImportKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedLocalImport</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getChunk</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>DefinedCommonKind</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedCommon</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getChunk</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>LazyArchiveKind</name></expr>:</case>
<case>case <expr><name>LazyObjectKind</name></expr>:</case>
<case>case <expr><name>LazyDLLSymbolKind</name></expr>:</case>
<case>case <expr><name>UndefinedKind</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Cannot get the chunk of an undefined symbol."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
llvm_unreachable("unknown symbol kind"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<union>union <name>SymbolUnion</name> <block>{
<macro><name>alignas</name><argument_list>(<argument>DefinedRegular</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DefinedRegular</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>DefinedCommon</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DefinedCommon</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>DefinedAbsolute</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DefinedAbsolute</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>DefinedSynthetic</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>d</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DefinedSynthetic</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>LazyArchive</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>e</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazyArchive</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>Undefined</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>f</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Undefined</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>DefinedImportData</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>g</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DefinedImportData</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>DefinedImportThunk</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>h</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DefinedImportThunk</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>DefinedLocalImport</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>i</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DefinedLocalImport</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>LazyObject</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>j</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazyObject</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>LazyDLLSymbol</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazyDLLSymbol</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgT</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>replaceSymbol</name><argument_list>(<argument><expr><name>Symbol</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>ArgT</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>arg</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>is_trivially_destructible</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Symbol types must be trivially destructible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SymbolUnion</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Symbol too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>SymbolUnion</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"SymbolUnion not aligned enough"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not a Symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>canInline</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>canInline</name></name></expr></init></decl>;</decl_stmt>
<macro><name>new</name> <argument_list>(<argument>s</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>ArgT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>canInline</name></name> <operator>=</operator> <name>canInline</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
