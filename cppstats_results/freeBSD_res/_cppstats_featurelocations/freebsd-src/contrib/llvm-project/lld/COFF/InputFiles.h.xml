<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/InputFiles.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_INPUT_FILES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_INPUT_FILES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/Magic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/COFF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/StringSaver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<struct_decl>struct <name>DILineInfo</name>;</struct_decl>
<decl_stmt><decl><type><name>namespace</name></type> <name>pdb</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DbiModuleDescriptorBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NativeSession</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>lto</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DWARFCache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <call><name>getArchiveMembers</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name> <operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>IMAGE_FILE_MACHINE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>MachineTypes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>COFFObjectFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>COFFSymbolRef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>coff_import_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>coff_section</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedImportData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedImportThunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedRegular</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionChunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Undefined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TpiSource</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>ArchiveKind</name></decl>,
<decl><name>ObjectKind</name></decl>,
<decl><name>LazyObjectKind</name></decl>,
<decl><name>PDBKind</name></decl>,
<decl><name>ImportKind</name></decl>,
<decl><name>BitcodeKind</name></decl>,
<decl><name>DLLKind</name></decl>
}</block>;</enum>
<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fileKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>InputFile</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>mb</name><operator>.</operator><name>getBufferIdentifier</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>parse</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function><type><name>virtual</name> <name>MachineTypes</name></type> <name>getMachineType</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>IMAGE_FILE_MACHINE_UNKNOWN</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>parentName</name></decl>;</decl_stmt>


<function><type><name>StringRef</name></type> <name>getDirectives</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>directives</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<macro><name>InputFile</name><argument_list>(<argument>Kind k</argument>, <argument>MemoryBufferRef m</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>mb</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>fileKind</name><argument_list>(<argument>k</argument>)</argument_list></macro> <expr><block>{}</block>

<name>StringRef</name> <name>directives</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Kind</name></type> <name>fileKind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ArchiveFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ArchiveFile</name><argument_list>(<argument>MemoryBufferRef m</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ArchiveKind</name></expr>;</return> }</block>
<name>void</name> <macro><name>parse</name><argument_list>()</argument_list></macro> <name>override</name></expr>;




<expr><name>void</name> <call><name>addMember</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Archive</name></expr></argument>&gt;</argument_list></name> <name>file</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>seen</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>LazyObjFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>LazyObjFile</name><argument_list>(<argument>MemoryBufferRef m</argument>)</argument_list></macro> <operator>:</operator> <macro><name>InputFile</name><argument_list>(<argument>LazyObjectKind</argument>, <argument>m</argument>)</argument_list></macro> <block>{}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyObjectKind</name></expr>;</return>
}</block>

<name>void</name> <call><name>fetch</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>parse</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symbols</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ObjFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ObjFile</name><argument_list>(<argument>MemoryBufferRef m</argument>)</argument_list></macro> <operator>:</operator> <macro><name>InputFile</name><argument_list>(<argument>ObjectKind</argument>, <argument>m</argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <macro><name>ObjFile</name><argument_list>(<argument>MemoryBufferRef m</argument>, <argument>std::vector&lt;Symbol *&gt; &amp;&amp;symbols</argument>)</argument_list></macro>
<operator>:</operator> <call><name>InputFile</name><argument_list>(<argument><expr><name>ObjectKind</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>, <macro><name>symbols</name><argument_list>(<argument>std::move(symbols)</argument>)</argument_list></macro> <expr><block>{}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjectKind</name></expr>;</return> }</block>
<name>void</name> <macro><name>parse</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>MachineTypes</name> <macro><name>getMachineType</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getChunks</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>chunks</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getDebugChunks</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>debugChunks</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getSXDataChunks</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>sxDataChunks</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGuardFidChunks</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>guardFidChunks</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGuardIATChunks</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>guardIATChunks</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGuardLJmpChunks</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>guardLJmpChunks</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGuardEHContChunks</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>guardEHContChunks</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getSymbols</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>symbols</name></expr>;</return> }</block>

<name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getMutableSymbols</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>symbols</name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <macro><name>getDebugSection</name><argument_list>(<argument>StringRef secName</argument>)</argument_list></macro></expr>;



<expr><name>Symbol</name> <operator>*</operator><macro><name>getSymbol</name><argument_list>(<argument>uint32_t symbolIndex</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>symbols</name><index>[<expr><name>symbolIndex</name></expr>]</index></name></expr>;</return>
}</block>


<name>COFFObjectFile</name> <operator>*</operator><macro><name>getCOFFObj</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>coffObj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>uint32_t</name> <macro><name>addRangeThunkSymbol</name><argument_list>(<argument>Symbol *thunk</argument>)</argument_list></macro> <block>{
<expr><call><name><name>symbols</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>thunk</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>symbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
}</block>

<name>void</name> <call><name>includeResourceChunks</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>isResourceObjFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>resourceChunks</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ObjFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>instances</name></expr>;




<expr><name>uint32_t</name> <name>feat00Flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>bool</name> <macro><name>hasSafeSEH</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>feat00Flags</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</return> }</block>


<name>bool</name> <macro><name>hasGuardCF</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>feat00Flags</name> <operator>&amp;</operator> <literal type="number">0x4800</literal></expr>;</return> }</block>





<name>llvm</name><operator>::</operator><name>pdb</name><operator>::</operator><name>DbiModuleDescriptorBuilder</name> <operator>*</operator><name>moduleDBI</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><specifier>const</specifier> <name>coff_section</name> <operator>*</operator><name>addrsigSec</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><specifier>const</specifier> <name>coff_section</name> <operator>*</operator><name>callgraphSec</name> <operator>=</operator> <name>nullptr</name></expr>;




<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>pchSignature</name></expr>;


<expr><name>bool</name> <name>hotPatchable</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>bool</name> <name>mergedIntoPDB</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>TpiSource</name> <operator>*</operator><name>debugTypesObj</name> <operator>=</operator> <name>nullptr</name></expr>;


<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>debugTypes</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>getVariableLocation</name><argument_list>(<argument>StringRef var</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>DILineInfo</name></expr></argument>&gt;</argument_list></name> <macro><name>getDILineInfo</name><argument_list>(<argument>uint32_t offset</argument>,
<argument>uint32_t sectionIndex</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>const</specifier> <name>coff_section</name><operator>*</operator> <macro><name>getSection</name><argument_list>(<argument>uint32_t i</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>coff_section</name> <operator>*</operator><macro><name>getSection</name><argument_list>(<argument>COFFSymbolRef sym</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getSection</name><argument_list>(<argument><expr><call><name><name>sym</name><operator>.</operator><name>getSectionNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <call><name>initializeChunks</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>initializeSymbols</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>initializeFlags</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>initializeDependencies</name><argument_list>()</argument_list></call></expr>;

<expr><name>SectionChunk</name> <operator>*</operator>
<macro><name>readSection</name><argument_list>(<argument>uint32_t sectionNumber</argument>,
<argument>const llvm::object::coff_aux_section_definition *def</argument>,
<argument>StringRef leaderName</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>readAssociativeDefinition</name><argument_list>(
<argument>COFFSymbolRef coffSym</argument>,
<argument>const llvm::object::coff_aux_section_definition *def</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>readAssociativeDefinition</name><argument_list>(
<argument>COFFSymbolRef coffSym</argument>,
<argument>const llvm::object::coff_aux_section_definition *def</argument>,
<argument>uint32_t parentSection</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>recordPrevailingSymbolForMingw</name><argument_list>(
<argument>COFFSymbolRef coffSym</argument>,
<argument>llvm::DenseMap&lt;StringRef</argument>, <argument>uint32_t&gt; &amp;prevailingSectionMap</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>maybeAssociateSEHForMingw</name><argument_list>(
<argument>COFFSymbolRef sym</argument>, <argument>const llvm::object::coff_aux_section_definition *def</argument>,
<argument>const llvm::DenseMap&lt;StringRef</argument>, <argument>uint32_t&gt; &amp;prevailingSectionMap</argument>)</argument_list></macro></expr>;







<expr><name>void</name>
<macro><name>handleComdatSelection</name><argument_list>(<argument>COFFSymbolRef sym</argument>, <argument>llvm::COFF::COMDATType &amp;selection</argument>,
<argument>bool &amp;prevailing</argument>, <argument>DefinedRegular *leader</argument>,
<argument>const llvm::object::coff_aux_section_definition *def</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>createDefined</name><argument_list>(<argument>COFFSymbolRef sym</argument>,
<argument>std::vector&lt;const llvm::object::coff_aux_section_definition *&gt;
&amp;comdatDefs</argument>,
<argument>bool &amp;prevailingComdat</argument>)</argument_list></macro></expr>;
<expr><name>Symbol</name> <operator>*</operator><macro><name>createRegular</name><argument_list>(<argument>COFFSymbolRef sym</argument>)</argument_list></macro></expr>;
<expr><name>Symbol</name> <operator>*</operator><macro><name>createUndefined</name><argument_list>(<argument>COFFSymbolRef sym</argument>)</argument_list></macro></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>COFFObjectFile</name></expr></argument>&gt;</argument_list></name> <name>coffObj</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>chunks</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>resourceChunks</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>debugChunks</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sxDataChunks</name></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>guardFidChunks</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>guardIATChunks</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>guardLJmpChunks</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>guardEHContChunks</name></expr>;





<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symbols</name></expr>;






<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sparseChunks</name></expr>;

<expr><name>DWARFCache</name> <operator>*</operator><name>dwarf</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>PDBInputFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>PDBInputFile</name><argument_list>(<argument>MemoryBufferRef m</argument>)</argument_list></macro></expr>;
<expr><operator>~</operator><call><name>PDBInputFile</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>PDBKind</name></expr>;</return> }</block>
<name>void</name> <macro><name>parse</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>void</name> <macro><name>enqueue</name><argument_list>(<argument>StringRef path</argument>, <argument>ObjFile *fromFile</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>PDBInputFile</name> <operator>*</operator><macro><name>findFromRecordPath</name><argument_list>(<argument>StringRef path</argument>, <argument>ObjFile *fromFile</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>PDBInputFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>instances</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Error</name></expr></argument>&gt;</argument_list></name> <name>loadErr</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>pdb</name><operator>::</operator><name>NativeSession</name></expr></argument>&gt;</argument_list></name> <name>session</name></expr>;


<expr><name>TpiSource</name> <operator>*</operator><name>debugTypesObj</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>ImportFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ImportFile</name><argument_list>(<argument>MemoryBufferRef m</argument>)</argument_list></macro> <operator>:</operator> <macro><name>InputFile</name><argument_list>(<argument>ImportKind</argument>, <argument>m</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ImportKind</name></expr>;</return> }</block>

<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ImportFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>instances</name></expr>;

<expr><name>Symbol</name> <operator>*</operator><name>impSym</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Symbol</name> <operator>*</operator><name>thunkSym</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>dllName</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>parse</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>StringRef</name> <name>externalName</name></expr>;
<expr><specifier>const</specifier> <name>coff_import_header</name> <operator>*</operator><name>hdr</name></expr>;
<expr><name>Chunk</name> <operator>*</operator><name>location</name> <operator>=</operator> <name>nullptr</name></expr>;









<expr><name>bool</name> <name>live</name> <operator>=</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>doGC</name></name></expr>;
<expr><name>bool</name> <name>thunkLive</name> <operator>=</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>doGC</name></name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>BitcodeFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>BitcodeFile</name><argument_list>(<argument>MemoryBufferRef mb</argument>, <argument>StringRef archiveName</argument>,
<argument>uint64_t offsetInArchive</argument>)</argument_list></macro></expr>;
<expr><name>explicit</name> <macro><name>BitcodeFile</name><argument_list>(<argument>MemoryBufferRef m</argument>, <argument>StringRef archiveName</argument>,
<argument>uint64_t offsetInArchive</argument>,
<argument>std::vector&lt;Symbol *&gt; &amp;&amp;symbols</argument>)</argument_list></macro></expr>;
<expr><operator>~</operator><call><name>BitcodeFile</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>BitcodeKind</name></expr>;</return> }</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getSymbols</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>symbols</name></expr>;</return> }</block>
<name>MachineTypes</name> <macro><name>getMachineType</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BitcodeFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>instances</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>lto</name><operator>::</operator><name>InputFile</name></expr></argument>&gt;</argument_list></name> <name>obj</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>parse</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symbols</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DLLFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>DLLFile</name><argument_list>(<argument>MemoryBufferRef m</argument>)</argument_list></macro> <operator>:</operator> <macro><name>InputFile</name><argument_list>(<argument>DLLKind</argument>, <argument>m</argument>)</argument_list></macro> <block>{}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DLLKind</name></expr>;</return> }</block>
<name>void</name> <macro><name>parse</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>MachineTypes</name> <macro><name>getMachineType</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

struct <expr><name>Symbol</name> <block>{
<expr><name>StringRef</name> <name>dllName</name></expr>;
<expr><name>StringRef</name> <name>symbolName</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>ImportNameType</name> <name>nameType</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>ImportType</name> <name>importType</name></expr>;
}</block></expr>;

<expr><name>void</name> <call><name>makeImport</name><argument_list>(<argument><expr><name>Symbol</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>COFFObjectFile</name></expr></argument>&gt;</argument_list></name> <name>coffObj</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>seen</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isBitcode</name><parameter_list>(<parameter><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>identify_magic</name><argument_list>(<argument><expr><call><name><name>mb</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>file_magic</name><operator>::</operator><name>bitcode</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>replaceThinLTOSuffix</name><argument_list>(<argument>StringRef path</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>coff</name><operator>::</operator><name>InputFile</name> <operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
