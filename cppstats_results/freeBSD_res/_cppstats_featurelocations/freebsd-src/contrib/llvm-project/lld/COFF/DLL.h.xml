<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/DLL.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_DLL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_DLL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Symbols.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>IdataContents</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>DefinedImportData</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>imports</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>imports</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>create</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DefinedImportData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>imports</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>dirs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>lookups</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>addresses</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>hints</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>dllNames</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DelayLoadContents</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>DefinedImportData</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>imports</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>imports</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Defined</name> <modifier>*</modifier></type><name>helper</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getChunks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getDataChunks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>getCodeChunks</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>thunks</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>getDirRVA</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>dirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>uint64_t</name></type> <name>getDirSize</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>Chunk</name> <modifier>*</modifier></type><name>newThunkChunk</name><parameter_list>(<parameter><decl><type><name>DefinedImportData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>tailMerge</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Chunk</name> <modifier>*</modifier></type><name>newTailMergeChunk</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Defined</name> <modifier>*</modifier></type><name>helper</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DefinedImportData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>imports</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>dirs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>moduleHandles</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>addresses</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>names</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>hintNames</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>thunks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>dllNames</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>EdataContents</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>EdataContents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>chunks</name></expr>;</expr_stmt>

<function><type><name>uint64_t</name></type> <name>getRVA</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>chunks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getRVA</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>chunks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getSize</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getRVA</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
