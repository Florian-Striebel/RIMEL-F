<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/Writer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_WRITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_WRITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/COFF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>pageSize</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>writeResult</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>PartialSection</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>PartialSection</name><argument_list>(<argument>StringRef n</argument>, <argument>uint32_t chars</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>name</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>characteristics</name><argument_list>(<argument>chars</argument>)</argument_list></macro> <expr><block>{}</block>
<name>StringRef</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>characteristics</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>chunks</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>OutputSection</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>OutputSection</name><argument_list>(<argument>llvm::StringRef n</argument>, <argument>uint32_t chars</argument>)</argument_list></macro> : <macro><name>name</name><argument_list>(<argument>n</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>Characteristics</name></name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
</block_content>}</block>
<function_decl><type><name>void</name></type> <name>addChunk</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>insertChunkAtStart</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setPermissions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>uint64_t</name></type> <name>getRVA</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>header</name><operator>.</operator><name>VirtualAddress</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>getFileOff</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>header</name><operator>.</operator><name>PointerToRawData</name></name></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>writeHeaderTo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addContributingPartialSection</name><parameter_list>(<parameter><decl><type><name>PartialSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>






<function><type><name>uint64_t</name></type> <name>getVirtualSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>header</name><operator>.</operator><name>VirtualSize</name></name></expr>;</return> </block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>getRawSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>header</name><operator>.</operator><name>SizeOfRawData</name></name></expr>;</return> </block_content>}</block></function>



<function><type><name>void</name></type> <name>setStringTableOff</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>stringTableOff</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>sectionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>coff_section</name> <name>header</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>chunks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>origChunks</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PartialSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>contribSections</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stringTableOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
