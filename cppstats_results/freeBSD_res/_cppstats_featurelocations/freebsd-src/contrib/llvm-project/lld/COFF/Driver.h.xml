<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/Driver.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_DRIVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_DRIVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SymbolTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Reproduce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/COFF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Arg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/ArgList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TarWriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LinkerDriver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>LinkerDriver</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>MachineTypes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>WindowsSubsystem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>Optional</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>COFFOptTable</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>OptTable</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>COFFOptTable</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>COFFOptTable</name></type> <name>optTable</name></decl>;</decl_stmt>






<struct>struct <name>ParsedDirectives</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>exports</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>includes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <name>args</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ArgParser</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <call><name>parse</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <macro><name>parse</name><argument_list>(<argument>StringRef s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>parse</name><argument_list>(<argument><expr><call><name>tokenize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>




<function_decl><type><name>ParsedDirectives</name></type> <name>parseDirectives</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>addLINK</name><parameter_list>(<parameter><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>tokenize</name><argument_list>(<argument>StringRef s</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LinkerDriver</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>linkerMain</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>parseDirectives</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>enqueueArchiveMember</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Archive</name><operator>::</operator><name>Child</name> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>parentName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>enqueuePDB</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Path</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>enqueuePath</name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>MemoryBufferRef</name></type> <name>takeBuffer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>enqueuePath</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wholeArchive</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lazy</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>TarWriter</name></expr></argument>&gt;</argument_list></name> <name>tar</name></expr>;</expr_stmt>

<label><name>private</name>:</label>

<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>findFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>findLib</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>doFindFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>doFindLib</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>doFindLibMinGW</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>addLibSearchPaths</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>searchPaths</name></expr>;</expr_stmt>



<function_decl><type><name>void</name></type> <name>convertResources</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>maybeExportMinGWSymbols</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>UniqueID</name></expr></argument>&gt;</argument_list></name> <name>visitedFiles</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>visitedLibs</name></expr>;</expr_stmt>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addUndefined</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>sym</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StringRef</name></type> <name>mangleMaybe</name><parameter_list>(<parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>StringRef</name></type> <name>findDefaultEntry</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>WindowsSubsystem</name></type> <name>inferSubsystem</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>addBuffer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>, <argument><expr><name>bool</name> <name>wholeArchive</name></expr></argument>,
<argument><expr><name>bool</name> <name>lazy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>addArchiveBuffer</name><parameter_list>(<parameter><decl><type><name>MemoryBufferRef</name></type> <name>mbref</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>symName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>parentName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offsetInArchive</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>enqueueTask</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>task</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>run</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>taskQueue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>filePaths</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <name>resources</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>directivesExports</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function_decl><type><name>void</name></type> <name>printHelp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>parseNumbers</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>size</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>parseGuard</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>parseVersion</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>major</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>parseSubsystem</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>WindowsSubsystem</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>major</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>gotVersion</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>parseAlternateName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseMerge</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseSection</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseAligncomm</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>parseFunctionPadMin</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>MachineTypes</name> <name>machine</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>parseManifest</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>parseManifestUAC</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>parseSwaprun</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <call><name>createManifestRes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>createSideBySideManifest</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>Export</name></type> <name>parseExport</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fixupExports</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>assignExportOrdinals</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>checkFailIfMismatch</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>MemoryBufferRef</name></type> <name>convertResToCOFF</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name></type> <name>mbs</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ObjFile</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>objs</name></decl></parameter>)</parameter_list>;</function_decl>


<enum>enum <block>{
<decl><name>OPT_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTION</name><parameter_list>(<parameter><type><name>_1</name></type></parameter>, <parameter><type><name>_2</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>_4</name></type></parameter>, <parameter><type><name>_5</name></type></parameter>, <parameter><type><name>_6</name></type></parameter>, <parameter><type><name>_7</name></type></parameter>, <parameter><type><name>_8</name></type></parameter>, <parameter><type><name>_9</name></type></parameter>, <parameter><type><name>_10</name></type></parameter>, <parameter><type><name>_11</name></type></parameter>, <parameter><type><name>_12</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Options.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OPTION</name></cpp:undef>
}</block>;</enum>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
