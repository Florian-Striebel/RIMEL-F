<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/Config.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_CONFIG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/MapVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/COFF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CachePruning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>IMAGE_FILE_MACHINE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>WindowsSubsystem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>StringRef</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedAbsolute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedRelative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringChunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionChunk</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier></type> <name>AMD64</name> <init>= <expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>IMAGE_FILE_MACHINE_AMD64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier></type> <name>ARM64</name> <init>= <expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>IMAGE_FILE_MACHINE_ARM64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier></type> <name>ARMNT</name> <init>= <expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>IMAGE_FILE_MACHINE_ARMNT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier></type> <name>I386</name> <init>= <expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>IMAGE_FILE_MACHINE_I386</name></expr></init></decl>;</decl_stmt>


<struct>struct <name>Export</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>extName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ordinal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noname</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>data</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isPrivate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>constant</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>StringRef</name></type> <name>forwardTo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringChunk</name> <modifier>*</modifier></type><name>forwardChunk</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>directives</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>symbolName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>exportName</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Export</name> <operator>&amp;</operator><name>e</name><operator>)</operator> <block>{
<return>return <expr><operator>(</operator><name>name</name> <operator>==</operator> <name><name>e</name><operator>.</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name>extName</name> <operator>==</operator> <name><name>e</name><operator>.</operator><name>extName</name></name> <operator>&amp;&amp;</operator>
<name>ordinal</name> <operator>==</operator> <name><name>e</name><operator>.</operator><name>ordinal</name></name> <operator>&amp;&amp;</operator> <name>noname</name> <operator>==</operator> <name><name>e</name><operator>.</operator><name>noname</name></name> <operator>&amp;&amp;</operator>
<name>data</name> <operator>==</operator> <name><name>e</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>isPrivate</name> <operator>==</operator> <name><name>e</name><operator>.</operator><name>isPrivate</name></name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>DebugType</name> <block>{<block_content>
<expr_stmt><expr><name>None</name> <operator>=</operator> <literal type="number">0x0</literal></expr><operator>,</operator>
<expr><name>CV</name> <operator>=</operator> <literal type="number">0x1</literal></expr><operator>,</operator>
<expr><name>PData</name> <operator>=</operator> <literal type="number">0x2</literal></expr><operator>,</operator>
<expr><name>Fixup</name> <operator>=</operator> <literal type="number">0x4</literal></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<enum>enum <name>GuardCFLevel</name> <block>{
<decl><name>Off</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>CF</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>LongJmp</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>EHCont</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>All</name> <init>= <expr><literal type="number">0x7</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ICFLevel</name> <block>{<block_content>
<expr_stmt><expr><name>None</name></expr><operator>,</operator>
<expr><name>Safe</name></expr><operator>,</operator>
<expr><name>All</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>Configuration</name> <block>{
<enum>enum <name>ManifestKind</name> <block>{ <decl><name>SideBySide</name></decl>, <decl><name>Embed</name></decl>, <decl><name>No</name></decl> }</block>;</enum>
<function><type><name>bool</name></type> <name>is64</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>machine</name> <operator>==</operator> <name>AMD64</name> <operator>||</operator> <name>machine</name> <operator>==</operator> <name>ARM64</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>MachineTypes</name> <name>machine</name> <operator>=</operator> <name>IMAGE_FILE_MACHINE_UNKNOWN</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wordsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowsSubsystem</name></type> <name>subsystem</name> <init>= <expr><name>llvm</name><operator>::</operator><name>COFF</name><operator>::</operator><name>IMAGE_SUBSYSTEM_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noEntry</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>outputFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>importName</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>demangle</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>doGC</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICFLevel</name></type> <name>doICF</name> <init>= <expr><name>ICFLevel</name><operator>::</operator><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tailMerge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>relocatable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>forceMultiple</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>forceMultipleRes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>forceUnresolved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>debug</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>debugDwarf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>debugGHashes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>debugSymtab</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>driver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>driverUponly</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>driverWdm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>showTiming</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>showSummary</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>debugTypes</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DebugType</name><operator>::</operator><name>None</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>natvisFiles</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>namedStreams</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>pdbAltPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>pdbPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>pdbSourcePath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>argv</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>gcroot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>noDefaultLibs</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noDefaultLibAll</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>dll</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>implib</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Export</name></expr></argument>&gt;</argument_list></name> <name>exports</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hadExplicitExports</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>delayLoads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>dllOrder</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>delayLoadHelper</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>saveTemps</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>guardCF</name> <init>= <expr><name>GuardCFLevel</name><operator>::</operator><name>Off</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>safeSEH</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>sehTable</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>sehCount</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noSEH</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ltoo</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>thinLTOJobs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ltoPartitions</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>ltoCache</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CachePruningPolicy</name> <name>ltoCachePolicy</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ltoNewPassManager</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ltoDebugPassManager</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>merge</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>section</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ManifestKind</name></type> <name>manifest</name> <init>= <expr><name>No</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>manifestID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>manifestDependency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>manifestUAC</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>manifestInput</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>manifestLevel</name> <init>= <expr><literal type="string">"'asInvoker'"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>manifestUIAccess</name> <init>= <expr><literal type="string">"'false'"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>manifestFile</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>alignComm</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>InputFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>mustMatch</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>alternateNames</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>order</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>lldmapFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>mapFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>thinLTOIndexOnlyArg</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>thinLTOPrefixReplace</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>thinLTOObjectSuffixReplace</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoObjPath</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ltoCSProfileGenerate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoCSProfileFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>SectionChunk</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>SectionChunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name>
<name>callGraphProfile</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>callGraphProfileSort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>printSymbolOrder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>align</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>imageBase</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fileAlign</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>stackReserve</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>stackCommit</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>heapReserve</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>heapCommit</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>majorImageVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>minorImageVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>majorOSVersion</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>minorOSVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>majorSubsystemVersion</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>minorSubsystemVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>functionPadMin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dynamicBase</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>allowBind</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cetCompat</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nxCompat</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>allowIsolation</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>terminalServerAware</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>largeAddressAware</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>highEntropyVA</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>appContainer</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mingw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnMissingOrderSymbol</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnLocallyDefinedImported</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnDebugInfoUnusable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnLongSectionNames</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnStdcallFixup</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>incremental</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>integrityCheck</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>killAt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>repro</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>swaprunCD</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>swaprunNet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>thinLTOEmitImportsFiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>thinLTOIndexOnly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>autoImport</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pseudoRelocs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stdcallFixup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Configuration</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
