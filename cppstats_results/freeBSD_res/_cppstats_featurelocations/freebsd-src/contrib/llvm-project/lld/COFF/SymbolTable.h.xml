<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/SymbolTable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_SYMBOL_TABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_SYMBOL_TABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputFiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LTO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<struct_decl>struct <name>LTOCodeGenerator</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CommonChunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedAbsolute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedRegular</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedRelative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LazyArchive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionChunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>class</name></type> <name>SymbolTable</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>void</name></type> <name>addFile</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>reportUnresolvable</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>resolveRemainingUndefines</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>loadMinGWSymbols</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>handleMinGWAutomaticImport</name><parameter_list>(<parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getChunks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>find</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>findUnderscore</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>findMangle</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>addCombinedLTOObjects</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addUndefined</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addSynthetic</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addAbsolute</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>va</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addUndefined</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeakAlias</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>addLazyArchive</name><argument_list>(<argument><expr><name>ArchiveFile</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>addLazyObject</name><parameter_list>(<parameter><decl><type><name>LazyObjFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>addLazyDLLSymbol</name><argument_list>(<argument><expr><name>DLLFile</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr><name>DLLFile</name><operator>::</operator><name>Symbol</name> <operator>*</operator><name>sym</name></expr></argument>, <argument><expr><name>StringRef</name> <name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addAbsolute</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>COFFSymbolRef</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addRegular</name><argument_list>(<argument><expr><name>InputFile</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr><name>StringRef</name> <name>n</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>coff_symbol_generic</name> <operator>*</operator><name>s</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>SectionChunk</name> <operator>*</operator><name>c</name> <operator>=</operator> <name>nullptr</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>sectionOffset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>DefinedRegular</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<macro><name>addComdat</name><argument_list>(<argument>InputFile *f</argument>, <argument>StringRef n</argument>,
<argument>const llvm::object::coff_symbol_generic *s = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addCommon</name><argument_list>(<argument><expr><name>InputFile</name> <operator>*</operator><name>f</name></expr></argument>, <argument><expr><name>StringRef</name> <name>n</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>size</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>coff_symbol_generic</name> <operator>*</operator><name>s</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>CommonChunk</name> <operator>*</operator><name>c</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addImportData</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ImportFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addImportThunk</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>DefinedImportData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>machine</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addLibcall</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>reportDuplicate</name><parameter_list>(<parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>newFile</name></decl></parameter>,
<parameter><decl><type><name>SectionChunk</name> <modifier>*</modifier></type><name>newSc</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>newSectionOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Chunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>localImportChunks</name></expr>;</expr_stmt>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>forEachSymbol</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>pair</name> <operator>:</operator> <name>symMap</name></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<label><name>private</name>:</label>


<function_decl><type><name>Defined</name> <modifier>*</modifier></type><name>impSymbol</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>insert</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>insert</name><argument_list>(<argument>StringRef name</argument>, <argument>InputFile *f</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getSymsWithPrefix</name><argument_list>(<argument>StringRef prefix</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashStringRef</name></expr></argument>, <argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symMap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BitcodeCompiler</name></expr></argument>&gt;</argument_list></name> <name>lto</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SymbolTable</name> <modifier>*</modifier></type><name>symtab</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getSymbolLocations</name><argument_list>(<argument>ObjFile *file</argument>, <argument>uint32_t symIndex</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>StringRef</name></type> <name>ltrim1</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
