<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/COFF/DebugTypes.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COFF_DEBUGTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COFF_DEBUGTYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/CodeView/TypeIndexDiscovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/CodeView/TypeRecord.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>codeview</name> <block>{<block_content>
<struct_decl>struct <name>GloballyHashedType</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>pdb</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>NativeSession</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TpiStream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>coff</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>GloballyHashedType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>TypeIndex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ObjFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PDBInputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeMerger</name></decl>;</decl_stmt>
<struct_decl>struct <name>GHashState</name>;</struct_decl>

<decl_stmt><decl><type><name>class</name></type> <name>TpiSource</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>TpiKind</name> : <type><name>uint8_t</name></type> <block>{ <decl><name>Regular</name></decl>, <decl><name>PCH</name></decl>, <decl><name>UsingPCH</name></decl>, <decl><name>PDB</name></decl>, <decl><name>PDBIpi</name></decl>, <decl><name>UsingPDB</name></decl> }</block>;</enum>

<macro><name>TpiSource</name><argument_list>(<argument>TpiKind k</argument>, <argument>ObjFile *f</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TpiSource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>












<function_decl><type><name>virtual</name> <name>Error</name></type> <name>mergeDebugT</name><parameter_list>(<parameter><decl><type><name>TypeMerger</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>loadGHashes</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>remapTpiWithGHashes</name><parameter_list>(<parameter><decl><type><name>GHashState</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>remapTypeIndex</name><argument_list>(<argument><expr><name>TypeIndex</name> <operator>&amp;</operator><name>ti</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>TiRefKind</name> <name>refKind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>
<function_decl><type><name>void</name></type> <name>remapRecord</name><parameter_list>(<parameter><decl><type><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>rec</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>TiReference</name></expr></argument>&gt;</argument_list></name></type> <name>typeRefs</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>mergeTypeRecord</name><argument_list>(<argument><expr><name>TypeIndex</name> <name>curIndex</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>CVType</name> <name>ty</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>mergeUniqueTypeRecords</name><parameter_list>(
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>debugTypes</name></decl></parameter>,
<parameter><decl><type><name>TypeIndex</name></type> <name>beginIndex</name> <init>= <expr><call><name>TypeIndex</name><argument_list>(<argument><expr><name>TypeIndex</name><operator>::</operator><name>FirstNonSimpleIndex</name></expr></argument>)</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>fillMapFromGHashes</name><parameter_list>(<parameter><decl><type><name>GHashState</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>void</name></type> <name>assignGHashesFromVector</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>GloballyHashedType</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>hashVec</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>fillIsItemIndexFromDebugT</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<function_decl><type><name>bool</name></type> <name>remapTypesInSymbolRecord</name><parameter_list>(<parameter><decl><type><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>rec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>remapTypesInTypeRecord</name><parameter_list>(<parameter><decl><type><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>rec</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isDependency</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>




<function><type><name>bool</name></type> <name>shouldOmitFromPdb</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ghashIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ghashIdx</name> <operator>==</operator> <name>endPrecompGHashIdx</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TpiSource</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>instances</name></expr>;</expr_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TpiSource</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>dependencySources</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TpiSource</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>objectSources</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sortDependencies</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>countTypeServerPDBs</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>countPrecompObjs</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clearGHashes</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>TpiKind</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ownedGHashes</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tpiSrcIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>endPrecompGHashIdx</name> <init>= <expr><operator>~</operator><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>ObjFile</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Error</name></type> <name>typeMergingError</name> <init>= <expr><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TypeIndex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>indexMapStorage</name></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TypeIndex</name></expr></argument>&gt;</argument_list></name> <name>tpiMap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TypeIndex</name></expr></argument>&gt;</argument_list></name> <name>ipiMap</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>GloballyHashedType</name></expr></argument>&gt;</argument_list></name> <name>ghashes</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>TypeIndex</name></expr></argument>, <argument><expr><name>TypeIndex</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>funcIdToType</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitVector</name> <name>isItemIndex</name></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>uniqueTypes</name></expr>;</expr_stmt>

<struct>struct <name>MergedInfo</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>recs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name> <name>recSizes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>recHashes</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>MergedInfo</name></type> <name>mergedTpi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MergedInfo</name></type> <name>mergedIpi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nbTypeRecords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nbTypeRecordsBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>TpiSource</name> <modifier>*</modifier></type><name>makeTpiSource</name><parameter_list>(<parameter><decl><type><name>ObjFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>TpiSource</name> <modifier>*</modifier></type><name>makeTypeServerSource</name><parameter_list>(<parameter><decl><type><name>PDBInputFile</name> <modifier>*</modifier></type><name>pdbInputFile</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>TpiSource</name> <modifier>*</modifier></type><name>makeUseTypeServerSource</name><argument_list>(<argument><expr><name>ObjFile</name> <operator>*</operator><name>file</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>TypeServer2Record</name> <name>ts</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>TpiSource</name> <modifier>*</modifier></type><name>makePrecompSource</name><parameter_list>(<parameter><decl><type><name>ObjFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>TpiSource</name> <modifier>*</modifier></type><name>makeUsePrecompSource</name><argument_list>(<argument><expr><name>ObjFile</name> <operator>*</operator><name>file</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>codeview</name><operator>::</operator><name>PrecompRecord</name> <name>ts</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
