<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/UnwindInfoSection.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_UNWIND_INFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_UNWIND_INFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ConcatOutputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SyntheticSections.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach-o/compact_unwind_encoding.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Ptr</name><operator>&gt;</operator> struct <name>CompactUnwindEntry</name> <block>{
<expr><name>Ptr</name> <name>functionAddress</name></expr>;
<expr><name>uint32_t</name> <name>functionLength</name></expr>;
<expr><name>compact_unwind_encoding_t</name> <name>encoding</name></expr>;
<expr><name>Ptr</name> <name>personality</name></expr>;
<expr><name>Ptr</name> <name>lsda</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>UnwindInfoSection</name> <range>: <expr><name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>!</operator><call><name><name>compactUnwindSection</name><operator>-&gt;</operator><name>inputs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>allEntriesAreOmitted</name></expr>;</return>
}</block>
<name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>unwindInfoSize</name></expr>;</return> }</block>
<name>virtual</name> <name>void</name> <call><name>addInput</name><argument_list>(<argument><expr><name>ConcatInputSection</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getInputs</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name><name>compactUnwindSection</name><operator>-&gt;</operator><name>inputs</name></name></expr>;</return>
}</block>
<name>void</name> <call><name>prepareRelocations</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>UnwindInfoSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>prepareRelocations</name><argument_list>(<argument><expr><name>ConcatInputSection</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>ConcatOutputSection</name> <operator>*</operator><name>compactUnwindSection</name></expr>;
<expr><name>uint64_t</name> <name>unwindInfoSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>bool</name> <name>allEntriesAreOmitted</name> <operator>=</operator> <name>true</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>UnwindInfoSection</name> <modifier>*</modifier></type><name>makeUnwindInfoSection</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
