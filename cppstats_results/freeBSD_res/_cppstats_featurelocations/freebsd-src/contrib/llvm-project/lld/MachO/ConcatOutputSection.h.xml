<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/ConcatOutputSection.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_MERGED_OUTPUT_SECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_MERGED_OUTPUT_SECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OutputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/MapVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name> <name>ConcatOutputSection</name></type> <name>final</name> <range>: <expr><name>public</name> <name>OutputSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ConcatOutputSection</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>OutputSection</name><argument_list>(<argument>ConcatKind</argument>, <argument>name</argument>)</argument_list></macro> <block>{}</block>

<specifier>const</specifier> <name>ConcatInputSection</name> <operator>*</operator><macro><name>firstSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>inputs</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>ConcatInputSection</name> <operator>*</operator><macro><name>lastSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>inputs</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>!</operator><call><name><name>inputs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>size</name></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>getFileSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>fileSize</name></expr>;</return> }</block>

<name>void</name> <call><name>addInput</name><argument_list>(<argument><expr><name>ConcatInputSection</name> <operator>*</operator><name>input</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>needsThunks</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>uint64_t</name> <macro><name>estimateStubsInRangeVA</name><argument_list>(<argument>size_t callIdx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>inputs</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>thunks</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const OutputSection *sec</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>sec</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConcatKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>ConcatOutputSection</name> <operator>*</operator><call><name>getOrCreateForInput</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InputSection</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <call><name>finalizeFlags</name><argument_list>(<argument><expr><name>InputSection</name> <operator>*</operator><name>input</name></expr></argument>)</argument_list></call></expr>;

<expr><name>size_t</name> <name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint64_t</name> <name>fileSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>











<struct>struct <name>ThunkInfo</name> <block>{

<decl_stmt><decl><type><name>Defined</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConcatInputSection</name> <modifier>*</modifier></type><name>isec</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>callSiteCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>callSitesUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>thunkCallCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sequence</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>NamePair</name></type> <name>maybeRenameSection</name><parameter_list>(<parameter><decl><type><name>NamePair</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>



<extern>extern llvm::MapVector&lt;NamePair<operator>,</operator> ConcatOutputSection *&gt; concatOutputSections;</extern>

<extern>extern llvm::DenseMap&lt;Symbol *<operator>,</operator> ThunkInfo&gt; thunkMap;</extern>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
