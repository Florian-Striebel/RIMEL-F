<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/Arch/ARM64Common.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_ARCH_ARM64COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_ARCH_ARM64COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputFiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Symbols.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SyntheticSections.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Target.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ARM64Common</name></name></type> <range>: <expr><name>TargetInfo</name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LP</name></expr></argument>&gt;</argument_list></name> <macro><name>ARM64Common</name><argument_list>(<argument>LP lp</argument>)</argument_list></macro> <operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>lp</argument>)</argument_list></macro> <block>{}</block>

<name>int64_t</name> <macro><name>getEmbeddedAddend</name><argument_list>(<argument>MemoryBufferRef</argument>, <argument>uint64_t offset</argument>,
<argument>const llvm::MachO::relocation_info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>relocateOne</name><argument_list>(<argument>uint8_t *loc</argument>, <argument>const Reloc &amp;</argument>, <argument>uint64_t va</argument>,
<argument>uint64_t pc</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>relaxGotLoad</name><argument_list>(<argument>uint8_t *loc</argument>, <argument>uint8_t type</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getPageSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return> }</block>
}</expr>;

<expr><specifier>inline</specifier> <name>uint64_t</name> <macro><name>bitField</name><argument_list>(<argument>uint64_t value</argument>, <argument>int right</argument>, <argument>int width</argument>, <argument>int left</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <name>right</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>width</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>left</name></expr>;</return>
}</block>






<specifier>inline</specifier> <name>uint64_t</name> <macro><name>encodeBranch26</name><argument_list>(<argument>const Reloc &amp;r</argument>, <argument>uint64_t base</argument>, <argument>uint64_t va</argument>)</argument_list></macro> <block>{
<expr><call><name>checkInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;


<return>return <expr><operator>(</operator><name>base</name> <operator>|</operator> <call><name>bitField</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block>

<specifier>inline</specifier> <name>uint64_t</name> <macro><name>encodeBranch26</name><argument_list>(<argument>SymbolDiagnostic d</argument>, <argument>uint64_t base</argument>, <argument>uint64_t va</argument>)</argument_list></macro> <block>{
<expr><call><name>checkInt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>base</name> <operator>|</operator> <call><name>bitField</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block>






<specifier>inline</specifier> <name>uint64_t</name> <macro><name>encodePage21</name><argument_list>(<argument>const Reloc &amp;r</argument>, <argument>uint64_t base</argument>, <argument>uint64_t va</argument>)</argument_list></macro> <block>{
<expr><call><name>checkInt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>base</name> <operator>|</operator> <call><name>bitField</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>bitField</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block>

<specifier>inline</specifier> <name>uint64_t</name> <macro><name>encodePage21</name><argument_list>(<argument>SymbolDiagnostic d</argument>, <argument>uint64_t base</argument>, <argument>uint64_t va</argument>)</argument_list></macro> <block>{
<expr><call><name>checkInt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>base</name> <operator>|</operator> <call><name>bitField</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>bitField</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block>






<specifier>inline</specifier> <name>uint64_t</name> <macro><name>encodePageOff12</name><argument_list>(<argument>uint32_t base</argument>, <argument>uint64_t va</argument>)</argument_list></macro> <block>{
<expr><name>int</name> <name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>base</name> <operator>&amp;</operator> <literal type="number">0x3b00</literal><literal type="char">'0000) == 0x3900'</literal><literal type="number">0000</literal><operator>)</operator></expr></condition> <block>{<block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>base</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<decl_stmt><expr><name>scale</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>base</name> <operator>&amp;</operator> <literal type="number">0x0480</literal><literal type="char">'0000) == 0x0480'</literal><literal type="number">0000</literal><operator>)</operator>
<name>scale</name> <operator>=</operator> <literal type="number">4</literal></expr>;</decl_stmt>
}</condition>



<return>return <expr><operator>(</operator><name>base</name> <operator>|</operator> <call><name>bitField</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>-</operator> <name>scale</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></if></if_stmt>
<expr_stmt/>}</block_content>

<namespace><specifier>inline</specifier> uint64_t <name>pageBits</name>(<name>uint64_t</name> <name>address</name></namespace></block></if></if_stmt>) <block>{
<expr><specifier>const</specifier> <name>uint64_t</name> <name>pageMask</name> <operator>=</operator> <operator>~</operator><literal type="number">0xfffull</literal></expr>;
<return>return <expr><name>address</name> <operator>&amp;</operator> <name>pageMask</name></expr>;</return>
}</block></block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LP</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name> <macro><name>writeStub</name><argument_list>(<argument>uint8_t *buf8</argument>, <argument>const uint32_t stubCode[<literal type="number">3</literal>]</argument>,
<argument>const macho::Symbol &amp;sym</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <operator>*</operator><name>buf32</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf8</name></expr></argument>)</argument_list></call></expr>;
<expr><name>constexpr</name> <name>size_t</name> <name>stubCodeSize</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;
<expr><name>uint64_t</name> <name>pcPageBits</name> <operator>=</operator>
<call><name>pageBits</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>stubs</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>sym</name><operator>.</operator><name>stubsIndex</name></name> <operator>*</operator> <name>stubCodeSize</name></expr></argument>)</argument_list></call></expr>;
<expr><name>uint64_t</name> <name>lazyPointerVA</name> <operator>=</operator>
<name><name>in</name><operator>.</operator><name>lazyPointers</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>sym</name><operator>.</operator><name>stubsIndex</name></name> <operator>*</operator> <name>LP</name><operator>::</operator><name>wordSize</name></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <macro><name>encodePage21</name><argument_list>(<argument>{&amp;sym</argument>, <argument><literal type="string">"stub"</literal>}</argument>, <argument>stubCode[<literal type="number">0</literal>]</argument>,
<argument>pageBits(lazyPointerVA) - pcPageBits</argument>)</argument_list></macro></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>encodePageOff12</name><argument_list>(<argument><expr><name><name>stubCode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lazyPointerVA</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>stubCode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LP</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name> <macro><name>writeStubHelperHeader</name><argument_list>(<argument>uint8_t *buf8</argument>,
<argument>const uint32_t stubHelperHeaderCode[<literal type="number">6</literal>]</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <operator>*</operator><name>buf32</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf8</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>pcPageBits</name> <operator>=</operator> <index>[]</index><operator>(</operator><name>int</name> <name>i</name><operator>)</operator> <block>{
<return>return <expr><call><name>pageBits</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>stubHelper</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;
<expr><name>uint64_t</name> <name>loaderVA</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>imageLoaderCache</name><operator>-&gt;</operator><name>getVA</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>SymbolDiagnostic</name> <name>d</name> <operator>=</operator> <block>{<expr><name>nullptr</name></expr>, <expr><literal type="string">"stub header helper"</literal></expr>}</block></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>encodePage21</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>stubHelperHeaderCode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>pageBits</name><argument_list>(<argument><expr><name>loaderVA</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>pcPageBits</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>encodePageOff12</name><argument_list>(<argument><expr><name><name>stubHelperHeaderCode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>loaderVA</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>stubHelperHeaderCode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;
<expr><name>uint64_t</name> <name>binderVA</name> <operator>=</operator>
<name><name>in</name><operator>.</operator><name>got</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>in</name><operator>.</operator><name>stubHelper</name><operator>-&gt;</operator><name>stubBinder</name><operator>-&gt;</operator><name>gotIndex</name></name> <operator>*</operator> <name>LP</name><operator>::</operator><name>wordSize</name></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>encodePage21</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>stubHelperHeaderCode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>pageBits</name><argument_list>(<argument><expr><name>binderVA</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>pcPageBits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>encodePageOff12</name><argument_list>(<argument><expr><name><name>stubHelperHeaderCode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>binderVA</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>stubHelperHeaderCode</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;
}</block>

<specifier>inline</specifier> <name>void</name> <macro><name>writeStubHelperEntry</name><argument_list>(<argument>uint8_t *buf8</argument>,
<argument>const uint32_t stubHelperEntryCode[<literal type="number">3</literal>]</argument>,
<argument>const DylibSymbol &amp;sym</argument>, <argument>uint64_t entryVA</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <operator>*</operator><name>buf32</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf8</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>pcVA</name> <operator>=</operator> <index>[<expr><name>entryVA</name></expr>]</index><operator>(</operator><name>int</name> <name>i</name><operator>)</operator> <block>{ <return>return <expr><name>entryVA</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</return> }</block></expr>;
<expr><name>uint64_t</name> <name>stubHelperHeaderVA</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>stubHelper</name><operator>-&gt;</operator><name>addr</name></name></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>stubHelperEntryCode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <macro><name>encodeBranch26</name><argument_list>(<argument>{&amp;sym</argument>, <argument><literal type="string">"stub helper"</literal>}</argument>, <argument>stubHelperEntryCode[<literal type="number">1</literal>]</argument>,
<argument>stubHelperHeaderVA - pcVA(<literal type="number">1</literal>)</argument>)</argument_list></macro></expr>;
<expr><name><name>buf32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>lazyBindOffset</name></name></expr>;
}</block>

}
}</expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
