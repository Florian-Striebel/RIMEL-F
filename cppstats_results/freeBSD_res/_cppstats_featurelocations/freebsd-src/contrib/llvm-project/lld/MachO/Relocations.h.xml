<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/Relocations.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_RELOCATIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_RELOCATIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitmaskEnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Endian.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>
<expr_stmt><expr><call><name>LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RelocAttrBits</name> <block>{<block_content>
<expr_stmt><expr><name>_0</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>PCREL</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>ABSOLUTE</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>BYTE4</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr><operator>,</operator>
<expr><name>BYTE8</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr><operator>,</operator>
<expr><name>EXTERN</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr><operator>,</operator>
<expr><name>LOCAL</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr><operator>,</operator>
<expr><name>ADDEND</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr><operator>,</operator>
<expr><name>SUBTRAHEND</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr><operator>,</operator>
<expr><name>BRANCH</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr><operator>,</operator>
<expr><name>GOT</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr><operator>,</operator>
<expr><name>TLV</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr><operator>,</operator>
<expr><name>LOAD</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr><operator>,</operator>
<expr><name>POINTER</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr><operator>,</operator>
<expr><name>UNSIGNED</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr><operator>,</operator>
<expr><call><name>LLVM_MARK_AS_BITMASK_ENUM</name><argument_list>( <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>RelocAttrs</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RelocAttrBits</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasAttr</name><argument_list>(<argument><expr><name>RelocAttrBits</name> <name>b</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><operator>(</operator><name>bits</name> <operator>&amp;</operator> <name>b</name><operator>)</operator> <operator>==</operator> <name>b</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
}</block>;</struct>

<struct>struct <name>Reloc</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>GENERIC_RELOC_INVALID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pcrel</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>addend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>, <argument><expr><name>InputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>referent</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>bool</name></type> <name>validateSymbolRelocation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>InputSection</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Reloc</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>void</name></type> <name>reportRangeError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Reloc</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>bits</name></expr></argument>,
<argument><expr><name>int64_t</name> <name>min</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>max</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<struct>struct <name>SymbolDiagnostic</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>*</modifier></type><name>symbol</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>reason</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>void</name></type> <name>reportRangeError</name><argument_list>(<argument><expr><name>SymbolDiagnostic</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>bits</name></expr></argument>,
<argument><expr><name>int64_t</name> <name>min</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>max</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Diagnostic</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>checkInt</name><parameter_list>(<parameter><decl><type><name>Diagnostic</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>llvm</name><operator>::</operator><call><name>SignExtend64</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportRangeError</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>Twine</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>minIntN</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><call><name>maxIntN</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Diagnostic</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>checkUInt</name><parameter_list>(<parameter><decl><type><name>Diagnostic</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportRangeError</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>Twine</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>maxUIntN</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>writeAddress</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>write32le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>write64le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"invalid r_length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>RelocAttrs</name></type> <name>invalidRelocAttrs</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
