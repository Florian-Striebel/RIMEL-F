<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/InputFiles.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_INPUT_FILES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_INPUT_FILES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MachOStructs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Target.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/DWARF/DWARFUnit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/TextAPI/TextAPIReader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>lto</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>MachO</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>InterfaceFile</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TarWriter</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<struct_decl>struct <name>PlatformInfo</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>ConcatInputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<struct_decl>struct <name>Reloc</name>;</struct_decl>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RefState</name> <range>: <expr><name>uint8_t</name></expr></range></decl>;</decl_stmt>



<extern>extern std::unique_ptr&lt;llvm::TarWriter&gt; tar;</extern>




<struct>struct <name>SubsectionEntry</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>isec</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>using</name></type> <name>SubsectionMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SubsectionEntry</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>ObjKind</name></decl>,
<decl><name>OpaqueKind</name></decl>,
<decl><name>DylibKind</name></decl>,
<decl><name>ArchiveKind</name></decl>,
<decl><name>BitcodeKind</name></decl>,
}</block>;</enum>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>InputFile</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fileKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>name</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symbols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SubsectionMap</name></expr></argument>&gt;</argument_list></name> <name>subsections</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>archiveName</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<macro><name>InputFile</name><argument_list>(<argument>Kind kind</argument>, <argument>MemoryBufferRef mb</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>mb</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>id</name><argument_list>(<argument><expr><name>idCount</name><operator>++</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>fileKind</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>name</name><argument_list>(<argument>mb.getBufferIdentifier()</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>InputFile</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>InterfaceFile</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Kind</name></type> <name>fileKind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>idCount</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name> <name>ObjFile</name></type> <name>final</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ObjFile</name><argument_list>(<argument>MemoryBufferRef mb</argument>, <argument>uint32_t modTime</argument>, <argument>StringRef archiveName</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjKind</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name>DWARFUnit</name> <operator>*</operator><name>compileUnit</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><specifier>const</specifier> <name>uint32_t</name> <name>modTime</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>debugSections</name></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>data_in_code_entry</name></expr></argument>&gt;</argument_list></name> <name>dataInCodeEntries</name></expr>;

<expr><name>private</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LP</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>parse</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Section</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>parseSections</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Section</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LP</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>parseSymbols</name><argument_list>(<argument>ArrayRef&lt;typename LP::section&gt; sectionHeaders</argument>,
<argument>ArrayRef&lt;typename LP::nlist&gt; nList</argument>, <argument>const char *strtab</argument>,
<argument>bool subsectionsViaSymbols</argument>)</argument_list></macro></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>NList</name></expr></argument>&gt;</argument_list></name>
<name>Symbol</name> <operator>*</operator><macro><name>parseNonSectionSymbol</name><argument_list>(<argument>const NList &amp;sym</argument>, <argument>StringRef name</argument>)</argument_list></macro></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Section</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <call><name>parseRelocations</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Section</name></expr></argument>&gt;</argument_list></name> <name>sectionHeaders</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Section</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><name>SubsectionMap</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>parseDebugInfo</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>parseDataInCode</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>OpaqueFile</name></type> <name>final</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>OpaqueFile</name><argument_list>(<argument>MemoryBufferRef mb</argument>, <argument>StringRef segName</argument>, <argument>StringRef sectName</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OpaqueKind</name></expr>;</return> }</block>
}</expr>;


<expr><name>class</name> <name>DylibFile</name> <name>final</name> <operator>:</operator> <name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>







<name>explicit</name> <macro><name>DylibFile</name><argument_list>(<argument>MemoryBufferRef mb</argument>, <argument>DylibFile *umbrella</argument>,
<argument>bool isBundleLoader = false</argument>)</argument_list></macro></expr>;
<expr><name>explicit</name> <macro><name>DylibFile</name><argument_list>(<argument>const llvm::MachO::InterfaceFile &amp;interface</argument>,
<argument>DylibFile *umbrella = nullptr</argument>,
<argument>bool isBundleLoader = false</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>parseLoadCommands</name><argument_list>(<argument>MemoryBufferRef mb</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <call><name>parseReexports</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>InterfaceFile</name> <operator>&amp;</operator><name>interface</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DylibKind</name></expr>;</return> }</block>

<name>StringRef</name> <name>installName</name></expr>;
<expr><name>DylibFile</name> <operator>*</operator><name>exportingFile</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>DylibFile</name> <operator>*</operator><name>umbrella</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>rpaths</name></expr>;
<expr><name>uint32_t</name> <name>compatibilityVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint32_t</name> <name>currentVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>int64_t</name> <name>ordinal</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>RefState</name> <name>refState</name></expr>;
<expr><name>bool</name> <name>reexport</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>forceNeeded</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>forceWeakImport</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>deadStrippable</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>explicitlyLinked</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>unsigned</name> <name>numReferencedSymbols</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>bool</name> <macro><name>isReferenced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>numReferencedSymbols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> }</block>





<name>bool</name> <name>isBundleLoader</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>bool</name> <macro><name>handleLDSymbol</name><argument_list>(<argument>StringRef originalName</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>handleLDPreviousSymbol</name><argument_list>(<argument>StringRef name</argument>, <argument>StringRef originalName</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>handleLDInstallNameSymbol</name><argument_list>(<argument>StringRef name</argument>, <argument>StringRef originalName</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>checkAppExtensionSafety</name><argument_list>(<argument>bool dylibIsAppExtensionSafe</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;


<expr><name>class</name> <name>ArchiveFile</name> <name>final</name> <operator>:</operator> <name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>ArchiveFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ArchiveKind</name></expr>;</return> }</block>
<name>void</name> <call><name>fetch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name></expr></argument>&gt;</argument_list></name> <name>file</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>seen</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>BitcodeFile</name> <name>final</name> <operator>:</operator> <name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>BitcodeFile</name><argument_list>(<argument>MemoryBufferRef mb</argument>, <argument>StringRef archiveName</argument>,
<argument>uint64_t offsetInArchive</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>BitcodeKind</name></expr>;</return> }</block>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>lto</name><operator>::</operator><name>InputFile</name></expr></argument>&gt;</argument_list></name> <name>obj</name></expr>;
}</block></expr>;

<expr><specifier>extern</specifier> <name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>InputFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>inputFiles</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <macro><name>readFile</name><argument_list>(<argument>StringRef path</argument>)</argument_list></macro></expr>;

<expr><name>namespace</name> <name>detail</name> <block>{

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>CommandType</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Types</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommandType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>findCommands</name><argument_list>(<argument>const void *anyHdr</argument>, <argument>size_t maxCommands</argument>, <argument>Types... types</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommandType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>cmds</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>initializer_list</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>typesList</name><block>{<expr><name>types</name><operator>...</operator></expr>}</block></expr>;
<expr><specifier>const</specifier> <name>auto</name> <operator>*</operator><name>hdr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>mach_header</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>anyHdr</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>p</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>target</name><operator>-&gt;</operator><name>headerSize</name></name></expr>;
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>ncmds</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>cmd</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommandType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>llvm</name><operator>::</operator><call><name>is_contained</name><argument_list>(<argument><expr><name>typesList</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>cmds</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>cmds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>maxCommands</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cmds</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
p += cmd-&gt;cmdsize</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>
return cmds</block><empty_stmt>;</empty_stmt></for>
}</block>

}


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>CommandType</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>load_command</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Types</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>CommandType</name> <operator>*</operator><macro><name>findCommand</name><argument_list>(<argument>const void *anyHdr</argument>, <argument>Types... types</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommandType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>cmds</name> <operator>=</operator>
<name>detail</name><operator>::</operator><call><name><name>findCommands</name><argument_list type="generic">&lt;<argument><expr><name>CommandType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>anyHdr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>types</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name><name>cmds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>cmds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>CommandType</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>load_command</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Types</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommandType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>findCommands</name><argument_list>(<argument>const void *anyHdr</argument>,
<argument>Types... types</argument>)</argument_list></macro> <block>{
<return>return <expr><name>detail</name><operator>::</operator><call><name><name>findCommands</name><argument_list type="generic">&lt;<argument><expr><name>CommandType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>anyHdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>types</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block>

}

<name>std</name><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>macho</name><operator>::</operator><name>InputFile</name> <operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
