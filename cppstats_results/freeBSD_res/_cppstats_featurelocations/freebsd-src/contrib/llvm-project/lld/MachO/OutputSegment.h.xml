<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/OutputSegment.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_OUTPUT_SEGMENT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_OUTPUT_SEGMENT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OutputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Symbols.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/TinyPtrVector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>segment_names</name> <block>{<block_content>

<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>dataConst</name><index>[]</index></name> <init>= <expr><literal type="string">"__DATA_CONST"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>dataDirty</name><index>[]</index></name> <init>= <expr><literal type="string">"__DATA_DIRTY"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><literal type="string">"__DATA"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>dwarf</name><index>[]</index></name> <init>= <expr><literal type="string">"__DWARF"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>import</name><index>[]</index></name> <init>= <expr><literal type="string">"__IMPORT"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>ld</name><index>[]</index></name> <init>= <expr><literal type="string">"__LD"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>linkEdit</name><index>[]</index></name> <init>= <expr><literal type="string">"__LINKEDIT"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>llvm</name><index>[]</index></name> <init>= <expr><literal type="string">"__LLVM"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>pageZero</name><index>[]</index></name> <init>= <expr><literal type="string">"__PAGEZERO"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>textExec</name><index>[]</index></name> <init>= <expr><literal type="string">"__TEXT_EXEC"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>text</name><index>[]</index></name> <init>= <expr><literal type="string">"__TEXT"</literal></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OutputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OutputSegment</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>void</name></type> <name>addOutputSection</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>os</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sortOutputSections</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>assignAddressesToStartEndSymbols</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getSections</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>sections</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>numNonHiddenSections</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>fileOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fileSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vmSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inputOrder</name> <init>= <expr><name>UnspecifiedInputOrder</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxProt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initProt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>Defined</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>segmentStartSymbols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>Defined</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>segmentEndSymbols</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sections</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<extern>extern std::vector&lt;OutputSegment *&gt; outputSegments;</extern>

<function_decl><type><name>void</name></type> <name>sortOutputSegments</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>OutputSegment</name> <modifier>*</modifier></type><name>getOrCreateOutputSegment</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
