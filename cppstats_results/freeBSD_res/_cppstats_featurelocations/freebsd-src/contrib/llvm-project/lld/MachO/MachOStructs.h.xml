<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/MachOStructs.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_MACHO_STRUCTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_MACHO_STRUCTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Endian.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>structs</name> <block>{<block_content>

<struct>struct <name>nlist_64</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle32_t</name> <name>n_strx</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_sect</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle16_t</name> <name>n_desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle64_t</name> <name>n_value</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>nlist</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle32_t</name> <name>n_strx</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_sect</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle16_t</name> <name>n_desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle32_t</name> <name>n_value</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>entry_point_command</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle32_t</name> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle32_t</name> <name>cmdsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle64_t</name> <name>entryoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>ulittle64_t</name> <name>stacksize</name></expr>;</expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
