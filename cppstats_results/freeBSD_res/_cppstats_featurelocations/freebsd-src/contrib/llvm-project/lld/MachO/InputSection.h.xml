<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/InputSection.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_INPUT_SECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_INPUT_SECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Relocations.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OutputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>ConcatKind</name></decl>,
<decl><name>CStringLiteralKind</name></decl>,
<decl><name>WordLiteralKind</name></decl>,
}</block>;</enum>

<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>shared</name><operator>-&gt;</operator><name>sectionKind</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>InputSection</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>InputFile</name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>shared</name><operator>-&gt;</operator><name>file</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>shared</name><operator>-&gt;</operator><name>name</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getSegName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>shared</name><operator>-&gt;</operator><name>segname</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <macro><name>getFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>shared</name><operator>-&gt;</operator><name>flags</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getFileSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>uint64_t</name></type> <name>getOffset</name><argument_list>(<argument><expr><name>uint64_t</name> <name>off</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getVA</name><argument_list>(<argument><expr><name>uint64_t</name> <name>off</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isLive</name><argument_list>(<argument><expr><name>uint64_t</name> <name>off</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>markLive</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>off</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function><type><name>virtual</name> <name>InputSection</name> <modifier>*</modifier></type><name>canonical</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>this</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>align</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>callSiteCount</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>isFinal</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Reloc</name></expr></argument>&gt;</argument_list></name> <name>relocs</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>




<struct>struct <name>Shared</name> <block>{
<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>segname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Kind</name></type> <name>sectionKind</name></decl>;</decl_stmt>
<macro><name>Shared</name><argument_list>(<argument>InputFile *file</argument>, <argument>StringRef name</argument>, <argument>StringRef segname</argument>, <argument>uint32_t flags</argument>,
<argument>Kind kind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>segname</name><argument_list>(<argument><expr><name>segname</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>sectionKind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<macro><name>InputSection</name><argument_list>(<argument>Kind kind</argument>, <argument>StringRef segname</argument>, <argument>StringRef name</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>callSiteCount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>isFinal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>shared</name><argument_list>(<argument>make&lt;Shared&gt;(nullptr, name, segname, <literal type="number">0</literal>, kind)</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>InputSection</name><argument_list>(<argument>Kind kind</argument>, <argument>StringRef segname</argument>, <argument>StringRef name</argument>, <argument>InputFile *file</argument>,
<argument>ArrayRef&lt;uint8_t&gt; data</argument>, <argument>uint32_t align</argument>, <argument>uint32_t flags</argument>)</argument_list></macro>
<operator>:</operator> <call><name>align</name><argument_list>(<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>callSiteCount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>isFinal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>shared</name><argument_list>(<argument>make&lt;Shared&gt;(file, name, segname, flags, kind)</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>Shared</name> <operator>*</operator><specifier>const</specifier> <name>shared</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name> <name>ConcatInputSection</name></type> <name>final</name> <range>: <expr><name>public</name> <name>InputSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ConcatInputSection</name><argument_list>(<argument>StringRef segname</argument>, <argument>StringRef name</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>InputSection</name><argument_list>(<argument>ConcatKind</argument>, <argument>segname</argument>, <argument>name</argument>)</argument_list></macro> <block>{}</block>

<macro><name>ConcatInputSection</name><argument_list>(<argument>StringRef segname</argument>, <argument>StringRef name</argument>, <argument>InputFile *file</argument>,
<argument>ArrayRef&lt;uint8_t&gt; data</argument>, <argument>uint32_t align = <literal type="number">1</literal></argument>,
<argument>uint32_t flags = <literal type="number">0</literal></argument>)</argument_list></macro>
<operator>:</operator> <macro><name>InputSection</name><argument_list>(<argument>ConcatKind</argument>, <argument>segname</argument>, <argument>name</argument>, <argument>file</argument>, <argument>data</argument>, <argument>align</argument>, <argument>flags</argument>)</argument_list></macro> <block>{}</block>

<name>uint64_t</name> <macro><name>getOffset</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>outSecOff</name> <operator>+</operator> <name>off</name></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>getVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>InputSection</name><operator>::</operator><call><name>getVA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>bool</name> <macro><name>isLive</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>live</name></expr>;</return> }</block>
<name>void</name> <macro><name>markLive</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <name>override</name> <block>{ <expr><name>live</name> <operator>=</operator> <name>true</name></expr>; }</block>
<name>bool</name> <macro><name>isCoalescedWeak</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>wasCoalesced</name> <operator>&amp;&amp;</operator> <name>numRefs</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block>
<name>bool</name> <macro><name>shouldOmitFromOutput</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>live</name> <operator>||</operator> <call><name>isCoalescedWeak</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>isHashableForICF</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <call><name>hashForICF</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>writeTo</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>foldIdentical</name><argument_list>(<argument><expr><name>ConcatInputSection</name> <operator>*</operator><name>redundant</name></expr></argument>)</argument_list></call></expr>;
<expr><name>InputSection</name> <operator>*</operator><macro><name>canonical</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>replacement</name> <operator>?</operator> <name>replacement</name> <operator>:</operator> <name>this</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputSection *isec</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>isec</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConcatKind</name></expr>;</return>
}</block>


<name>InputSection</name> <operator>*</operator><name>replacement</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>uint64_t</name> <name><name>icfEqClass</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;






<expr><name>bool</name> <name>wasCoalesced</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>live</name> <operator>=</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>deadStrip</name></name></expr>;

<expr><name>uint32_t</name> <name>numRefs</name> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>uint64_t</name> <name>outSecOff</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">8</literal> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConcatInputSection</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">112</literal></expr></argument>,
<argument><expr><literal type="string">"Try to minimize ConcatInputSection's size, we create many "</literal>
<literal type="string">"instances of it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>shouldOmitFromOutput</name><parameter_list>(<parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>isec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>isec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>isec</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>shouldOmitFromOutput</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isCoalescedWeak</name><parameter_list>(<parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>isec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>isec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>isec</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>isCoalescedWeak</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<struct>struct <name>StringPiece</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>inSecOff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>live</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>outSecOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>StringPiece</name><argument_list>(<argument>uint64_t off</argument>, <argument>uint32_t hash</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>inSecOff</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>live</name><argument_list>(<argument><expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>deadStrip</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>hash</name><argument_list>(<argument>hash</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StringPiece</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"StringPiece is too big!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<decl_stmt><decl><type><name>class</name> <name>CStringInputSection</name></type> <name>final</name> <range>: <expr><name>public</name> <name>InputSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>CStringInputSection</name><argument_list>(<argument>StringRef segname</argument>, <argument>StringRef name</argument>, <argument>InputFile *file</argument>,
<argument>ArrayRef&lt;uint8_t&gt; data</argument>, <argument>uint32_t align</argument>, <argument>uint32_t flags</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>InputSection</name><argument_list>(<argument>CStringLiteralKind</argument>, <argument>segname</argument>, <argument>name</argument>, <argument>file</argument>, <argument>data</argument>, <argument>align</argument>,
<argument>flags</argument>)</argument_list></macro> <block>{}</block>
<name>uint64_t</name> <macro><name>getOffset</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isLive</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name>getStringPiece</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call><operator>.</operator><name>live</name></expr>;</return> }</block>
<name>void</name> <macro><name>markLive</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <name>override</name> <block>{ <expr><call><name>getStringPiece</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call><operator>.</operator><name>live</name> <operator>=</operator> <name>true</name></expr>; }</block>

<name>StringPiece</name> <operator>&amp;</operator><macro><name>getStringPiece</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>StringPiece</name> <operator>&amp;</operator><macro><name>getStringPiece</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>splitIntoPieces</name><argument_list>()</argument_list></call></expr>;

<expr><name>LLVM_ATTRIBUTE_ALWAYS_INLINE</name>
<name>StringRef</name> <macro><name>getStringRef</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>size_t</name> <name>begin</name> <operator>=</operator> <name><name>pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inSecOff</name></expr>;
<expr><name>size_t</name> <name>end</name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><call><name><name>pieces</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>pieces</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>inSecOff</name></expr></else></ternary></expr>;
<return>return <expr><call><name>toStringRef</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>slice</name></name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>LLVM_ATTRIBUTE_ALWAYS_INLINE</name>
<name>llvm</name><operator>::</operator><name>CachedHashStringRef</name> <macro><name>getCachedHashStringRef</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>dedupLiterals</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><block>{<expr><call><name>getStringRef</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr>}</block></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputSection *isec</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>isec</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CStringLiteralKind</name></expr>;</return>
}</block>

<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringPiece</name></expr></argument>&gt;</argument_list></name> <name>pieces</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>WordLiteralInputSection</name></type> <name>final</name> <range>: <expr><name>public</name> <name>InputSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>WordLiteralInputSection</name><argument_list>(<argument>StringRef segname</argument>, <argument>StringRef name</argument>, <argument>InputFile *file</argument>,
<argument>ArrayRef&lt;uint8_t&gt; data</argument>, <argument>uint32_t align</argument>,
<argument>uint32_t flags</argument>)</argument_list></macro></expr>;
<expr><name>uint64_t</name> <macro><name>getOffset</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isLive</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name><name>live</name><index>[<expr><name>off</name> <operator>&gt;&gt;</operator> <name>power2LiteralSize</name></expr>]</index></name></expr>;</return>
}</block>
<name>void</name> <macro><name>markLive</name><argument_list>(<argument>uint64_t off</argument>)</argument_list></macro> <name>override</name> <block>{ <expr><name><name>live</name><index>[<expr><name>off</name> <operator>&gt;&gt;</operator> <name>power2LiteralSize</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>; }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputSection *isec</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>isec</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>WordLiteralKind</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>unsigned</name> <name>power2LiteralSize</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>BitVector</name> <name>live</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>uint8_t</name></type> <name>sectionType</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>flags</name> <operator>&amp;</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>SECTION_TYPE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isZeroFill</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><call><name>isVirtualSection</name><argument_list>(<argument><expr><call><name>sectionType</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isThreadLocalVariables</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sectionType</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_THREAD_LOCAL_VARIABLES</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isThreadLocalData</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sectionType</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_THREAD_LOCAL_REGULAR</name> <operator>||</operator>
<call><name>sectionType</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_THREAD_LOCAL_ZEROFILL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isDebugSection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>SECTION_ATTRIBUTES_USR</name><operator>)</operator> <operator>==</operator>
<name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_ATTR_DEBUG</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isWordLiteralSection</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sectionType</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_4BYTE_LITERALS</name> <operator>||</operator>
<call><name>sectionType</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_8BYTE_LITERALS</name> <operator>||</operator>
<call><name>sectionType</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_16BYTE_LITERALS</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>isCodeSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InputSection</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isCfStringSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InputSection</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<extern>extern std::vector&lt;ConcatInputSection *&gt; inputSections;</extern>

<decl_stmt><decl><type><name>namespace</name></type> <name>section_names</name> <block>{<block_content>

<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>authGot</name><index>[]</index></name> <init>= <expr><literal type="string">"__auth_got"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>authPtr</name><index>[]</index></name> <init>= <expr><literal type="string">"__auth_ptr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>binding</name><index>[]</index></name> <init>= <expr><literal type="string">"__binding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>bitcodeBundle</name><index>[]</index></name> <init>= <expr><literal type="string">"__bundle"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>cString</name><index>[]</index></name> <init>= <expr><literal type="string">"__cstring"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>cfString</name><index>[]</index></name> <init>= <expr><literal type="string">"__cfstring"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>codeSignature</name><index>[]</index></name> <init>= <expr><literal type="string">"__code_signature"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>common</name><index>[]</index></name> <init>= <expr><literal type="string">"__common"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>compactUnwind</name><index>[]</index></name> <init>= <expr><literal type="string">"__compact_unwind"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><literal type="string">"__data"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>debugAbbrev</name><index>[]</index></name> <init>= <expr><literal type="string">"__debug_abbrev"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>debugInfo</name><index>[]</index></name> <init>= <expr><literal type="string">"__debug_info"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>debugStr</name><index>[]</index></name> <init>= <expr><literal type="string">"__debug_str"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>ehFrame</name><index>[]</index></name> <init>= <expr><literal type="string">"__eh_frame"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>export_</name><index>[]</index></name> <init>= <expr><literal type="string">"__export"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>dataInCode</name><index>[]</index></name> <init>= <expr><literal type="string">"__data_in_code"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>functionStarts</name><index>[]</index></name> <init>= <expr><literal type="string">"__func_starts"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>got</name><index>[]</index></name> <init>= <expr><literal type="string">"__got"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>header</name><index>[]</index></name> <init>= <expr><literal type="string">"__mach_header"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>indirectSymbolTable</name><index>[]</index></name> <init>= <expr><literal type="string">"__ind_sym_tab"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>const_</name><index>[]</index></name> <init>= <expr><literal type="string">"__const"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>lazySymbolPtr</name><index>[]</index></name> <init>= <expr><literal type="string">"__la_symbol_ptr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>lazyBinding</name><index>[]</index></name> <init>= <expr><literal type="string">"__lazy_binding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>literals</name><index>[]</index></name> <init>= <expr><literal type="string">"__literals"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>moduleInitFunc</name><index>[]</index></name> <init>= <expr><literal type="string">"__mod_init_func"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>moduleTermFunc</name><index>[]</index></name> <init>= <expr><literal type="string">"__mod_term_func"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>nonLazySymbolPtr</name><index>[]</index></name> <init>= <expr><literal type="string">"__nl_symbol_ptr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>objcCatList</name><index>[]</index></name> <init>= <expr><literal type="string">"__objc_catlist"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>objcClassList</name><index>[]</index></name> <init>= <expr><literal type="string">"__objc_classlist"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>objcConst</name><index>[]</index></name> <init>= <expr><literal type="string">"__objc_const"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>objcImageInfo</name><index>[]</index></name> <init>= <expr><literal type="string">"__objc_imageinfo"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>objcNonLazyCatList</name><index>[]</index></name> <init>= <expr><literal type="string">"__objc_nlcatlist"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>objcNonLazyClassList</name><index>[]</index></name> <init>= <expr><literal type="string">"__objc_nlclslist"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>objcProtoList</name><index>[]</index></name> <init>= <expr><literal type="string">"__objc_protolist"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>pageZero</name><index>[]</index></name> <init>= <expr><literal type="string">"__pagezero"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>pointers</name><index>[]</index></name> <init>= <expr><literal type="string">"__pointers"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>rebase</name><index>[]</index></name> <init>= <expr><literal type="string">"__rebase"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>staticInit</name><index>[]</index></name> <init>= <expr><literal type="string">"__StaticInit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>stringTable</name><index>[]</index></name> <init>= <expr><literal type="string">"__string_table"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>stubHelper</name><index>[]</index></name> <init>= <expr><literal type="string">"__stub_helper"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>stubs</name><index>[]</index></name> <init>= <expr><literal type="string">"__stubs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>swift</name><index>[]</index></name> <init>= <expr><literal type="string">"__swift"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>symbolTable</name><index>[]</index></name> <init>= <expr><literal type="string">"__symbol_table"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>textCoalNt</name><index>[]</index></name> <init>= <expr><literal type="string">"__textcoal_nt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>text</name><index>[]</index></name> <init>= <expr><literal type="string">"__text"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>threadPtrs</name><index>[]</index></name> <init>= <expr><literal type="string">"__thread_ptrs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>threadVars</name><index>[]</index></name> <init>= <expr><literal type="string">"__thread_vars"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>unwindInfo</name><index>[]</index></name> <init>= <expr><literal type="string">"__unwind_info"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>weakBinding</name><index>[]</index></name> <init>= <expr><literal type="string">"__weak_binding"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <specifier>const</specifier> <name>char</name></type> <name><name>zeroFill</name><index>[]</index></name> <init>= <expr><literal type="string">"__zerofill"</literal></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>macho</name><operator>::</operator><name>InputSection</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
