<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/SyntheticSections.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_SYNTHETIC_SECTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_SYNTHETIC_SECTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ExportTrie.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OutputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OutputSegment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Target.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Writer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Hashing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/MC/StringTableBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DWARFUnit</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DylibSymbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LoadCommand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UnwindInfoSection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SyntheticSection</name> <range>: <expr><name>public</name> <name>OutputSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SyntheticSection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>segname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>SyntheticSection</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const OutputSection *sec</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>sec</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SyntheticKind</name></expr>;</return>
}</block>

<name>StringRef</name> <name>segname</name></expr>;


<expr><name>InputSection</name> <operator>*</operator><name>isec</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>LinkEditSection</name> <range>: <expr><name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>LinkEditSection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>segname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SyntheticSection</name><argument_list>(<argument>segname</argument>, <argument>name</argument>)</argument_list></macro> <block>{
<expr><name>align</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>wordSize</name></name></expr>;
}</block>

<name>virtual</name> <name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <block>{}</block>




<name>bool</name> <macro><name>isHidden</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <name>final</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>virtual</name> <name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;







<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <name>final</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>alignTo</name><argument_list>(<argument><expr><call><name>getRawSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>MachHeaderSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MachHeaderSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>isHidden</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <call><name>addLoadCommand</name><argument_list>(<argument><expr><name>LoadCommand</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LoadCommand</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>loadCommands</name></expr>;
<expr><name>uint32_t</name> <name>sizeOfCmds</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;



<expr><name>class</name> <name>PageZeroSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>PageZeroSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>isHidden</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name><name>target</name><operator>-&gt;</operator><name>pageZeroSize</name></name></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>getFileSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{}</block>
}</expr>;





<expr><name>class</name> <name>NonLazyPointerSectionBase</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>NonLazyPointerSectionBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>segname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getEntries</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>entries</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>!</operator><call><name><name>entries</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>target</name><operator>-&gt;</operator><name>wordSize</name></name></expr>;</return>
}</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <call><name>addEntry</name><argument_list>(<argument><expr><name>Symbol</name> <operator>*</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getVA</name><argument_list>(<argument>uint32_t gotIndex</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>addr</name> <operator>+</operator> <name>gotIndex</name> <operator>*</operator> <name><name>target</name><operator>-&gt;</operator><name>wordSize</name></name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>entries</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>GotSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>NonLazyPointerSectionBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>GotSection</name><argument_list>()</argument_list></call></expr>;
}</block></expr>;

<expr><name>class</name> <name>TlvPointerSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>NonLazyPointerSectionBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>TlvPointerSection</name><argument_list>()</argument_list></call></expr>;
}</block></expr>;

struct <expr><name>Location</name> <block>{
<expr><specifier>const</specifier> <name>InputSection</name> <operator>*</operator><name>isec</name></expr>;
<expr><name>uint64_t</name> <name>offset</name></expr>;

<macro><name>Location</name><argument_list>(<argument>const InputSection *isec</argument>, <argument>uint64_t offset</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>isec</name><argument_list>(<argument><expr><name>isec</name></expr></argument>)</argument_list></call></expr>, <macro><name>offset</name><argument_list>(<argument>offset</argument>)</argument_list></macro> <expr><block>{}</block>
<name>uint64_t</name> <macro><name>getVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>isec</name><operator>-&gt;</operator><name>getVA</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
}</expr>;




<expr><name>class</name> <name>RebaseSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RebaseSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>contents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>!</operator><call><name><name>locations</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addEntry</name><argument_list>(<argument>const InputSection *isec</argument>, <argument>uint64_t offset</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>isPic</name></name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>locations</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>{isec</argument>, <argument>offset}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Location</name></expr></argument>&gt;</argument_list></name> <name>locations</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>contents</name></expr>;
}</block></expr>;

struct <expr><name>BindingEntry</name> <block>{
<expr><name>int64_t</name> <name>addend</name></expr>;
<expr><name>Location</name> <name>target</name></expr>;
<macro><name>BindingEntry</name><argument_list>(<argument>int64_t addend</argument>, <argument>Location target</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>addend</name><argument_list>(<argument><expr><name>addend</name></expr></argument>)</argument_list></call></expr>, <macro><name>target</name><argument_list>(<argument>std::move(target)</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Sym</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>BindingsMap</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BindingEntry</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;


<expr><name>class</name> <name>BindingSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>BindingSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>contents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>!</operator><call><name><name>bindingsMap</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addEntry</name><argument_list>(<argument>const DylibSymbol *dysym</argument>, <argument>const InputSection *isec</argument>,
<argument>uint64_t offset</argument>, <argument>int64_t addend = <literal type="number">0</literal></argument>)</argument_list></macro> <block>{
<expr><name><name>bindingsMap</name><index>[<expr><name>dysym</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>addend</name></expr></argument>, <argument><expr><call><name>Location</name><argument_list>(<argument><expr><name>isec</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name><name>BindingsMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DylibSymbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>bindingsMap</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>contents</name></expr>;
}</block></expr>;











<expr><name>class</name> <name>WeakBindingSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>WeakBindingSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>contents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>!</operator><call><name><name>bindingsMap</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>definitions</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addEntry</name><argument_list>(<argument>const Symbol *symbol</argument>, <argument>const InputSection *isec</argument>, <argument>uint64_t offset</argument>,
<argument>int64_t addend = <literal type="number">0</literal></argument>)</argument_list></macro> <block>{
<expr><name><name>bindingsMap</name><index>[<expr><name>symbol</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>addend</name></expr></argument>, <argument><expr><call><name>Location</name><argument_list>(<argument><expr><name>isec</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>bindingsMap</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>addNonWeakDefinition</name><argument_list>(<argument>const Defined *defined</argument>)</argument_list></macro> <block>{
<expr><call><name><name>definitions</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>defined</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasNonWeakDefinition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>definitions</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name><name>BindingsMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>bindingsMap</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Defined</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>definitions</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>contents</name></expr>;
}</block></expr>;
































<expr><name>class</name> <name>StubsSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StubsSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>!</operator><call><name><name>entries</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>finalize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getEntries</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>entries</name></expr>;</return> }</block>


<name>bool</name> <call><name>addEntry</name><argument_list>(<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getVA</name><argument_list>(<argument>uint32_t stubsIndex</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>isFinal</name> <operator>||</operator> <call><name><name>target</name><operator>-&gt;</operator><name>usesThunks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;



<return>return <expr><ternary><condition><expr><name>isFinal</name></expr> ?</condition><then> <expr><name>addr</name> <operator>+</operator> <name>stubsIndex</name> <operator>*</operator> <name><name>target</name><operator>-&gt;</operator><name>stubSize</name></name></expr>
</then><else>: <expr><name>TargetInfo</name><operator>::</operator><name>outOfRangeVA</name></expr></else></ternary></expr>;</return>
}</block>

<name>bool</name> <name>isFinal</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>entries</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>StubHelperSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StubHelperSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <call><name>setup</name><argument_list>()</argument_list></call></expr>;

<expr><name>DylibSymbol</name> <operator>*</operator><name>stubBinder</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Defined</name> <operator>*</operator><name>dyldPrivate</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr>;



<expr><name>class</name> <name>LazyPointerSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>LazyPointerSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LazyBindingSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>LazyBindingSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>contents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>!</operator><call><name><name>entries</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><name>void</name> <call><name>addEntry</name><argument_list>(<argument><expr><name>DylibSymbol</name> <operator>*</operator><name>dysym</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>DylibSymbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getEntries</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>entries</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>uint32_t</name> <call><name>encode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DylibSymbol</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>DylibSymbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>entries</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>contents</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_svector_ostream</name> <name>os</name><block>{<expr><name>contents</name></expr>}</block></expr>;
}</block></expr>;


<expr><name>class</name> <name>ExportSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ExportSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>size</name></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <name>hasWeakSymbol</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>TrieBuilder</name> <name>trieBuilder</name></expr>;
<expr><name>size_t</name> <name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;



<expr><name>class</name> <name>DataInCodeSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DataInCodeSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>data_in_code_entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>data_in_code_entry</name></expr></argument>&gt;</argument_list></name> <name>entries</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>FunctionStartsSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>FunctionStartsSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>contents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <name>contents</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>StringTableSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StringTableSection</name><argument_list>()</argument_list></call></expr>;

<expr><name>uint32_t</name> <call><name>addString</name><argument_list>(<argument><expr><name>StringRef</name></expr></argument>)</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>size</name></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>emptyStringIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;

<expr><name>private</name><operator>:</operator>



<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>strings</name><block>{<expr><literal type="string">" "</literal></expr>}</block></expr>;
<expr><name>size_t</name> <name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;
}</block></expr>;

struct <expr><name>SymtabEntry</name> <block>{
<expr><name>Symbol</name> <operator>*</operator><name>sym</name></expr>;
<expr><name>size_t</name> <name>strx</name></expr>;
}</block></expr>;

struct <expr><name>StabsEntry</name> <block>{
<expr><name>uint8_t</name> <name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint32_t</name> <name>strx</name> <operator>=</operator> <name>StringTableSection</name><operator>::</operator><name>emptyStringIndex</name></expr>;
<expr><name>uint8_t</name> <name>sect</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint16_t</name> <name>desc</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint64_t</name> <name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><call><name>StabsEntry</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <macro><name>StabsEntry</name><argument_list>(<argument>uint8_t type</argument>)</argument_list></macro> <operator>:</operator> <macro><name>type</name><argument_list>(<argument>type</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;





<expr><name>class</name> <name>SymtabSection</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint32_t</name> <macro><name>getNumSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>uint32_t</name> <macro><name>getNumLocalSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>stabs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>localSymbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>uint32_t</name> <macro><name>getNumExternalSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>externalSymbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>uint32_t</name> <macro><name>getNumUndefinedSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>undefinedSymbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>void</name> <call><name>emitBeginSourceStab</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>DWARFUnit</name> <operator>*</operator><name>compileUnit</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>emitEndSourceStab</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>emitObjectFileStab</name><argument_list>(<argument><expr><name>ObjFile</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>emitEndFunStab</name><argument_list>(<argument><expr><name>Defined</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>emitStabs</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>SymtabSection</name><argument_list>(<argument><expr><name>StringTableSection</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>StringTableSection</name> <operator>&amp;</operator><name>stringTableSection</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StabsEntry</name></expr></argument>&gt;</argument_list></name> <name>stabs</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SymtabEntry</name></expr></argument>&gt;</argument_list></name> <name>localSymbols</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SymtabEntry</name></expr></argument>&gt;</argument_list></name> <name>externalSymbols</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SymtabEntry</name></expr></argument>&gt;</argument_list></name> <name>undefinedSymbols</name></expr>;
}</block></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LP</name></expr></argument>&gt;</argument_list></name> <name>SymtabSection</name> <operator>*</operator><call><name>makeSymtabSection</name><argument_list>(<argument><expr><name>StringTableSection</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;











<expr><name>class</name> <name>IndirectSymtabSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>IndirectSymtabSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uint32_t</name> <macro><name>getNumSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>getNumSymbols</name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block>
<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>CodeSignatureSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>LinkEditSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>constexpr</name> <name>uint8_t</name> <name>blockSizeShift</name> <operator>=</operator> <literal type="number">12</literal></expr>;
<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>blockSize</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>blockSizeShift</name><operator>)</operator></expr>;
<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>hashSize</name> <operator>=</operator> <literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>;
<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>blobHeadersSize</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name><name>alignTo</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>CS_SuperBlob</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>CS_BlobIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>constexpr</name> <name>uint32_t</name> <name>fixedHeadersSize</name> <operator>=</operator>
<name>blobHeadersSize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>CS_CodeDirectory</name></expr></argument>)</argument_list></sizeof></expr>;

<expr><name>uint32_t</name> <name>fileNamePad</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint32_t</name> <name>allHeadersSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>StringRef</name> <name>fileName</name></expr>;

<expr><call><name>CodeSignatureSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getRawSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>uint32_t</name> <macro><name>getBlockCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>writeHashes</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>class</name> <name>BitcodeBundleSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>BitcodeBundleSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>xarSize</name></expr>;</return> }</block>
<name>void</name> <macro><name>finalize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">261</literal></expr></argument>&gt;</argument_list></name> <name>xarPath</name></expr>;
<expr><name>uint64_t</name> <name>xarSize</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>CStringSection</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CStringSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>addInput</name><argument_list>(<argument><expr><name>CStringInputSection</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>size</name></expr>;</return> }</block>
<name>virtual</name> <name>void</name> <call><name>finalizeContents</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>!</operator><call><name><name>inputs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CStringInputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>inputs</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>uint64_t</name> <name>size</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>DeduplicatedCStringSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>CStringSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DeduplicatedCStringSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>builder</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>finalizeContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <expr><call><name><name>builder</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>StringTableBuilder</name> <name>builder</name></expr>;
}</block></expr>;





<expr><name>class</name> <name>WordLiteralSection</name> <name>final</name> <operator>:</operator> <name>public</name> <name>SyntheticSection</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>UInt128</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></expr>;


<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt128</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name>WordLiteralSection</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>addInput</name><argument_list>(<argument><expr><name>WordLiteralInputSection</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>finalizeContents</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>writeTo</name><argument_list>(<argument>uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>literal16Map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <call><name><name>literal8Map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator>
<call><name><name>literal4Map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</return>
}</block>

<name>bool</name> <macro><name>isNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>!</operator><call><name><name>literal16Map</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>literal4Map</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name><name>literal8Map</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getLiteral16Offset</name><argument_list>(<argument>const uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>literal16Map</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>UInt128</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getLiteral8Offset</name><argument_list>(<argument>const uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>literal16Map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator>
<call><name><name>literal8Map</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>getLiteral4Offset</name><argument_list>(<argument>const uint8_t *buf</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>literal16Map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <call><name><name>literal8Map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator>
<call><name><name>literal4Map</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WordLiteralInputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>inputs</name></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> struct <name>Hasher</name> <block>{
<expr><name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>T</name> <name>v</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
}</expr>;



<expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>UInt128</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name><name>Hasher</name><argument_list type="generic">&lt;<argument><expr><name>UInt128</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>literal16Map</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>literal8Map</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>literal4Map</name></expr>;
}</block></expr>;

struct <expr><name>InStruct</name> <block>{
<expr><name>MachHeaderSection</name> <operator>*</operator><name>header</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>CStringSection</name> <operator>*</operator><name>cStringSection</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>WordLiteralSection</name> <operator>*</operator><name>wordLiteralSection</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>RebaseSection</name> <operator>*</operator><name>rebase</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>BindingSection</name> <operator>*</operator><name>binding</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>WeakBindingSection</name> <operator>*</operator><name>weakBinding</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>LazyBindingSection</name> <operator>*</operator><name>lazyBinding</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>ExportSection</name> <operator>*</operator><name>exports</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>GotSection</name> <operator>*</operator><name>got</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>TlvPointerSection</name> <operator>*</operator><name>tlvPointers</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>LazyPointerSection</name> <operator>*</operator><name>lazyPointers</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>StubsSection</name> <operator>*</operator><name>stubs</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>StubHelperSection</name> <operator>*</operator><name>stubHelper</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>UnwindInfoSection</name> <operator>*</operator><name>unwindInfo</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>ConcatInputSection</name> <operator>*</operator><name>imageLoaderCache</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr>;

<expr><specifier>extern</specifier> <name>InStruct</name> <name>in</name></expr>;
<expr><specifier>extern</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>syntheticSections</name></expr>;

<expr><name>void</name> <call><name>createSyntheticSymbols</name><argument_list>()</argument_list></call></expr>;

}</block></expr>
}</block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
