<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/SymbolTable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_SYMBOL_TABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_SYMBOL_TABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Symbols.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ArchiveFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DylibFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MachHeaderSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Undefined</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>SymbolTable</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>Defined</name> <modifier>*</modifier></type><name>addDefined</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeakDef</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isPrivateExtern</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isThumb</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isReferencedDynamically</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noDeadStrip</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addUndefined</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeakRef</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addCommon</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>align</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isPrivateExtern</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addDylib</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>DylibFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeakDef</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTlv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addDynamicLookup</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addLazy</name><argument_list>(<argument><expr><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><name>ArchiveFile</name> <operator>*</operator><name>file</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>Defined</name> <modifier>*</modifier></type><name>addSynthetic</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isPrivateExtern</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>includeInSymtab</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>referencedDynamically</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>symVector</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>find</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashStringRef</name> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>Symbol</name> <modifier>*</modifier></type><name>find</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>CachedHashStringRef</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>insert</name><argument_list>(<argument>StringRef name</argument>, <argument>const InputFile *</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashStringRef</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>symMap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symVector</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>treatUndefinedSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Undefined</name> <modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>source</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SymbolTable</name> <modifier>*</modifier></type><name>symtab</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
