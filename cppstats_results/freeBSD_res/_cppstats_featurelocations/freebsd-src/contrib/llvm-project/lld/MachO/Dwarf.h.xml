<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/Dwarf.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_DWARF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_DWARF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/DWARF/DWARFObject.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ObjFile</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>DwarfObject</name></type> <name>final</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>DWARFObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>isLittleEndian</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>RelocAddrEntry</name></expr></argument>&gt;</argument_list></name> <macro><name>find</name><argument_list>(<argument>const llvm::DWARFSection &amp;sec</argument>,
<argument>uint64_t pos</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block>

<name>void</name> <macro><name>forEachInfoSections</name><argument_list>(
<argument>llvm::function_ref&lt;void(const llvm::DWARFSection &amp;)&gt; f</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>f</name><argument_list>(<argument><expr><name>infoSection</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getAbbrevSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>abbrevSection</name></expr>;</return> }</block>
<name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getStrSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>strSection</name></expr>;</return> }</block>



<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DwarfObject</name></expr></argument>&gt;</argument_list></name> <call><name>create</name><argument_list>(<argument><expr><name>ObjFile</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>DWARFSection</name> <name>infoSection</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>abbrevSection</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>strSection</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
