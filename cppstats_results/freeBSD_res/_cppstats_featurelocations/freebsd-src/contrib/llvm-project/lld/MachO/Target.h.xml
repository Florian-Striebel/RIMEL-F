<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/Target.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_TARGET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_TARGET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MachOStructs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Relocations.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitmaskEnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>
<expr_stmt><expr><call><name>LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DylibSymbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LP</name></expr></argument>&gt;</argument_list></name></type> <name>TargetInfo</name><parameter_list>(<parameter><decl><type><name>LP</name></type></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><name>magic</name> <operator>=</operator> <name>LP</name><operator>::</operator><name>magic</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pageZeroSize</name> <operator>=</operator> <name>LP</name><operator>::</operator><name>pageZeroSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>headerSize</name> <operator>=</operator> sizeof<operator>(</operator><name>typename</name> <name>LP</name><operator>::</operator><name>mach_header</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wordSize</name> <operator>=</operator> <name>LP</name><operator>::</operator><name>wordSize</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TargetInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>int64_t</name></type>
<name>getEmbeddedAddend</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>offset</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>relocation_info</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relocateOne</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Reloc</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>uint64_t</name> <name>va</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>relocVA</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeStub</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeStubHelperHeader</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeStubHelperEntry</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>DylibSymbol</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><name>uint64_t</name> <name>entryAddr</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relaxGotLoad</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>type</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>RelocAttrs</name> <modifier>&amp;</modifier></type><name>getRelocAttrs</name><argument_list>(<argument><expr><name>uint8_t</name> <name>type</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>uint64_t</name> <macro><name>getPageSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>populateThunk</name><parameter_list>(<parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>, <parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>funcSym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"target does not use thunks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>hasAttr</name><argument_list>(<argument><expr><name>uint8_t</name> <name>type</name></expr></argument>, <argument><expr><name>RelocAttrBits</name> <name>bit</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getRelocAttrs</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>hasAttr</name><argument_list>(<argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>usesThunks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>thunkSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>CPUType</name> <name>cpuType</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpuSubtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pageZeroSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>headerSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stubSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stubHelperHeaderSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stubHelperEntrySize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wordSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>thunkSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>branchRange</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint64_t</name></type> <name>outOfRangeVA</name> <init>= <expr><literal type="number">0xfull</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>createX86_64TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>createARM64TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>createARM64_32TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>createARMTargetInfo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>cpuSubtype</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>LP64</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>mach_header</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>mach_header_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>nlist</name> <init>= <expr><name>structs</name><operator>::</operator><name>nlist_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>segment_command</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>segment_command_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>section</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>section_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>encryption_info_command</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>encryption_info_command_64</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint32_t</name></type> <name>magic</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_MAGIC_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint32_t</name></type> <name>segmentLCType</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>LC_SEGMENT_64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint32_t</name></type> <name>encryptionInfoLCType</name> <init>=
<expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>LC_ENCRYPTION_INFO_64</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint64_t</name></type> <name>pageZeroSize</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>wordSize</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ILP32</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>mach_header</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>mach_header</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>nlist</name> <init>= <expr><name>structs</name><operator>::</operator><name>nlist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>segment_command</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>segment_command</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>section</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>section</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>encryption_info_command</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>encryption_info_command</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint32_t</name></type> <name>magic</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_MAGIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint32_t</name></type> <name>segmentLCType</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>LC_SEGMENT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint32_t</name></type> <name>encryptionInfoLCType</name> <init>=
<expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>LC_ENCRYPTION_INFO</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint64_t</name></type> <name>pageZeroSize</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>wordSize</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>TargetInfo</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
