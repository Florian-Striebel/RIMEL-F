<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/Symbols.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_SYMBOLS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_SYMBOLS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputFiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Target.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/ErrorHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MachHeaderSection</name></decl>;</decl_stmt>

<struct>struct <name>StringRefZ</name> <block>{
<expr_stmt><expr><call><name>StringRefZ</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>StringRefZ</name><argument_list>(<argument>StringRef s</argument>)</argument_list></macro> <operator>:</operator> <call><name>data</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size</name><argument_list>(<argument>s.size()</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>DefinedKind</name></decl>,
<decl><name>UndefinedKind</name></decl>,
<decl><name>CommonKind</name></decl>,
<decl><name>DylibKind</name></decl>,
<decl><name>LazyKind</name></decl>,
}</block>;</enum>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>Symbol</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>symbolKind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>nameSize</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nameSize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nameData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><block>{<expr><name>nameData</name></expr>, <expr><name>nameSize</name></expr>}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isLive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>uint64_t</name> <macro><name>getVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isWeakDef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"cannot be weak def"</literal></expr></argument>)</argument_list></call></expr>; }</block>




<name>virtual</name> <name>bool</name> <macro><name>isWeakRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"cannot be a weak ref"</literal></expr></argument>)</argument_list></call></expr>; }</block>

<name>virtual</name> <name>bool</name> <macro><name>isTlv</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"cannot be TLV"</literal></expr></argument>)</argument_list></call></expr>; }</block>


<name>bool</name> <macro><name>isInGot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>gotIndex</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isInStubs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>stubsIndex</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getStubVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getGotVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getTlvVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>resolveBranchVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>Defined</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>DylibSymbol</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name>isInStubs</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getStubVA</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>getVA</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>resolveGotVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isInGot</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getGotVA</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>getVA</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>resolveTlvVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isInGot</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getTlvVA</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>getVA</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>gotIndex</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>stubsIndex</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>symtabIndex</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>InputFile</name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>file</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<macro><name>Symbol</name><argument_list>(<argument>Kind k</argument>, <argument>StringRefZ name</argument>, <argument>InputFile *file</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>symbolKind</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nameData</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nameSize</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>isUsedInRegularObj</name><argument_list>(<argument><expr><operator>!</operator><name>file</name> <operator>||</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>ObjFile</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>used</name><argument_list>(<argument>!config-&gt;deadStrip</argument>)</argument_list></macro> <expr><block>{}</block>

<name>Kind</name> <name>symbolKind</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>uint32_t</name></type> <name>nameSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>isUsedInRegularObj</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>used</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Defined</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Defined</name><argument_list>(<argument>StringRefZ name</argument>, <argument>InputFile *file</argument>, <argument>InputSection *isec</argument>, <argument>uint64_t value</argument>,
<argument>uint64_t size</argument>, <argument>bool isWeakDef</argument>, <argument>bool isExternal</argument>, <argument>bool isPrivateExtern</argument>,
<argument>bool isThumb</argument>, <argument>bool isReferencedDynamically</argument>, <argument>bool noDeadStrip</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>DefinedKind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>isec</name><argument_list>(<argument><expr><name>isec</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>overridesWeakDef</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>privateExtern</name><argument_list>(<argument><expr><name>isPrivateExtern</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>includeInSymtab</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>thumb</name><argument_list>(<argument><expr><name>isThumb</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>referencedDynamically</name><argument_list>(<argument><expr><name>isReferencedDynamically</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>noDeadStrip</name><argument_list>(<argument><expr><name>noDeadStrip</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>weakDef</name><argument_list>(<argument><expr><name>isWeakDef</name></expr></argument>)</argument_list></call></expr>, <macro><name>external</name><argument_list>(<argument>isExternal</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>concatIsec</name> <init>= <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>ConcatInputSection</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>isec</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>concatIsec</name><operator>-&gt;</operator><name>numRefs</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>bool</name> <macro><name>isWeakDef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>weakDef</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isExternalWeakDef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isWeakDef</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isExternal</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>privateExtern</name></expr>;</return>
}</block>
<name>bool</name> <macro><name>isTlv</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>!</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isThreadLocalVariables</name><argument_list>(<argument><expr><call><name><name>isec</name><operator>-&gt;</operator><name>getFlags</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isExternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>external</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isAbsolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>isec</name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block>

<name>uint64_t</name> <macro><name>getVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DefinedKind</name></expr>;</return> }</block>

<name>InputSection</name> <operator>*</operator><name>isec</name></expr>;


<expr><name>uint64_t</name> <name>value</name></expr>;

<expr><name>uint64_t</name> <name>size</name></expr>;

<expr><name>bool</name> <name>overridesWeakDef</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>bool</name> <name>privateExtern</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>bool</name> <name>includeInSymtab</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>bool</name> <name>thumb</name> <operator>:</operator> <literal type="number">1</literal></expr>;






<expr><name>bool</name> <name>referencedDynamically</name> <operator>:</operator> <literal type="number">1</literal></expr>;




<expr><name>bool</name> <name>noDeadStrip</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>const</specifier> <name>bool</name> <name>weakDef</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><specifier>const</specifier> <name>bool</name> <name>external</name> <operator>:</operator> <literal type="number">1</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RefState</name> <range>: <expr><name>uint8_t</name> <block>{ <expr><name>Unreferenced</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>Weak</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><name>Strong</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Undefined</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Undefined</name><argument_list>(<argument>StringRefZ name</argument>, <argument>InputFile *file</argument>, <argument>RefState refState</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>UndefinedKind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>, <macro><name>refState</name><argument_list>(<argument>refState</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>refState</name> <operator>!=</operator> <name>RefState</name><operator>::</operator><name>Unreferenced</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>isWeakRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>refState</name> <operator>==</operator> <name>RefState</name><operator>::</operator><name>Weak</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>UndefinedKind</name></expr>;</return> }</block>

<name>RefState</name> <name>refState</name> <operator>:</operator> <literal type="number">2</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>class</name></type> <name>CommonSymbol</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>CommonSymbol</name><argument_list>(<argument>StringRefZ name</argument>, <argument>InputFile *file</argument>, <argument>uint64_t size</argument>, <argument>uint32_t align</argument>,
<argument>bool isPrivateExtern</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>CommonKind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>align</name><argument_list>(<argument><expr><name>align</name> <operator>!=</operator> <literal type="number">1</literal> <operator>?</operator> <name>align</name> <operator>:</operator> <name>llvm</name><operator>::</operator><call><name>PowerOf2Ceil</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>privateExtern</name><argument_list>(<argument>isPrivateExtern</argument>)</argument_list></macro> <expr><block>{

}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CommonKind</name></expr>;</return> }</block>

<specifier>const</specifier> <name>uint64_t</name> <name>size</name></expr>;
<expr><specifier>const</specifier> <name>uint32_t</name> <name>align</name></expr>;
<expr><specifier>const</specifier> <name>bool</name> <name>privateExtern</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DylibSymbol</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DylibSymbol</name><argument_list>(<argument>DylibFile *file</argument>, <argument>StringRefZ name</argument>, <argument>bool isWeakDef</argument>,
<argument>RefState refState</argument>, <argument>bool isTlv</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>DylibKind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>refState</name><argument_list>(<argument><expr><name>refState</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>weakDef</name><argument_list>(<argument><expr><name>isWeakDef</name></expr></argument>)</argument_list></call></expr>,
<macro><name>tlv</name><argument_list>(<argument>isTlv</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <name>refState</name> <operator>&gt;</operator> <name>RefState</name><operator>::</operator><name>Unreferenced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numReferencedSymbols</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>uint64_t</name> <macro><name>getVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isWeakDef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>weakDef</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isWeakRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>refState</name> <operator>==</operator> <name>RefState</name><operator>::</operator><name>Weak</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isReferenced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>refState</name> <operator>!=</operator> <name>RefState</name><operator>::</operator><name>Unreferenced</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isTlv</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>tlv</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isDynamicLookup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>file</name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasStubsHelper</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>stubsHelperIndex</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>;</return> }</block>

<name>DylibFile</name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isDynamicLookup</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DylibFile</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DylibKind</name></expr>;</return> }</block>

<name>uint32_t</name> <name>stubsHelperIndex</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;
<expr><name>uint32_t</name> <name>lazyBindOffset</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;

<expr><name>RefState</name> <macro><name>getRefState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>refState</name></expr>;</return> }</block>

<name>void</name> <macro><name>reference</name><argument_list>(<argument>RefState newState</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>newState</name> <operator>&gt;</operator> <name>RefState</name><operator>::</operator><name>Unreferenced</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>refState</name> <operator>==</operator> <name>RefState</name><operator>::</operator><name>Unreferenced</name> <operator>&amp;&amp;</operator> <name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getFile</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>numReferencedSymbols</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>refState</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>max</name><argument_list>(<argument><expr><name>refState</name></expr></argument>, <argument><expr><name>newState</name></expr></argument>)</argument_list></call></block></expr>;
}</block>

<name>void</name> <macro><name>unreference</name><argument_list>()</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><name>refState</name> <operator>&gt;</operator> <name>RefState</name><operator>::</operator><name>Unreferenced</name> <operator>&amp;&amp;</operator> <name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getFile</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>numReferencedSymbols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getFile</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>numReferencedSymbols</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

private:
RefState refState : 2</block><empty_stmt>;</empty_stmt></if></if_stmt>
<specifier>const</specifier> <name>bool</name> <name>weakDef</name> <operator>:</operator> <literal type="number">1</literal></block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>tlv</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LazySymbol</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>LazySymbol</name><argument_list>(<argument><expr><name>ArchiveFile</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>LazyKind</name></expr></argument>, <argument><expr><call><name><name>sym</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>, <macro><name>sym</name><argument_list>(<argument>sym</argument>)</argument_list></macro> <expr><block>{}</block>

<name>ArchiveFile</name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ArchiveFile</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>void</name> <call><name>fetchArchiveMember</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyKind</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <name>sym</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<union>union <name>SymbolUnion</name> <block>{
<macro><name>alignas</name><argument_list>(<argument>Defined</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Defined</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>Undefined</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Undefined</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>CommonSymbol</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommonSymbol</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>DylibSymbol</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>d</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DylibSymbol</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>LazySymbol</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>e</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazySymbol</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgT</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <modifier>*</modifier></type><name>replaceSymbol</name><argument_list>(<argument><expr><name>Symbol</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>ArgT</name> <operator>&amp;&amp;</operator><operator>...</operator><name>arg</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SymbolUnion</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SymbolUnion too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>SymbolUnion</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"SymbolUnion not aligned enough"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not a Symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isUsedInRegularObj</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>isUsedInRegularObj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>used</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>sym</name> <init>= <macro><name>new</name> <argument_list>(<argument>s</argument>)</argument_list></macro> <expr><call><name>T</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>ArgT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>isUsedInRegularObj</name></name> <operator>|=</operator> <name>isUsedInRegularObj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>used</name></name> <operator>|=</operator> <name>used</name></expr>;</expr_stmt>
<return>return <expr><name>sym</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

}

std<expr_stmt><expr><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>macho</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toMachOString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
