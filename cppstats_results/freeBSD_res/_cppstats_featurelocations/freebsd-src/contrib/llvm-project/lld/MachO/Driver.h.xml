<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/Driver.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_DRIVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_DRIVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/OptTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>MachO</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>InterfaceFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>PlatformKind</name> <range>: <expr><name>unsigned</name></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DylibFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MachOOptTable</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>OptTable</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MachOOptTable</name><argument_list>()</argument_list></call></expr>;
<expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <call><name>parse</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>argv</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>printHelp</name><argument_list>(<argument>const char *argv0</argument>, <argument>bool showHidden</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>


<enum>enum <block>{
<decl><name>OPT_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTION</name><parameter_list>(<parameter><type><name>_1</name></type></parameter>, <parameter><type><name>_2</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>_4</name></type></parameter>, <parameter><type><name>_5</name></type></parameter>, <parameter><type><name>_6</name></type></parameter>, <parameter><type><name>_7</name></type></parameter>, <parameter><type><name>_8</name></type></parameter>, <parameter><type><name>_9</name></type></parameter>, <parameter><type><name>_10</name></type></parameter>, <parameter><type><name>_11</name></type></parameter>, <parameter><type><name>_12</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Options.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OPTION</name></cpp:undef>
}</block>;</enum>

<function_decl><type><name>void</name></type> <name>parseLCLinkerOption</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>createResponseFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>resolveDylibPath</name><argument_list>(<argument>llvm::StringRef path</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DylibFile</name> <modifier>*</modifier></type><name>loadDylib</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <name>mbref</name></expr></argument>, <argument><expr><name>DylibFile</name> <operator>*</operator><name>umbrella</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <name>isBundleLoader</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>findPathCombination</name><argument_list>(<argument>const llvm::Twine &amp;name</argument>,
<argument>const std::vector&lt;llvm::StringRef&gt; &amp;roots</argument>,
<argument>ArrayRef&lt;llvm::StringRef&gt; extensions = {<literal type="string">""</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>rerootPath</name><argument_list>(<argument>llvm::StringRef path</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>InputFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>loadArchiveMember</name><argument_list>(<argument>MemoryBufferRef</argument>, <argument>uint32_t modTime</argument>,
<argument>StringRef archiveName</argument>,
<argument>bool objCOnly</argument>,
<argument>uint64_t offsetInArchive</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>getModTime</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>printArchiveMemberLoad</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>InputFile</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>PlatformKind</name> <macro><name>removeSimulator</name><argument_list>(<argument>llvm::MachO::PlatformKind platform</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DependencyTracker</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>explicit</name></type> <name>DependencyTracker</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function><type><specifier>inline</specifier> <name>void</name></type> <name>logFileNotFound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>notFounds</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<decl_stmt><decl><type><name>void</name></type> <name>write</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>version</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>InputFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>inputs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>output</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<enum>enum <name>DepOpCode</name> : <type><name>uint8_t</name></type> <block>{

<decl><name>Version</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>Input</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>NotFound</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,

<decl><name>Output</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
}</block>;</enum>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <name>path</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>notFounds</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>DependencyTracker</name> <modifier>*</modifier></type><name>depTracker</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
