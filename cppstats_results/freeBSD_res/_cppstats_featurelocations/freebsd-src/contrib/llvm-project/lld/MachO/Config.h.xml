<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/MachO/Config.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_MACHO_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_MACHO_CONFIG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CachePruning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/GlobPattern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/TextAPI/Architecture.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/TextAPI/Platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/TextAPI/Target.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<struct_decl>struct <name>SymbolPriorityEntry</name>;</struct_decl>

<decl_stmt><decl><type><name>using</name></type> <name>NamePair</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SectionRenameMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>NamePair</name></expr></argument>, <argument><expr><name>NamePair</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SegmentRenameMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<struct>struct <name>PlatformInfo</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>Target</name> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>VersionTuple</name> <name>minimum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>VersionTuple</name> <name>sdk</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>encodeVersion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <operator>&amp;</operator><name>version</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><call><name><name>version</name><operator>.</operator><name>getMajor</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">020</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name><name>version</name><operator>.</operator><name>getMinor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueOr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">010</literal><operator>)</operator> <operator>|</operator>
<call><name><name>version</name><operator>.</operator><name>getSubminor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueOr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>NamespaceKind</name> <block>{<block_content>
<expr_stmt><expr><name>twolevel</name></expr><operator>,</operator>
<expr><name>flat</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>UndefinedSymbolTreatment</name> <block>{<block_content>
<expr_stmt><expr><name>unknown</name></expr><operator>,</operator>
<expr><name>error</name></expr><operator>,</operator>
<expr><name>warning</name></expr><operator>,</operator>
<expr><name>suppress</name></expr><operator>,</operator>
<expr><name>dynamic_lookup</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ICFLevel</name> <block>{<block_content>
<expr_stmt><expr><name>unknown</name></expr><operator>,</operator>
<expr><name>none</name></expr><operator>,</operator>
<expr><name>safe</name></expr><operator>,</operator>
<expr><name>all</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>SectionAlign</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>segName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>sectName</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>align</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SegmentProtection</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxProt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initProt</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolPatterns</name> <block>{<block_content>
<label><name>public</name>:</label>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashStringRef</name></expr></argument>&gt;</argument_list></name> <name>literals</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>GlobPattern</name></expr></argument>&gt;</argument_list></name> <name>globs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>literals</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>globs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>insert</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>symbolName</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>matchLiteral</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>symbolName</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>matchGlob</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>symbolName</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>symbolName</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>Configuration</name> <block>{
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasReexports</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>allLoad</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>applicationExtension</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>archMultiple</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exportDynamic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>forceLoadObjC</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>forceLoadSwift</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>staticLink</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>implicitDylibs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isPic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>headerPadMaxInstallNames</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoNewPassManager</name> <init>= <expr><name>LLVM_ENABLE_NEW_PASS_MANAGER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>markDeadStrippableDylib</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>printDylibSearch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>printEachFile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>printWhyLoad</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>searchDylibsFirst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>saveTemps</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>adhocCodesign</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitFunctionStarts</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitBitcodeBundle</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitDataInCodeInfo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitEncryptionInfo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>timeTraceEnabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dataConst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dedupLiterals</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>headerPad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dylibCompatibilityVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dylibCurrentVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>timeTraceGranularity</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>optimize</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>progName</name></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>outputFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>finalOutput</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>installName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>mapFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoObjPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>thinLTOJobs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>umbrella</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ltoo</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CachePruningPolicy</name> <name>thinLTOCachePolicy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>thinLTOCacheDir</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>deadStripDylibs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>demangle</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>deadStrip</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PlatformInfo</name></type> <name>platformInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NamespaceKind</name></type> <name>namespaceKind</name> <init>= <expr><name>NamespaceKind</name><operator>::</operator><name>twolevel</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UndefinedSymbolTreatment</name></type> <name>undefinedSymbolTreatment</name> <init>=
<expr><name>UndefinedSymbolTreatment</name><operator>::</operator><name>error</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICFLevel</name></type> <name>icfLevel</name> <init>= <expr><name>ICFLevel</name><operator>::</operator><name>none</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>HeaderFileType</name> <name>outputType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>systemLibraryRoots</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>librarySearchPaths</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>frameworkSearchPaths</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>runtimePaths</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>astPaths</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>explicitUndefineds</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>explicitDynamicLookups</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionAlign</name></expr></argument>&gt;</argument_list></name> <name>sectionAlignments</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SegmentProtection</name></expr></argument>&gt;</argument_list></name> <name>segmentProtections</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>SymbolPriorityEntry</name></expr></argument>&gt;</argument_list></name> <name>priorities</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SectionRenameMap</name></type> <name>sectionRenameMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SegmentRenameMap</name></type> <name>segmentRenameMap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SymbolPatterns</name></type> <name>exportedSymbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolPatterns</name></type> <name>unexportedSymbols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>zeroModTime</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>Architecture</name> <macro><name>arch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>platformInfo</name><operator>.</operator><name>target</name><operator>.</operator><name>Arch</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>PlatformKind</name> <macro><name>platform</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>platformInfo</name><operator>.</operator><name>target</name><operator>.</operator><name>Platform</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>







<struct>struct <name>SymbolPriorityEntry</name> <block>{


<decl_stmt><decl><type><name>size_t</name></type> <name>anyObjectFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>objectFiles</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Configuration</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
