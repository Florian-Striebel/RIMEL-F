<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/LayoutPass.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_LAYOUT_PASS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_LAYOUT_PASS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Pass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Simple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedAtom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SimpleFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>LayoutPass</name> <range>: <expr><name>public</name> <name>Pass</name> <block>{
<expr><name>public</name><operator>:</operator>
struct <name>SortKey</name> <block>{
<macro><name>SortKey</name><argument_list>(<argument>OwningAtomPtr&lt;DefinedAtom&gt; &amp;&amp;atom</argument>,
<argument>const DefinedAtom *root</argument>, <argument>uint64_t override</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>_atom</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>_root</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>, <macro><name>_override</name><argument_list>(<argument>override</argument>)</argument_list></macro> <expr><block>{}</block>
<name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <name>_atom</name></expr>;
<expr><specifier>const</specifier> <name>DefinedAtom</name> <operator>*</operator><name>_root</name></expr>;
<expr><name>uint64_t</name> <name>_override</name></expr>;



<expr><call><name>SortKey</name><argument_list>(<argument><expr><name>SortKey</name> <operator>&amp;&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>_atom</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>_atom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>_root</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>_root</name></name></expr></argument>)</argument_list></call></expr>,
<macro><name>_override</name><argument_list>(<argument>key._override</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>key</name><operator>.</operator><name>_root</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<name>SortKey</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>SortKey</name> <operator>&amp;&amp;</operator><name>key</name><operator>)</operator> <block>{
<expr><name>_atom</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>_atom</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>_root</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>_root</name></name></expr>;
<expr><name><name>key</name><operator>.</operator><name>_root</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>_override</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>_override</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<call><name>SortKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SortKey</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>SortKey</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <operator>(</operator><specifier>const</specifier> <name>DefinedAtom</name> <operator>*</operator><name>left</name>, <specifier>const</specifier> <name>DefinedAtom</name> <operator>*</operator><name>right</name>,
<name>bool</name> <operator>&amp;</operator><name>leftBeforeRight</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>SortOverride</name></expr>;</expr_stmt></typedef>

<macro><name>LayoutPass</name><argument_list>(<argument>const Registry &amp;registry</argument>, <argument>SortOverride sorter</argument>)</argument_list></macro></block></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>perform</name><argument_list>(<argument>SimpleFile &amp;mergedFile</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>LayoutPass</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>private</name>:</label>


<decl_stmt><decl><type><name>void</name></type> <name>buildFollowOnTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>File</name><operator>::</operator><name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>buildOrdinalOverrideMap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>File</name><operator>::</operator><name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Registry</name> <modifier>&amp;</modifier></type><name>_registry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SortOverride</name></type> <name>_customSorter</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DefinedAtom</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>DefinedAtom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>AtomToAtomT</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DefinedAtom</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>AtomToOrdinalT</name></expr>;</expr_stmt></typedef>






<decl_stmt><decl><type><name>AtomToAtomT</name></type> <name>_followOnNexts</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>AtomToAtomT</name></type> <name>_followOnRoots</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AtomToOrdinalT</name></type> <name>_ordinalOverrideMap</name></decl>;</decl_stmt>


<function_decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>findAtomFollowedBy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>targetAtom</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>checkAllPrevAtomsZeroSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>targetAtom</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setChainRoot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>targetAtom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SortKey</name></expr></argument>&gt;</argument_list></name> <macro><name>decorate</name><argument_list>(<argument>File::AtomRange&lt;DefinedAtom&gt; &amp;atomRange</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>undecorate</name><argument_list>(<argument><expr><name>File</name><operator>::</operator><name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>atomRange</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SortKey</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>keys</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>checkFollowonChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>File</name><operator>::</operator><name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
