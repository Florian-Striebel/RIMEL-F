<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/File.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Atoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DebugInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MachONormalizedFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/SharedLibraryFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Simple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/TextAPI/InterfaceFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/TextAPI/TextAPIReader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>lld</name><operator>::</operator><name>mach_o</name><operator>::</operator><name>normalized</name><operator>::</operator><name>Section</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MachOFile</name> <range>: <expr><name>public</name> <name>SimpleFile</name> <block>{
<expr><name>public</name><operator>:</operator>


<call><name>MachOFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>, <argument><expr><name>MachOLinkingContext</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SimpleFile</name><argument_list>(<argument><expr><call><name><name>mb</name><operator>-&gt;</operator><name>getBufferIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>File</name><operator>::</operator><name>kindMachObject</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_mb</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>_ctx</name><argument_list>(<argument>ctx</argument>)</argument_list></macro> <expr><block>{}</block>


<macro><name>MachOFile</name><argument_list>(<argument>StringRef path</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>SimpleFile</name><argument_list>(<argument>path</argument>, <argument>File::kindMachObject</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>addDefinedAtom</name><argument_list>(<argument>StringRef name</argument>, <argument>Atom::Scope scope</argument>,
<argument>DefinedAtom::ContentType type</argument>, <argument>DefinedAtom::Merge merge</argument>,
<argument>uint64_t sectionOffset</argument>, <argument>uint64_t contentSize</argument>, <argument>bool thumb</argument>,
<argument>bool noDeadStrip</argument>, <argument>bool copyRefs</argument>,
<argument>const Section *inSection</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>sectionOffset</name><operator>+</operator><name>contentSize</name> <operator>&lt;=</operator> <call><name><name>inSection</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>content</name> <operator>=</operator> <call><name><name>inSection</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>slice</name></name><argument_list>(<argument><expr><name>sectionOffset</name></expr></argument>,
<argument><expr><name>contentSize</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>copyRefs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
DefinedAtom::Alignment align(
inSection-&gt;alignment</block><operator>,</operator>
<expr_stmt><expr><name>sectionOffset</name> <operator>%</operator> <name><name>inSection</name><operator>-&gt;</operator><name>alignment</name></name></expr></expr_stmt></if></if_stmt>)</block></expr>;
<expr><name>auto</name> <operator>*</operator><name>atom</name> <operator>=</operator>
<macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>MachODefinedAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>merge</name></expr></argument>,
<argument><expr><name>thumb</name></expr></argument>, <argument><expr><name>noDeadStrip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtomForSection</name><argument_list>(<argument><expr><name>inSection</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>sectionOffset</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>addDefinedAtomInCustomSection</name><argument_list>(<argument>StringRef name</argument>, <argument>Atom::Scope scope</argument>,
<argument>DefinedAtom::ContentType type</argument>, <argument>DefinedAtom::Merge merge</argument>,
<argument>bool thumb</argument>, <argument>bool noDeadStrip</argument>, <argument>uint64_t sectionOffset</argument>,
<argument>uint64_t contentSize</argument>, <argument>StringRef sectionName</argument>,
<argument>bool copyRefs</argument>, <argument>const Section *inSection</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>sectionOffset</name><operator>+</operator><name>contentSize</name> <operator>&lt;=</operator> <call><name><name>inSection</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>content</name> <operator>=</operator> <call><name><name>inSection</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>slice</name></name><argument_list>(<argument><expr><name>sectionOffset</name></expr></argument>,
<argument><expr><name>contentSize</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>copyRefs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sectionName</name> <operator>=</operator> <call><name><name>sectionName</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
DefinedAtom::Alignment align(
inSection-&gt;alignment</block><operator>,</operator>
<expr_stmt><expr><name>sectionOffset</name> <operator>%</operator> <name><name>inSection</name><operator>-&gt;</operator><name>alignment</name></name></expr></expr_stmt></if></if_stmt>)</block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>atom</name> <operator>=</operator>
<macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>MachODefinedCustomSectionAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>merge</name></expr></argument>, <argument><expr><name>thumb</name></expr></argument>,
<argument><expr><name>noDeadStrip</name></expr></argument>, <argument><expr><name>content</name></expr></argument>,
<argument><expr><name>sectionName</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAtomForSection</name><argument_list>(<argument><expr><name>inSection</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>sectionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>addZeroFillDefinedAtom</name><argument_list>(<argument><expr><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><name>Atom</name><operator>::</operator><name>Scope</name> <name>scope</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>sectionOffset</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>size</name></expr></argument>,
<argument><expr><name>bool</name> <name>noDeadStrip</name></expr></argument>, <argument><expr><name>bool</name> <name>copyRefs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Section</name> <operator>*</operator><name>inSection</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>copyRefs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>DefinedAtom</name><operator>::</operator><name>Alignment</name> <call><name>align</name><argument_list>(
<argument><expr><name><name>inSection</name><operator>-&gt;</operator><name>alignment</name></name></expr></argument>,
<argument><expr><name>sectionOffset</name> <operator>%</operator> <name><name>inSection</name><operator>-&gt;</operator><name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>DefinedAtom</name><operator>::</operator><name>ContentType</name> <name>type</name> <operator>=</operator> <name>DefinedAtom</name><operator>::</operator><name>typeUnknown</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>inSection</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_ZEROFILL</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DefinedAtom</name><operator>::</operator><name>typeZeroFill</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_THREAD_LOCAL_ZEROFILL</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DefinedAtom</name><operator>::</operator><name>typeTLVInitialZeroFill</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unrecognized zero-fill section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>auto</name> <operator>*</operator><name>atom</name> <operator>=</operator>
<macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>MachODefinedAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>noDeadStrip</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAtomForSection</name><argument_list>(<argument><expr><name>inSection</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>sectionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>addUndefinedAtom</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copyRefs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>copyRefs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>atom</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>SimpleUndefinedAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAtom</name><argument_list>(<argument><expr><operator>*</operator><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_undefAtoms</name><index>[<expr><name>name</name></expr>]</index></name> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>addTentativeDefAtom</name><argument_list>(<argument><expr><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><name>Atom</name><operator>::</operator><name>Scope</name> <name>scope</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>size</name></expr></argument>,
<argument><expr><name>DefinedAtom</name><operator>::</operator><name>Alignment</name> <name>align</name></expr></argument>, <argument><expr><name>bool</name> <name>copyRefs</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>copyRefs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>atom</name> <operator>=</operator>
<macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>MachOTentativeDefAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAtom</name><argument_list>(<argument><expr><operator>*</operator><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_undefAtoms</name><index>[<expr><name>name</name></expr>]</index></name> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<function><type><name>MachODefinedAtom</name> <modifier>*</modifier></type><name>findAtomCoveringAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Section</name> <modifier>&amp;</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>offsetInSect</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>foundOffsetAtom</name><init>=<expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>pos</name> <init>= <expr><call><name><name>_sectionAtoms</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <call><name><name>_sectionAtoms</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>vec</name> <init>= <expr><name><name>pos</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offsetInSect</name> <operator>&lt;</operator> <call><name><name>section</name><operator>.</operator><name>content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>atomPos</name> <init>= <expr><name>std</name><operator>::</operator><macro><name>lower_bound</name><argument_list>(<argument>vec.begin()</argument>, <argument>vec.end()</argument>, <argument>offsetInSect</argument>,
<argument>[offsetInSect](const SectionOffsetAndAtom &amp;ao,
uint64_t targetAddr) -&gt; bool {



uint64_t atomsEndOffset = ao.offset+ao.atom-&gt;rawContent().size();
return (atomsEndOffset &lt;= offsetInSect);
}</argument>)</argument_list></macro></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>atomPos</name> <operator>==</operator> <call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>foundOffsetAtom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>foundOffsetAtom</name> <operator>=</operator> <name>offsetInSect</name> <operator>-</operator> <name><name>atomPos</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>atomPos</name><operator>-&gt;</operator><name>atom</name></name></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><specifier>const</specifier> <name>lld</name><operator>::</operator><name>Atom</name> <operator>*</operator><macro><name>findUndefAtom</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>pos</name> <operator>=</operator> <call><name><name>_undefAtoms</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <call><name><name>_undefAtoms</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name><name>pos</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><name>MachODefinedAtom</name><operator>*</operator> <name>atom</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>DefinedAtomVisitor</name></expr>;</expr_stmt></typedef>

<function><type><name>void</name></type> <name>eachDefinedAtom</name><parameter_list>(<parameter><decl><type><name>DefinedAtomVisitor</name></type> <name>vistor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>sectAndAtoms</name> <operator>:</operator> <name>_sectionAtoms</name></expr></init>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>offAndAtom</name> <operator>:</operator> <name><name>sectAndAtoms</name><operator>.</operator><name>second</name></name></expr></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>vistor</name><argument_list>(<argument><expr><name><name>offAndAtom</name><operator>.</operator><name>atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>MachODefinedAtom</name> <operator>*</operator><name>atom</name>, <name>uint64_t</name> <name>offset</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>SectionAtomVisitor</name></expr>;</expr_stmt></typedef>

<function><type><name>void</name></type> <name>eachAtomInSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Section</name> <modifier>&amp;</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>SectionAtomVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>pos</name> <init>= <expr><call><name><name>_sectionAtoms</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <call><name><name>_sectionAtoms</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>vec</name> <init>= <expr><name><name>pos</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>offAndAtom</name> <operator>:</operator> <name>vec</name></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>visitor</name><argument_list>(<argument><expr><name><name>offAndAtom</name><operator>.</operator><name>atom</name></name></expr></argument>, <argument><expr><name><name>offAndAtom</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>Arch</name> <macro><name>arch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_arch</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setArch</name><argument_list>(<argument><expr><name>MachOLinkingContext</name><operator>::</operator><name>Arch</name> <name>arch</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>_arch</name> <operator>=</operator> <name>arch</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>OS</name> <macro><name>OS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_os</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setOS</name><argument_list>(<argument><expr><name>MachOLinkingContext</name><operator>::</operator><name>OS</name> <name>os</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>_os</name> <operator>=</operator> <name>os</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>ObjCConstraint</name> <macro><name>objcConstraint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_objcConstraint</name></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setObjcConstraint</name><argument_list>(<argument><expr><name>MachOLinkingContext</name><operator>::</operator><name>ObjCConstraint</name> <name>v</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>_objcConstraint</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>minVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_minVersion</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setMinVersion</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_minVersion</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>LoadCommandType</name> <macro><name>minVersionLoadCommandKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_minVersionLoadCommandKind</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setMinVersionLoadCommandKind</name><parameter_list>(<parameter><decl><type><name>LoadCommandType</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_minVersionLoadCommandKind</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uint32_t</name> <macro><name>swiftVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_swiftVersion</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setSwiftVersion</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_swiftVersion</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>subsectionsViaSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_flags</name> <operator>&amp;</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_SUBSECTIONS_VIA_SYMBOLS</name></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setFlags</name><argument_list>(<argument><expr><name>normalized</name><operator>::</operator><name>FileFlags</name> <name>v</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>_flags</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>File</name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>F</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>File</name><operator>::</operator><name>kindMachObject</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>setDebugInfo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DebugInfo</name></expr></argument>&gt;</argument_list></name> <name>debugInfo</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>_debugInfo</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>debugInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>DebugInfo</name><operator>*</operator> <macro><name>debugInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>_debugInfo</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DebugInfo</name></expr></argument>&gt;</argument_list></name> <macro><name>takeDebugInfo</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>_debugInfo</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>doParse</name><argument_list>()</argument_list></macro> <name>override</name> <block>{

<expr><name>auto</name> <name>normFile</name> <operator>=</operator> <name>normalized</name><operator>::</operator><call><name>readBinary</name><argument_list>(<argument><expr><name>_mb</name></expr></argument>, <argument><expr><call><name><name>_ctx</name><operator>-&gt;</operator><name>arch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ec</name> <init>= <expr><call><name><name>normFile</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>errorToErrorCode</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ec</name> <init>= <expr><name>normalized</name><operator>::</operator><call><name>normalizedObjectToAtoms</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>normFile</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>errorToErrorCode</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>error_code</name><argument_list>()</argument_list></call></expr>;</return>
}

private:
<struct>struct <name>SectionOffsetAndAtom</name> <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>MachODefinedAtom</name> <modifier>*</modifier></type><name>atom</name></decl>;</decl_stmt> }</block>;</struct>

<function><type><name>void</name></type> <name>addAtomForSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Section</name> <modifier>*</modifier></type><name>inSection</name></decl></parameter>, <parameter><decl><type><name>MachODefinedAtom</name><modifier>*</modifier></type> <name>atom</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>sectionOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SectionOffsetAndAtom</name></type> <name>offAndAtom</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>offAndAtom</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>sectionOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offAndAtom</name><operator>.</operator><name>atom</name></name> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>_sectionAtoms</name><index>[<expr><name>inSection</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>offAndAtom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addAtom</name><argument_list>(<argument><expr><operator>*</operator><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>normalized</name><operator>::</operator><name>Section</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionOffsetAndAtom</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>SectionToAtoms</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>lld</name><operator>::</operator><name>Atom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>NameToAtom</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>_mb</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MachOLinkingContext</name> <modifier>*</modifier></type><name>_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionToAtoms</name></type> <name>_sectionAtoms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NameToAtom</name></type> <name>_undefAtoms</name></decl>;</decl_stmt>
<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>Arch</name> <name>_arch</name> <operator>=</operator> <name>MachOLinkingContext</name><operator>::</operator><name>arch_unknown</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>OS</name> <name>_os</name> <operator>=</operator> <name>MachOLinkingContext</name><operator>::</operator><name>OS</name><operator>::</operator><name>unknown</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>_minVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LoadCommandType</name></type> <name>_minVersionLoadCommandKind</name> <init>= <expr><operator>(</operator><name>LoadCommandType</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>ObjCConstraint</name> <name>_objcConstraint</name> <operator>=</operator>
<name>MachOLinkingContext</name><operator>::</operator><name>objc_unknown</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>_swiftVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>normalized</name><operator>::</operator><name>FileFlags</name> <name>_flags</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_SUBSECTIONS_VIA_SYMBOLS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DebugInfo</name></expr></argument>&gt;</argument_list></name> <name>_debugInfo</name></expr>;</expr_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>MachODylibFile</name> <range>: <expr><name>public</name> <name>SharedLibraryFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MachODylibFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>, <argument><expr><name>MachOLinkingContext</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SharedLibraryFile</name><argument_list>(<argument><expr><call><name><name>mb</name><operator>-&gt;</operator><name>getBufferIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_mb</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>_ctx</name><argument_list>(<argument>ctx</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>MachODylibFile</name><argument_list>(<argument>StringRef path</argument>)</argument_list></macro> <operator>:</operator> <macro><name>SharedLibraryFile</name><argument_list>(<argument>path</argument>)</argument_list></macro> <block>{}</block>

<name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>exports</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{




<return>return <expr><call><name>exports</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>_installName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>void</name> <macro><name>addExportedSymbol</name><argument_list>(<argument>StringRef name</argument>, <argument>bool weakDef</argument>, <argument>bool copyRefs</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>copyRefs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
AtomAndFlags info(weakDef</block></if></if_stmt>)</block></expr>;
<expr><name><name>_nameToAtom</name><index>[<expr><name>name</name></expr>]</index></name> <operator>=</operator> <name>info</name></expr>;
}</block>

<name>void</name> <macro><name>addReExportedDylib</name><argument_list>(<argument>StringRef dylibPath</argument>)</argument_list></macro> <block>{
<expr><call><name><name>_reExportedDylibs</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>dylibPath</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>StringRef</name> <macro><name>installName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_installName</name></expr>;</return> }</block></expr></range></decl></decl_stmt>
<function><type><name>uint32_t</name></type> <name>currentVersion</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>_currentVersion</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uint32_t</name></type> <name>compatVersion</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>_compatVersion</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>setInstallName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_installName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setCompatVersion</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_compatVersion</name> <operator>=</operator> <name>version</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setCurrentVersion</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_currentVersion</name> <operator>=</operator> <name>version</name></expr>;</expr_stmt> </block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>MachODylibFile</name> <operator>*</operator><operator>(</operator><name>StringRef</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>FindDylib</name></expr>;</expr_stmt></typedef>

<function><type><name>void</name></type> <name>loadReExportedDylibs</name><parameter_list>(<parameter><decl><type><name>FindDylib</name></type> <name>find</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>ReExportedDylib</name> <modifier>&amp;</modifier></type><name>entry</name> <range>: <expr><name>_reExportedDylibs</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>.</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>file</name></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getDSOName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_installName</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>doParse</name><argument_list>()</argument_list></macro> <name>override</name> <block>{

<expr><name>auto</name> <name>normFile</name> <operator>=</operator> <name>normalized</name><operator>::</operator><call><name>readBinary</name><argument_list>(<argument><expr><name>_mb</name></expr></argument>, <argument><expr><call><name><name>_ctx</name><operator>-&gt;</operator><name>arch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ec</name> <init>= <expr><call><name><name>normFile</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>errorToErrorCode</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ec</name> <init>= <expr><name>normalized</name><operator>::</operator><call><name>normalizedDylibToAtoms</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>normFile</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>errorToErrorCode</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>error_code</name><argument_list>()</argument_list></call></expr>;</return>
}

protected:
<decl_stmt><decl><type><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name></type> <name>exports</name><argument_list>(<argument><expr><name>StringRef</name> <name>name</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>installName</name></expr></argument>)</argument_list> const <block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>entry</name> <init>= <expr><call><name><name>_nameToAtom</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <call><name><name>_nameToAtom</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>atom</name></name> <operator>&amp;&amp;</operator> <literal type="string">"Duplicate shared library export"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>weakDef</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>weakDef</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>atom</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>MachOSharedLibraryAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>installName</name></expr></argument>,
<argument><expr><name>weakDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>atom</name></name> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<return>return <expr><name>atom</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name>ReExportedDylib</name> <modifier>&amp;</modifier></type><name>dylib</name> <range>: <expr><name>_reExportedDylibs</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dylib</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>atom</name> <init>= <expr><call><name><name>dylib</name><operator>.</operator><name>file</name><operator>-&gt;</operator><name>exports</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>installName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>atom</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>atom</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<struct>struct <name>ReExportedDylib</name> <block>{
<macro><name>ReExportedDylib</name><argument_list>(<argument>StringRef p</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>path</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>file</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{ }</block>
<macro><name>ReExportedDylib</name><argument_list>(<argument>StringRef p</argument>, <argument>MachODylibFile *file</argument>)</argument_list></macro> <operator>:</operator> <call><name>path</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>file</name><argument_list>(<argument>file</argument>)</argument_list></macro> <expr><block>{ }</block>
<name>StringRef</name> <name>path</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MachODylibFile</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>AtomAndFlags</name> <block>{
<expr_stmt><expr><call><name>AtomAndFlags</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>atom</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>weakDef</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{ }</block>
<macro><name>AtomAndFlags</name><argument_list>(<argument>bool weak</argument>)</argument_list></macro> <operator>:</operator> <call><name>atom</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>weakDef</name><argument_list>(<argument>weak</argument>)</argument_list></macro> <expr><block>{ }</block>
<specifier>const</specifier> <name>SharedLibraryAtom</name> <operator>*</operator><name>atom</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>weakDef</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>_mb</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MachOLinkingContext</name> <modifier>*</modifier></type><name>_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>_installName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>_currentVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>_compatVersion</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ReExportedDylib</name></expr></argument>&gt;</argument_list></name> <name>_reExportedDylibs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>AtomAndFlags</name></expr></argument>&gt;</argument_list></name> <name>_nameToAtom</name></expr>;</expr_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>TAPIFile</name> <range>: <expr><name>public</name> <name>MachODylibFile</name> <block>{
<expr><name>public</name><operator>:</operator>

<call><name>TAPIFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>, <argument><expr><name>MachOLinkingContext</name> <operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MachODylibFile</name><argument_list>(<argument>std::move(mb)</argument>, <argument>ctx</argument>)</argument_list></macro> <block>{}</block>

<name>std</name><operator>::</operator><name>error_code</name> <macro><name>doParse</name><argument_list>()</argument_list></macro> <name>override</name> <block>{

<expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>InterfaceFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>TextAPIReader</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><operator>*</operator><name>_mb</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_error_code</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>errc</name><operator>::</operator><name>invalid_argument</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>InterfaceFile</name></expr></argument>&gt;</argument_list></name> <name>interface</name><block>{<expr><name>std</name><operator>::</operator><macro><name>move</name><argument_list>(<argument>*result</argument>)</argument_list></macro></expr>}</block></block></expr>;
<return>return <expr><call><name>loadFromInterface</name><argument_list>(<argument><expr><operator>*</operator><name>interface</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>loadFromInterface</name><argument_list>(<argument>llvm::MachO::InterfaceFile &amp;interface</argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>Architecture</name> <name>arch</name></expr>;
<switch>switch<condition>(<expr><call><name><name>_ctx</name><operator>-&gt;</operator><name>arch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MachOLinkingContext</name><operator>::</operator><name>arch_x86</name></expr>:</case>
<expr_stmt><expr><name>arch</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>AK_i386</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MachOLinkingContext</name><operator>::</operator><name>arch_x86_64</name></expr>:</case>
<expr_stmt><expr><name>arch</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>AK_x86_64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MachOLinkingContext</name><operator>::</operator><name>arch_arm64</name></expr>:</case>
<expr_stmt><expr><name>arch</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>AK_arm64</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_error_code</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>errc</name><operator>::</operator><name>invalid_argument</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>

<call><name>setInstallName</name><argument_list>(<argument><expr><call><name><name>interface</name><operator>.</operator><name>getInstallName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>copy</name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>symbol</name> <range>: <expr><call><name><name>interface</name><operator>.</operator><name>symbols</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>symbol</name><operator>-&gt;</operator><name>getArchitectures</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addExportedSymbol</name><argument_list>(<argument><expr><call><name><name>symbol</name><operator>-&gt;</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>symbol</name><operator>-&gt;</operator><name>isWeakDefined</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>InterfaceFileRef</name> <operator>&amp;</operator><name>reexport</name> <operator>:</operator>
<call><name><name>interface</name><operator>.</operator><name>reexportedLibraries</name></name><argument_list>()</argument_list></call></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReExportedDylib</name><argument_list>(<argument><expr><call><name><name>reexport</name><operator>.</operator><name>getInstallName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>copy</name><argument_list>(<argument><expr><call><name>allocator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>document</name> <range>: <expr><call><name><name>interface</name><operator>.</operator><name>documents</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>reexport</name> <operator>:</operator> <name>_reExportedDylibs</name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reexport</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <call><name><name>document</name><operator>-&gt;</operator><name>getInstallName</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>reexport</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_ownedFiles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>TAPIFile</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>MemoryBuffer</name><operator>::</operator><call><name>getMemBuffer</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name><name>_mb</name><operator>-&gt;</operator><name>getBufferIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reexport</name><operator>.</operator><name>file</name></name> <operator>=</operator> <call><name><name>_ownedFiles</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <name>err</name> <operator>=</operator> <call><name><name>_ownedFiles</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>loadFromInterface</name><argument_list>(<argument><expr><operator>*</operator><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>std</name><operator>::</operator><call><name>error_code</name><argument_list>()</argument_list></call></expr>;</return>
}

std<expr_stmt><expr><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TAPIFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>_ownedFiles</name></expr>;</expr_stmt>
};

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
