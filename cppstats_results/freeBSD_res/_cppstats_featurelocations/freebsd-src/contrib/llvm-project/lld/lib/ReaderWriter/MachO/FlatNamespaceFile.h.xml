<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/FlatNamespaceFile.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_FLAT_NAMESPACE_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_FLAT_NAMESPACE_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Atoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/SharedLibraryFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/ReaderWriter/MachOLinkingContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Debug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>FlatNamespaceFile</name> <range>: <expr><name>public</name> <name>SharedLibraryFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>FlatNamespaceFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MachOLinkingContext</name> <operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SharedLibraryFile</name><argument_list>(<argument><literal type="string">"flat namespace"</literal></argument>)</argument_list></macro> <block>{ }</block>

<name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>exports</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <expr><call><name>MachOSharedLibraryAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getDSOName</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>getDSOName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"flat-namespace"</literal></expr>;</return> }</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>defined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noDefinedAtoms</name></expr>;</return>
}</block>
<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>undefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noUndefinedAtoms</name></expr>;</return>
}</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>sharedLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noSharedLibraryAtoms</name></expr>;</return>
}</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>absolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noAbsoluteAtoms</name></expr>;</return>
}</block>

<name>void</name> <macro><name>clearAtoms</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>_noDefinedAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_noUndefinedAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_noSharedLibraryAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_noAbsoluteAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
