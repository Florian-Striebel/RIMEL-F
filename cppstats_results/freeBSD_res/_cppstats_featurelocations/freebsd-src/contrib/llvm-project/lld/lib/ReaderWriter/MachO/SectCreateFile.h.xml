<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/SectCreateFile.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_SECTCREATE_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_SECTCREATE_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/DefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Simple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/ReaderWriter/MachOLinkingContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>SectCreateFile</name> <range>: <expr><name>public</name> <name>File</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>class</name> <name>SectCreateAtom</name> <operator>:</operator> <name>public</name> <name>SimpleDefinedAtom</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>SectCreateAtom</name><argument_list>(<argument>const File &amp;file</argument>, <argument>StringRef segName</argument>, <argument>StringRef sectName</argument>,
<argument>std::unique_ptr&lt;MemoryBuffer&gt; content</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SimpleDefinedAtom</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_combinedName</name><argument_list>(<argument><expr><operator>(</operator><name>segName</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>sectName</name><operator>)</operator><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>_content</name><argument_list>(<argument>std::move(content)</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>SectCreateAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>uint64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>_content</name><operator>-&gt;</operator><name>getBufferSize</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>Scope</name> <macro><name>scope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>scopeGlobal</name></expr>;</return> }</block>

<name>ContentType</name> <macro><name>contentType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>typeSectCreate</name></expr>;</return> }</block>

<name>SectionChoice</name> <macro><name>sectionChoice</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>sectionCustomRequired</name></expr>;</return> }</block>

<name>StringRef</name> <macro><name>customSectionName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_combinedName</name></expr>;</return> }</block>

<name>DeadStripKind</name> <macro><name>deadStrip</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>deadStripNever</name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <macro><name>rawContent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>data</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>_content</name><operator>-&gt;</operator><name>getBufferStart</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name><name>_content</name><operator>-&gt;</operator><name>getBufferSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>segmentName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_segName</name></expr>;</return> }</block>
<name>StringRef</name> <macro><name>sectionName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_sectName</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>_combinedName</name></expr>;
<expr><name>StringRef</name> <name>_segName</name></expr>;
<expr><name>StringRef</name> <name>_sectName</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>_content</name></expr>;
}</block></expr>;

<expr><call><name>SectCreateFile</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>File</name><argument_list>(<argument><literal type="string">"sectcreate"</literal></argument>, <argument>kindSectCreateObject</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>addSection</name><argument_list>(<argument>StringRef seg</argument>, <argument>StringRef sect</argument>,
<argument>std::unique_ptr&lt;MemoryBuffer&gt; content</argument>)</argument_list></macro> <block>{
<expr><call><name><name>_definedAtoms</name><operator>.</operator><name>push_back</name></name><argument_list>(
<argument><expr><macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>SectCreateAtom</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>sect</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>defined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_definedAtoms</name></expr>;</return>
}</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>undefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noUndefinedAtoms</name></expr>;</return>
}</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>sharedLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noSharedLibraryAtoms</name></expr>;</return>
}</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>absolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noAbsoluteAtoms</name></expr>;</return>
}</block>

<name>void</name> <macro><name>clearAtoms</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>_definedAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_noUndefinedAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_noSharedLibraryAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_noAbsoluteAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <name>_definedAtoms</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
