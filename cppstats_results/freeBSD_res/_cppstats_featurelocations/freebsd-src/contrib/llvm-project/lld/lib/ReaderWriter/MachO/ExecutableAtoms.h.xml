<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/ExecutableAtoms.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_EXECUTABLE_ATOMS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_EXECUTABLE_ATOMS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Atoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"File.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/DefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/LinkingContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Reference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Simple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/UndefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/ReaderWriter/MachOLinkingContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>CEntryFile</name> <range>: <expr><name>public</name> <name>SimpleFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CEntryFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MachOLinkingContext</name> <operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SimpleFile</name><argument_list>(<argument><expr><literal type="string">"C entry"</literal></expr></argument>, <argument><expr><name>kindCEntryObject</name></expr></argument>)</argument_list></call></expr>,
<macro><name>_undefMain</name><argument_list>(<argument>*this</argument>, <argument>context.entrySymbolName()</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>this</name><operator>-&gt;</operator><name>addAtom</name></name><argument_list>(<argument><expr><name>_undefMain</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>SimpleUndefinedAtom</name> <name>_undefMain</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>StubHelperFile</name> <range>: <expr><name>public</name> <name>SimpleFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StubHelperFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MachOLinkingContext</name> <operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SimpleFile</name><argument_list>(<argument><expr><literal type="string">"stub runtime"</literal></expr></argument>, <argument><expr><name>kindStubHelperObject</name></expr></argument>)</argument_list></call></expr>,
<macro><name>_undefBinder</name><argument_list>(<argument>*this</argument>, <argument>context.binderSymbolName()</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>this</name><operator>-&gt;</operator><name>addAtom</name></name><argument_list>(<argument><expr><name>_undefBinder</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>SimpleUndefinedAtom</name> <name>_undefBinder</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>MachHeaderAliasFile</name> <range>: <expr><name>public</name> <name>SimpleFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MachHeaderAliasFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MachOLinkingContext</name> <operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SimpleFile</name><argument_list>(<argument><literal type="string">"mach_header symbols"</literal></argument>, <argument>kindHeaderObject</argument>)</argument_list></macro> <block>{
<expr><name>StringRef</name> <name>machHeaderSymbolName</name></expr>;
<expr><name>DefinedAtom</name><operator>::</operator><name>Scope</name> <name>symbolScope</name> <operator>=</operator> <name>DefinedAtom</name><operator>::</operator><name>scopeLinkageUnit</name></expr>;
<expr><name>StringRef</name> <name>dsoHandleName</name></expr>;
<switch>switch <condition>(<expr><call><name><name>context</name><operator>.</operator><name>outputMachOType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_OBJECT</name></expr>:</case>
<expr_stmt><expr><name>machHeaderSymbolName</name> <operator>=</operator> <literal type="string">"__mh_object_header"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_EXECUTE</name></expr>:</case>
<expr_stmt><expr><name>machHeaderSymbolName</name> <operator>=</operator> <literal type="string">"__mh_execute_header"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbolScope</name> <operator>=</operator> <name>DefinedAtom</name><operator>::</operator><name>scopeGlobal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dsoHandleName</name> <operator>=</operator> <literal type="string">"___dso_handle"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_FVMLIB</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"no mach_header symbol for file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_CORE</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"no mach_header symbol for file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_PRELOAD</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"no mach_header symbol for file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_DYLIB</name></expr>:</case>
<expr_stmt><expr><name>machHeaderSymbolName</name> <operator>=</operator> <literal type="string">"__mh_dylib_header"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dsoHandleName</name> <operator>=</operator> <literal type="string">"___dso_handle"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_DYLINKER</name></expr>:</case>
<expr_stmt><expr><name>machHeaderSymbolName</name> <operator>=</operator> <literal type="string">"__mh_dylinker_header"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dsoHandleName</name> <operator>=</operator> <literal type="string">"___dso_handle"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_BUNDLE</name></expr>:</case>
<expr_stmt><expr><name>machHeaderSymbolName</name> <operator>=</operator> <literal type="string">"__mh_bundle_header"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dsoHandleName</name> <operator>=</operator> <literal type="string">"___dso_handle"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_DYLIB_STUB</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"no mach_header symbol for file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_DSYM</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"no mach_header symbol for file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_KEXT_BUNDLE</name></expr>:</case>
<expr_stmt><expr><name>dsoHandleName</name> <operator>=</operator> <literal type="string">"___dso_handle"</literal></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
if (!machHeaderSymbolName.empty(</block></switch>))</block>
<call><name><name>_definedAtoms</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>MachODefinedAtom</name><argument_list>(
<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>machHeaderSymbolName</name></expr></argument>, <argument><expr><name>symbolScope</name></expr></argument>,
<argument><expr><name>DefinedAtom</name><operator>::</operator><name>typeMachHeader</name></expr></argument>, <argument><expr><name>DefinedAtom</name><operator>::</operator><name>mergeNo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>true</name></expr></argument> ,
<argument><expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DefinedAtom</name><operator>::</operator><call><name>Alignment</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dsoHandleName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>_definedAtoms</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>allocator()</argument>)</argument_list></macro> <call><name>MachODefinedAtom</name><argument_list>(
<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>dsoHandleName</name></expr></argument>, <argument><expr><name>DefinedAtom</name><operator>::</operator><name>scopeLinkageUnit</name></expr></argument>,
<argument><expr><name>DefinedAtom</name><operator>::</operator><name>typeDSOHandle</name></expr></argument>, <argument><expr><name>DefinedAtom</name><operator>::</operator><name>mergeNo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>true</name></expr></argument> ,
<argument><expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DefinedAtom</name><operator>::</operator><call><name>Alignment</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>defined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_definedAtoms</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>undefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noUndefinedAtoms</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>sharedLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noSharedLibraryAtoms</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>absolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_noAbsoluteAtoms</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clearAtoms</name><parameter_list>()</parameter_list> override <block>{<block_content>
<expr_stmt><expr><call><name><name>_definedAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_noUndefinedAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_noSharedLibraryAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_noAbsoluteAtoms</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<label><name>private</name>:</label>
<decl_stmt><decl><type><name>mutable</name> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_definedAtoms</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
