<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/MachONormalizedFileBinaryUtils.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_NORMALIZED_FILE_BINARY_UTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_NORMALIZED_FILE_BINARY_UTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MachONormalizedFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/LEB128.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;system_error&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>normalized</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ByteBuffer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ByteBuffer</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>_ostream</name><argument_list>(<argument>_bytes</argument>)</argument_list></macro> <block>{ }</block>

<name>void</name> <macro><name>append_byte</name><argument_list>(<argument>uint8_t b</argument>)</argument_list></macro> <block>{
<expr><name>_ostream</name> <operator>&lt;&lt;</operator> <name>b</name></expr>;
}</block>
<name>void</name> <macro><name>append_uleb128</name><argument_list>(<argument>uint64_t value</argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><call><name>encodeULEB128</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>_ostream</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>append_uleb128Fixed</name><argument_list>(<argument>uint64_t value</argument>, <argument>unsigned byteCount</argument>)</argument_list></macro> <block>{
<expr><name>unsigned</name> <name>min</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>getULEB128Size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>min</name> <operator>&lt;=</operator> <name>byteCount</name></expr></argument>)</argument_list></call></expr>;
<expr><name>unsigned</name> <name>pad</name> <operator>=</operator> <name>byteCount</name> <operator>-</operator> <name>min</name></expr>;
<expr><name>llvm</name><operator>::</operator><call><name>encodeULEB128</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>_ostream</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>append_sleb128</name><argument_list>(<argument>int64_t value</argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><call><name>encodeSLEB128</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>_ostream</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>append_string</name><argument_list>(<argument>StringRef str</argument>)</argument_list></macro> <block>{
<expr><name>_ostream</name> <operator>&lt;&lt;</operator> <name>str</name></expr>;
<expr><call><name>append_byte</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>align</name><argument_list>(<argument>unsigned alignment</argument>)</argument_list></macro> <block>{
<while>while <condition>( <expr><operator>(</operator><call><name><name>_ostream</name><operator>.</operator><name>tell</name></name><argument_list>()</argument_list></call> <operator>%</operator> <name>alignment</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>append_byte</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
}</block></expr></expr_stmt>
<function><type><name>size_t</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>_ostream</name><operator>.</operator><name>tell</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bytes</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>_ostream</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name></type> <name>_bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_svector_ostream</name> <name>_ostream</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>using</name> <name>namespace</name> <name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>getSwappedBytes</name></expr>;</expr_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>read16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>loc</name> <operator>%</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"invalid pointer alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>isBig</name></expr> ?</condition><then> <expr><call><name>read16be</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>read16le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>loc</name> <operator>%</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"invalid pointer alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>isBig</name></expr> ?</condition><then> <expr><call><name>read32be</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>read32le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>read64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>loc</name> <operator>%</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"invalid pointer alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>isBig</name></expr> ?</condition><then> <expr><call><name>read64be</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>read64le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>write16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isBig</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write16be</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write16le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>write32</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isBig</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write32be</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write32le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>write64</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isBig</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write64be</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write64le</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint32_t</name></type>
<name>bitFieldExtract</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBigEndianBigField</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>firstBit</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>bitCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bitCount</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name>isBigEndianBigField</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">32</literal><operator>-</operator><name>firstBit</name><operator>-</operator><name>bitCount</name><operator>)</operator></expr> </then><else>: <expr><name>firstBit</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type>
<name>bitFieldSet</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBigEndianBigField</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>newBits</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>firstBit</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bitCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bitCount</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>newBits</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <name>newBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name>isBigEndianBigField</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">32</literal><operator>-</operator><name>firstBit</name><operator>-</operator><name>bitCount</name><operator>)</operator></expr> </then><else>: <expr><name>firstBit</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <operator>(</operator><name>newBits</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>inline</specifier> <name>Relocation</name></type> <name>unpackRelocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>any_relocation_info</name> <operator>&amp;</operator><name>r</name></expr></argument>,
<argument><expr><name>bool</name> <name>isBigEndian</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r0</name> <init>= <expr><call><name>read32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>.</operator><name>r_word0</name></name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r1</name> <init>= <expr><call><name>read32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>.</operator><name>r_word1</name></name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Relocation</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r0</name> <operator>&amp;</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>R_SCATTERED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>scattered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><name>RelocationInfoType</name><operator>)</operator>
<call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>pcRel</name></name> <operator>=</operator> <call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>isExtern</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>symbol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>scattered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><name>RelocationInfoType</name><operator>)</operator>
<call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>pcRel</name></name> <operator>=</operator> <call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>isExtern</name></name> <operator>=</operator> <call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>symbol</name></name> <operator>=</operator> <call><name>bitFieldExtract</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>any_relocation_info</name>
<macro><name>packRelocation</name><argument_list>(<argument>const Relocation &amp;r</argument>, <argument>bool swap</argument>, <argument>bool isBigEndian</argument>)</argument_list></macro> <block>{
<expr><name>uint32_t</name> <name>r0</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint32_t</name> <name>r1</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>scattered</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>pcRel</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>scattered</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>isExtern</name></name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>pcRel</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitFieldSet</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>isBigEndian</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>symbol</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

llvm::MachO::any_relocation_info result</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
<name><name>result</name><operator>.</operator><name>r_word0</name></name> <operator>=</operator> <ternary><condition><expr><name>swap</name></expr> ?</condition><then> <expr><call><name>getSwappedBytes</name><argument_list>(<argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>r0</name></expr></else></ternary></block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>r_word1</name></name> <operator>=</operator> <ternary><condition><expr><name>swap</name></expr> ?</condition><then> <expr><call><name>getSwappedBytes</name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>r1</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>StringRef</name></type> <name>getString16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>



<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>setString16</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>str</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr></then><else>: <expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<decl_stmt><decl><type><name>void</name></type> <name>relocatableSectionInfoForContentType</name><argument_list>(<argument><expr><name>DefinedAtom</name><operator>::</operator><name>ContentType</name> <name>atomType</name></expr></argument>,
<argument><expr><name>StringRef</name> <operator>&amp;</operator><name>segmentName</name></expr></argument>,
<argument><expr><name>StringRef</name> <operator>&amp;</operator><name>sectionName</name></expr></argument>,
<argument><expr><name>SectionType</name> <operator>&amp;</operator><name>sectionType</name></expr></argument>,
<argument><expr><name>SectionAttr</name> <operator>&amp;</operator><name>sectionAttrs</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>relocsToDefinedCanBeImplicit</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
