<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/MachONormalizedFile.h">







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_NORMALIZE_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_NORMALIZE_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DebugInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/ReaderWriter/MachOLinkingContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/MachO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/YAMLTraits.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>Hex64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>Hex32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>Hex16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>Hex8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>SequenceTraits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>HeaderFileType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>BindType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>RebaseType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>NListType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>RelocationInfoType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>SectionType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>LoadCommandType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>ExportSymbolKind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>DataRegionType</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>normalized</name> <block>{<block_content>





<struct>struct <name>Relocation</name> <block>{
<expr_stmt><expr><call><name>Relocation</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>scattered</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>type</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>GENERIC_RELOC_VANILLA</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>length</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>pcRel</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>isExtern</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>value</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>symbol</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>

<name>Hex32</name> <name>offset</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>scattered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelocationInfoType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pcRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isExtern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex32</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>symbol</name></decl>;</decl_stmt>
}</block>;</struct>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Relocation</name></expr></argument>&gt;</argument_list></name> <name>Relocations</name></expr>;</expr_stmt></typedef>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Hex8</name></expr></argument>&gt;</argument_list></name> <name>ContentBytes</name></expr>;</expr_stmt></typedef>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>IndirectSymbols</name></expr>;</expr_stmt></typedef>


<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint32_t</argument>, <argument>SectionAttr</argument>)</argument_list></macro>


<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint16_t</argument>, <argument>SectionAlignment</argument>)</argument_list></macro>



<struct>struct <name>Section</name> <block>{
<expr_stmt><expr><call><name>Section</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>type</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_REGULAR</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>attributes</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>alignment</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>address</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>

<name>StringRef</name> <name>segmentName</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>sectionName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionAttr</name></type> <name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionAlignment</name></type> <name>alignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Relocations</name></type> <name>relocations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IndirectSymbols</name></type> <name>indirectSymbols</name></decl>;</decl_stmt>
}</block>;</struct>



<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint8_t</argument>, <argument>SymbolScope</argument>)</argument_list></macro>


<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint16_t</argument>, <argument>SymbolDesc</argument>)</argument_list></macro>




<struct>struct <name>Symbol</name> <block>{
<expr_stmt><expr><call><name>Symbol</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>type</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>N_UNDF</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>scope</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sect</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>desc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>value</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>

<name>StringRef</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>NListType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolScope</name></type> <name>scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolDesc</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isZeroFillSection</name><parameter_list>(<parameter><decl><type><name>SectionType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>T</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_ZEROFILL</name> <operator>||</operator>
<name>T</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>S_THREAD_LOCAL_ZEROFILL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint32_t</argument>, <argument>VMProtect</argument>)</argument_list></macro>


<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint32_t</argument>, <argument>PackedVersion</argument>)</argument_list></macro>



<struct>struct <name>Segment</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VMProtect</name></type> <name>init_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VMProtect</name></type> <name>max_access</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>DependentDylib</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LoadCommandType</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PackedVersion</name></type> <name>compatVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PackedVersion</name></type> <name>currentVersion</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>RebaseLocation</name> <block>{
<decl_stmt><decl><type><name>Hex32</name></type> <name>segOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>segIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RebaseType</name></type> <name>kind</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>BindLocation</name> <block>{
<decl_stmt><decl><type><name>Hex32</name></type> <name>segOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>segIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BindType</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>canBeNull</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ordinal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>symbolName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>addend</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint32_t</argument>, <argument>ExportFlags</argument>)</argument_list></macro>


<struct>struct <name>Export</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExportSymbolKind</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExportFlags</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex32</name></type> <name>otherOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>otherName</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>DataInCode</name> <block>{
<decl_stmt><decl><type><name>Hex32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex16</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataRegionType</name></type> <name>kind</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>LLVM_YAML_STRONG_TYPEDEF</name><argument_list>(<argument>uint32_t</argument>, <argument>FileFlags</argument>)</argument_list></macro>


<struct>struct <name>NormalizedFile</name> <block>{
<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>Arch</name> <name>arch</name> <operator>=</operator> <name>MachOLinkingContext</name><operator>::</operator><name>arch_unknown</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HeaderFileType</name></type> <name>fileType</name> <init>= <expr><name>llvm</name><operator>::</operator><name>MachO</name><operator>::</operator><name>MH_OBJECT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileFlags</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Segment</name></expr></argument>&gt;</argument_list></name> <name>segments</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Section</name></expr></argument>&gt;</argument_list></name> <name>sections</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name></expr></argument>&gt;</argument_list></name> <name>localSymbols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name></expr></argument>&gt;</argument_list></name> <name>globalSymbols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name></expr></argument>&gt;</argument_list></name> <name>undefinedSymbols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name></expr></argument>&gt;</argument_list></name> <name>stabsSymbols</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DependentDylib</name></expr></argument>&gt;</argument_list></name> <name>dependentDylibs</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>installName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PackedVersion</name></type> <name>compatVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PackedVersion</name></type> <name>currentVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasUUID</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasMinVersionLoadCommand</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>generateDataInCodeLoadCommand</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>rpaths</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>entryAddress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>stackSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>MachOLinkingContext</name><operator>::</operator><name>OS</name> <name>os</name> <operator>=</operator> <name>MachOLinkingContext</name><operator>::</operator><name>OS</name><operator>::</operator><name>unknown</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Hex64</name></type> <name>sourceVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PackedVersion</name></type> <name>minOSverson</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PackedVersion</name></type> <name>sdkVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LoadCommandType</name></type> <name>minOSVersionKind</name> <init>= <expr><operator>(</operator><name>LoadCommandType</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Hex32</name></type> <name>pageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>RebaseLocation</name></expr></argument>&gt;</argument_list></name> <name>rebasingInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BindLocation</name></expr></argument>&gt;</argument_list></name> <name>bindingInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BindLocation</name></expr></argument>&gt;</argument_list></name> <name>weakBindingInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BindLocation</name></expr></argument>&gt;</argument_list></name> <name>lazyBindingInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Export</name></expr></argument>&gt;</argument_list></name> <name>exportInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>functionStarts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DataInCode</name></expr></argument>&gt;</argument_list></name> <name>dataInCode</name></expr>;</expr_stmt>







<decl_stmt><decl><type><name>BumpPtrAllocator</name></type> <name>ownedAllocations</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>bool</name></type> <name>isThinObjectFile</name><argument_list>(<argument><expr><name>StringRef</name> <name>path</name></expr></argument>, <argument><expr><name>MachOLinkingContext</name><operator>::</operator><name>Arch</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>sliceFromFatFile</name><argument_list>(<argument><expr><name>MemoryBufferRef</name> <name>mb</name></expr></argument>, <argument><expr><name>MachOLinkingContext</name><operator>::</operator><name>Arch</name> <name>arch</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>readBinary</name><argument_list>(<argument>std::unique_ptr&lt;MemoryBuffer&gt; &amp;mb</argument>,
<argument>const MachOLinkingContext::Arch arch</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>writeBinary</name><argument_list>(<argument>const NormalizedFile &amp;file</argument>, <argument>StringRef path</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>size_t</name></type> <name>headerAndLoadCommandsSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NormalizedFile</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>includeFunctionStarts</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>readYaml</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <call><name>writeYaml</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NormalizedFile</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name>
<macro><name>normalizedObjectToAtoms</name><argument_list>(<argument>MachOFile *file</argument>,
<argument>const NormalizedFile &amp;normalizedFile</argument>,
<argument>bool copyRefs</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name>
<macro><name>normalizedDylibToAtoms</name><argument_list>(<argument>MachODylibFile *file</argument>,
<argument>const NormalizedFile &amp;normalizedFile</argument>,
<argument>bool copyRefs</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lld</name><operator>::</operator><name>File</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>normalizedToAtoms</name><argument_list>(<argument>const NormalizedFile &amp;normalizedFile</argument>, <argument>StringRef path</argument>,
<argument>bool copyRefs</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>normalizedFromAtoms</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lld</name><operator>::</operator><name>File</name> <operator>&amp;</operator><name>atomFile</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>MachOLinkingContext</name> <operator>&amp;</operator><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>MachOYamlIOTaggedDocumentHandler</name> <range>: <expr><name>public</name> <name>YamlIOTaggedDocumentHandler</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>MachOYamlIOTaggedDocumentHandler</name><argument_list>(<argument>MachOLinkingContext::Arch arch</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>_arch</name><argument_list>(<argument>arch</argument>)</argument_list></macro> <block>{ }</block>
<name>bool</name> <macro><name>handledDocTag</name><argument_list>(<argument>llvm::yaml::IO &amp;io</argument>, <argument>const lld::File *&amp;file</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>private</name><operator>:</operator>
<specifier>const</specifier> <name>MachOLinkingContext</name><operator>::</operator><name>Arch</name> <name>_arch</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
