<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/ArchHandler.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_ARCH_HANDLER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_ARCH_HANDLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Atoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MachONormalizedFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Reference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Simple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/ReaderWriter/MachOLinkingContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>ArchHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ArchHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ArchHandler</name></expr></argument>&gt;</argument_list></name> <macro><name>create</name><argument_list>(<argument>MachOLinkingContext::Arch arch</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>Registry</name><operator>::</operator><name>KindStrings</name> <operator>*</operator><call><name>kindStrings</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindArch</name> <call><name>kindArch</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <name>bool</name></type> <name>isCallSite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Reference</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function><type><name>virtual</name> <name>bool</name></type> <name>isGOTAccess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Reference</name> <modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>canBypassGOT</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isTLVAccess</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Reference</name> <operator>&amp;</operator></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>updateReferenceToTLV</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Reference</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function_decl><type><name>virtual</name> <name>bool</name></type> <name>isNonCallBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Reference</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function><type><name>virtual</name> <name>void</name></type> <name>updateReferenceToGOT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Reference</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>targetIsNowGOT</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function_decl><type><name>virtual</name> <name>bool</name></type> <name>needsCompactUnwind</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>imageOffsetKind</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>imageOffsetKindIndirect</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>dwarfCompactUnwindType</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>unwindRefToPersonalityFunctionKind</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>unwindRefToCIEKind</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>unwindRefToFunctionKind</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>unwindRefToEhFrameKind</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>pointerKind</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type><name>fdeTargetFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>virtual</name> <name>bool</name></type> <name>isPointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Reference</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>virtual</name> <name>bool</name></type> <name>isLazyPointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Reference</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <call><name>lazyImmediateLocationKind</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isPairedReloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>normalized</name><operator>::</operator><name>Relocation</name> <operator>&amp;</operator></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Error</name> <operator>(</operator><name>uint32_t</name> <name>sectionIndex</name>, <name>uint64_t</name> <name>addr</name>,
<specifier>const</specifier> <name>lld</name><operator>::</operator><name>Atom</name> <operator>*</operator><operator>*</operator>, <name>Reference</name><operator>::</operator><name>Addend</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>FindAtomBySectionAndAddress</name></expr>;</expr_stmt></typedef>



<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Error</name> <operator>(</operator><name>uint32_t</name> <name>symbolIndex</name>,
<specifier>const</specifier> <name>lld</name><operator>::</operator><name>Atom</name> <operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>FindAtomBySymbolIndex</name></expr>;</expr_stmt></typedef>





<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name>
<macro><name>getReferenceInfo</name><argument_list>(<argument>const normalized::Relocation &amp;reloc</argument>,
<argument>const DefinedAtom *inAtom</argument>,
<argument>uint32_t offsetInAtom</argument>,
<argument>uint64_t fixupAddress</argument>, <argument>bool isBigEndian</argument>,
<argument>FindAtomBySectionAndAddress atomFromAddress</argument>,
<argument>FindAtomBySymbolIndex atomFromSymbolIndex</argument>,
<argument>Reference::KindValue *kind</argument>,
<argument>const lld::Atom **target</argument>,
<argument>Reference::Addend *addend</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name>
<macro><name>getPairReferenceInfo</name><argument_list>(<argument>const normalized::Relocation &amp;reloc1</argument>,
<argument>const normalized::Relocation &amp;reloc2</argument>,
<argument>const DefinedAtom *inAtom</argument>,
<argument>uint32_t offsetInAtom</argument>,
<argument>uint64_t fixupAddress</argument>, <argument>bool isBig</argument>, <argument>bool scatterable</argument>,
<argument>FindAtomBySectionAndAddress atomFromAddress</argument>,
<argument>FindAtomBySymbolIndex atomFromSymbolIndex</argument>,
<argument>Reference::KindValue *kind</argument>,
<argument>const lld::Atom **target</argument>,
<argument>Reference::Addend *addend</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name> <operator>(</operator><specifier>const</specifier> <name>Atom</name> <operator>&amp;</operator><name>atom</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>FindSymbolIndexForAtom</name></expr>;</expr_stmt></typedef>



<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name> <operator>(</operator><specifier>const</specifier> <name>Atom</name> <operator>&amp;</operator><name>atom</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>FindSectionIndexForAtom</name></expr>;</expr_stmt></typedef>



<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name> <operator>(</operator><specifier>const</specifier> <name>Atom</name> <operator>&amp;</operator><name>atom</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>FindAddressForAtom</name></expr>;</expr_stmt></typedef>


<function><type><name>virtual</name> <name>bool</name></type> <name>needsLocalSymbolInRelocatableFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>generateAtomContent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DefinedAtom</name> <operator>&amp;</operator><name>atom</name></expr></argument>, <argument><expr><name>bool</name> <name>relocatable</name></expr></argument>,
<argument><expr><name>FindAddressForAtom</name> <name>findAddress</name></expr></argument>,
<argument><expr><name>FindAddressForAtom</name> <name>findSectionAddress</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>imageBaseAddress</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>atomContentBuffer</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>appendSectionRelocations</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DefinedAtom</name> <operator>&amp;</operator><name>atom</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>atomSectionOffset</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Reference</name> <operator>&amp;</operator><name>ref</name></expr></argument>,
<argument><expr><name>FindSymbolIndexForAtom</name></expr></argument>,
<argument><expr><name>FindSectionIndexForAtom</name></expr></argument>,
<argument><expr><name>FindAddressForAtom</name></expr></argument>,
<argument><expr><name>normalized</name><operator>::</operator><name>Relocations</name><operator>&amp;</operator></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>addAdditionalReferences</name><parameter_list>(<parameter><decl><type><name>MachODefinedAtom</name> <modifier>&amp;</modifier></type><name>atom</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>addDataInCodeReference</name><parameter_list>(<parameter><decl><type><name>MachODefinedAtom</name> <modifier>&amp;</modifier></type><name>atom</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>atomOff</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>kind</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isDataInCodeTransition</name><argument_list>(<argument><expr><name>Reference</name><operator>::</operator><name>KindValue</name> <name>refKind</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <macro><name>dataInCodeTransitionStart</name><argument_list>(
<argument>const MachODefinedAtom &amp;atom</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>Reference</name><operator>::</operator><name>KindValue</name> <macro><name>dataInCodeTransitionEnd</name><argument_list>(
<argument>const MachODefinedAtom &amp;atom</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>virtual</name> <name>bool</name></type> <name>isThumbFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>&amp;</modifier></type><name>atom</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>


<function><type><name>virtual</name> <specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>createShim</name><parameter_list>(<parameter><decl><type><name>MachOFile</name> <modifier>&amp;</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thumbToArm</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"shims only support on arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isDwarfCIE</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>ReferenceInfo</name> <block>{
<expr_stmt><expr><name>Reference</name><operator>::</operator><name>KindArch</name> <name>arch</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>addend</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>OptionalRefInfo</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>addend</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>StubInfo</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>binderSymbolName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>lazyPointerReferenceToHelper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>lazyPointerReferenceToFinal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>nonLazyPointerReferenceToBinder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>codeAlignment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>stubSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stubBytes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>stubReferenceToLP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalRefInfo</name></type> <name>optStubReferenceToLP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>stubHelperSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stubHelperBytes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>stubHelperReferenceToImm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>stubHelperReferenceToHelperCommon</name></decl>;</decl_stmt>

<expr_stmt><expr><name>DefinedAtom</name><operator>::</operator><name>ContentType</name> <name>stubHelperImageCacheContentType</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>stubHelperCommonSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stubHelperCommonAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stubHelperCommonBytes</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>stubHelperCommonReferenceToCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalRefInfo</name></type> <name>optStubHelperCommonReferenceToCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReferenceInfo</name></type> <name>stubHelperCommonReferenceToBinder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalRefInfo</name></type> <name>optStubHelperCommonReferenceToBinder</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>StubInfo</name> <modifier>&amp;</modifier></type><name>stubInfo</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>ArchHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>mach_o</name><operator>::</operator><name>ArchHandler</name></expr></argument>&gt;</argument_list></name> <call><name>create_x86_64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>mach_o</name><operator>::</operator><name>ArchHandler</name></expr></argument>&gt;</argument_list></name> <call><name>create_x86</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>mach_o</name><operator>::</operator><name>ArchHandler</name></expr></argument>&gt;</argument_list></name> <call><name>create_arm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>mach_o</name><operator>::</operator><name>ArchHandler</name></expr></argument>&gt;</argument_list></name> <call><name>create_arm64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<typedef>typedef <type><name>uint16_t</name></type> <name>RelocPattern</name>;</typedef>
<enum>enum <block>{
<decl><name>rScattered</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>,
<decl><name>rPcRel</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>,
<decl><name>rExtern</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,
<decl><name>rLength1</name> <init>= <expr><literal type="number">0x0000</literal></expr></init></decl>,
<decl><name>rLength2</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,
<decl><name>rLength4</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,
<decl><name>rLength8</name> <init>= <expr><literal type="number">0x0300</literal></expr></init></decl>,
<decl><name>rLenArmLo</name> <init>= <expr><name>rLength1</name></expr></init></decl>,
<decl><name>rLenArmHi</name> <init>= <expr><name>rLength2</name></expr></init></decl>,
<decl><name>rLenThmbLo</name> <init>= <expr><name>rLength4</name></expr></init></decl>,
<decl><name>rLenThmbHi</name> <init>= <expr><name>rLength8</name></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>RelocPattern</name></type> <name>relocPattern</name><argument_list>(<argument><expr><specifier>const</specifier> <name>normalized</name><operator>::</operator><name>Relocation</name> <operator>&amp;</operator><name>reloc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>normalized</name><operator>::</operator><name>Relocation</name> <macro><name>relocFromPattern</name><argument_list>(<argument>RelocPattern pattern</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>appendReloc</name><argument_list>(<argument><expr><name>normalized</name><operator>::</operator><name>Relocations</name> <operator>&amp;</operator><name>relocs</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>offset</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>symbol</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>value</name></expr></argument>,
<argument><expr><name>RelocPattern</name> <name>pattern</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>int16_t</name></type> <name>readS16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>readS32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>readU32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>readS64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBig</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
