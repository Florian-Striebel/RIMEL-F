<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/Atoms.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_ATOMS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_ATOMS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Atom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/DefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/SharedLibraryAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Simple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>File</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MachODefinedAtom</name> <range>: <expr><name>public</name> <name>SimpleDefinedAtom</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>MachODefinedAtom</name><argument_list>(<argument>const File &amp;f</argument>, <argument>const StringRef name</argument>, <argument>Scope scope</argument>,
<argument>ContentType type</argument>, <argument>Merge merge</argument>, <argument>bool thumb</argument>, <argument>bool noDeadStrip</argument>,
<argument>const ArrayRef&lt;uint8_t&gt; content</argument>, <argument>Alignment align</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SimpleDefinedAtom</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_content</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_align</name><argument_list>(<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_contentType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_scope</name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_merge</name><argument_list>(<argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_thumb</name><argument_list>(<argument><expr><name>thumb</name></expr></argument>)</argument_list></call></expr>, <macro><name>_noDeadStrip</name><argument_list>(<argument>noDeadStrip</argument>)</argument_list></macro> <expr><block>{}</block>


<macro><name>MachODefinedAtom</name><argument_list>(<argument>const File &amp;f</argument>, <argument>const StringRef name</argument>, <argument>Scope scope</argument>,
<argument>ContentType type</argument>, <argument>uint64_t size</argument>, <argument>bool noDeadStrip</argument>,
<argument>Alignment align</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SimpleDefinedAtom</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_content</name><argument_list>(<argument><expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>_align</name><argument_list>(<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_contentType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_scope</name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_merge</name><argument_list>(<argument><expr><name>mergeNo</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_thumb</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<macro><name>_noDeadStrip</name><argument_list>(<argument>noDeadStrip</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>MachODefinedAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>uint64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>_content</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>ContentType</name> <macro><name>contentType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_contentType</name></expr>;</return> }</block>

<name>Alignment</name> <macro><name>alignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_align</name></expr>;</return> }</block>

<name>StringRef</name> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_name</name></expr>;</return> }</block>

<name>Scope</name> <macro><name>scope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_scope</name></expr>;</return> }</block>

<name>Merge</name> <macro><name>merge</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_merge</name></expr>;</return> }</block>

<name>DeadStripKind</name> <macro><name>deadStrip</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>_contentType</name> <operator>==</operator> <name>DefinedAtom</name><operator>::</operator><name>typeInitializerPtr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>deadStripNever</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>_contentType</name> <operator>==</operator> <name>DefinedAtom</name><operator>::</operator><name>typeTerminatorPtr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>deadStripNever</name></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<if_stmt><if>if <condition>(<expr><name>_noDeadStrip</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>deadStripNever</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>deadStripNormal</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <macro><name>rawContent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>_content</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isThumb</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_thumb</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>StringRef</name></type> <name>_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>_content</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>DefinedAtom</name><operator>::</operator><name>Alignment</name> <name>_align</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ContentType</name></type> <name>_contentType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Scope</name></type> <name>_scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Merge</name></type> <name>_merge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>_thumb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>_noDeadStrip</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MachODefinedCustomSectionAtom</name> <range>: <expr><name>public</name> <name>MachODefinedAtom</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>MachODefinedCustomSectionAtom</name><argument_list>(<argument>const File &amp;f</argument>, <argument>const StringRef name</argument>,
<argument>Scope scope</argument>, <argument>ContentType type</argument>, <argument>Merge merge</argument>,
<argument>bool thumb</argument>, <argument>bool noDeadStrip</argument>,
<argument>const ArrayRef&lt;uint8_t&gt; content</argument>,
<argument>StringRef sectionName</argument>, <argument>Alignment align</argument>)</argument_list></macro>
<operator>:</operator> <call><name>MachODefinedAtom</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>merge</name></expr></argument>, <argument><expr><name>thumb</name></expr></argument>, <argument><expr><name>noDeadStrip</name></expr></argument>,
<argument><expr><name>content</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>,
<macro><name>_sectionName</name><argument_list>(<argument>sectionName</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>MachODefinedCustomSectionAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>SectionChoice</name> <macro><name>sectionChoice</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>DefinedAtom</name><operator>::</operator><name>sectionCustomRequired</name></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>customSectionName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_sectionName</name></expr>;</return>
}</block>
<name>private</name><operator>:</operator>
<name>StringRef</name> <name>_sectionName</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MachOTentativeDefAtom</name> <range>: <expr><name>public</name> <name>SimpleDefinedAtom</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>MachOTentativeDefAtom</name><argument_list>(<argument>const File &amp;f</argument>, <argument>const StringRef name</argument>, <argument>Scope scope</argument>,
<argument>uint64_t size</argument>, <argument>DefinedAtom::Alignment align</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SimpleDefinedAtom</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_name</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>_scope</name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>, <macro><name>_align</name><argument_list>(<argument>align</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>MachOTentativeDefAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>uint64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_size</name></expr>;</return> }</block>

<name>Merge</name> <macro><name>merge</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>DefinedAtom</name><operator>::</operator><name>mergeAsTentative</name></expr>;</return> }</block>

<name>ContentType</name> <macro><name>contentType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>DefinedAtom</name><operator>::</operator><name>typeZeroFill</name></expr>;</return> }</block>

<name>Alignment</name> <macro><name>alignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_align</name></expr>;</return> }</block>

<name>StringRef</name> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_name</name></expr>;</return> }</block>

<name>Scope</name> <macro><name>scope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_scope</name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <macro><name>rawContent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>_name</name></expr>;
<expr><specifier>const</specifier> <name>Scope</name> <name>_scope</name></expr>;
<expr><specifier>const</specifier> <name>uint64_t</name> <name>_size</name></expr>;
<expr><specifier>const</specifier> <name>DefinedAtom</name><operator>::</operator><name>Alignment</name> <name>_align</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MachOSharedLibraryAtom</name> <range>: <expr><name>public</name> <name>SharedLibraryAtom</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>MachOSharedLibraryAtom</name><argument_list>(<argument>const File &amp;file</argument>, <argument>StringRef name</argument>,
<argument>StringRef dylibInstallName</argument>, <argument>bool weakDef</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SharedLibraryAtom</name><argument_list>()</argument_list></call></expr>, <expr><call><name>_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>,
<macro><name>_dylibInstallName</name><argument_list>(<argument>dylibInstallName</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><macro><name>MachOSharedLibraryAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>StringRef</name> <macro><name>loadName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_dylibInstallName</name></expr>;</return> }</block>

<name>bool</name> <macro><name>canBeNullAtRuntime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<return>return <expr><name>false</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>File</name> <operator>&amp;</operator><macro><name>file</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_file</name></expr>;</return> }</block>

<name>StringRef</name> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_name</name></expr>;</return> }</block>

<name>Type</name> <macro><name>type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>Type</name><operator>::</operator><name>Unknown</name></expr>;</return>
}</block>

<name>uint64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>File</name> <operator>&amp;</operator><name>_file</name></expr>;
<expr><name>StringRef</name> <name>_name</name></expr>;
<expr><name>StringRef</name> <name>_dylibInstallName</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
