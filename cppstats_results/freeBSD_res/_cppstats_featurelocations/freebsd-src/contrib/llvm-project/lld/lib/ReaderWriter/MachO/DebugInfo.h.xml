<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/lib/ReaderWriter/MachO/DebugInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_READER_WRITER_MACHO_DEBUGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_READER_WRITER_MACHO_DEBUGINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Atom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mach_o</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DebugInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Kind</name> <block>{<block_content>
<expr_stmt><expr><name>Dwarf</name></expr><operator>,</operator>
<expr><name>Stabs</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_kind</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setAllocator</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name> <name>allocator</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>_allocator</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<macro><name>DebugInfo</name><argument_list>(<argument>Kind kind</argument>)</argument_list></macro> : <macro><name>_kind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name> <name>_allocator</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Kind</name></type> <name>_kind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>TranslationUnitSource</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>path</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>DwarfDebugInfo</name> <range>: <expr><name>public</name> <name>DebugInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DwarfDebugInfo</name><argument_list>(<argument>TranslationUnitSource tu</argument>)</argument_list></macro>
<operator>:</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><name>Kind</name><operator>::</operator><name>Dwarf</name></expr></argument>)</argument_list></call></expr>, <macro><name>_tu</name><argument_list>(<argument>std::move(tu)</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const DebugInfo *di</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>di</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>Dwarf</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>TranslationUnitSource</name> <operator>&amp;</operator><macro><name>translationUnitSource</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_tu</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>TranslationUnitSource</name> <name>_tu</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>Stab</name> <block>{
<macro><name>Stab</name><argument_list>(<argument>const Atom* atom</argument>, <argument>uint8_t type</argument>, <argument>uint8_t other</argument>, <argument>uint16_t desc</argument>,
<argument>uint32_t value</argument>, <argument>StringRef str</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>atom</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>other</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>desc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>str</name><argument_list>(<argument>str</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>class</name> <name>Atom</name><operator>*</operator> <name>atom</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>str</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>inline</specifier> <name>raw_ostream</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>os</name><operator>,</operator> <name>Stab</name> <operator>&amp;</operator><name>s</name><operator>)</operator> <block>{
<expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"Stab -- atom: "</literal> <operator>&lt;&lt;</operator> <name>llvm</name><operator>::</operator><call><name>format</name><argument_list>(<argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>atom</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", type: "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>s</name><operator>.</operator><name>type</name></name>
<operator>&lt;&lt;</operator> <literal type="string">", other: "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>s</name><operator>.</operator><name>other</name></name> <operator>&lt;&lt;</operator> <literal type="string">", desc: "</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>.</operator><name>desc</name></name> <operator>&lt;&lt;</operator> <literal type="string">", value: "</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>.</operator><name>value</name></name>
<operator>&lt;&lt;</operator> <literal type="string">", str: '"</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>.</operator><name>str</name></name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;
<return>return <expr><name>os</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StabsDebugInfo</name> <range>: <expr><name>public</name> <name>DebugInfo</name> <block>{
<expr><name>public</name><operator>:</operator></expr>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Stab</name></expr></argument>&gt;</argument_list></name> <name>StabsList</name></expr>;</expr_stmt></typedef>

<macro><name>StabsDebugInfo</name><argument_list>(<argument>StabsList stabs</argument>)</argument_list></macro>
<operator>:</operator> <call><name>DebugInfo</name><argument_list>(<argument><expr><name>Kind</name><operator>::</operator><name>Stabs</name></expr></argument>)</argument_list></call>, <macro><name>_stabs</name><argument_list>(<argument>std::move(stabs)</argument>)</argument_list></macro> <block>{}</block></block>

<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const DebugInfo *di</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>di</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>Stabs</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>StabsList</name><operator>&amp;</operator> <macro><name>stabs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_stabs</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>StabsList</name></type> <name>_stabs</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
