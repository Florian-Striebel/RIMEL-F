<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/InputFiles.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_INPUT_FILES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_INPUT_FILES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/ErrorHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Reproduce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Comdat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/ELF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/IRObjectFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Threading.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<struct_decl>struct <name>DILineInfo</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>TarWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>lto</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DWARFCache</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>elf</name><operator>::</operator><name>InputFile</name> <operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>



<extern>extern std::unique_ptr&lt;llvm::TarWriter&gt; tar;</extern>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <macro><name>readFile</name><argument_list>(<argument>StringRef path</argument>)</argument_list></macro></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>parseFile</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>ObjKind</name></decl>,
<decl><name>SharedKind</name></decl>,
<decl><name>LazyObjKind</name></decl>,
<decl><name>ArchiveKind</name></decl>,
<decl><name>BitcodeKind</name></decl>,
<decl><name>BinaryKind</name></decl>,
}</block>;</enum>

<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fileKind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isElf</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>Kind</name> <name>k</name> <operator>=</operator> <call><name>kind</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>k</name> <operator>==</operator> <name>ObjKind</name> <operator>||</operator> <name>k</name> <operator>==</operator> <name>SharedKind</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>mb</name><operator>.</operator><name>getBufferIdentifier</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getSections</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>fileKind</name> <operator>==</operator> <name>ObjKind</name> <operator>||</operator> <name>fileKind</name> <operator>==</operator> <name>BinaryKind</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>sections</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>getSymbols</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getMutableSymbols</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>getMutableSymbols</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fileKind</name> <operator>==</operator> <name>BinaryKind</name> <operator>||</operator> <name>fileKind</name> <operator>==</operator> <name>ObjKind</name> <operator>||</operator>
<name>fileKind</name> <operator>==</operator> <name>BitcodeKind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>symbols</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>StringRef</name> <macro><name>getNameForScript</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>archiveName</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>ELFKind</name></type> <name>ekind</name> <init>= <expr><name>ELFNoneKind</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>emachine</name> <init>= <expr><name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>EM_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>osabi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>abiVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>string</name> <name>toStringCache</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getSrcMsg</name><argument_list>(<argument>const Symbol &amp;sym</argument>, <argument>InputSectionBase &amp;sec</argument>,
<argument>uint64_t offset</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>justSymbols</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>ppc32Got2OutSecOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>ppc64SmallCodeModelTocRelocs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ppc64DisableTLSRelax</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint32_t</name></type> <name>groupId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isInGroup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>nextGroupId</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>mipsGotIndex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symbols</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<macro><name>InputFile</name><argument_list>(<argument>Kind k</argument>, <argument>MemoryBufferRef m</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sections</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Kind</name></type> <name>fileKind</name></decl>;</decl_stmt>


<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>string</name> <name>nameForScriptCache</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ELFFileBase</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ELFFileBase</name><argument_list>(<argument>Kind k</argument>, <argument>MemoryBufferRef m</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>isElf</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name><name>ELFFile</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name> <macro><name>getObj</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>check</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name><name>ELFFile</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>create</name><argument_list>(<argument><expr><call><name><name>mb</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>getStringTable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>stringTable</name></expr>;</return> }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>typename</name> <name>ELFT</name><operator>::</operator><name>SymRange</name> <macro><name>getELFSyms</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>typename</name> <name>ELFT</name><operator>::</operator><macro><name>SymRange</name><argument_list>(
<argument>reinterpret_cast&lt;const typename ELFT::Sym *&gt;(elfSyms)</argument>, <argument>numELFSyms</argument>)</argument_list></macro></expr>;</return>
}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>typename</name> <name>ELFT</name><operator>::</operator><name>SymRange</name> <macro><name>getGlobalELFSyms</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>getELFSyms</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>slice</name><argument_list>(<argument><expr><name>firstGlobal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>init</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>elfSyms</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>size_t</name> <name>numELFSyms</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uint32_t</name> <name>firstGlobal</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>StringRef</name> <name>stringTable</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>ObjFile</name> <range>: <expr><name>public</name> <name>ELFFileBase</name> <block>{
<macro><name>LLVM_ELF_IMPORT_TYPES_ELFT</name><argument_list>(<argument>ELFT</argument>)</argument_list></macro>

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjKind</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name><name>ELFFile</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name> <macro><name>getObj</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>this</name><operator>-&gt;</operator><name>ELFFileBase</name></name><operator>::</operator><call><name><name>getObj</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getLocalSymbols</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getGlobalSymbols</name><argument_list>()</argument_list></call></expr>;

<macro><name>ObjFile</name><argument_list>(<argument>MemoryBufferRef m</argument>, <argument>StringRef archiveName</argument>)</argument_list></macro> <operator>:</operator> <macro><name>ELFFileBase</name><argument_list>(<argument>ObjKind</argument>, <argument>m</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>archiveName</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>archiveName</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>parse</name><argument_list>(<argument>bool ignoreComdats = false</argument>)</argument_list></macro></expr>;

<expr><name>StringRef</name> <call><name>getShtGroupSignature</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Elf_Shdr</name></expr></argument>&gt;</argument_list></name> <name>sections</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Elf_Shdr</name> <operator>&amp;</operator><name>sec</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Symbol</name> <operator>&amp;</operator><macro><name>getSymbol</name><argument_list>(<argument>uint32_t symbolIndex</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>symbolIndex</name> <operator>&gt;=</operator> <call><name><name>this</name><operator>-&gt;</operator><name>symbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>toString</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": invalid symbol index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>symbolIndex</name></expr>]</index></name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>getSectionIndex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Elf_Sym</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RelT</name></expr></argument>&gt;</argument_list></name> <name>Symbol</name> <modifier>&amp;</modifier></type><name>getRelocTargetSym</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RelT</name> <operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>symIndex</name> <init>= <expr><call><name><name>rel</name><operator>.</operator><name>getSymbol</name></name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>isMips64EL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>getSymbol</name><argument_list>(<argument><expr><name>symIndex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>DILineInfo</name></expr></argument>&gt;</argument_list></name> <call><name>getDILineInfo</name><argument_list>(<argument><expr><name>InputSectionBase</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>getVariableLoc</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro></expr>;</expr_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>mipsGp0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>andFeatures</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>StringRef</name></type> <name>sourceFile</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>splitStack</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>someNoSplitStack</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>Elf_Shdr</name> <modifier>*</modifier></type><name>addrsigSec</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>cgProfileSectionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><name>DWARFCache</name> <modifier>*</modifier></type><name>getDwarf</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>initializeSections</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignoreComdats</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initializeSymbols</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initializeJustSymbols</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>getRelocTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf_Shdr</name> <modifier>&amp;</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>createInputSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf_Shdr</name> <modifier>&amp;</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>getSectionName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf_Shdr</name> <modifier>&amp;</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>shouldMerge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf_Shdr</name> <modifier>&amp;</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>













<decl_stmt><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Elf_Word</name></expr></argument>&gt;</argument_list></name></type> <name>shndxTable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>sectionStringTable</name></decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DWARFCache</name></expr></argument>&gt;</argument_list></name> <name>dwarf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>once_flag</name> <name>initDwarf</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>LazyObjFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>LazyObjFile</name><argument_list>(<argument>MemoryBufferRef m</argument>, <argument>StringRef archiveName</argument>,
<argument>uint64_t offsetInArchive</argument>)</argument_list></macro>
<operator>:</operator> <call><name>InputFile</name><argument_list>(<argument><expr><name>LazyObjKind</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>, <macro><name>offsetInArchive</name><argument_list>(<argument>offsetInArchive</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>archiveName</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>archiveName</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyObjKind</name></expr>;</return> }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>parse</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>fetch</name><argument_list>()</argument_list></call></expr>;



<expr><name>bool</name> <call><name>shouldFetchForCommon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StringRef</name> <operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <name>fetched</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>uint64_t</name> <name>offsetInArchive</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ArchiveFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>ArchiveFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Archive</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ArchiveKind</name></expr>;</return> }</block>
<name>void</name> <call><name>parse</name><argument_list>()</argument_list></call></expr>;





<expr><name>void</name> <call><name>fetch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;



<expr><name>bool</name> <call><name>shouldFetchForCommon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;

<expr><name>size_t</name> <macro><name>getMemberCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>size_t</name> <macro><name>getFetchedMemberCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>seen</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>bool</name> <name>parsed</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Archive</name></expr></argument>&gt;</argument_list></name> <name>file</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>seen</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BitcodeFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>BitcodeFile</name><argument_list>(<argument>MemoryBufferRef m</argument>, <argument>StringRef archiveName</argument>,
<argument>uint64_t offsetInArchive</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>BitcodeKind</name></expr>;</return> }</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>parse</name><argument_list>()</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>lto</name><operator>::</operator><name>InputFile</name></expr></argument>&gt;</argument_list></name> <name>obj</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SharedFile</name> <range>: <expr><name>public</name> <name>ELFFileBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>SharedFile</name><argument_list>(<argument>MemoryBufferRef m</argument>, <argument>StringRef defaultSoName</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ELFFileBase</name><argument_list>(<argument><expr><name>SharedKind</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>soName</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>defaultSoName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>isNeeded</name><argument_list>(<argument>!config-&gt;asNeeded</argument>)</argument_list></macro> <expr><block>{}</block>


<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>verdefs</name></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>vernauxs</name></expr>;

<expr><specifier>static</specifier> <name>unsigned</name> <name>vernauxNum</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>dtNeeded</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>soName</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SharedKind</name></expr>;</return> }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>parse</name><argument_list>()</argument_list></call></expr>;


<expr><name>bool</name> <name>isNeeded</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>requiredSymbols</name></expr>;

<expr><name>private</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <macro><name>parseVerneed</name><argument_list>(<argument>const llvm::object::ELFFile&lt;ELFT&gt; &amp;obj</argument>,
<argument>const typename ELFT::Shdr *sec</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BinaryFile</name> <range>: <expr><name>public</name> <name>InputFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>BinaryFile</name><argument_list>(<argument>MemoryBufferRef m</argument>)</argument_list></macro> <operator>:</operator> <macro><name>InputFile</name><argument_list>(<argument>BinaryKind</argument>, <argument>m</argument>)</argument_list></macro> <block>{}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const InputFile *f</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>BinaryKind</name></expr>;</return> }</block>
<name>void</name> <call><name>parse</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>InputFile</name> <modifier>*</modifier></type><name>createObjectFile</name><parameter_list>(<parameter><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>archiveName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>offsetInArchive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isBitcode</name><parameter_list>(<parameter><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>identify_magic</name><argument_list>(<argument><expr><call><name><name>mb</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>file_magic</name><operator>::</operator><name>bitcode</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>replaceThinLTOSuffix</name><argument_list>(<argument>StringRef path</argument>)</argument_list></macro></expr>;</expr_stmt>

<extern>extern std::vector&lt;ArchiveFile *&gt; archiveFiles;</extern>
<extern>extern std::vector&lt;BinaryFile *&gt; binaryFiles;</extern>
<extern>extern std::vector&lt;BitcodeFile *&gt; bitcodeFiles;</extern>
<extern>extern std::vector&lt;LazyObjFile *&gt; lazyObjFiles;</extern>
<extern>extern std::vector&lt;InputFile *&gt; objectFiles;</extern>
<extern>extern std::vector&lt;SharedFile *&gt; sharedFiles;</extern>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
