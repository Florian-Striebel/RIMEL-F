<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/LinkerScript.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_LINKER_SCRIPT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_LINKER_SCRIPT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Writer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/MapVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSectionBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OutputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ThunkSection</name></decl>;</decl_stmt>


<struct>struct <name>ExprValue</name> <block>{
<macro><name>ExprValue</name><argument_list>(<argument>SectionBase *sec</argument>, <argument>bool forceAbsolute</argument>, <argument>uint64_t val</argument>,
<argument>const Twine &amp;loc</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>sec</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>forceAbsolute</name><argument_list>(<argument><expr><name>forceAbsolute</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>val</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>loc</name><argument_list>(<argument>loc.str()</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ExprValue</name><argument_list>(<argument>uint64_t val</argument>)</argument_list></macro> <operator>:</operator> <macro><name>ExprValue</name><argument_list>(<argument>nullptr</argument>, <argument>false</argument>, <argument>val</argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>isAbsolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>forceAbsolute</name> <operator>||</operator> <name>sec</name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getSecAddr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getSectionOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>SectionBase</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>forceAbsolute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>alignment</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_NOTYPE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>loc</name></expr>;</expr_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name>using</name></type> <name>Expr</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>ExprValue</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<enum>enum <name>SectionsCommandKind</name> <block>{
<decl><name>AssignmentKind</name></decl>,
<decl><name>OutputSectionKind</name></decl>,
<decl><name>InputSectionKind</name></decl>,
<decl><name>ByteKind</name></decl>
}</block>;</enum>

<struct>struct <name>BaseCommand</name> <block>{
<macro><name>BaseCommand</name><argument_list>(<argument>int k</argument>)</argument_list></macro> : <macro><name>kind</name><argument_list>(<argument>k</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name><name>struct</name> <name>SymbolAssignment</name></name></type> <range>: <expr><name>BaseCommand</name> <block>{
<macro><name>SymbolAssignment</name><argument_list>(<argument>StringRef name</argument>, <argument>Expr e</argument>, <argument>std::string loc</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>BaseCommand</name><argument_list>(<argument><expr><name>AssignmentKind</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>expression</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>, <macro><name>location</name><argument_list>(<argument>loc</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const BaseCommand *c</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>AssignmentKind</name></expr>;</return>
}</block>


<name>StringRef</name> <name>name</name></expr>;
<expr><name>Defined</name> <operator>*</operator><name>sym</name> <operator>=</operator> <name>nullptr</name></expr>;


<expr><name>Expr</name> <name>expression</name></expr>;


<expr><name>bool</name> <name>provide</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>hidden</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>location</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>commandString</name></expr>;


<expr><name>uint64_t</name> <name>addr</name></expr>;



<expr><name>uint64_t</name> <name>size</name></expr>;
}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ConstraintKind</name> <block>{<block_content> <expr_stmt><expr><name>NoConstraint</name></expr><operator>,</operator> <expr><name>ReadOnly</name></expr><operator>,</operator> <expr><name>ReadWrite</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<struct>struct <name>MemoryRegion</name> <block>{
<macro><name>MemoryRegion</name><argument_list>(<argument>StringRef name</argument>, <argument>Expr origin</argument>, <argument>Expr length</argument>, <argument>uint32_t flags</argument>,
<argument>uint32_t negFlags</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>name</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>origin</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>length</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>negFlags</name><argument_list>(<argument>negFlags</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name>string</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Expr</name></type> <name>origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>negFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>curPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name>class</name></type> <name>SectionPattern</name> <block>{<block_content>
<decl_stmt><decl><type><name>StringMatcher</name></type> <name>excludedFilePat</name></decl>;</decl_stmt>


<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>InputFile</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>excludesFileCache</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SectionPattern</name><argument_list>(<argument><expr><name>StringMatcher</name> <operator>&amp;&amp;</operator><name>pat1</name></expr></argument>, <argument><expr><name>StringMatcher</name> <operator>&amp;&amp;</operator><name>pat2</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>excludedFilePat</name><argument_list>(<argument><expr><name>pat1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sectionPat</name><argument_list>(<argument><expr><name>pat2</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>sortOuter</name><argument_list>(<argument><expr><name>SortSectionPolicy</name><operator>::</operator><name>Default</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>sortInner</name><argument_list>(<argument>SortSectionPolicy::Default</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>excludesFile</name><argument_list>(<argument>const InputFile *file</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>StringMatcher</name></type> <name>sectionPat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SortSectionPolicy</name></type> <name>sortOuter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SortSectionPolicy</name></type> <name>sortInner</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InputSectionDescription</name> <range>: <expr><name>public</name> <name>BaseCommand</name> <block>{
<expr><name>SingleStringMatcher</name> <name>filePat</name></expr>;


<expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>InputFile</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>matchesFileCache</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>InputSectionDescription</name><argument_list>(<argument>StringRef filePattern</argument>, <argument>uint64_t withFlags = <literal type="number">0</literal></argument>,
<argument>uint64_t withoutFlags = <literal type="number">0</literal></argument>)</argument_list></macro>
<operator>:</operator> <call><name>BaseCommand</name><argument_list>(<argument><expr><name>InputSectionKind</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>filePat</name><argument_list>(<argument><expr><name>filePattern</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>withFlags</name><argument_list>(<argument><expr><name>withFlags</name></expr></argument>)</argument_list></call></expr>, <macro><name>withoutFlags</name><argument_list>(<argument>withoutFlags</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const BaseCommand *c</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>InputSectionKind</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>matchesFile</name><argument_list>(<argument>const InputFile *file</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionPattern</name></expr></argument>&gt;</argument_list></name> <name>sectionPatterns</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sectionBases</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sections</name></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ThunkSection</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>thunkSections</name></expr>;


<expr><name>uint64_t</name> <name>withFlags</name></expr>;
<expr><name>uint64_t</name> <name>withoutFlags</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ByteCommand</name></name></type> <range>: <expr><name>BaseCommand</name> <block>{
<macro><name>ByteCommand</name><argument_list>(<argument>Expr e</argument>, <argument>unsigned size</argument>, <argument>std::string commandString</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>BaseCommand</name><argument_list>(<argument><expr><name>ByteKind</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>commandString</name><argument_list>(<argument><expr><name>commandString</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>expression</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>,
<macro><name>size</name><argument_list>(<argument>size</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const BaseCommand *c</argument>)</argument_list></macro> <block>{ <return>return <expr><name><name>c</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>ByteKind</name></expr>;</return> }</block>


<name>std</name><operator>::</operator><name>string</name> <name>commandString</name></expr>;

<expr><name>Expr</name> <name>expression</name></expr>;


<expr><name>unsigned</name> <name>offset</name></expr>;


<expr><name>unsigned</name> <name>size</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>InsertCommand</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>names</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isAfter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>where</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>PhdrsCommand</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name> <init>= <expr><name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>PT_NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasFilehdr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasPhdrs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>flags</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Expr</name></type> <name>lmaExpr</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name> <name>LinkerScript</name></type> <name>final</name> <block>{<block_content>



<struct>struct <name>AddressState</name> <block>{
<expr_stmt><expr><call><name>AddressState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>outSec</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemoryRegion</name> <modifier>*</modifier></type><name>memRegion</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemoryRegion</name> <modifier>*</modifier></type><name>lmaRegion</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lmaOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tbssAddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>OutputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>nameToOutputSection</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>addSymbol</name><parameter_list>(<parameter><decl><type><name>SymbolAssignment</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>assignSymbol</name><parameter_list>(<parameter><decl><type><name>SymbolAssignment</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inSec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setDot</name><parameter_list>(<parameter><decl><type><name>Expr</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inSec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>expandOutputSection</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>expandMemoryRegions</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<call><name>computeInputSections</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InputSectionDescription</name> <operator>*</operator></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>createInputSectionList</name><argument_list>(<argument><expr><name>OutputSection</name> <operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>discardSynthetic</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <call><name>getPhdrIndices</name><argument_list>(<argument><expr><name>OutputSection</name> <operator>*</operator><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>MemoryRegion</name> <modifier>*</modifier></type><name>findMemoryRegion</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>switchTo</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>align</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>assignOffsets</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>AddressState</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>aether</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dot</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function_decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>createOutputSection</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>getOrCreateOutputSection</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>hasPhdrsCommands</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><call><name><name>phdrsCommands</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>uint64_t</name></type> <name>getDot</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>dot</name></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>discard</name><parameter_list>(<parameter><decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ExprValue</name></type> <name>getSymbolValue</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>loc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>addOrphanSections</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>void</name> <macro><name>diagnoseOrphanHandling</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>adjustSectionsBeforeSorting</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>adjustSectionsAfterSorting</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PhdrEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>createPhdrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>needsInterpSection</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>shouldKeep</name><parameter_list>(<parameter><decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Defined</name> <modifier>*</modifier></type><name>assignAddresses</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>allocateHeaders</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PhdrEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>phdrs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>processSectionCommands</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>processSymbolAssignments</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>declareSymbols</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>processInsertCommands</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BaseCommand</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sectionCommands</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PhdrsCommand</name></expr></argument>&gt;</argument_list></name> <name>phdrsCommands</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasSectionsCommand</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>errorOnMissingSection</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputSectionDescription</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>keptSections</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>MemoryRegion</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>memoryRegions</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>referencedSymbols</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InsertCommand</name></expr></argument>&gt;</argument_list></name> <name>insertCommands</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>overwriteSections</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>orphanSections</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>LinkerScript</name> <modifier>*</modifier></type><name>script</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
