<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/DWARF.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_DWARF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_DWARF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputFiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/DWARF/DWARFContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/ELF.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>LLDDWARFSection</name></name></type> <name>final</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>DWARFSection</name> <block>{
<expr><name>InputSectionBase</name> <operator>*</operator><name>sec</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>LLDDwarfObj</name></type> <name>final</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>DWARFObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>LLDDwarfObj</name><argument_list>(<argument><expr><name><name>ObjFile</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>forEachInfoSections</name><argument_list>(
<argument>llvm::function_ref&lt;void(const llvm::DWARFSection &amp;)&gt; f</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>f</name><argument_list>(<argument><expr><name>infoSection</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>InputSection</name> <operator>*</operator><macro><name>getInfoSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>InputSection</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>infoSection</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFSection</name> <operator>&amp;</operator><macro><name>getLoclistsSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>loclistsSection</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFSection</name> <operator>&amp;</operator><macro><name>getRangesSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>rangesSection</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFSection</name> <operator>&amp;</operator><macro><name>getRnglistsSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>rnglistsSection</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFSection</name> <operator>&amp;</operator><macro><name>getStrOffsetsSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>strOffsetsSection</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFSection</name> <operator>&amp;</operator><macro><name>getLineSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>lineSection</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFSection</name> <operator>&amp;</operator><macro><name>getAddrSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>addrSection</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>LLDDWARFSection</name> <operator>&amp;</operator><macro><name>getGnuPubnamesSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>gnuPubnamesSection</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>LLDDWARFSection</name> <operator>&amp;</operator><macro><name>getGnuPubtypesSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>gnuPubtypesSection</name></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>getFileName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block>
<name>StringRef</name> <macro><name>getAbbrevSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>abbrevSection</name></expr>;</return> }</block>
<name>StringRef</name> <macro><name>getStrSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>strSection</name></expr>;</return> }</block>
<name>StringRef</name> <macro><name>getLineStrSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>lineStrSection</name></expr>;</return> }</block>

<name>bool</name> <macro><name>isLittleEndian</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ELFT</name><operator>::</operator><name>TargetEndianness</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>little</name></expr>;</return>
}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>RelocAddrEntry</name></expr></argument>&gt;</argument_list></name> <macro><name>find</name><argument_list>(<argument>const llvm::DWARFSection &amp;sec</argument>,
<argument>uint64_t pos</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>RelTy</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>RelocAddrEntry</name></expr></argument>&gt;</argument_list></name> <macro><name>findAux</name><argument_list>(<argument>const InputSectionBase &amp;sec</argument>,
<argument>uint64_t pos</argument>,
<argument>ArrayRef&lt;RelTy&gt; rels</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>LLDDWARFSection</name> <name>gnuPubnamesSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>gnuPubtypesSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>infoSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>loclistsSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>rangesSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>rnglistsSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>strOffsetsSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>lineSection</name></expr>;
<expr><name>LLDDWARFSection</name> <name>addrSection</name></expr>;
<expr><name>StringRef</name> <name>abbrevSection</name></expr>;
<expr><name>StringRef</name> <name>strSection</name></expr>;
<expr><name>StringRef</name> <name>lineStrSection</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
