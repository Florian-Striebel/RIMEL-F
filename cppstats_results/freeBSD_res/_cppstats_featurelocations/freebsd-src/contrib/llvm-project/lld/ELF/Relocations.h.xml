<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/Relocations.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_RELOCATIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_RELOCATIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSectionBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OutputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SectionBase</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>RelType</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>JumpModType</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>




<enum>enum <name>RelExpr</name> <block>{
<decl><name>R_ABS</name></decl>,
<decl><name>R_ADDEND</name></decl>,
<decl><name>R_DTPREL</name></decl>,
<decl><name>R_GOT</name></decl>,
<decl><name>R_GOT_OFF</name></decl>,
<decl><name>R_GOT_PC</name></decl>,
<decl><name>R_GOTONLY_PC</name></decl>,
<decl><name>R_GOTPLTONLY_PC</name></decl>,
<decl><name>R_GOTPLT</name></decl>,
<decl><name>R_GOTPLTREL</name></decl>,
<decl><name>R_GOTREL</name></decl>,
<decl><name>R_NONE</name></decl>,
<decl><name>R_PC</name></decl>,
<decl><name>R_PLT</name></decl>,
<decl><name>R_PLT_PC</name></decl>,
<decl><name>R_RELAX_GOT_PC</name></decl>,
<decl><name>R_RELAX_GOT_PC_NOPIC</name></decl>,
<decl><name>R_RELAX_TLS_GD_TO_IE</name></decl>,
<decl><name>R_RELAX_TLS_GD_TO_IE_ABS</name></decl>,
<decl><name>R_RELAX_TLS_GD_TO_IE_GOT_OFF</name></decl>,
<decl><name>R_RELAX_TLS_GD_TO_IE_GOTPLT</name></decl>,
<decl><name>R_RELAX_TLS_GD_TO_LE</name></decl>,
<decl><name>R_RELAX_TLS_GD_TO_LE_NEG</name></decl>,
<decl><name>R_RELAX_TLS_IE_TO_LE</name></decl>,
<decl><name>R_RELAX_TLS_LD_TO_LE</name></decl>,
<decl><name>R_RELAX_TLS_LD_TO_LE_ABS</name></decl>,
<decl><name>R_SIZE</name></decl>,
<decl><name>R_TPREL</name></decl>,
<decl><name>R_TPREL_NEG</name></decl>,
<decl><name>R_TLSDESC</name></decl>,
<decl><name>R_TLSDESC_CALL</name></decl>,
<decl><name>R_TLSDESC_PC</name></decl>,
<decl><name>R_TLSGD_GOT</name></decl>,
<decl><name>R_TLSGD_GOTPLT</name></decl>,
<decl><name>R_TLSGD_PC</name></decl>,
<decl><name>R_TLSIE_HINT</name></decl>,
<decl><name>R_TLSLD_GOT</name></decl>,
<decl><name>R_TLSLD_GOTPLT</name></decl>,
<decl><name>R_TLSLD_GOT_OFF</name></decl>,
<decl><name>R_TLSLD_HINT</name></decl>,
<decl><name>R_TLSLD_PC</name></decl>,






<decl><name>R_AARCH64_GOT_PAGE_PC</name></decl>,
<decl><name>R_AARCH64_GOT_PAGE</name></decl>,
<decl><name>R_AARCH64_PAGE_PC</name></decl>,
<decl><name>R_AARCH64_RELAX_TLS_GD_TO_IE_PAGE_PC</name></decl>,
<decl><name>R_AARCH64_TLSDESC_PAGE</name></decl>,
<decl><name>R_ARM_PCA</name></decl>,
<decl><name>R_ARM_SBREL</name></decl>,
<decl><name>R_MIPS_GOTREL</name></decl>,
<decl><name>R_MIPS_GOT_GP</name></decl>,
<decl><name>R_MIPS_GOT_GP_PC</name></decl>,
<decl><name>R_MIPS_GOT_LOCAL_PAGE</name></decl>,
<decl><name>R_MIPS_GOT_OFF</name></decl>,
<decl><name>R_MIPS_GOT_OFF32</name></decl>,
<decl><name>R_MIPS_TLSGD</name></decl>,
<decl><name>R_MIPS_TLSLD</name></decl>,
<decl><name>R_PPC32_PLTREL</name></decl>,
<decl><name>R_PPC64_CALL</name></decl>,
<decl><name>R_PPC64_CALL_PLT</name></decl>,
<decl><name>R_PPC64_RELAX_TOC</name></decl>,
<decl><name>R_PPC64_TOCBASE</name></decl>,
<decl><name>R_PPC64_RELAX_GOT_PC</name></decl>,
<decl><name>R_RISCV_ADD</name></decl>,
<decl><name>R_RISCV_PC_INDIRECT</name></decl>,
}</block>;</enum>


<struct>struct <name>Relocation</name> <block>{
<decl_stmt><decl><type><name>RelExpr</name></type> <name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>addend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>JumpInstrMod</name> <block>{
<decl_stmt><decl><type><name>JumpModType</name></type> <name>original</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>




<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>scanRelocations</name><parameter_list>(<parameter><decl><type><name>InputSectionBase</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>reportUndefinedSymbols</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>hexagonTLSSymbolUpdate</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>outputSections</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>hexagonNeedsTLSSymbol</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>outputSections</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>ThunkSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Thunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSectionDescription</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ThunkCreator</name> <block>{<block_content>
<label><name>public</name>:</label>

<function_decl><type><name>bool</name></type> <name>createThunks</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>outputSections</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>mergeThunks</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>outputSections</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ThunkSection</name> <modifier>*</modifier></type><name>getISDThunkSec</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>isec</name></decl></parameter>,
<parameter><decl><type><name>InputSectionDescription</name> <modifier>*</modifier></type><name>isd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ThunkSection</name> <modifier>*</modifier></type><name>getISThunkSec</name><parameter_list>(<parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>isec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>createInitialThunkSections</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OutputSection</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>outputSections</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Thunk</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>getThunk</name><argument_list>(<argument>InputSection *isec</argument>, <argument>Relocation &amp;rel</argument>,
<argument>uint64_t src</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>ThunkSection</name> <modifier>*</modifier></type><name>addThunkSection</name><parameter_list>(<parameter><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>InputSectionDescription</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>normalizeExistingThunk</name><parameter_list>(<parameter><decl><type><name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SectionBase</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Thunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>thunkedSymbolsBySectionAndAddend</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Thunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>thunkedSymbols</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>, <argument><expr><name>Thunk</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>thunks</name></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>InputSection</name> <operator>*</operator></expr></argument>, <argument><expr><name>ThunkSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>thunkedSections</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>getAddend</name><argument_list>(<argument><expr><specifier>const</specifier> <name>typename</name> <name>ELFT</name><operator>::</operator><name>Rel</name> <operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>getAddend</name><argument_list>(<argument><expr><specifier>const</specifier> <name>typename</name> <name>ELFT</name><operator>::</operator><name>Rela</name> <operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>rel</name><operator>.</operator><name>r_addend</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RelTy</name></expr></argument>&gt;</argument_list></name>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>RelTy</name></expr></argument>&gt;</argument_list></name></type> <name>sortRels</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>RelTy</name></expr></argument>&gt;</argument_list></name></type> <name>rels</name></decl></parameter>, <parameter><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>RelTy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>cmp</name> <init>= <expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>RelTy</name> <operator>&amp;</operator><name>a</name>, <specifier>const</specifier> <name>RelTy</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <block>{
<return>return <expr><name><name>a</name><operator>.</operator><name>r_offset</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>r_offset</name></name></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>llvm</name><operator>::</operator><call><name>is_sorted</name><argument_list>(<argument><expr><name>rels</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>storage</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>rels</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rels</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>stable_sort</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rels</name> <operator>=</operator> <name>storage</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rels</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
