







#ifndef LLD_ELF_SYMBOL_TABLE_H
#define LLD_ELF_SYMBOL_TABLE_H

#include "InputFiles.h"
#include "Symbols.h"
#include "lld/Common/Strings.h"
#include "llvm/ADT/CachedHashString.h"
#include "llvm/ADT/DenseMap.h"
#include "llvm/ADT/STLExtras.h"

namespace lld {
namespace elf {













class SymbolTable {
  struct FilterOutPlaceholder {
    bool operator()(Symbol *S) const { return !S->isPlaceholder(); }
  };
  using iterator = llvm::filter_iterator<std::vector<Symbol *>::const_iterator,
                                         FilterOutPlaceholder>;

public:
  llvm::iterator_range<iterator> symbols() const {
    return llvm::make_filter_range(symVector, FilterOutPlaceholder());
  }

  void wrap(Symbol *sym, Symbol *real, Symbol *wrap);

  Symbol *insert(StringRef name);

  Symbol *addSymbol(const Symbol &newSym);

  void scanVersionScript();

  Symbol *find(StringRef name);

  void handleDynamicList();

  
  llvm::DenseMap<StringRef, SharedFile *> soNames;

  
  
  
  llvm::DenseMap<llvm::CachedHashStringRef, const InputFile *> comdatGroups;

private:
  std::vector<Symbol *> findByVersion(SymbolVersion ver);
  std::vector<Symbol *> findAllByVersion(SymbolVersion ver,
                                         bool includeNonDefault);

  llvm::StringMap<std::vector<Symbol *>> &getDemangledSyms();
  bool assignExactVersion(SymbolVersion ver, uint16_t versionId,
                          StringRef versionName, bool includeNonDefault);
  void assignWildcardVersion(SymbolVersion ver, uint16_t versionId,
                             bool includeNonDefault);

  
  
  
  
  
  
  
  llvm::DenseMap<llvm::CachedHashStringRef, int> symMap;
  std::vector<Symbol *> symVector;

  
  
  
  
  llvm::Optional<llvm::StringMap<std::vector<Symbol *>>> demangledSyms;
};

extern SymbolTable *symtab;

} 
} 

#endif
