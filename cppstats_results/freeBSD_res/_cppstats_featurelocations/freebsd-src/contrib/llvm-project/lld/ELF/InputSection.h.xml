<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/InputSection.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_INPUT_SECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_INPUT_SECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Relocations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Thunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/TinyPtrVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/ELF.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<struct_decl>struct <name>SectionPiece</name>;</struct_decl>

<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<struct_decl>struct <name>Partition</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>SyntheticSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MergeSyntheticSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>ObjFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OutputSection</name></decl>;</decl_stmt>

<extern>extern std::vector&lt;Partition&gt; partitions;</extern>





<decl_stmt><decl><type><name>class</name></type> <name>SectionBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{ <decl><name>Regular</name></decl>, <decl><name>EHFrame</name></decl>, <decl><name>Merge</name></decl>, <decl><name>Synthetic</name></decl>, <decl><name>Output</name></decl> }</block>;</enum>

<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Kind</name><operator>)</operator><name>sectionKind</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>SectionBase</name> <modifier>*</modifier></type><name>repl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sectionKind</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint8_t</name></type> <name>bss</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>keepUnique</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint8_t</name></type> <name>partition</name></decl>;</decl_stmt>
<expr_stmt><expr><name>elf</name><operator>::</operator><name>Partition</name> <operator>&amp;</operator><macro><name>getPartition</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>alignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>info</name></decl>;</decl_stmt>

<function_decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>getOutputSection</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>OutputSection</name> <operator>*</operator><macro><name>getOutputSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>SectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getOutputSection</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>getOffset</name><argument_list>(<argument><expr><name>uint64_t</name> <name>offset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getVA</name><argument_list>(<argument><expr><name>uint64_t</name> <name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isLive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>partition</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>markLive</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>partition</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>markDead</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>partition</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<macro><name>SectionBase</name><argument_list>(<argument>Kind sectionKind</argument>, <argument>StringRef name</argument>, <argument>uint64_t flags</argument>,
<argument>uint64_t entsize</argument>, <argument>uint64_t alignment</argument>, <argument>uint32_t type</argument>,
<argument>uint32_t info</argument>, <argument>uint32_t link</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>repl</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sectionKind</name><argument_list>(<argument><expr><name>sectionKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>bss</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>keepUnique</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>partition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>alignment</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>entsize</name><argument_list>(<argument><expr><name>entsize</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>link</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>info</name><argument_list>(<argument>info</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>InputSectionBase</name> <range>: <expr><name>public</name> <name>SectionBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<macro><name>InputSectionBase</name><argument_list>(<argument>ObjFile&lt;ELFT&gt; &amp;file</argument>, <argument>const typename ELFT::Shdr &amp;header</argument>,
<argument>StringRef name</argument>, <argument>Kind sectionKind</argument>)</argument_list></macro></expr>;

<macro><name>InputSectionBase</name><argument_list>(<argument>InputFile *file</argument>, <argument>uint64_t flags</argument>, <argument>uint32_t type</argument>,
<argument>uint64_t entsize</argument>, <argument>uint32_t link</argument>, <argument>uint32_t info</argument>,
<argument>uint32_t alignment</argument>, <argument>ArrayRef&lt;uint8_t&gt; data</argument>, <argument>StringRef name</argument>,
<argument>Kind sectionKind</argument>)</argument_list></macro>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const SectionBase *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>Output</name></expr>;</return> }</block>


<name>unsigned</name> <name>numRelocations</name> <operator>:</operator> <literal type="number">31</literal></expr>;
<expr><name>unsigned</name> <name>areRelocsRela</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>firstRelocation</name> <operator>=</operator> <name>nullptr</name></expr>;




<expr><name>InputFile</name> <operator>*</operator><name>file</name></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name><name>ObjFile</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name><name>ObjFile</name><argument_list type="generic">&lt;<argument><expr><name>ELFT</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>





<name>unsigned</name> <name>bytesDropped</name> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>bool</name> <name>nopFiller</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>void</name> <macro><name>drop_back</name><argument_list>(<argument>uint64_t num</argument>)</argument_list></macro> <block>{ <expr><name>bytesDropped</name> <operator>+=</operator> <name>num</name></expr>; }</block>

<name>void</name> <macro><name>push_back</name><argument_list>(<argument>uint64_t num</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>bytesDropped</name> <operator>&gt;=</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bytesDropped</name> <operator>-=</operator> <name>num</name></expr>;
}</block>

<name>void</name> <macro><name>trim</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>bytesDropped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rawData</name> <operator>=</operator> <call><name><name>rawData</name><operator>.</operator><name>drop_back</name></name><argument_list>(<argument><expr><name>bytesDropped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytesDropped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

ArrayRef&lt;uint8_t&gt; data(</block></if></if_stmt>) <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>uncompressedSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>uncompress</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></block></expr>
<return>return <expr><name>rawData</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getOffsetInFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>SectionBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>nextInSectionGroup</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name><operator>::</operator><name>Rel</name></expr></argument>&gt;</argument_list></name> <macro><name>rels</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>areRelocsRela</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><macro><name>makeArrayRef</name><argument_list>(
<argument>static_cast&lt;const typename ELFT::Rel *&gt;(firstRelocation)</argument>,
<argument>numRelocations</argument>)</argument_list></macro></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name><operator>::</operator><name>Rela</name></expr></argument>&gt;</argument_list></name> <macro><name>relas</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>areRelocsRela</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><macro><name>makeArrayRef</name><argument_list>(
<argument>static_cast&lt;const typename ELFT::Rela *&gt;(firstRelocation)</argument>,
<argument>numRelocations</argument>)</argument_list></macro></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>InputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>dependentSections</name></expr>;</expr_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>InputSection</name> <operator>*</operator><macro><name>getLinkOrderDep</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<name>Defined</name> <modifier>*</modifier></type><name>getEnclosingFunction</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getLocation</name><argument_list>(<argument>uint64_t offset</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getSrcMsg</name><argument_list>(<argument>const Symbol &amp;sym</argument>, <argument>uint64_t offset</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getObjMsg</name><argument_list>(<argument>uint64_t offset</argument>)</argument_list></macro></expr>;</expr_stmt>




<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>relocate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bufEnd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>relocateAlloc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bufEnd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>getRelocTargetVA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InputFile</name> <modifier>*</modifier></type><name>File</name></decl></parameter>, <parameter><decl><type><name>RelType</name></type> <name>Type</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>Sym</name></decl></parameter>,
<parameter><decl><type><name>RelExpr</name></type> <name>Expr</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Relocation</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>relocations</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>JumpInstrMod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>jumpInstrMods</name></decl>;</decl_stmt>






<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>adjustSplitStackFunctionPrologues</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>getDataAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>size_t</name> <name>s</name> <operator>=</operator> <call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>makeArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>T</name> <operator>*</operator><operator>)</operator><call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>parseCompressedHeader</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>void</name> <macro><name>uncompress</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mutable</name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>rawData</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>mutable</name> <name>int64_t</name></type> <name>uncompressedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<struct>struct <name>SectionPiece</name> <block>{
<macro><name>SectionPiece</name><argument_list>(<argument>size_t off</argument>, <argument>uint32_t hash</argument>, <argument>bool live</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>inputOff</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>live</name><argument_list>(<argument><expr><name>live</name> <operator>||</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>gcSections</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>hash</name><argument_list>(<argument>hash &gt;&gt; <literal type="number">1</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>uint32_t</name> <name>inputOff</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>live</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>outputOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SectionPiece</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"SectionPiece is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>MergeInputSection</name> <range>: <expr><name>public</name> <name>InputSectionBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<macro><name>MergeInputSection</name><argument_list>(<argument>ObjFile&lt;ELFT&gt; &amp;f</argument>, <argument>const typename ELFT::Shdr &amp;header</argument>,
<argument>StringRef name</argument>)</argument_list></macro></expr>;
<macro><name>MergeInputSection</name><argument_list>(<argument>uint64_t flags</argument>, <argument>uint32_t type</argument>, <argument>uint64_t entsize</argument>,
<argument>ArrayRef&lt;uint8_t&gt; data</argument>, <argument>StringRef name</argument>)</argument_list></macro>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const SectionBase *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Merge</name></expr>;</return> }</block>
<name>void</name> <call><name>splitIntoPieces</name><argument_list>()</argument_list></call></expr>;



<expr><name>uint64_t</name> <macro><name>getParentOffset</name><argument_list>(<argument>uint64_t offset</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SectionPiece</name></expr></argument>&gt;</argument_list></name> <name>pieces</name></expr>;



<expr><name>LLVM_ATTRIBUTE_ALWAYS_INLINE</name>
<name>llvm</name><operator>::</operator><name>CachedHashStringRef</name> <macro><name>getData</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>size_t</name> <name>begin</name> <operator>=</operator> <name><name>pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inputOff</name></expr>;
<expr><name>size_t</name> <name>end</name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><call><name><name>pieces</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>pieces</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>inputOff</name></expr></else></ternary></expr>;
<return>return <expr><block>{<expr><call><name>toStringRef</name><argument_list>(<argument><expr><call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><call><name>slice</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><name><name>pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr>}</block></expr>;</return>
}</block>


<name>SectionPiece</name> <operator>*</operator><macro><name>getSectionPiece</name><argument_list>(<argument>uint64_t offset</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>SectionPiece</name> <operator>*</operator><macro><name>getSectionPiece</name><argument_list>(<argument>uint64_t offset</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>MergeInputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getSectionPiece</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>SyntheticSection</name> <operator>*</operator><macro><name>getParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>splitStrings</name><argument_list>(<argument>ArrayRef&lt;uint8_t&gt; a</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>splitNonStrings</name><argument_list>(<argument>ArrayRef&lt;uint8_t&gt; a</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>EhSectionPiece</name> <block>{
<macro><name>EhSectionPiece</name><argument_list>(<argument>size_t off</argument>, <argument>InputSectionBase *sec</argument>, <argument>uint32_t size</argument>,
<argument>unsigned firstRelocation</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>inputOff</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sec</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>firstRelocation</name><argument_list>(<argument>firstRelocation</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><call><name><name>sec</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>this</name><operator>-&gt;</operator><name>inputOff</name></name></expr>, <expr><name>size</name></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>inputOff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>outputOff</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>firstRelocation</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>EhInputSection</name> <range>: <expr><name>public</name> <name>InputSectionBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<macro><name>EhInputSection</name><argument_list>(<argument>ObjFile&lt;ELFT&gt; &amp;f</argument>, <argument>const typename ELFT::Shdr &amp;header</argument>,
<argument>StringRef name</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const SectionBase *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>EHFrame</name></expr>;</return> }</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>split</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>, <argument><expr><name>class</name> <name>RelTy</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>split</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>RelTy</name></expr></argument>&gt;</argument_list></name> <name>rels</name></expr></argument>)</argument_list></call></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>EhSectionPiece</name></expr></argument>&gt;</argument_list></name> <name>pieces</name></expr>;

<expr><name>SyntheticSection</name> <operator>*</operator><macro><name>getParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name> <range>: <expr><name>public</name> <name>InputSectionBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>InputSection</name><argument_list>(<argument>InputFile *f</argument>, <argument>uint64_t flags</argument>, <argument>uint32_t type</argument>, <argument>uint32_t alignment</argument>,
<argument>ArrayRef&lt;uint8_t&gt; data</argument>, <argument>StringRef name</argument>, <argument>Kind k = Regular</argument>)</argument_list></macro></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name>
<macro><name>InputSection</name><argument_list>(<argument>ObjFile&lt;ELFT&gt; &amp;f</argument>, <argument>const typename ELFT::Shdr &amp;header</argument>,
<argument>StringRef name</argument>)</argument_list></macro></expr>;



<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>writeTo</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;

<expr><name>uint64_t</name> <macro><name>getOffset</name><argument_list>(<argument>uint64_t offset</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>outSecOff</name> <operator>+</operator> <name>offset</name></expr>;</return> }</block>

<name>OutputSection</name> <operator>*</operator><macro><name>getParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;





<expr><name>uint64_t</name> <name>outSecOff</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><specifier>static</specifier> <name>bool</name> <call><name>classof</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SectionBase</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;

<expr><name>InputSectionBase</name> <operator>*</operator><macro><name>getRelocatedSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>, <argument><expr><name>class</name> <name>RelTy</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <call><name>relocateNonAlloc</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>RelTy</name></expr></argument>&gt;</argument_list></name> <name>rels</name></expr></argument>)</argument_list></call></expr>;


<expr><name>uint32_t</name> <name><name>eqClass</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;


<expr><name>void</name> <call><name>replace</name><argument_list>(<argument><expr><name>InputSection</name> <operator>*</operator><name>other</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>InputSection</name> <name>discarded</name></expr>;

<expr><name>private</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>, <argument><expr><name>class</name> <name>RelTy</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <call><name>copyRelocations</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>RelTy</name></expr></argument>&gt;</argument_list></name> <name>rels</name></expr></argument>)</argument_list></call></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name> <call><name>copyShtGroup</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InputSection</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><literal type="string">"InputSection is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InputSection</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <literal type="number">184</literal></expr></argument>, <argument><expr><literal type="string">"InputSection is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isDebugSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InputSectionBase</name> <modifier>&amp;</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>sec</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>SHF_ALLOC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name><name>sec</name><operator>.</operator><name>name</name><operator>.</operator><name>startswith</name></name><argument_list>(<argument><expr><literal type="string">".debug"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>sec</name><operator>.</operator><name>name</name><operator>.</operator><name>startswith</name></name><argument_list>(<argument><expr><literal type="string">".zdebug"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<extern>extern std::vector&lt;InputSectionBase *&gt; inputSections;</extern>




<extern>extern llvm::DenseSet&lt;std::pair&lt;const Symbol *<operator>,</operator> uint64_t&gt;&gt; ppc64noTocRelax;</extern>

</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>elf</name><operator>::</operator><name>InputSectionBase</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
