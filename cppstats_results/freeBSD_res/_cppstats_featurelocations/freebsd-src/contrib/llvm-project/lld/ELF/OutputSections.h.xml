<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/OutputSections.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_OUTPUT_SECTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_OUTPUT_SECTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LinkerScript.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Relocations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/MC/StringTableBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/ELF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>

<struct_decl>struct <name>PhdrEntry</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>InputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSectionBase</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name> <name>OutputSection</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BaseCommand</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>SectionBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>OutputSection</name><argument_list>(<argument>StringRef name</argument>, <argument>uint32_t type</argument>, <argument>uint64_t flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SectionBase</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SectionBase</name><operator>::</operator><name>Output</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BaseCommand</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getLMA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ptLoad</name> <operator>?</operator> <name>addr</name> <operator>+</operator> <name><name>ptLoad</name><operator>-&gt;</operator><name>lmaOffset</name></name> <operator>:</operator> <name>addr</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>writeHeaderTo</name><argument_list>(<argument><expr><name>typename</name> <name>ELFT</name><operator>::</operator><name>Shdr</name> <operator>*</operator><name>sHdr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sectionIndex</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sortRank</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>getPhdrFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<decl_stmt><decl><type><name>PhdrEntry</name> <modifier>*</modifier></type><name>ptLoad</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>relocationSection</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>shName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>recordSection</name><parameter_list>(<parameter><decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>isec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commitSection</name><parameter_list>(<parameter><decl><type><name>InputSection</name> <modifier>*</modifier></type><name>isec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>finalizeInputSections</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>MemoryRegion</name> <modifier>*</modifier></type><name>memRegion</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemoryRegion</name> <modifier>*</modifier></type><name>lmaRegion</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name></type> <name>addrExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name></type> <name>alignExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name></type> <name>lmaExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name></type> <name>subalignExpr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BaseCommand</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>sectionCommands</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>phdrs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>filler</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstraintKind</name></type> <name>constraint</name> <init>= <expr><name>ConstraintKind</name><operator>::</operator><name>NoConstraint</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>location</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>memoryRegionName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>lmaRegionName</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nonAlloc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noload</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>expressionsUseSymbols</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>usedInExpression</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>inOverlay</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>hasInputSections</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>finalize</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>checkDynRelAddends</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bufStart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>maybeCompress</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>sort</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>int</name><operator>(</operator><name>InputSectionBase</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>order</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>sortInitFini</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sortCtorsDtors</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>zDebugHeader</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>compressedData</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <call><name>getFiller</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>int</name></type> <name>getPriority</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>InputSection</name> <modifier>*</modifier></type><name>getFirstInputSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OutputSection</name> <modifier>*</modifier></type><name>os</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputSection</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getInputSections</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OutputSection</name> <operator>*</operator><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<struct>struct <name>Out</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bufferStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PhdrEntry</name> <modifier>*</modifier></type><name>tlsPhdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OutputSection</name> <modifier>*</modifier></type><name>elfHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OutputSection</name> <modifier>*</modifier></type><name>programHeaders</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OutputSection</name> <modifier>*</modifier></type><name>preinitArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OutputSection</name> <modifier>*</modifier></type><name>initArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OutputSection</name> <modifier>*</modifier></type><name>finiArray</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>uint64_t</name></type> <name>getHeaderSize</name><parameter_list>()</parameter_list>;</function_decl>

<extern>extern std::vector&lt;OutputSection *&gt; outputSections;</extern>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
