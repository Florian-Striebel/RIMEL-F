<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/SymbolTable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_SYMBOL_TABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_SYMBOL_TABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputFiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Symbols.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>













<decl_stmt><decl><type><name>class</name></type> <name>SymbolTable</name> <block>{<block_content>
<struct>struct <name>FilterOutPlaceholder</name> <block>{
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>Symbol</name> <operator>*</operator><name>S</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>S</name><operator>-&gt;</operator><name>isPlaceholder</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>filter_iterator</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></argument>,
<argument><expr><name>FilterOutPlaceholder</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>symbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_filter_range</name><argument_list>(<argument><expr><name>symVector</name></expr></argument>, <argument><expr><call><name>FilterOutPlaceholder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>wrap</name><parameter_list>(<parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>real</name></decl></parameter>, <parameter><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>wrap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>insert</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>addSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>newSym</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>scanVersionScript</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>Symbol</name> <modifier>*</modifier></type><name>find</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>handleDynamicList</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>SharedFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>soNames</name></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashStringRef</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>InputFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>comdatGroups</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>findByVersion</name><argument_list>(<argument>SymbolVersion ver</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>findAllByVersion</name><argument_list>(<argument>SymbolVersion ver</argument>,
<argument>bool includeNonDefault</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>getDemangledSyms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>assignExactVersion</name><parameter_list>(<parameter><decl><type><name>SymbolVersion</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>versionId</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>versionName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>includeNonDefault</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>assignWildcardVersion</name><parameter_list>(<parameter><decl><type><name>SymbolVersion</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>versionId</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>includeNonDefault</name></decl></parameter>)</parameter_list>;</function_decl>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashStringRef</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>symMap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>symVector</name></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Symbol</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>demangledSyms</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SymbolTable</name> <modifier>*</modifier></type><name>symtab</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
