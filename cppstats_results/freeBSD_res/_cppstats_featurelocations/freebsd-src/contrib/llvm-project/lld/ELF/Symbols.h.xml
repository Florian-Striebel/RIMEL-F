<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/Symbols.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_SYMBOLS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_SYMBOLS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputFiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/Strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/Archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/ELF.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>elf</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toELFString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommonSymbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LazyArchive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LazyObject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SharedSymbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Undefined</name></decl>;</decl_stmt>







<struct>struct <name>StringRefZ</name> <block>{
<expr_stmt><expr><call><name>StringRefZ</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>StringRefZ</name><argument_list>(<argument>StringRef s</argument>)</argument_list></macro> <operator>:</operator> <call><name>data</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size</name><argument_list>(<argument>s.size()</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>PlaceholderKind</name></decl>,
<decl><name>DefinedKind</name></decl>,
<decl><name>CommonKind</name></decl>,
<decl><name>SharedKind</name></decl>,
<decl><name>UndefinedKind</name></decl>,
<decl><name>LazyArchiveKind</name></decl>,
<decl><name>LazyObjectKind</name></decl>,
}</block>;</enum>

<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>symbolKind</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>uint32_t</name></type> <name>nameSize</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dynsymIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>gotIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pltIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>globalDynIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>verdefIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>versionId</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint8_t</name></type> <name>binding</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stOther</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>symbolKind</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>visibility</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint8_t</name></type> <name>isUsedInRegularObj</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>









<decl_stmt><decl><type><name>uint8_t</name></type> <name>exportDynamic</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint8_t</name></type> <name>inDynamicList</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint8_t</name></type> <name>canInline</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint8_t</name></type> <name>referenced</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>traced</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>newSym</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>includeInDynsym</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint8_t</name> <macro><name>computeBinding</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isWeak</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>binding</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STB_WEAK</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUndefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>symbolKind</name> <operator>==</operator> <name>UndefinedKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isCommon</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>symbolKind</name> <operator>==</operator> <name>CommonKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isDefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>symbolKind</name> <operator>==</operator> <name>DefinedKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isShared</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>symbolKind</name> <operator>==</operator> <name>SharedKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPlaceholder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>symbolKind</name> <operator>==</operator> <name>PlaceholderKind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isLocal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>binding</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STB_LOCAL</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isLazy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>symbolKind</name> <operator>==</operator> <name>LazyArchiveKind</name> <operator>||</operator> <name>symbolKind</name> <operator>==</operator> <name>LazyObjectKind</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isUndefWeak</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><call><name>isWeak</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isUndefined</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isLazy</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>nameSize</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nameSize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nameData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><block>{<expr><name>nameData</name></expr>, <expr><name>nameSize</name></expr>}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>nameData</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nameSize</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>parseSymbolVersion</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getVersionSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><operator>(</operator><name>void</name><operator>)</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>nameData</name> <operator>+</operator> <name>nameSize</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isInGot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>gotIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1U</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInPlt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>pltIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1U</literal></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getVA</name><argument_list>(<argument><expr><name>int64_t</name> <name>addend</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getGotOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getGotVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getGotPltOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getGotPltVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getPltVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>OutputSection</name> <operator>*</operator><macro><name>getOutputSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>














<function_decl><type><name>void</name></type> <name>mergeProperties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resolve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>void</name> <macro><name>fetch</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isExportDynamic</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>visibility</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>SharedKind</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>visibility</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STV_DEFAULT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>config</name><operator>-&gt;</operator><name>shared</name></name> <operator>||</operator> <name><name>config</name><operator>-&gt;</operator><name>exportDynamic</name></name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>resolveUndefined</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Undefined</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resolveCommon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommonSymbol</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resolveDefined</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Defined</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>LazyT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>resolveLazy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LazyT</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resolveShared</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SharedSymbol</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>*</operator><name>other</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>size_t</name> <macro><name>getSymbolSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<macro><name>Symbol</name><argument_list>(<argument>Kind k</argument>, <argument>InputFile *file</argument>, <argument>StringRefZ name</argument>, <argument>uint8_t binding</argument>,
<argument>uint8_t stOther</argument>, <argument>uint8_t type</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nameData</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nameSize</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>binding</name><argument_list>(<argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>stOther</name><argument_list>(<argument><expr><name>stOther</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>symbolKind</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>visibility</name><argument_list>(<argument><expr><name>stOther</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>isUsedInRegularObj</name><argument_list>(<argument><expr><operator>!</operator><name>file</name> <operator>||</operator> <call><name><name>file</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>InputFile</name><operator>::</operator><name>ObjKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>exportDynamic</name><argument_list>(<argument><expr><call><name>isExportDynamic</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>inDynamicList</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>canInline</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>referenced</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>traced</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>needsPltAddr</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>isInIplt</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>gotInIgot</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>isPreemptible</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>used</name><argument_list>(<argument><expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>gcSections</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>needsTocRestore</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>scriptDefined</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>


<name>uint8_t</name> <name>needsPltAddr</name> <operator>:</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>isInIplt</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>gotInIgot</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>isPreemptible</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint8_t</name></type> <name>used</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>needsTocRestore</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>scriptDefined</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>partition</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_SECTION</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isTls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_TLS</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isFunc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_FUNC</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isGnuIFunc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_GNU_IFUNC</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isObject</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_OBJECT</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_FILE</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Defined</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Defined</name><argument_list>(<argument>InputFile *file</argument>, <argument>StringRefZ name</argument>, <argument>uint8_t binding</argument>, <argument>uint8_t stOther</argument>,
<argument>uint8_t type</argument>, <argument>uint64_t value</argument>, <argument>uint64_t size</argument>, <argument>SectionBase *section</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>DefinedKind</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>, <argument><expr><name>stOther</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>, <macro><name>section</name><argument_list>(<argument>section</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>isDefined</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>uint64_t</name> <name>value</name></expr>;
<expr><name>uint64_t</name> <name>size</name></expr>;
<expr><name>SectionBase</name> <operator>*</operator><name>section</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






















<decl_stmt><decl><type><name>class</name></type> <name>CommonSymbol</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>CommonSymbol</name><argument_list>(<argument>InputFile *file</argument>, <argument>StringRefZ name</argument>, <argument>uint8_t binding</argument>,
<argument>uint8_t stOther</argument>, <argument>uint8_t type</argument>, <argument>uint64_t alignment</argument>, <argument>uint64_t size</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>CommonKind</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>, <argument><expr><name>stOther</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>alignment</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>, <macro><name>size</name><argument_list>(<argument>size</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>isCommon</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>uint32_t</name> <name>alignment</name></expr>;
<expr><name>uint64_t</name> <name>size</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Undefined</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Undefined</name><argument_list>(<argument>InputFile *file</argument>, <argument>StringRefZ name</argument>, <argument>uint8_t binding</argument>, <argument>uint8_t stOther</argument>,
<argument>uint8_t type</argument>, <argument>uint32_t discardedSecIdx = <literal type="number">0</literal></argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>UndefinedKind</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>, <argument><expr><name>stOther</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>,
<macro><name>discardedSecIdx</name><argument_list>(<argument>discardedSecIdx</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>UndefinedKind</name></expr>;</return> }</block>


<name>uint32_t</name> <name>discardedSecIdx</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SharedSymbol</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SharedKind</name></expr>;</return> }</block>

<macro><name>SharedSymbol</name><argument_list>(<argument>InputFile &amp;file</argument>, <argument>StringRef name</argument>, <argument>uint8_t binding</argument>,
<argument>uint8_t stOther</argument>, <argument>uint8_t type</argument>, <argument>uint64_t value</argument>, <argument>uint64_t size</argument>,
<argument>uint32_t alignment</argument>, <argument>uint32_t verdefIndex</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>SharedKind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>, <argument><expr><name>stOther</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>, <macro><name>alignment</name><argument_list>(<argument>alignment</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>verdefIndex</name></name> <operator>=</operator> <name>verdefIndex</name></expr>;
















<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_GNU_IFUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_FUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>SharedFile</name> <operator>&amp;</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>SharedFile</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>uint64_t</name> <name>value</name></expr>;
<expr><name>uint64_t</name> <name>size</name></expr>;
<expr><name>uint32_t</name> <name>alignment</name></expr>;
}</block></expr></range></decl>;</decl_stmt>















<decl_stmt><decl><type><name>class</name></type> <name>LazyArchive</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>LazyArchive</name><argument_list>(<argument>InputFile &amp;file</argument>, <argument>const llvm::object::Archive::Symbol s</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Symbol</name><argument_list>(<argument><expr><name>LazyArchiveKind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STB_GLOBAL</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STV_DEFAULT</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_NOTYPE</name></expr></argument>)</argument_list></call></expr>,
<macro><name>sym</name><argument_list>(<argument>s</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyArchiveKind</name></expr>;</return> }</block>

<name>MemoryBufferRef</name> <call><name>getMemberBuffer</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>Archive</name><operator>::</operator><name>Symbol</name> <name>sym</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>LazyObject</name> <range>: <expr><name>public</name> <name>Symbol</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>LazyObject</name><argument_list>(<argument>InputFile &amp;file</argument>, <argument>StringRef name</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Symbol</name><argument_list>(<argument>LazyObjectKind</argument>, <argument>&amp;file</argument>, <argument>name</argument>, <argument>llvm::ELF::STB_GLOBAL</argument>,
<argument>llvm::ELF::STV_DEFAULT</argument>, <argument>llvm::ELF::STT_NOTYPE</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Symbol *s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyObjectKind</name></expr>;</return> }</block>
}</expr>;



struct <expr><name>ElfSym</name> <block>{

<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>bss</name></expr>;


<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>etext1</name></expr>;
<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>etext2</name></expr>;


<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>edata1</name></expr>;
<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>edata2</name></expr>;


<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>end1</name></expr>;
<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>end2</name></expr>;




<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>globalOffsetTable</name></expr>;


<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>mipsGp</name></expr>;
<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>mipsGpDisp</name></expr>;
<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>mipsLocalGp</name></expr>;


<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>relaIpltStart</name></expr>;
<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>relaIpltEnd</name></expr>;


<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>riscvGlobalPointer</name></expr>;


<expr><specifier>static</specifier> <name>Defined</name> <operator>*</operator><name>tlsModuleBase</name></expr>;
}</block></expr>;




<expr>union <name>SymbolUnion</name> <block>{
<macro><name>alignas</name><argument_list>(<argument>Defined</argument>)</argument_list></macro> <expr><name>char</name> <name><name>a</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Defined</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;
<macro><name>alignas</name><argument_list>(<argument>CommonSymbol</argument>)</argument_list></macro> <expr><name>char</name> <name><name>b</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommonSymbol</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;
<macro><name>alignas</name><argument_list>(<argument>Undefined</argument>)</argument_list></macro> <expr><name>char</name> <name><name>c</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Undefined</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;
<macro><name>alignas</name><argument_list>(<argument>SharedSymbol</argument>)</argument_list></macro> <expr><name>char</name> <name><name>d</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SharedSymbol</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;
<macro><name>alignas</name><argument_list>(<argument>LazyArchive</argument>)</argument_list></macro> <expr><name>char</name> <name><name>e</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazyArchive</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;
<macro><name>alignas</name><argument_list>(<argument>LazyObject</argument>)</argument_list></macro> <expr><name>char</name> <name><name>f</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazyObject</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;
}</block></expr>;




<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SymbolUnion</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><literal type="string">"SymbolUnion too large"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> struct <name>AssertSymbol</name> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>is_trivially_destructible</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Symbol types must be trivially destructible"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SymbolUnion</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SymbolUnion too small"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>SymbolUnion</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"SymbolUnion not aligned enough"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <macro><name>assertSymbols</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>AssertSymbol</name><argument_list type="generic">&lt;<argument><expr><name>Defined</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>AssertSymbol</name><argument_list type="generic">&lt;<argument><expr><name>CommonSymbol</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>AssertSymbol</name><argument_list type="generic">&lt;<argument><expr><name>Undefined</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>AssertSymbol</name><argument_list type="generic">&lt;<argument><expr><name>SharedSymbol</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>AssertSymbol</name><argument_list type="generic">&lt;<argument><expr><name>LazyArchive</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>AssertSymbol</name><argument_list type="generic">&lt;<argument><expr><name>LazyObject</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <call><name>printTraceSymbol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>*</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;

<expr><name>size_t</name> <name>Symbol</name><operator>::</operator><macro><name>getSymbolSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>kind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CommonKind</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommonSymbol</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>DefinedKind</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Defined</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>LazyArchiveKind</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazyArchive</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>LazyObjectKind</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>LazyObject</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>SharedKind</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SharedSymbol</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>UndefinedKind</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Undefined</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>PlaceholderKind</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Symbol</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("unknown symbol kind"</block></switch>)</block></expr>;
}</block>




<name>void</name> <name>Symbol</name><operator>::</operator><macro><name>replace</name><argument_list>(<argument>const Symbol &amp;newSym</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_TLS</name></expr>;








<if_stmt><if>if <condition>(<expr><name>symbolKind</name> <operator>!=</operator> <name>PlaceholderKind</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>newSym</name><operator>.</operator><name>isLazy</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>STT_TLS</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>newSym</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STT_TLS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>type</name> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>STT_NOTYPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"TLS attribute mismatch: "</literal> <operator>+</operator> <call><name>toString</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n&gt;&gt;&gt; defined in "</literal> <operator>+</operator>
<call><name>toString</name><argument_list>(<argument><expr><name><name>newSym</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n&gt;&gt;&gt; defined in "</literal> <operator>+</operator> <call><name>toString</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<name>Symbol</name> <name>old</name> <operator>=</operator> <operator>*</operator><name>this</name></block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newSym</name></expr></argument>, <argument><expr><call><name><name>newSym</name><operator>.</operator><name>getSymbolSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>versionId</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>versionId</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>visibility</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>visibility</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>isUsedInRegularObj</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>isUsedInRegularObj</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>exportDynamic</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>exportDynamic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inDynamicList</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>inDynamicList</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>canInline</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>canInline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>referenced</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>referenced</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>traced</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>traced</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>isPreemptible</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>isPreemptible</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scriptDefined</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>scriptDefined</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>partition</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>partition</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>nameData</name> <operator>==</operator> <name><name>old</name><operator>.</operator><name>nameData</name></name> <operator>&amp;&amp;</operator> <name>nameSize</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>old</name><operator>.</operator><name>nameSize</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nameSize</name> <operator>=</operator> <name><name>old</name><operator>.</operator><name>nameSize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>traced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printTraceSymbol</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>void</name></type> <name>maybeWarnUnorderableSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>computeIsPreemptible</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>reportBackrefs</name><parameter_list>()</parameter_list>;</function_decl>



<extern>extern llvm::DenseMap&lt;const Symbol *<operator>,</operator>
std::pair&lt;const InputFile *<operator>,</operator> const InputFile *&gt;&gt;
backwardReferences;</extern>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
