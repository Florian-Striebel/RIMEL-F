<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/ScriptLexer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_SCRIPT_LEXER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_SCRIPT_LEXER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ScriptLexer</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>ScriptLexer</name><parameter_list>(<parameter><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tokenize</name><parameter_list>(<parameter><decl><type><name>MemoryBufferRef</name></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>skipSpace</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>atEOF</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>next</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>peek</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>peek2</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>skip</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>consume</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>tok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>expect</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>expect</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>consumeLabel</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>tok</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>getCurrentLocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <name>mbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>tokens</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>inExpr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lastLineNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lastLineNumberOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<function_decl><type><name>MemoryBufferRef</name></type> <name>getCurrentMB</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>maybeSplitExpr</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>getLine</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>getLineNumber</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>getColumnNumber</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
