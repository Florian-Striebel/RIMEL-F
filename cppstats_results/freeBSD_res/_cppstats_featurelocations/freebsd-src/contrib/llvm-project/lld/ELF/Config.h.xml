<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/Config.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_CONFIG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/ErrorHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/MapVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/ELF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CachePruning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CodeGen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/GlobPattern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/PrettyStackTrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSectionBase</name></decl>;</decl_stmt>

<enum>enum <name>ELFKind</name> <block>{
<decl><name>ELFNoneKind</name></decl>,
<decl><name>ELF32LEKind</name></decl>,
<decl><name>ELF32BEKind</name></decl>,
<decl><name>ELF64LEKind</name></decl>,
<decl><name>ELF64BEKind</name></decl>
}</block>;</enum>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>BsymbolicKind</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>NonWeakFunctions</name></expr><operator>,</operator> <expr><name>Functions</name></expr><operator>,</operator> <expr><name>All</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>BuildIdKind</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>Fast</name></expr><operator>,</operator> <expr><name>Md5</name></expr><operator>,</operator> <expr><name>Sha1</name></expr><operator>,</operator> <expr><name>Hexstring</name></expr><operator>,</operator> <expr><name>Uuid</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>DiscardPolicy</name> <block>{<block_content> <expr_stmt><expr><name>Default</name></expr><operator>,</operator> <expr><name>All</name></expr><operator>,</operator> <expr><name>Locals</name></expr><operator>,</operator> <expr><name>None</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ICFLevel</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>Safe</name></expr><operator>,</operator> <expr><name>All</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>StripPolicy</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>All</name></expr><operator>,</operator> <expr><name>Debug</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>UnresolvedPolicy</name> <block>{<block_content> <expr_stmt><expr><name>ReportError</name></expr><operator>,</operator> <expr><name>Warn</name></expr><operator>,</operator> <expr><name>Ignore</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OrphanHandlingPolicy</name> <block>{<block_content> <expr_stmt><expr><name>Place</name></expr><operator>,</operator> <expr><name>Warn</name></expr><operator>,</operator> <expr><name>Error</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SortSectionPolicy</name> <block>{<block_content> <expr_stmt><expr><name>Default</name></expr><operator>,</operator> <expr><name>None</name></expr><operator>,</operator> <expr><name>Alignment</name></expr><operator>,</operator> <expr><name>Name</name></expr><operator>,</operator> <expr><name>Priority</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Target2Policy</name> <block>{<block_content> <expr_stmt><expr><name>Abs</name></expr><operator>,</operator> <expr><name>Rel</name></expr><operator>,</operator> <expr><name>GotRel</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ARMVFPArgKind</name> <block>{<block_content> <expr_stmt><expr><name>Default</name></expr><operator>,</operator> <expr><name>Base</name></expr><operator>,</operator> <expr><name>VFP</name></expr><operator>,</operator> <expr><name>ToolChain</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SeparateSegmentKind</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>Code</name></expr><operator>,</operator> <expr><name>Loadable</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>GnuStackKind</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>Exec</name></expr><operator>,</operator> <expr><name>NoExec</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>SymbolVersion</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isExternCpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasWildcard</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>VersionDefinition</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SymbolVersion</name></expr></argument>&gt;</argument_list></name> <name>nonLocalPatterns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SymbolVersion</name></expr></argument>&gt;</argument_list></name> <name>localPatterns</name></expr>;</expr_stmt>
}</block>;</struct>





<struct>struct <name>Configuration</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>osabi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>andFeatures</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CachePruningPolicy</name> <name>thinLTOCachePolicy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashString</name></expr></argument>&gt;</argument_list></name> <name>dependencyFiles</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>sectionStartMap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>bfdname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>chroot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>dependencyFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>dwoDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>dynamicLinker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>emulation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>fini</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>init</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoAAPipeline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoCSProfileFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoNewPmPasses</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoObjPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoSampleProfile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>mapFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>outputFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>optRemarksFilename</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>optRemarksHotnessThreshold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>optRemarksPasses</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>optRemarksFormat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>progName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>printArchiveStats</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>printSymbolOrder</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>soName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>sysroot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>thinLTOCacheDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>thinLTOIndexOnlyArg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ltoBasicBlockSections</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>thinLTOObjectSuffixReplace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>thinLTOPrefixReplace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>rpath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VersionDefinition</name></expr></argument>&gt;</argument_list></name> <name>versionDefinitions</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>auxiliaryList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>filterList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>searchPaths</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>symbolOrderingFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>thinLTOModulesToCompile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>undefined</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SymbolVersion</name></expr></argument>&gt;</argument_list></name> <name>dynamicList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>buildIdVector</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>InputSectionBase</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>InputSectionBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name>
<name>callGraphProfile</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>allowMultipleDefinition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>androidPackDynRelocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>armHasBlx</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>armHasMovtMovw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>armJ1J2BranchEncoding</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>asNeeded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BsymbolicKind</name></type> <name>bsymbolic</name> <init>= <expr><name>BsymbolicKind</name><operator>::</operator><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>callGraphProfileSort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>checkSections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>checkDynamicRelocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>compressDebugSections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cref</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>GlobPattern</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>deadRelocInNonAlloc</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>defineCommon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>demangle</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dependentLibraries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>disableVerify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ehFrameHdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitLLVM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>emitRelocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enableNewDtags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>executeOnly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exportDynamic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fixCortexA53Errata843419</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fixCortexA8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>formatBinary</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fortranCommon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gcSections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gdbIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gnuHash</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gnuUnique</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasDynSymTab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignoreDataAddressEquality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignoreFunctionAddressEquality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoCSProfileGenerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoDebugPassManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoEmitAsm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoNewPassManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoPseudoProbeForProfiling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoUniqueBasicBlockSectionNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltoWholeProgramVisibility</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mergeArmExidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mipsN32Abi</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mmapOutputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nmagic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noDynamicLinker</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noinhibitExec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nostdlib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>oFormatBinary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>omagic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>optEB</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>optEL</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>optimizeBBJumps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>optRemarksWithHotness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>picThunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>printGcSections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>printIcfSections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>relocatable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>relrPackDynRelocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>saveTemps</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>GlobPattern</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>shuffleSections</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>singleRoRx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>shared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>symbolic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isStatic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sysvHash</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>target1Rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>thinLTOEmitImportsFiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>thinLTOIndexOnly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>timeTraceEnabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tocOptimize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pcRelOptimize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>undefinedVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unique</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>useAndroidRelrTags</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnBackrefs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>GlobPattern</name></expr></argument>&gt;</argument_list></name> <name>warnBackrefsExclude</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnCommon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnMissingEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>warnSymbolOrdering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>writeAddends</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zCombreloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zCopyreloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zForceBti</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zForceIbt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zGlobal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zHazardplt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zIfuncNoplt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zInitfirst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zInterpose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zKeepTextSectionPrefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zNodefaultlib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zNodelete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zNodlopen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zNow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zPacPlt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zRelro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zRodynamic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zShstk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zStartStopGC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>zStartStopVisibility</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zText</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zRetpolineplt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zWxneeded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiscardPolicy</name></type> <name>discard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GnuStackKind</name></type> <name>zGnustack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICFLevel</name></type> <name>icf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OrphanHandlingPolicy</name></type> <name>orphanHandling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SortSectionPolicy</name></type> <name>sortSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StripPolicy</name></type> <name>strip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UnresolvedPolicy</name></type> <name>unresolvedSymbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UnresolvedPolicy</name></type> <name>unresolvedSymbolsInShlib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Target2Policy</name></type> <name>target2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Power10Stub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ARMVFPArgKind</name></type> <name>armVFPArgs</name> <init>= <expr><name>ARMVFPArgKind</name><operator>::</operator><name>Default</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BuildIdKind</name></type> <name>buildId</name> <init>= <expr><name>BuildIdKind</name><operator>::</operator><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeparateSegmentKind</name></type> <name>zSeparate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ELFKind</name></type> <name>ekind</name> <init>= <expr><name>ELFNoneKind</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>emachine</name> <init>= <expr><name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>EM_NONE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>imageBase</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>commonPageSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxPageSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mipsGotSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>zStackSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ltoPartitions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ltoo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>optimize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>thinLTOJobs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>timeTraceGranularity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>splitStackAdjustSize</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>copyRelocs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>is64</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isLE</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endianness</name> <name>endianness</name></expr>;</expr_stmt>













<decl_stmt><decl><type><name>bool</name></type> <name>isMips64EL</name></decl>;</decl_stmt>













<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>hasStaticTlsModel</name><block>{<expr><name>false</name></expr>}</block></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>eflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>















<decl_stmt><decl><type><name>bool</name></type> <name>isRela</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isPic</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>wordsize</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>extern</specifier> <name>Configuration</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VersionDefinition</name></expr></argument>&gt;</argument_list></name></type> <name>namedVersionDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>versionDefinitions</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>slice</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>errorOrWarn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>noinhibitExec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>internalLinkerError</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>errorOrWarn</name><argument_list>(<argument><expr><name>loc</name> <operator>+</operator> <literal type="string">"internal linker error: "</literal> <operator>+</operator> <name>msg</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator>
<name>llvm</name><operator>::</operator><call><name>getBugReportMsg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
