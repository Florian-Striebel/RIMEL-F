<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/Target.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_TARGET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_TARGET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InputSection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/ErrorHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Object/ELF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>(<argument>elf::RelType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <name>uint32_t</name> <macro><name>calcEFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>RelExpr</name></type> <name>getRelExpr</name><argument_list>(<argument><expr><name>RelType</name> <name>type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>s</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>RelType</name></type> <name>getDynRel</name><argument_list>(<argument><expr><name>RelType</name> <name>type</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeGotPltHeader</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeGotHeader</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeGotPlt</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeIgotPlt</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>int64_t</name></type> <name>getImplicitAddend</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>RelType</name> <name>type</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>getTlsGdRelaxSkip</name><argument_list>(<argument><expr><name>RelType</name> <name>type</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writePltHeader</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writePlt</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>pltEntryAddr</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeIplt</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>pltEntryAddr</name></expr></argument>)</argument_list> const <block>{<block_content>

<expr_stmt><expr><call><name>writePlt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>pltEntryAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeIBTPlt</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>numEntries</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addPltHeaderSymbols</name><argument_list>(<argument><expr><name>InputSection</name> <operator>&amp;</operator><name>isec</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addPltSymbols</name><argument_list>(<argument><expr><name>InputSection</name> <operator>&amp;</operator><name>isec</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>off</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>usesOnlyLowPageBits</name><argument_list>(<argument><expr><name>RelType</name> <name>type</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>needsThunk</name><argument_list>(<argument><expr><name>RelExpr</name> <name>expr</name></expr></argument>, <argument><expr><name>RelType</name> <name>relocType</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>InputFile</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>branchAddr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Symbol</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>int64_t</name> <name>a</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>virtual</name> <name>uint32_t</name> <macro><name>getThunkSectionSpacing</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>adjustPrologueForCrossSplitStack</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>end</name></expr></argument>,
<argument><expr><name>uint8_t</name> <name>stOther</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>inBranchRange</name><argument_list>(<argument><expr><name>RelType</name> <name>type</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>src</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>dst</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relocate</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Relocation</name> <operator>&amp;</operator><name>rel</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>val</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>relocateNoSym</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><name>RelType</name> <name>type</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>val</name></expr></argument>)</argument_list> const <block>{<block_content>
<macro><name>relocate</name><argument_list>(<argument>loc</argument>, <argument>Relocation{R_NONE</argument>, <argument>type</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>nullptr}</argument>, <argument>val</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>applyJumpInstrMod</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><name>JumpModType</name> <name>type</name></expr></argument>,
<argument><expr><name>JumpModType</name> <name>val</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TargetInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>deleteFallThruJmpInsn</name><argument_list>(<argument><expr><name>InputSection</name> <operator>&amp;</operator><name>is</name></expr></argument>, <argument><expr><name>InputFile</name> <operator>*</operator><name>file</name></expr></argument>,
<argument><expr><name>InputSection</name> <operator>*</operator><name>nextIS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>defaultCommonPageSize</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>defaultMaxPageSize</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getImageBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>gotBaseSymInGotPlt</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RelType</name></type> <name>copyRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>gotRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>noneRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>pltRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>relativeRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>iRelativeRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>symbolicRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>tlsDescRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>tlsGotRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>tlsModuleIndexRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RelType</name></type> <name>tlsOffsetRel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>gotEntrySize</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>wordsize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pltEntrySize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pltHeaderSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ipltEntrySize</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>gotPltHeaderEntriesNum</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>gotHeaderEntriesNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>needsThunks</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>trapInstr</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>nopInstrs</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>needsMoreStackNonSplit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>RelExpr</name></type> <name>adjustTlsExpr</name><argument_list>(<argument><expr><name>RelType</name> <name>type</name></expr></argument>, <argument><expr><name>RelExpr</name> <name>expr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>RelExpr</name></type> <name>adjustGotPcExpr</name><argument_list>(<argument><expr><name>RelType</name> <name>type</name></expr></argument>, <argument><expr><name>int64_t</name> <name>addend</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relaxGot</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Relocation</name> <operator>&amp;</operator><name>rel</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>val</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relaxTlsGdToIe</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Relocation</name> <operator>&amp;</operator><name>rel</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>val</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relaxTlsGdToLe</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Relocation</name> <operator>&amp;</operator><name>rel</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>val</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relaxTlsIeToLe</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Relocation</name> <operator>&amp;</operator><name>rel</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>val</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>relaxTlsLdToLe</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Relocation</name> <operator>&amp;</operator><name>rel</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>val</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>defaultImageBase</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getAArch64TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getAMDGPUTargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getARMTargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getAVRTargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getHexagonTargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getMSP430TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getPPC64TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getPPCTargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getRISCVTargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getSPARCV9TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getX86TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getX86_64TargetInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>TargetInfo</name> <modifier>*</modifier></type><name>getMipsTargetInfo</name><parameter_list>()</parameter_list>;</function_decl>

<struct>struct <name>ErrorPlace</name> <block>{
<decl_stmt><decl><type><name>InputSectionBase</name> <modifier>*</modifier></type><name>isec</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>loc</name></expr>;</expr_stmt>
}</block>;</struct>


<function_decl><type><name>ErrorPlace</name></type> <name>getErrorPlace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>getErrorLocation</name><argument_list>(<argument>const uint8_t *loc</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getErrorPlace</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call><operator>.</operator><name>loc</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>writePPC32GlinkSection</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numEntries</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tryRelaxPPC64TocIndirection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bufLoc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name></type> <name>getPPCDFormOp</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>secondaryOp</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>unsigned</name></type> <name>getPPC64GlobalEntryToLocalEntryOffset</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>stOther</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>isPPC64SmallCodeModelTocReloc</name><parameter_list>(<parameter><decl><type><name>RelType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>writePrefixedInstruction</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>insn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>addPPC64SaveRestore</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>getPPC64TocBase</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>getAArch64Page</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>expr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>TargetInfo</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
<function_decl><type><name>TargetInfo</name> <modifier>*</modifier></type><name>getTarget</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>isMipsPIC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Defined</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>reportRangeError</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>reportRangeError</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>sym</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>inline</specifier> <name>void</name></type> <name>checkInt</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>llvm</name><operator>::</operator><call><name>SignExtend64</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportRangeError</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><call><name>Twine</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>minIntN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>maxIntN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>void</name></type> <name>checkUInt</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportRangeError</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><call><name>Twine</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>maxUIntN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>void</name></type> <name>checkIntUInt</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>llvm</name><operator>::</operator><call><name>SignExtend64</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportRangeError</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><call><name>Twine</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>minIntN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><call><name>maxUIntN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>checkAlignment</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>getErrorLocation</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"improper alignment for relocation "</literal> <operator>+</operator>
<name>lld</name><operator>::</operator><call><name>toString</name><argument_list>(<argument><expr><name><name>rel</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": 0x"</literal> <operator>+</operator> <name>llvm</name><operator>::</operator><call><name>utohexstr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="string">" is not aligned to "</literal> <operator>+</operator> <call><name>Twine</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>read16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>read16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>endianness</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>read32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>endianness</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>read64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>read64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>endianness</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>write16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>write16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>endianness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>write32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>write32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>endianness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>write64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>endian</name><operator>::</operator><call><name>write64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>endianness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
