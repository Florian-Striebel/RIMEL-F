<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/Writer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_WRITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_WRITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OutputSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputSectionBase</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>copySectionsIntoPartitions</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>createSyntheticSections</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>combineEhSections</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>writeResult</name><parameter_list>()</parameter_list>;</function_decl>




<struct>struct <name>PhdrEntry</name> <block>{
<macro><name>PhdrEntry</name><argument_list>(<argument>unsigned type</argument>, <argument>unsigned flags</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>p_align</name><argument_list>(<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>ELF</name><operator>::</operator><name>PT_LOAD</name></expr> ?</condition><then> <expr><name><name>config</name><operator>-&gt;</operator><name>maxPageSize</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>p_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>p_flags</name><argument_list>(<argument>flags</argument>)</argument_list></macro> <expr><block>{}</block>
<name>void</name> <call><name>add</name><argument_list>(<argument><expr><name>OutputSection</name> <operator>*</operator><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p_paddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>p_vaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>p_memsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>p_filesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>p_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>p_align</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>p_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>p_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>firstSec</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OutputSection</name> <modifier>*</modifier></type><name>lastSec</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasLMA</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>lmaOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>addReservedSymbols</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <call><name>getOutputSectionName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InputSectionBase</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ELFT</name></expr></argument>&gt;</argument_list></name> <name>uint32_t</name></type> <name>calcMipsEFlags</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>getMipsFpAbiFlag</name><argument_list>(<argument><expr><name>uint8_t</name> <name>oldFlag</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>newFlag</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>fileName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>isMipsN32Abi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InputFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isMicroMips</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isMipsR6</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
