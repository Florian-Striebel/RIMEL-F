<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/ELF/Thunks.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ELF_THUNKS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ELF_THUNKS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Relocations.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>elf</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ThunkSection</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>Thunk</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Thunk</name><argument_list>(<argument>Symbol &amp;destination</argument>, <argument>int64_t addend</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Thunk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>size</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>addSymbols</name><parameter_list>(<parameter><decl><type><name>ThunkSection</name> <modifier>&amp;</modifier></type><name>isec</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>void</name></type> <name>setOffset</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Defined</name> <modifier>*</modifier></type><name>addSymbol</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>InputSectionBase</name> <modifier>&amp;</modifier></type><name>section</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>virtual</name> <name>InputSection</name> <operator>*</operator><macro><name>getTargetInputSection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isCompatibleWith</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InputSection</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Relocation</name> <operator>&amp;</operator></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>Defined</name> <operator>*</operator><macro><name>getThunkTargetSym</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>syms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Symbol</name> <modifier>&amp;</modifier></type><name>destination</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>addend</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Defined</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name> <name>syms</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>alignment</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function_decl><type><name>Thunk</name> <modifier>*</modifier></type><name>addThunk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InputSection</name> <modifier>&amp;</modifier></type><name>isec</name></decl></parameter>, <parameter><decl><type><name>Relocation</name> <modifier>&amp;</modifier></type><name>rel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>writePPC32PltCallStub</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>gotPltVA</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>InputFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>addend</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>writePPC64LoadAndBranch</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>computeHiBits</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>toCompute</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>toCompute</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
