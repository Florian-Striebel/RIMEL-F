<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Resolver.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_RESOLVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_RESOLVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/ArchiveLibraryFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/SharedLibraryFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Simple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/SymbolTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LinkingContext</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>Resolver</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Resolver</name><argument_list>(<argument><expr><name>LinkingContext</name> <operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>_ctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>_result</name><argument_list>(<argument>new MergedFile()</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <call><name>doDefinedAtom</name><argument_list>(<argument><expr><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>doUndefinedAtom</name><parameter_list>(<parameter><decl><type><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name></type> <name>atom</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>doSharedLibraryAtom</name><parameter_list>(<parameter><decl><type><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name></type> <name>atom</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>doAbsoluteAtom</name><parameter_list>(<parameter><decl><type><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name></type> <name>atom</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>handleFile</name><argument_list>(<argument><expr><name>File</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>handleArchiveFile</name><argument_list>(<argument><expr><name>File</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>handleSharedLibrary</name><argument_list>(<argument><expr><name>File</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>resolve</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SimpleFile</name></expr></argument>&gt;</argument_list></name> <macro><name>resultFile</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>_result</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>(</operator><name>StringRef</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>UndefCallback</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>bool</name></type> <name>undefinesAdded</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>File</name> <modifier>*</modifier></type><name>getFile</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>resolveUndefines</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateReferences</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>deadStripOptimize</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>checkUndefines</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removeCoalescedAwayAtoms</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>forEachUndefines</name><argument_list>(<argument>File &amp;file</argument>, <argument>UndefCallback callback</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>markLive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>MergedFile</name> <range>: <expr><name>public</name> <name>SimpleFile</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MergedFile</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>SimpleFile</name><argument_list>(<argument><literal type="string">"&lt;linker-internal&gt;"</literal></argument>, <argument>kindResolverMergedObject</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <call><name>addAtoms</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>Atom</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>atoms</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LinkingContext</name> <modifier>&amp;</modifier></type><name>_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolTable</name></type> <name>_symbolTable</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>Atom</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>_atoms</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>_deadStripRoots</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>_liveAtoms</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>_deadAtoms</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MergedFile</name></expr></argument>&gt;</argument_list></name> <name>_result</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_multimap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>_reverseRef</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>File</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>_files</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>File</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>_newUndefinesAdded</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>_undefines</name></expr>;</expr_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>File</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>_undefineIndex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
