<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/PassManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_PASS_MANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_PASS_MANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Pass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SimpleFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Pass</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>PassManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>add</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Pass</name></expr></argument>&gt;</argument_list></name> <name>pass</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>_passes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>runOnFile</name><argument_list>(<argument>SimpleFile &amp;file</argument>)</argument_list></macro> <block>{
<for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Pass</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>pass</name> <operator>:</operator> <name>_passes</name></expr></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>llvm</name><operator>::</operator><name>Error</name> <name>EC</name> <operator>=</operator> <call><name><name>pass</name><operator>-&gt;</operator><name>perform</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EC</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Pass</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>_passes</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
