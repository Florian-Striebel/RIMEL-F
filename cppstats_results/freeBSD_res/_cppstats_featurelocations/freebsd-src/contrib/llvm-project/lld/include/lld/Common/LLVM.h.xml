<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Common/LLVM.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COMMON_LLVM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COMMON_LLVM_H</name></cpp:macro></cpp:define>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Hashing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Twine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBufferRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>ArrayRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MutableArrayRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>InternalLen</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SmallString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>unsigned</name> <name>N</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SmallVector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>ErrorOr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>Expected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>object</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>WasmObjectFile</name></decl>;</decl_stmt>
<struct_decl>struct <name>WasmSection</name>;</struct_decl>
<struct_decl>struct <name>WasmSegment</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>WasmSymbol</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>wasm</name> <block>{<block_content>
<struct_decl>struct <name>WasmTag</name>;</struct_decl>
<struct_decl>struct <name>WasmTagType</name>;</struct_decl>
<struct_decl>struct <name>WasmFunction</name>;</struct_decl>
<struct_decl>struct <name>WasmGlobal</name>;</struct_decl>
<struct_decl>struct <name>WasmGlobalType</name>;</struct_decl>
<struct_decl>struct <name>WasmInitExpr</name>;</struct_decl>
<struct_decl>struct <name>WasmLimits</name>;</struct_decl>
<struct_decl>struct <name>WasmRelocation</name>;</struct_decl>
<struct_decl>struct <name>WasmSignature</name>;</struct_decl>
<struct_decl>struct <name>WasmTable</name>;</struct_decl>
<struct_decl>struct <name>WasmTableType</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><call><name>outs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><call><name>errs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>cast</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>cast_or_null</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>dyn_cast</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>dyn_cast_or_null</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>isa</name></expr>;</expr_stmt>


<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>ArrayRef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MutableArrayRef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>Error</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>ErrorOr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>Expected</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>raw_ostream</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>SmallString</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>SmallVector</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>StringRef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>Twine</name></expr>;</expr_stmt>

<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>WasmObjectFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>WasmSection</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>WasmSegment</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>object</name><operator>::</operator><name>WasmSymbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmFunction</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmGlobal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmGlobalType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmInitExpr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmLimits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmRelocation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmSignature</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmTable</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmTableType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmTag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>llvm</name><operator>::</operator><name>wasm</name><operator>::</operator><name>WasmTagType</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>std</name> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>s</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_value</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;
}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
