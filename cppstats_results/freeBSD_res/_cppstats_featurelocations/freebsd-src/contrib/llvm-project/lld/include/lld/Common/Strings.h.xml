<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Common/Strings.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_STRINGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_STRINGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/GlobPattern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>demangleItanium</name><argument_list>(<argument>llvm::StringRef name</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <macro><name>parseHex</name><argument_list>(<argument>llvm::StringRef s</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isValidCIdentifier</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>saveBuffer</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>buffer</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>SingleStringMatcher</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>SingleStringMatcher</name><argument_list>(<argument>llvm::StringRef Pattern</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>match</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isTrivialMatchAll</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><name>ExactMatch</name> <operator>&amp;&amp;</operator> <call><name><name>GlobPatternMatcher</name><operator>.</operator><name>isTrivialMatchAll</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>ExactMatch</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>GlobPattern</name> <name>GlobPatternMatcher</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ExactPattern</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>StringMatcher</name> <block>{<block_content>
<label><name>private</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SingleStringMatcher</name></expr></argument>&gt;</argument_list></name> <name>patterns</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>StringMatcher</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<macro><name>StringMatcher</name><argument_list>(<argument>llvm::StringRef Pattern</argument>)</argument_list></macro>
: <macro><name>patterns</name><argument_list>(<argument>{SingleStringMatcher(Pattern)}</argument>)</argument_list></macro> <block>{<block_content/>}</block>


<function><type><name>void</name></type> <name>addPattern</name><parameter_list>(<parameter><decl><type><name>SingleStringMatcher</name></type> <name>Matcher</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>patterns</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>patterns</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>match</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
