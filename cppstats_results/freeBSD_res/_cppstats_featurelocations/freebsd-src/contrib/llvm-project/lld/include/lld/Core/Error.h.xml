<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Error.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_ERROR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Twine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;system_error&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>error_category</name> <operator>&amp;</operator><call><name>YamlReaderCategory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>YamlReaderError</name> <block>{<block_content>
<expr_stmt><expr><name>unknown_keyword</name></expr><operator>,</operator>
<expr><name>illegal_value</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>make_error_code</name><argument_list>(<argument>YamlReaderError e</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>error_code</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>YamlReaderCategory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>make_dynamic_error_code</name><argument_list>(<argument>StringRef msg</argument>)</argument_list></macro></expr>;</expr_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>GenericError</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>ErrorInfo</name><argument_list type="generic">&lt;<argument><expr><name>GenericError</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>char</name> <name>ID</name></expr>;
<macro><name>GenericError</name><argument_list>(<argument>Twine Msg</argument>)</argument_list></macro>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getMessage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Msg</name></expr>;</return> }</block>
<name>void</name> <macro><name>log</name><argument_list>(<argument>llvm::raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>convertToErrorCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>make_dynamic_error_code</name><argument_list>(<argument><expr><call><name>getMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>Msg</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>std</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct</type> <name><name>is_error_code_enum</name><argument_list type="generic">&lt;<argument><expr><name>lld</name><operator>::</operator><name>YamlReaderError</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>std</name><operator>::</operator><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
