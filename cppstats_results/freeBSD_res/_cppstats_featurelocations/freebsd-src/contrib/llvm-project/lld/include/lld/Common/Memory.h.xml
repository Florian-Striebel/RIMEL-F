<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Common/Memory.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COMMON_MEMORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COMMON_MEMORY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/StringSaver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>


<extern>extern llvm::BumpPtrAllocator bAlloc;</extern>
<extern>extern llvm::StringSaver saver;</extern>

<function_decl><type><name>void</name></type> <name>freeArena</name><parameter_list>()</parameter_list>;</function_decl>



<struct>struct <name>SpecificAllocBase</name> <block>{
<macro><name>SpecificAllocBase</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name><name>instances</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>SpecificAllocBase</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAllocBase</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>instances</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> struct</type> <name>SpecificAlloc</name> <range>: <expr><name>public</name> <name>SpecificAllocBase</name> <block>{
<expr><name>void</name> <macro><name>reset</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <expr><call><name><name>alloc</name><operator>.</operator><name>DestroyAll</name></name><argument_list>()</argument_list></call></expr>; }</block>
<name>llvm</name><operator>::</operator><name><name>SpecificBumpPtrAllocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>alloc</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>llvm</name><operator>::</operator><name><name>SpecificBumpPtrAllocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getSpecificAllocSingleton</name><argument_list>()</argument_list></macro> <block>{
<expr><specifier>static</specifier> <name><name>SpecificAlloc</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>instance</name></expr>;
<return>return <expr><name><name>instance</name><operator>.</operator><name>alloc</name></name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>U</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>*</modifier></type><name>make</name><argument_list>(<argument><expr><name>U</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <macro><name>new</name> <argument_list>(<argument>getSpecificAllocSingleton&lt;T&gt;().Allocate()</argument>)</argument_list></macro>
<expr><call><name>T</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
