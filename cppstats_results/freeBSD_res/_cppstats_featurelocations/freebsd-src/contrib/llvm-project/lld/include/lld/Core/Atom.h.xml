<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Atom.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_ATOM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_ATOM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>File</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>OwningAtomPtr</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>Atom</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>OwningAtomPtr</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<enum>enum <name>Definition</name> <block>{
<decl><name>definitionRegular</name></decl>,
<decl><name>definitionAbsolute</name></decl>,
<decl><name>definitionUndefined</name></decl>,
<decl><name>definitionSharedLibrary</name></decl>
}</block>;</enum>


<enum>enum <name>Scope</name> <block>{
<decl><name>scopeTranslationUnit</name></decl>,

<decl><name>scopeLinkageUnit</name></decl>,

<decl><name>scopeGlobal</name></decl>

}</block>;</enum>


<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>File</name><operator>&amp;</operator> <macro><name>file</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>StringRef</name> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>Definition</name> <macro><name>definition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_definition</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<macro><name>explicit</name></macro> <macro><name>Atom</name><argument_list>(<argument>Definition def</argument>)</argument_list></macro> : <macro><name>_definition</name><argument_list>(<argument>def</argument>)</argument_list></macro> <block>{<block_content/>}</block>





<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Atom</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Definition</name></type> <name>_definition</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>OwningAtomPtr</name> <block>{<block_content>
<label><name>private</name>:</label>
<expr_stmt><expr><call><name>OwningAtomPtr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OwningAtomPtr</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>OwningAtomPtr</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>OwningAtomPtr</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>OwningAtomPtr</name><argument_list>(<argument><expr><name>T</name> <operator>*</operator><name>atom</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>atom</name><argument_list>(<argument>atom</argument>)</argument_list></macro> <block>{ }</block>

<operator>~</operator><macro><name>OwningAtomPtr</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>atom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>runDestructor</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>runDestructor</name><parameter_list>(<parameter><decl><type><name>Atom</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>atom</name><operator>-&gt;</operator><name/></name>~<call><name>Atom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>OwningAtomPtr</name><argument_list>(<argument><expr><name>OwningAtomPtr</name> <operator>&amp;&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>atom</name><argument_list>(<argument>ptr.atom</argument>)</argument_list></macro> <block>{
<expr><name><name>ptr</name><operator>.</operator><name>atom</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><name>OwningAtomPtr</name><operator>&amp;&amp;</operator> <name>ptr</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>atom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>runDestructor</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>atom</name> <operator>=</operator> <name><name>ptr</name><operator>.</operator><name>atom</name></name></block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>.</operator><name>atom</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>T</name> <operator>*</operator><specifier>const</specifier> <operator>&amp;</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>atom</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>T</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>atom</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>T</name> <modifier>*</modifier></type><name>release</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>v</name> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>atom</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>atom</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
