<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Common/Args.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_ARGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_ARGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CodeGen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>opt</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>InputArgList</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>args</name> <block>{<block_content>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CodeGenOpt</name><operator>::</operator><name>Level</name> <macro><name>getCGOptLevel</name><argument_list>(<argument>int optLevelLTO</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>getInteger</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <name>key</name></expr></argument>,
<argument><expr><name>int64_t</name> <name>Default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>getHex</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <name>key</name></expr></argument>, <argument><expr><name>int64_t</name> <name>Default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getStrings</name><argument_list>(<argument>llvm::opt::InputArgList &amp;args</argument>, <argument>int id</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getZOptionValue</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>int</name> <name>id</name></expr></argument>, <argument><expr><name>StringRef</name> <name>key</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>Default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getLines</name><argument_list>(<argument>MemoryBufferRef mb</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>StringRef</name></type> <name>getFilenameWithoutExe</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
