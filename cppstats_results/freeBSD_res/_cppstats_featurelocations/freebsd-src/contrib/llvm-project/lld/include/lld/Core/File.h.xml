<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/File.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/AbsoluteAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/DefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/SharedLibraryAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/UndefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Twine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LinkingContext</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>class</name></type> <name>File</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>File</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<enum>enum <name>Kind</name> <block>{
<decl><name>kindErrorObject</name></decl>,
<decl><name>kindNormalizedObject</name></decl>,
<decl><name>kindMachObject</name></decl>,
<decl><name>kindCEntryObject</name></decl>,
<decl><name>kindHeaderObject</name></decl>,
<decl><name>kindEntryObject</name></decl>,
<decl><name>kindUndefinedSymsObject</name></decl>,
<decl><name>kindStubHelperObject</name></decl>,
<decl><name>kindResolverMergedObject</name></decl>,
<decl><name>kindSectCreateObject</name></decl>,
<decl><name>kindSharedLibrary</name></decl>,
<decl><name>kindArchiveLibrary</name></decl>
}</block>;</enum>


<expr_stmt><expr><name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_kind</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>StringRef</name> <macro><name>path</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>_archivePath</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_path</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>_archiveMemberPath</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>_archiveMemberPath</name> <operator>=</operator> <operator>(</operator><name>_archivePath</name> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>_path</name> <operator>+</operator> <literal type="string">")"</literal><operator>)</operator><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>_archiveMemberPath</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>StringRef</name> <macro><name>archivePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_archivePath</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setArchivePath</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_archivePath</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>StringRef</name> <macro><name>memberPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_path</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>uint64_t</name> <macro><name>ordinal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>_ordinal</name> <operator>!=</operator> <name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>_ordinal</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasOrdinal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>_ordinal</name> <operator>!=</operator> <name>UINT64_MAX</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setOrdinal</name><argument_list>(<argument><expr><name>uint64_t</name> <name>ordinal</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><name>_ordinal</name> <operator>=</operator> <name>ordinal</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>uint64_t</name> <macro><name>getNextAtomOrdinalAndIncrement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_nextAtomOrdinal</name><operator>++</operator></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><macro><name>allocator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_allocator</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>using</name></type> <name>AtomVector</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>AtomRange</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>AtomRange</name><argument_list>(<argument><expr><name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>_v</name><argument_list>(<argument>v</argument>)</argument_list></macro> <block>{}</block>
<call><name>AtomRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>_v</name><argument_list>(<argument>const_cast&lt;AtomVector&lt;T&gt; &amp;&gt;(v)</argument>)</argument_list></macro> <block>{}</block>

<name>using</name> <name>ConstDerefFn</name> <operator>=</operator> <specifier>const</specifier> <name>T</name><operator>*</operator> <call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>DerefFn</name> <init>= <expr><name>T</name><operator>*</operator> <call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>mapped_iterator</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></argument>,
<argument><expr><name>ConstDerefFn</name></expr></argument>&gt;</argument_list></name> <name>ConstItTy</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>mapped_iterator</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></argument>,
<argument><expr><name>DerefFn</name></expr></argument>&gt;</argument_list></name> <name>ItTy</name></expr>;</expr_stmt></typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>DerefConst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>p</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>T</name><modifier>*</modifier></type> <name>Deref</name><parameter_list>(<parameter><decl><type><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>p</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>ConstItTy</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>ConstItTy</name><argument_list>(<argument><expr><call><name><name>_v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ConstDerefFn</name><argument_list>(<argument><expr><name>DerefConst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>ConstItTy</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>ConstItTy</name><argument_list>(<argument><expr><call><name><name>_v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ConstDerefFn</name><argument_list>(<argument><expr><name>DerefConst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>ItTy</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ItTy</name><argument_list>(<argument><expr><call><name><name>_v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>DerefFn</name><argument_list>(<argument><expr><name>Deref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ItTy</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ItTy</name><argument_list>(<argument><expr><call><name><name>_v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>DerefFn</name><argument_list>(<argument><expr><name>Deref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>owning_ptrs</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>_v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>owning_ptrs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>_v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>_v</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>_v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>_v</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>_v</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>_v</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>defined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>undefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>sharedLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>absolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>clearAtoms</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<decl_stmt><decl><type><name>void</name></type> <name>setLastError</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>error_code</name> <name>err</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>_lastError</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>setSharedMemoryBuffer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>_sharedMemoryBuffer</name> <operator>=</operator> <name>mb</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>

<macro><name>File</name><argument_list>(<argument>StringRef p</argument>, <argument>Kind kind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_kind</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_ordinal</name><argument_list>(<argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>_nextAtomOrdinal</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>



<name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>doParse</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>std</name><operator>::</operator><call><name>error_code</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_noDefinedAtoms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_noUndefinedAtoms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_noSharedLibraryAtoms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_noAbsoluteAtoms</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>_allocator</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>StringRef</name></type> <name>_path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_archivePath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>string</name> <name>_archiveMemberPath</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Kind</name></type> <name>_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>uint64_t</name></type> <name>_ordinal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>uint64_t</name></type> <name>_nextAtomOrdinal</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>_sharedMemoryBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>error_code</name></expr></argument>&gt;</argument_list></name> <name>_lastError</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>_parseMutex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ErrorFile</name> <range>: <expr><name>public</name> <name>File</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ErrorFile</name><argument_list>(<argument>StringRef path</argument>, <argument>std::error_code ec</argument>)</argument_list></macro>
<operator>:</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>kindErrorObject</name></expr></argument>)</argument_list></call></expr>, <macro><name>_ec</name><argument_list>(<argument>ec</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name>error_code</name> <macro><name>doParse</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>_ec</name></expr>;</return> }</block>

<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>defined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>undefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>sharedLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>absolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>clearAtoms</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
}</block>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>error_code</name> <name>_ec</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
