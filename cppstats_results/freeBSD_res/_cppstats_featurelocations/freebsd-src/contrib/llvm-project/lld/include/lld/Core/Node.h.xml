<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Node.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_NODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_NODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>Node</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Kind</name> <block>{<block_content> <expr_stmt><expr><name>File</name></expr><operator>,</operator> <expr><name>GroupEnd</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>explicit</name></macro> <macro><name>Node</name><argument_list>(<argument>Kind type</argument>)</argument_list></macro> : <macro><name>_kind</name><argument_list>(<argument>type</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Node</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>Kind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_kind</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>_kind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>GroupEnd</name> <range>: <expr><name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>GroupEnd</name><argument_list>(<argument>int size</argument>)</argument_list></macro> <operator>:</operator> <call><name>Node</name><argument_list>(<argument><expr><name>Kind</name><operator>::</operator><name>GroupEnd</name></expr></argument>)</argument_list></call></expr>, <macro><name>_size</name><argument_list>(<argument>size</argument>)</argument_list></macro> <expr><block>{}</block>

<name>int</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_size</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *a</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>a</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>GroupEnd</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>int</name> <name>_size</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FileNode</name> <range>: <expr><name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>FileNode</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>f</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Node</name><argument_list>(<argument><expr><name>Node</name><operator>::</operator><name>Kind</name><operator>::</operator><name>File</name></expr></argument>)</argument_list></call></expr>, <macro><name>_file</name><argument_list>(<argument>std::move(f)</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Node *a</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>a</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Node</name><operator>::</operator><name>Kind</name><operator>::</operator><name>File</name></expr>;</return>
}</block>

<name>File</name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>_file</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>_file</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
