<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Simple.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_SIMPLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_SIMPLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/AbsoluteAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Atom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/DefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Reference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/SharedLibraryAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/UndefinedAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ilist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ilist_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SimpleFile</name> <range>: <expr><name>public</name> <name>File</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>SimpleFile</name><argument_list>(<argument>StringRef path</argument>, <argument>File::Kind kind</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>File</name><argument_list>(<argument>path</argument>, <argument>kind</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>SimpleFile</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>_defined</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_undefined</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_shared</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>_absolute</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>addAtom</name><argument_list>(<argument>DefinedAtom &amp;a</argument>)</argument_list></macro> <block>{
<expr><call><name><name>_defined</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>addAtom</name><argument_list>(<argument>UndefinedAtom &amp;a</argument>)</argument_list></macro> <block>{
<expr><call><name><name>_undefined</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>addAtom</name><argument_list>(<argument>SharedLibraryAtom &amp;a</argument>)</argument_list></macro> <block>{
<expr><call><name><name>_shared</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>addAtom</name><argument_list>(<argument>AbsoluteAtom &amp;a</argument>)</argument_list></macro> <block>{
<expr><call><name><name>_absolute</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>addAtom</name><argument_list>(<argument>const Atom &amp;atom</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>p</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addAtom</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (auto *p = dyn_cast&lt;UndefinedAtom&gt;(&amp;atom</block></if></if_stmt>))</block> <block>{
<expr><call><name>addAtom</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr> <if_stmt><if type="elseif">else if <condition>(<expr><name>auto</name> <operator>*</operator><name>p</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addAtom</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (auto *p = dyn_cast&lt;AbsoluteAtom&gt;(&amp;atom</block></if></if_stmt>))</block> <block>{
<expr><call><name>addAtom</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl></decl_stmt> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"atom has unknown definition kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>removeDefinedAtomsIf</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>DefinedAtom</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>pred</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>atoms</name> <operator>=</operator> <name>_defined</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>newEnd</name> <init>= <expr><name>std</name><operator>::</operator><call><name>remove_if</name><argument_list>(<argument><expr><call><name><name>atoms</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>atoms</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><index>[<expr><operator>&amp;</operator><name>pred</name></expr>]</index><operator>(</operator><name><name>OwningAtomPtr</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>p</name><operator>)</operator> <block>{
<return>return <expr><call><name>pred</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></argument></argument_list></call></expr></init></decl></decl_stmt>)</block_content></block></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>atoms</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>newEnd</name></expr></argument>, <argument><expr><call><name><name>atoms</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

const <expr_stmt><expr><name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>defined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_defined</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>undefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_undefined</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>sharedLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_shared</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>AtomRange</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name> <macro><name>absolute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>_absolute</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clearAtoms</name><parameter_list>()</parameter_list> override <block>{<block_content>
<expr_stmt><expr><call><name><name>_defined</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_undefined</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_shared</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_absolute</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>DefinedAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>UndefinedAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_undefined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>SharedLibraryAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_shared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>AtomVector</name><argument_list type="generic">&lt;<argument><expr><name>AbsoluteAtom</name></expr></argument>&gt;</argument_list></name></type> <name>_absolute</name></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>SimpleReference</name> <range>: <expr><name>public</name> <name>Reference</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>llvm</name>::<name><name>ilist_node</name><argument_list type="generic">&lt;<argument><expr><name>SimpleReference</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>SimpleReference</name><argument_list>(<argument>Reference::KindNamespace ns</argument>, <argument>Reference::KindArch arch</argument>,
<argument>Reference::KindValue value</argument>, <argument>uint64_t off</argument>, <argument>const Atom *t</argument>,
<argument>Reference::Addend a</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Reference</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_target</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_offsetInAtom</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>_addend</name><argument_list>(<argument>a</argument>)</argument_list></macro> <expr><block>{
}</block>
<call><name>SimpleReference</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>Reference</name><argument_list>(<argument><expr><name>Reference</name><operator>::</operator><name>KindNamespace</name><operator>::</operator><name>all</name></expr></argument>, <argument><expr><name>Reference</name><operator>::</operator><name>KindArch</name><operator>::</operator><name>all</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>_target</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_offsetInAtom</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>_addend</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>uint64_t</name> <macro><name>offsetInAtom</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_offsetInAtom</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator><macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>_target</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>_target</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Addend</name> <macro><name>addend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_addend</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAddend</name><parameter_list>(<parameter><decl><type><name>Addend</name></type> <name>a</name></decl></parameter>)</parameter_list> override <block>{<block_content> <expr_stmt><expr><name>_addend</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type><name>newAtom</name></decl></parameter>)</parameter_list> override <block>{<block_content> <expr_stmt><expr><name>_target</name> <operator>=</operator> <name>newAtom</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type><name>_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>_offsetInAtom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Addend</name></type> <name>_addend</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SimpleDefinedAtom</name> <range>: <expr><name>public</name> <name>DefinedAtom</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>SimpleDefinedAtom</name><argument_list>(<argument><expr><specifier>const</specifier> <name>File</name> <operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <macro><name>_ordinal</name><argument_list>(<argument>f.getNextAtomOrdinalAndIncrement()</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>SimpleDefinedAtom</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>_references</name><operator>.</operator><name>clearAndLeakNodesUnsafely</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>File</name> <operator>&amp;</operator><macro><name>file</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_file</name></expr>;</return> }</block>

<name>StringRef</name> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name>StringRef</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>uint64_t</name> <macro><name>ordinal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_ordinal</name></expr>;</return> }</block>

<name>Scope</name> <macro><name>scope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>DefinedAtom</name><operator>::</operator><name>scopeLinkageUnit</name></expr>;</return> }</block>

<name>Interposable</name> <macro><name>interposable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>DefinedAtom</name><operator>::</operator><name>interposeNo</name></expr>;</return>
}</block>

<name>Merge</name> <macro><name>merge</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>DefinedAtom</name><operator>::</operator><name>mergeNo</name></expr>;</return> }</block>

<name>Alignment</name> <macro><name>alignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">1</literal></expr>;</return> }</block>

<name>SectionChoice</name> <macro><name>sectionChoice</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>DefinedAtom</name><operator>::</operator><name>sectionBasedOnContent</name></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>customSectionName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name>StringRef</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>DeadStripKind</name> <macro><name>deadStrip</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>DefinedAtom</name><operator>::</operator><name>deadStripNormal</name></expr>;</return>
}</block>

<name>DefinedAtom</name><operator>::</operator><name>reference_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>it</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>_references</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodePtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>reference_iterator</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>DefinedAtom</name><operator>::</operator><name>reference_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>it</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>_references</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodePtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>reference_iterator</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>Reference</name> <operator>*</operator><macro><name>derefIterator</name><argument_list>(<argument>const void *it</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>&amp;</operator><operator>*</operator><name>RefList</name><operator>::</operator><call><name>const_iterator</name><argument_list>(
<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>ilist_node</name><argument_list type="generic">&lt;<argument><expr><name>SimpleReference</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>incrementIterator</name><argument_list>(<argument>const void *&amp;it</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>RefList</name><operator>::</operator><name>const_iterator</name> <call><name>ref</name><argument_list>(
<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>ilist_node</name><argument_list type="generic">&lt;<argument><expr><name>SimpleReference</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>it</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNodePtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>addReference</name><argument_list>(<argument>Reference::KindNamespace ns</argument>,
<argument>Reference::KindArch arch</argument>,
<argument>Reference::KindValue kindValue</argument>, <argument>uint64_t off</argument>,
<argument>const Atom *target</argument>, <argument>Reference::Addend a</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>target</name> <operator>&amp;&amp;</operator> <literal type="string">"trying to create reference to nothing"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>node</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>_file.allocator()</argument>)</argument_list></macro>
<call><name>SimpleReference</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>kindValue</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>_references</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>void</name> <macro><name>sortReferences</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SimpleReference</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>elements</name></expr>;
<for>for <control>(<init><decl><type><name>SimpleReference</name> <modifier>&amp;</modifier></type><name>node</name> <range>: <expr><name>_references</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>elements</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
std::sort(elements.begin(</block></for>), <call><name><name>elements</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>,
<index>[]</index> <operator>(</operator><specifier>const</specifier> <name>SimpleReference</name> <operator>*</operator><name>lhs</name>, <specifier>const</specifier> <name>SimpleReference</name> <operator>*</operator><name>rhs</name><operator>)</operator> <operator>-&gt;</operator> <name>bool</name> <block>{
<expr><name>uint64_t</name> <name>lhsOffset</name> <operator>=</operator> <call><name><name>lhs</name><operator>-&gt;</operator><name>offsetInAtom</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>uint64_t</name> <name>rhsOffset</name> <operator>=</operator> <call><name><name>rhs</name><operator>-&gt;</operator><name>offsetInAtom</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>rhsOffset</name> <operator>!=</operator> <name>lhsOffset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>lhsOffset</name> <operator>&lt;</operator> <name>rhsOffset</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block></block></expr>
<if_stmt><if>if <condition>(<expr><call><name><name>rhs</name><operator>-&gt;</operator><name>kindNamespace</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>lhs</name><operator>-&gt;</operator><name>kindNamespace</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name><name>lhs</name><operator>-&gt;</operator><name>kindNamespace</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>rhs</name><operator>-&gt;</operator><name>kindNamespace</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>rhs</name><operator>-&gt;</operator><name>kindArch</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>lhs</name><operator>-&gt;</operator><name>kindArch</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name><name>lhs</name><operator>-&gt;</operator><name>kindArch</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>rhs</name><operator>-&gt;</operator><name>kindArch</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name><name>lhs</name><operator>-&gt;</operator><name>kindValue</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>rhs</name><operator>-&gt;</operator><name>kindValue</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
})<empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name><name>_references</name><operator>.</operator><name>clearAndLeakNodesUnsafely</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>SimpleReference</name> <modifier>*</modifier></type><name>node</name> <range>: <expr><name>elements</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>_references</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
}

void <macro><name>setOrdinal</name><argument_list>(<argument>uint64_t ord</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>_ordinal</name> <operator>=</operator> <name>ord</name></expr>;</expr_stmt> </block_content>}</block>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ilist</name><argument_list type="generic">&lt;<argument><expr><name>SimpleReference</name></expr></argument>&gt;</argument_list></name> <name>RefList</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>File</name> <modifier>&amp;</modifier></type><name>_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>_ordinal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>RefList</name></type> <name>_references</name></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>SimpleUndefinedAtom</name> <range>: <expr><name>public</name> <name>UndefinedAtom</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>SimpleUndefinedAtom</name><argument_list>(<argument>const File &amp;f</argument>, <argument>StringRef name</argument>)</argument_list></macro> <operator>:</operator> <call><name>_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <macro><name>_name</name><argument_list>(<argument>name</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"UndefinedAtoms must have a name"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>SimpleUndefinedAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;


<expr><specifier>const</specifier> <name>File</name> <operator>&amp;</operator><macro><name>file</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_file</name></expr>;</return> }</block>



<name>StringRef</name> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>_name</name></expr>;</return> }</block>

<name>CanBeNull</name> <macro><name>canBeNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>UndefinedAtom</name><operator>::</operator><name>canBeNullNever</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>File</name> <operator>&amp;</operator><name>_file</name></expr>;
<expr><name>StringRef</name> <name>_name</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
