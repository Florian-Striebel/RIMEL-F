<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Reader.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_READER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_READER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Reference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/Magic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>yaml</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>IO</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>File</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LinkingContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MachOLinkingContext</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>Reader</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Reader</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>canParse</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>file_magic</name> <name>magic</name></expr></argument>, <argument><expr><name>MemoryBufferRef</name> <name>mb</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>virtual</name> <name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type>
<name>loadFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>class</name> <name>Registry</name> <operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>YamlIOTaggedDocumentHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>YamlIOTaggedDocumentHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>handledDocTag</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>IO</name> <operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lld</name><operator>::</operator><name>File</name> <operator>*</operator><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>Registry</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type>
<name>loadFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>mb</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>referenceKindFromString</name><argument_list>(<argument><expr><name>StringRef</name> <name>inputStr</name></expr></argument>, <argument><expr><name>Reference</name><operator>::</operator><name>KindNamespace</name> <operator>&amp;</operator><name>ns</name></expr></argument>,
<argument><expr><name>Reference</name><operator>::</operator><name>KindArch</name> <operator>&amp;</operator><name>a</name></expr></argument>,
<argument><expr><name>Reference</name><operator>::</operator><name>KindValue</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>referenceKindToString</name><argument_list>(<argument><expr><name>Reference</name><operator>::</operator><name>KindNamespace</name> <name>ns</name></expr></argument>, <argument><expr><name>Reference</name><operator>::</operator><name>KindArch</name> <name>a</name></expr></argument>,
<argument><expr><name>Reference</name><operator>::</operator><name>KindValue</name> <name>value</name></expr></argument>, <argument><expr><name>StringRef</name> <operator>&amp;</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>handleTaggedDoc</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>IO</name> <operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lld</name><operator>::</operator><name>File</name> <operator>*</operator><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<function_decl><type><name>void</name></type> <name>addSupportArchives</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>logLoading</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addSupportYamlFiles</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addSupportMachOObjects</name><parameter_list>(<parameter><decl><type><name>MachOLinkingContext</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<struct>struct <name>KindStrings</name> <block>{
<expr_stmt><expr><name>Reference</name><operator>::</operator><name>KindValue</name> <name>value</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>name</name></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name>void</name></type> <name>addKindTable</name><argument_list>(<argument><expr><name>Reference</name><operator>::</operator><name>KindNamespace</name> <name>ns</name></expr></argument>, <argument><expr><name>Reference</name><operator>::</operator><name>KindArch</name> <name>arch</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>KindStrings</name> <name><name>array</name><index>[]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<struct>struct <name>KindEntry</name> <block>{
<expr_stmt><expr><name>Reference</name><operator>::</operator><name>KindNamespace</name> <name>ns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Reference</name><operator>::</operator><name>KindArch</name> <name>arch</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>KindStrings</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>void</name></type> <name>add</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Reader</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>add</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>YamlIOTaggedDocumentHandler</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Reader</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>_readers</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>YamlIOTaggedDocumentHandler</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>_yamlHandlers</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>KindEntry</name></expr></argument>&gt;</argument_list></name> <name>_kindEntries</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_KIND_STRING_ENTRY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, #name }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_KIND_STRING_END</name></cpp:macro> <cpp:value>{ 0, "" }</cpp:value></cpp:define>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
