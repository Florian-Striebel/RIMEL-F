<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/LinkingContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_LINKING_CONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_LINKING_CONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PassManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>File</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Writer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SharedLibraryFile</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>LinkingContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>LinkingContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>StringRef</name> <macro><name>entrySymbolName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_entrySymbolName</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>deadStrip</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_deadStrip</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>globalsAreDeadStripRoots</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_globalsAreDeadStripRoots</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>deadStripRoots</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_deadStripRoots</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>addDeadStripRoot</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>symbolName</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>symbolName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Empty symbol cannot be a dead strip root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>_deadStripRoots</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>symbolName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<expr_stmt><expr><name>bool</name> <macro><name>printRemainingUndefines</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_printRemainingUndefines</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>allowRemainingUndefines</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_allowRemainingUndefines</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>allowShlibUndefines</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_allowShlibUndefines</name></expr>;</return> }</block></expr></expr_stmt>







<expr_stmt><expr><name>bool</name> <macro><name>logInputFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_logInputFiles</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>llvmOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_llvmOptions</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setOutputPath</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_outputPath</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt> </block_content>}</block></function>




<function><type><name>void</name></type> <name>setEntrySymbolName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_entrySymbolName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setDeadStripping</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_deadStrip</name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setGlobalsAreDeadStripRoots</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_globalsAreDeadStripRoots</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>setPrintRemainingUndefines</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>print</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_printRemainingUndefines</name> <operator>=</operator> <name>print</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setAllowRemainingUndefines</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allow</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_allowRemainingUndefines</name> <operator>=</operator> <name>allow</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setAllowShlibUndefines</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allow</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_allowShlibUndefines</name> <operator>=</operator> <name>allow</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setLogInputFiles</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>log</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_logInputFiles</name> <operator>=</operator> <name>log</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>appendLLVMOption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>_llvmOptions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getNodes</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>_nodes</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getNodes</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_nodes</name></expr>;</return> }</block></expr></expr_stmt>






<function><type><name>void</name></type> <name>addInitialUndefinedSymbol</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>symbolName</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>_initialUndefinedSymbols</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>symbolName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>StringRefVector</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>StringRefVector</name><operator>::</operator><name>iterator</name> <name>StringRefVectorIter</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>StringRefVector</name><operator>::</operator><name>const_iterator</name> <name>StringRefVectorConstIter</name></expr>;</expr_stmt></typedef>





<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>createInternalFiles</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>initialUndefinedSymbols</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>_initialUndefinedSymbols</name></expr>;</return>
}</block></expr></expr_stmt>







<function_decl><type><name>bool</name></type> <name>validate</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>demangle</name><argument_list>(<argument>StringRef symbolName</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>









<expr_stmt><expr><name>StringRef</name> <macro><name>outputPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_outputPath</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>Registry</name> <operator>&amp;</operator><macro><name>registry</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_registry</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Registry</name> <modifier>&amp;</modifier></type><name>registry</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>_registry</name></expr>;</return> </block_content>}</block></function>




<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>createImplicitFiles</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>addPasses</name><parameter_list>(<parameter><decl><type><name>PassManager</name> <modifier>&amp;</modifier></type><name>pm</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>writeFile</name><argument_list>(<argument>const File &amp;linkedFile</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>uint64_t</name> <macro><name>getNextOrdinalAndIncrement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_nextOrdinal</name><operator>++</operator></expr>;</return> }</block></expr></expr_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>finalizeInputFiles</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>






<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <call><name>handleLoadedFile</name><argument_list>(<argument><expr><name>File</name> <operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>LinkingContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>Writer</name> <operator>&amp;</operator><macro><name>writer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <macro><name>createEntrySymbolFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <macro><name>createEntrySymbolFile</name><argument_list>(<argument>StringRef filename</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <macro><name>createUndefinedSymbolFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <macro><name>createUndefinedSymbolFile</name><argument_list>(<argument>StringRef filename</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>_outputPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>_entrySymbolName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>_deadStrip</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>_globalsAreDeadStripRoots</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>_printRemainingUndefines</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>_allowRemainingUndefines</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>_logInputFiles</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>_allowShlibUndefines</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>_deadStripRoots</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>_llvmOptions</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringRefVector</name></type> <name>_initialUndefinedSymbols</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>_nodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>_allocator</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>uint64_t</name></type> <name>_nextOrdinal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Registry</name></type> <name>_registry</name></decl>;</decl_stmt>

<label><name>private</name>:</label>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>validateImpl</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
