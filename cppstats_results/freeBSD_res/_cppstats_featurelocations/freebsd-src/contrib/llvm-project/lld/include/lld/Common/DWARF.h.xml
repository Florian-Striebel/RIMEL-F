<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Common/DWARF.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_DWARF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_DWARF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/DWARF/DWARFContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/DebugInfo/DWARF/DWARFDebugLine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<struct_decl>struct <name>DILineInfo</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DWARFCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DWARFCache</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>DWARFContext</name></expr></argument>&gt;</argument_list></name> <name>dwarf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>DILineInfo</name></expr></argument>&gt;</argument_list></name> <macro><name>getDILineInfo</name><argument_list>(<argument>uint64_t offset</argument>,
<argument>uint64_t sectionIndex</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>getVariableLoc</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>DWARFContext</name> <operator>*</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>dwarf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>DWARFContext</name></expr></argument>&gt;</argument_list></name> <name>dwarf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFDebugLine</name><operator>::</operator><name>LineTable</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>lineTables</name></expr>;</expr_stmt>
<struct>struct <name>VarLoc</name> <block>{
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DWARFDebugLine</name><operator>::</operator><name>LineTable</name> <operator>*</operator><name>lt</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>line</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>VarLoc</name></expr></argument>&gt;</argument_list></name> <name>variableLoc</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
