<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/DefinedAtom.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_DEFINED_ATOM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_DEFINED_ATOM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Atom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Reference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>File</name></decl>;</decl_stmt>

































































<decl_stmt><decl><type><name>class</name></type> <name>DefinedAtom</name> <range>: <expr><name>public</name> <name>Atom</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>Interposable</name> <block>{
<expr><name>interposeNo</name></expr>,
<expr><name>interposeYes</name></expr>,
<expr><name>interposeYesAndRuntimeWeak</name></expr>

}</block></expr>;

enum <expr><name>Merge</name> <block>{
<expr><name>mergeNo</name></expr>,
<expr><name>mergeAsTentative</name></expr>,
<expr><name>mergeAsWeak</name></expr>,


<expr><name>mergeAsWeakAndAddressUsed</name></expr>,

<expr><name>mergeSameNameAndSize</name></expr>,
<expr><name>mergeByLargestSection</name></expr>,
<expr><name>mergeByContent</name></expr>,
}</block></expr>;

enum <expr><name>ContentType</name> <block>{
<expr><name>typeUnknown</name></expr>,
<expr><name>typeMachHeader</name></expr>,
<expr><name>typeCode</name></expr>,
<expr><name>typeResolver</name></expr>,
<expr><name>typeBranchIsland</name></expr>,
<expr><name>typeBranchShim</name></expr>,
<expr><name>typeStub</name></expr>,
<expr><name>typeStubHelper</name></expr>,
<expr><name>typeConstant</name></expr>,
<expr><name>typeCString</name></expr>,
<expr><name>typeUTF16String</name></expr>,
<expr><name>typeCFI</name></expr>,
<expr><name>typeLSDA</name></expr>,
<expr><name>typeLiteral4</name></expr>,
<expr><name>typeLiteral8</name></expr>,
<expr><name>typeLiteral16</name></expr>,
<expr><name>typeData</name></expr>,
<expr><name>typeDataFast</name></expr>,
<expr><name>typeZeroFill</name></expr>,
<expr><name>typeZeroFillFast</name></expr>,
<expr><name>typeConstData</name></expr>,
<expr><name>typeObjC1Class</name></expr>,
<expr><name>typeLazyPointer</name></expr>,
<expr><name>typeLazyDylibPointer</name></expr>,
<expr><name>typeNonLazyPointer</name></expr>,
<expr><name>typeCFString</name></expr>,
<expr><name>typeGOT</name></expr>,
<expr><name>typeInitializerPtr</name></expr>,
<expr><name>typeTerminatorPtr</name></expr>,
<expr><name>typeCStringPtr</name></expr>,
<expr><name>typeObjCClassPtr</name></expr>,
<expr><name>typeObjC2CategoryList</name></expr>,
<expr><name>typeObjCImageInfo</name></expr>,
<expr><name>typeObjCMethodList</name></expr>,
<expr><name>typeDTraceDOF</name></expr>,
<expr><name>typeInterposingTuples</name></expr>,
<expr><name>typeTempLTO</name></expr>,
<expr><name>typeCompactUnwindInfo</name></expr>,
<expr><name>typeProcessedUnwindInfo</name></expr>,
<expr><name>typeThunkTLV</name></expr>,
<expr><name>typeTLVInitialData</name></expr>,
<expr><name>typeTLVInitialZeroFill</name></expr>,
<expr><name>typeTLVInitializerPtr</name></expr>,
<expr><name>typeDSOHandle</name></expr>,
<expr><name>typeSectCreate</name></expr>,
}</block></expr>;




enum <expr><name>ContentPermissions</name> <block>{
<expr><name>perm___</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>permR__</name> <operator>=</operator> <literal type="number">8</literal></expr>,
<expr><name>permRW_</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>,
<expr><name>permRW_L</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><name>permR_X</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>,
<expr><name>permRWX</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr>,
<expr><name>permUnknown</name> <operator>=</operator> <literal type="number">16</literal></expr>
}</block></expr>;

enum <expr><name>SectionChoice</name> <block>{
<expr><name>sectionBasedOnContent</name></expr>,
<expr><name>sectionCustomPreferred</name></expr>,
<expr><name>sectionCustomRequired</name></expr>
}</block></expr>;

enum <expr><name>DeadStripKind</name> <block>{
<expr><name>deadStripNormal</name></expr>,
<expr><name>deadStripNever</name></expr>,
<expr><name>deadStripAlways</name></expr>
}</block></expr>;

enum <expr><name>DynamicExport</name> <block>{


<expr><name>dynamicExportNormal</name></expr>,

<expr><name>dynamicExportAlways</name></expr>,
}</block></expr>;


enum <expr><name>CodeModel</name> <block>{
<expr><name>codeNA</name></expr>,

<expr><name>codeMipsPIC</name></expr>,
<expr><name>codeMipsMicro</name></expr>,
<expr><name>codeMipsMicroPIC</name></expr>,
<expr><name>codeMips16</name></expr>,

<expr><name>codeARMThumb</name></expr>,
<expr><name>codeARM_a</name></expr>,
<expr><name>codeARM_d</name></expr>,
<expr><name>codeARM_t</name></expr>,
}</block></expr>;

struct <expr><name>Alignment</name> <block>{
<macro><name>Alignment</name><argument_list>(<argument>int v</argument>, <argument>int m = <literal type="number">0</literal></argument>)</argument_list></macro> <operator>:</operator> <expr><call><name>value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>, <macro><name>modulus</name><argument_list>(<argument>m</argument>)</argument_list></macro> <expr><block>{}</block>

<name>uint16_t</name> <name>value</name></expr>;
<expr><name>uint16_t</name> <name>modulus</name></expr>;

<expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Alignment</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>value</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>value</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>modulus</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>modulus</name></name><operator>)</operator></expr>;</return>
}</block>
}</expr>;





<expr><name>virtual</name> <name>uint64_t</name> <macro><name>ordinal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><name>virtual</name> <name>uint64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;






<expr><name>virtual</name> <name>uint64_t</name> <macro><name>sectionSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block>







<name>virtual</name> <name>Scope</name> <macro><name>scope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>Interposable</name> <macro><name>interposable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>Merge</name> <macro><name>merge</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>ContentType</name> <macro><name>contentType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>Alignment</name> <macro><name>alignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;




<expr><name>virtual</name> <name>SectionChoice</name> <macro><name>sectionChoice</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>StringRef</name> <macro><name>customSectionName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>DeadStripKind</name> <macro><name>deadStrip</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>DynamicExport</name> <macro><name>dynamicExport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>dynamicExportNormal</name></expr>;</return>
}</block>


<name>virtual</name> <name>CodeModel</name> <macro><name>codeModel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>codeNA</name></expr>;</return> }</block>






<name>virtual</name> <name>ContentPermissions</name> <macro><name>permissions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>virtual</name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <macro><name>rawContent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;




<expr><name>class</name> <name>reference_iterator</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>reference_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DefinedAtom</name> <operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>it</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>_atom</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>, <macro><name>_it</name><argument_list>(<argument>it</argument>)</argument_list></macro> <expr><block>{ }</block>

<specifier>const</specifier> <name>Reference</name> <operator>*</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>_atom</name><operator>.</operator><name>derefIterator</name></name><argument_list>(<argument><expr><name>_it</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>Reference</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr>) <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>_atom</name><operator>.</operator><name>derefIterator</name></name><argument_list>(<argument><expr><name>_it</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>reference_iterator</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_it</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>_it</name></name></expr>;</return>
}</block>

<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>reference_iterator</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>other</name><operator>)</operator></expr>;</return>
}</block>

<name>reference_iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><call><name><name>_atom</name><operator>.</operator><name>incrementIterator</name></name><argument_list>(<argument><expr><name>_it</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>DefinedAtom</name> <operator>&amp;</operator><name>_atom</name></expr>;
<expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>_it</name></expr>;
}</block></expr>;


<expr><name>virtual</name> <name>reference_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>reference_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>void</name> <macro><name>addReference</name><argument_list>(<argument>Reference::KindNamespace ns</argument>,
<argument>Reference::KindArch arch</argument>,
<argument>Reference::KindValue kindValue</argument>, <argument>uint64_t off</argument>,
<argument>const Atom *target</argument>, <argument>Reference::Addend a</argument>)</argument_list></macro> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Subclass does not permit adding references"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Atom *a</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>a</name><operator>-&gt;</operator><name>definition</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>definitionRegular</name></expr>;</return>
}</block>


<specifier>static</specifier> <name>ContentPermissions</name> <macro><name>permissions</name><argument_list>(<argument>ContentType type</argument>)</argument_list></macro></expr>;


<expr><name>bool</name> <macro><name>occupiesDiskSpace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>ContentType</name> <name>atomContentType</name> <operator>=</operator> <call><name>contentType</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>!</operator><operator>(</operator><name>atomContentType</name> <operator>==</operator> <name>DefinedAtom</name><operator>::</operator><name>typeZeroFill</name> <operator>||</operator>
<name>atomContentType</name> <operator>==</operator> <name>DefinedAtom</name><operator>::</operator><name>typeZeroFillFast</name> <operator>||</operator>
<name>atomContentType</name> <operator>==</operator> <name>DefinedAtom</name><operator>::</operator><name>typeTLVInitialZeroFill</name><operator>)</operator></expr>;</return>
}</block>




<name>bool</name> <macro><name>relocsToDefinedCanBeImplicit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>ContentType</name> <name>atomContentType</name> <operator>=</operator> <call><name>contentType</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>atomContentType</name> <operator>==</operator> <name>typeCFI</name></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>


<call><name>DefinedAtom</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Atom</name><argument_list>(<argument>definitionRegular</argument>)</argument_list></macro> <block>{ }</block>

<operator>~</operator><macro><name>DefinedAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;



<expr><name>virtual</name> <specifier>const</specifier> <name>Reference</name> <operator>*</operator><macro><name>derefIterator</name><argument_list>(<argument>const void *iter</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>void</name> <macro><name>incrementIterator</name><argument_list>(<argument>const void *&amp;iter</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
