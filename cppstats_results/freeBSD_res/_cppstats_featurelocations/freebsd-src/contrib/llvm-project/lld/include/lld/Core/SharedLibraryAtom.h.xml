<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/SharedLibraryAtom.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_SHARED_LIBRARY_ATOM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_SHARED_LIBRARY_ATOM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Core/Atom.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>SharedLibraryAtom</name> <range>: <expr><name>public</name> <name>Atom</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>class</name> <name>Type</name> <operator>:</operator> <name>uint32_t</name> <block>{
<expr><name>Unknown</name></expr>,
<expr><name>Code</name></expr>,
<expr><name>Data</name></expr>,
}</block></expr>;



<expr><name>virtual</name> <name>StringRef</name> <macro><name>loadName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>bool</name> <macro><name>canBeNullAtRuntime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>Type</name> <macro><name>type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>uint64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Atom *a</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>a</name><operator>-&gt;</operator><name>definition</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>definitionSharedLibrary</name></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const SharedLibraryAtom *</argument>)</argument_list></macro> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<call><name>SharedLibraryAtom</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Atom</name><argument_list>(<argument>definitionSharedLibrary</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>SharedLibraryAtom</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
