<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Common/Timer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COMMON_TIMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COMMON_TIMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Timer</name></decl>;</decl_stmt>

<struct>struct <name>ScopedTimer</name> <block>{
<function_decl><type><name>explicit</name></type> <name>ScopedTimer</name><parameter_list>(<parameter><decl><type><name>Timer</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><operator>~</operator><call><name>ScopedTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name><name>time_point</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>high_resolution_clock</name></expr></argument>&gt;</argument_list></name> <name>startTime</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Timer</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>Timer</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Timer</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>Timer &amp;parent</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><specifier>static</specifier> <name>Timer</name> <modifier>&amp;</modifier></type><name>root</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>addToTotal</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>nanoseconds</name> <name>time</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>time</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<function_decl><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>double</name> <macro><name>millis</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>explicit</name></type> <name>Timer</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>int</name> <name>depth</name></expr></argument>, <argument><expr><name>double</name> <name>totalDuration</name></expr></argument>, <argument><expr><name>bool</name> <name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>nanoseconds</name><operator>::</operator><name>rep</name></expr></argument>&gt;</argument_list></name> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Timer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>children</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
