<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/SymbolTable.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_SYMBOL_TABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_SYMBOL_TABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DJB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AbsoluteAtom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DefinedAtom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LinkingContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ResolverOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SharedLibraryAtom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UndefinedAtom</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>SymbolTable</name> <block>{<block_content>
<label><name>public</name>:</label>

<function_decl><type><name>bool</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UndefinedAtom</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SharedLibraryAtom</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AbsoluteAtom</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type><name>findByName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>sym</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>UndefinedAtom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>undefines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type><name>replacement</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isCoalescedAway</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>AtomToAtom</name></expr>;</expr_stmt></typedef>

<struct>struct <name>StringRefMappingInfo</name> <block>{
<function><type><specifier>static</specifier> <name>StringRef</name></type> <name>getEmptyKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>StringRef</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>StringRef</name></type> <name>getTombstoneKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><parameter_list>(<parameter><decl><type><name>StringRef</name> <specifier>const</specifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>djbHash</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><name>StringRef</name> <specifier>const</specifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>StringRef</name> <specifier>const</specifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>lhs</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Atom</name> <operator>*</operator></expr></argument>,
<argument><expr><name>StringRefMappingInfo</name></expr></argument>&gt;</argument_list></name> <name>NameToAtom</name></expr>;</expr_stmt></typedef>

<struct>struct <name>AtomMappingInfo</name> <block>{
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type> <name>getEmptyKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier></type> <name>getTombstoneKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>DefinedAtom</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>Val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>LHS</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>RHS</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DefinedAtom</name><operator>*</operator></expr></argument>, <argument><expr><name>AtomMappingInfo</name></expr></argument>&gt;</argument_list></name> <name>AtomContentSet</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>bool</name></type> <name>addByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>addByContent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefinedAtom</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AtomToAtom</name></type> <name>_replacedAtoms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NameToAtom</name></type> <name>_nameTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AtomContentSet</name></type> <name>_contentTable</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
