<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Instrumentation.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_INSTRUMENTATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_INSTRUMENTATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LLD_HAS_VTUNE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ittnotify.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LLD_HAS_VTUNE</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><name>class</name></type> <name>Domain</name> <block>{<block_content>
<decl_stmt><decl><type><name>__itt_domain</name> <modifier>*</modifier></type><name>_domain</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Domain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>_domain</name><argument_list>(<argument>__itt_domain_createA(name)</argument>)</argument_list></macro> <block>{}</block>

<name>operator</name> <name>__itt_domain</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>_domain</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>__itt_domain</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>_domain</name></expr>;</return> </block_content>}</block></block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>StringHandle</name> <block>{<block_content>
<decl_stmt><decl><type><name>__itt_string_handle</name> <modifier>*</modifier></type><name>_handle</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>StringHandle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>_handle</name><argument_list>(<argument>__itt_string_handle_createA(name)</argument>)</argument_list></macro> <block>{}</block>

<name>operator</name> <name>__itt_string_handle</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>_handle</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>ScopedTask</name> <block>{<block_content>
<decl_stmt><decl><type><name>__itt_domain</name> <modifier>*</modifier></type><name>_domain</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ScopedTask</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScopedTask</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ScopedTask</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ScopedTask</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>ScopedTask</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Domain</name> <operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>StringHandle</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>_domain</name><argument_list>(<argument>d</argument>)</argument_list></macro> <block>{
<expr><call><name>__itt_task_begin</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>__itt_null</name></expr></argument>, <argument><expr><name>__itt_null</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>ScopedTask</name><argument_list>(<argument>ScopedTask &amp;&amp;other</argument>)</argument_list></macro> <block>{
<expr><operator>*</operator><name>this</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>ScopedTask</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>ScopedTask</name> <operator>&amp;&amp;</operator><name>other</name><operator>)</operator> <block>{
<expr><name>_domain</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>_domain</name></name></expr>;
<expr><name><name>other</name><operator>.</operator><name>_domain</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_domain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__itt_task_end</name><argument_list>(<argument><expr><name>_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>_domain</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><operator>~</operator><macro><name>ScopedTask</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>end</name><argument_list>()</argument_list></call></expr>; }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Marker</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Marker</name><argument_list>(<argument>const Domain &amp;d</argument>, <argument>const StringHandle &amp;s</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>__itt_marker</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>__itt_null</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>__itt_scope_global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>class</name></type> <name>Domain</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Domain</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{<block_content/>}</block>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StringHandle</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>StringHandle</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{<block_content/>}</block>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedTask</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ScopedTask</name><argument_list>(<argument>const Domain &amp;d</argument>, <argument>const StringHandle &amp;s</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<function><type><name>void</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Marker</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Marker</name><argument_list>(<argument>const Domain &amp;d</argument>, <argument>const StringHandle &amp;s</argument>)</argument_list></macro> <block>{<block_content/>}</block>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>Domain</name> <modifier>&amp;</modifier></type><name>getDefaultDomain</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>Domain</name></type> <name>domain</name><argument_list>(<argument><expr><literal type="string">"org.llvm.lld"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>domain</name></expr>;</return>
</block_content>}</block></function>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
