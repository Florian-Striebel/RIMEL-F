<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Common/ErrorHandler.h">


































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_COMMON_ERRORHANDLER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_COMMON_ERRORHANDLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lld/Common/LLVM.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileOutputBuffer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>



<extern>extern llvm::raw_ostream *stdoutOS;</extern>
<extern>extern llvm::raw_ostream *stderrOS;</extern>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><call><name>outs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><call><name>errs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ErrorTag</name> <block>{<block_content> <expr_stmt><expr><name>LibNotFound</name></expr><operator>,</operator> <expr><name>SymbolNotFound</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ErrorHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>errorCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>errorLimit</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>errorLimitExceededMsg</name> <init>= <expr><literal type="string">"too many errors emitted, stopping now"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>errorHandlingScript</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>logName</name> <init>= <expr><literal type="string">"lld"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exitEarly</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fatalWarnings</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>vsDiagnostics</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>disableOutput</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>cleanupCallback</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ErrorTag</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><index>[<expr><index>[<expr><name>noreturn</name></expr>]</index></expr>]</index> <name>void</name> <call><name>fatal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>warn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cleanupCallback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cleanupCallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>ErrorHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>FileOutputBuffer</name></expr></argument>&gt;</argument_list></name> <name>outputBuffer</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>Colors</name> <init>= <expr><name>raw_ostream</name><operator>::</operator><name>Colors</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>getLocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>ErrorHandler</name> <modifier>&amp;</modifier></type><name>errorHandler</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>errorHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>error</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ErrorTag</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>errorHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>error</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><index>[<expr><index>[<expr><name>noreturn</name></expr>]</index></expr>]</index> <specifier>inline</specifier> <name>void</name> <macro><name>fatal</name><argument_list>(<argument>const Twine &amp;msg</argument>)</argument_list></macro> <block>{ <expr><call><name>errorHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fatal</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>; }</block>
<specifier>inline</specifier> <name>void</name> <macro><name>log</name><argument_list>(<argument>const Twine &amp;msg</argument>)</argument_list></macro> <block>{ <expr><call><name>errorHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>; }</block>
<specifier>inline</specifier> <name>void</name> <macro><name>message</name><argument_list>(<argument>const Twine &amp;msg</argument>)</argument_list></macro> <block>{ <expr><call><name>errorHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>message</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>; }</block>
<specifier>inline</specifier> <name>void</name> <macro><name>warn</name><argument_list>(<argument>const Twine &amp;msg</argument>)</argument_list></macro> <block>{ <expr><call><name>errorHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>warn</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>; }</block>
<specifier>inline</specifier> <name>uint64_t</name> <macro><name>errorCount</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>errorHandler</name><argument_list>()</argument_list></call><operator>.</operator><name>errorCount</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><index>[<expr><index>[<expr><name>noreturn</name></expr>]</index></expr>]</index> <name>void</name> <macro><name>exitLld</name><argument_list>(<argument>int val</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>diagnosticHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DiagnosticInfo</name> <operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>checkError</name><parameter_list>(<parameter><decl><type><name>Error</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ec</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name><name>ec</name><operator>.</operator><name>message</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>toString</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>&amp;</modifier></type><name>check</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>toString</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>*</operator><name>e</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name></type> <name>check2</name><argument_list>(<argument><expr><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>e</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>prefix</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ec</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>prefix</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>ec</name><operator>.</operator><name>message</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name></type> <name>check2</name><argument_list>(<argument><expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>e</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>prefix</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>prefix</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name>toString</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>(<argument>const Twine &amp;s</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>s</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>E</name></type></parameter>, <parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check2((E), [&amp;] { return toString(S); })</cpp:value></cpp:define>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
