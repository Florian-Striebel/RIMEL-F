<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lld/include/lld/Core/Reference.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLD_CORE_REFERENCES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLD_CORE_REFERENCES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lld</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Atom</name></decl>;</decl_stmt>
























<decl_stmt><decl><type><name>class</name></type> <name>Reference</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>KindNamespace</name> <block>{<block_content>
<expr_stmt><expr><name>all</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>testing</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>mach_o</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>KindNamespace</name> <macro><name>kindNamespace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>KindNamespace</name><operator>)</operator><name>_kindNamespace</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setKindNamespace</name><parameter_list>(<parameter><decl><type><name>KindNamespace</name></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_kindNamespace</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>ns</name></expr>;</expr_stmt> </block_content>}</block></function>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>KindArch</name> <block>{<block_content> <expr><name>all</name></expr><operator>,</operator> <expr><name>AArch64</name></expr><operator>,</operator> <expr><name>ARM</name></expr><operator>,</operator> <expr><name>x86</name></expr><operator>,</operator> <expr><name>x86_64</name></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>KindArch</name> <macro><name>kindArch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>KindArch</name><operator>)</operator><name>_kindArch</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setKindArch</name><parameter_list>(<parameter><decl><type><name>KindArch</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>_kindArch</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></function>

<typedef>typedef <type><name>uint16_t</name></type> <name>KindValue</name>;</typedef>

<expr_stmt><expr><name>KindValue</name> <macro><name>kindValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_kindValue</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setKindValue</name><parameter_list>(<parameter><decl><type><name>KindValue</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_kindValue</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>


<enum>enum <block>{


<decl><name>kindLayoutAfter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>kindAssociate</name></decl>,
}</block>;</enum>


<typedef>typedef <type><name>int64_t</name></type> <name>Addend</name>;</typedef>



<expr_stmt><expr><name>virtual</name> <name>uint64_t</name> <macro><name>offsetInAtom</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>Atom</name> <operator>*</operator><macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>setTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Atom</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<expr_stmt><expr><name>virtual</name> <name>Addend</name> <macro><name>addend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>setAddend</name><parameter_list>(<parameter><decl><type><name>Addend</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<expr_stmt><expr><name>virtual</name> <name>uint32_t</name> <macro><name>tag</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>

<macro><name>Reference</name><argument_list>(<argument>KindNamespace ns</argument>, <argument>KindArch a</argument>, <argument>KindValue value</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>_kindValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>_kindNamespace</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>ns</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>_kindArch</name><argument_list>(<argument>(uint8_t)a</argument>)</argument_list></macro> <expr><block>{}</block>





<name>virtual</name> <operator>~</operator><call><name>Reference</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>KindValue</name></type> <name>_kindValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>_kindNamespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>_kindArch</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
