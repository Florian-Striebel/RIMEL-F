<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/test/gtest-typed-test_test.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_TEST_GTEST_TYPED_TEST_TEST_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_TEST_GTEST_TYPED_TEST_TEST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/gtest.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TYPED_TEST_P</name></expr></cpp:if>

<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Test</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ContainerTest</name> <range>: <expr><name>public</name> <name>Test</name> <block>{
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TYPED_TEST_CASE_P</name><argument_list>(<argument><expr><name>ContainerTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TYPED_TEST_P</name><argument_list>(<argument>ContainerTest</argument>, <argument>CanBeDefaultConstructed</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>TypeParam</name></type> <name>container</name></decl>;</decl_stmt>
</block_content>}</block>

<macro><name>TYPED_TEST_P</name><argument_list>(<argument>ContainerTest</argument>, <argument>InitialSizeIsZero</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>TypeParam</name></type> <name>container</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_EQ</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><call><name><name>container</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>REGISTER_TYPED_TEST_CASE_P</name><argument_list>(<argument><expr><name>ContainerTest</name></expr></argument>,
<argument><expr><name>CanBeDefaultConstructed</name></expr></argument>, <argument><expr><name>InitialSizeIsZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
