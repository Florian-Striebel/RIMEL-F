<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/test/production.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_TEST_PRODUCTION_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_TEST_PRODUCTION_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/gtest_prod.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>PrivateCode</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>FRIEND_TEST</name><argument_list>(<argument><expr><name>PrivateCodeTest</name></expr></argument>, <argument><expr><name>CanAccessPrivateMembers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FRIEND_TEST</name><argument_list>(<argument><expr><name>PrivateCodeFixtureTest</name></expr></argument>, <argument><expr><name>CanAccessPrivateMembers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PrivateCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>int</name> <macro><name>x</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>x_</name></expr>;</return> }</block></expr></expr_stmt>
<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>set_x</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>an_x</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>x_</name> <operator>=</operator> <name>an_x</name></expr>;</expr_stmt> </block_content>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>x_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
