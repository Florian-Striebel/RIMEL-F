<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/samples/prime_tables.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_SAMPLES_PRIME_TABLES_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_SAMPLES_PRIME_TABLES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>class</name></type> <name>PrimeTable</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>PrimeTable</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>virtual</name> <name>bool</name> <macro><name>IsPrime</name><argument_list>(<argument>int n</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>GetNextPrime</name><argument_list>(<argument><expr><name>int</name> <name>p</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>OnTheFlyPrimeTable</name> <range>: <expr><name>public</name> <name>PrimeTable</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>bool</name> <macro><name>IsPrime</name><argument_list>(<argument>int n</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>%</operator> <name>i</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>

return true</block><empty_stmt>;</empty_stmt></for>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>GetNextPrime</name><argument_list>(<argument><expr><name>int</name> <name>p</name></expr></argument>)</argument_list> const <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsPrime</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};



<decl_stmt><decl><type><name>class</name></type> <name>PreCalculatedPrimeTable</name> <range>: <expr><name>public</name> <name>PrimeTable</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>explicit</name> <macro><name>PreCalculatedPrimeTable</name><argument_list>(<argument>int max</argument>)</argument_list></macro>
<operator>:</operator> <call><name>is_prime_size_</name><argument_list>(<argument><expr><name>max</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <macro><name>is_prime_</name><argument_list>(<argument>new bool[max + <literal type="number">1</literal>]</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>CalculatePrimesUpTo</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>virtual</name> <operator>~</operator><macro><name>PreCalculatedPrimeTable</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>delete</name><index>[]</index></name> <name>is_prime_</name></expr>; }</block>

<name>virtual</name> <name>bool</name> <macro><name>IsPrime</name><argument_list>(<argument>int n</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>is_prime_size_</name> <operator>&amp;&amp;</operator> <name><name>is_prime_</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
}</block>

<name>virtual</name> <name>int</name> <macro><name>GetNextPrime</name><argument_list>(<argument>int p</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>is_prime_size_</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is_prime_</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>

return -1</block><empty_stmt>;</empty_stmt></for>
}</block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>CalculatePrimesUpTo</name><argument_list>(<argument>int max</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>std</name><operator>::</operator><call><name>fill</name><argument_list>(<argument><expr><name>is_prime_</name></expr></argument>, <argument><expr><name>is_prime_</name> <operator>+</operator> <name>is_prime_size_</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>is_prime_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>is_prime_</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>i</name><operator>%</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is_prime_</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>




<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>is_prime_</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
}

const int is_prime_size_</block><empty_stmt>;</empty_stmt></for>
<decl_stmt><decl><type><name>bool</name><modifier>*</modifier> <specifier>const</specifier></type> <name>is_prime_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PreCalculatedPrimeTable</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt/>}</block_content></block><empty_stmt>;</empty_stmt></for></block></expr></block></expr></range></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
