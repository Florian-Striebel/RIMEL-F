<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/samples/sample3-inl.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_SAMPLES_SAMPLE3_INL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_SAMPLES_SAMPLE3_INL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>E</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Queue</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>E</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>QueueNode</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>Queue</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><specifier>const</specifier> <name>E</name><operator>&amp;</operator> <macro><name>element</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>element_</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>QueueNode</name><modifier>*</modifier></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>next_</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>QueueNode</name><operator>*</operator> <macro><name>next</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>next_</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>


<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>QueueNode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>E</name><operator>&amp;</operator> <name>an_element</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>element_</name><argument_list>(<argument><expr><name>an_element</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>next_</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <expr><block>{}</block>


<specifier>const</specifier> <name>QueueNode</name><operator>&amp;</operator> <name>operator</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>QueueNode</name><operator>&amp;</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QueueNode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QueueNode</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>E</name></type> <name>element_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QueueNode</name><modifier>*</modifier></type> <name>next_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>E</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Queue</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Queue</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>head_</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>last_</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>


<operator>~</operator><macro><name>Queue</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>Clear</name><argument_list>()</argument_list></call></expr>; }</block>


<name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>size_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>node</name> <init>= <expr><name>head_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>next</name> <init>= <expr><call><name><name>node</name><operator>-&gt;</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>node</name></decl>;</decl_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name><name>node</name><operator>-&gt;</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>


head_ = last_ = NULL</block><empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>size_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}


size_t Size(</block></if></if_stmt>) <specifier>const</specifier> <block>{ <return>return <expr><name>size_</name></expr>;</return> }</block>


<name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>Head</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>head_</name></expr>;</return> }</block>
<specifier>const</specifier> <name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>Head</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>head_</name></expr>;</return> }</block>


<name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>Last</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>last_</name></expr>;</return> }</block>
<specifier>const</specifier> <name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>Last</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>last_</name></expr>;</return> }</block>





<name>void</name> <macro><name>Enqueue</name><argument_list>(<argument>const E&amp; element</argument>)</argument_list></macro> <block>{
<expr><name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>new_node</name> <operator>=</operator> <name>new</name> <call><name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>size_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>head_</name> <operator>=</operator> <name>last_</name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name><name>last_</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}



E* Dequeue(</block></block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><name>size_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
<expr_stmt/>}</block_content>

const QueueNode&lt;E&gt;* const old_head = head_</block><empty_stmt>;</empty_stmt></if></if_stmt>
<name>head_</name> <operator>=</operator> <name><name>head_</name><operator>-&gt;</operator><name>next_</name></name></block></block></block></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>E</name><modifier>*</modifier></type> <name>element</name> <init>= <expr><name>new</name> <call><name>E</name><argument_list>(<argument><expr><call><name><name>old_head</name><operator>-&gt;</operator><name>element</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>delete</name></type> <name>old_head</name></decl>;</decl_stmt>

<return>return <expr><name>element</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name>
<name>Queue</name><modifier>*</modifier></type> <name>Map</name><argument_list>(<argument><expr><name>F</name> <name>function</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>Queue</name><modifier>*</modifier></type> <name>new_queue</name> <init>= <expr><name>new</name> <call><name>Queue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>node</name> <init>= <expr><name>head_</name></expr></init></decl>;</init> <condition><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next_</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>new_queue</name><operator>-&gt;</operator><name>Enqueue</name></name><argument_list>(<argument><expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>node</name><operator>-&gt;</operator><name>element</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>new_queue</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>head_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>QueueNode</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>last_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size_</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>Queue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Queue</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Queue</name><modifier>&amp;</modifier></type> <name>operator</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Queue</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
