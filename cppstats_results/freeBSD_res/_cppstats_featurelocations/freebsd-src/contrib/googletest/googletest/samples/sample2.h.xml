<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/samples/sample2.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_SAMPLES_SAMPLE2_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_SAMPLES_SAMPLE2_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>



<decl_stmt><decl><type><name>class</name></type> <name>MyString</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c_string_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MyString</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MyString</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CloneCString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>a_c_string</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><call><name>MyString</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>c_string_</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <block>{}</block>


<name>explicit</name> <call><name>MyString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>a_c_string</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>c_string_</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <block>{
<expr><call><name>Set</name><argument_list>(<argument><expr><name>a_c_string</name></expr></argument>)</argument_list></call></expr>;
}</block>


<call><name>MyString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MyString</name><operator>&amp;</operator> <name>string</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>c_string_</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <block>{
<expr><call><name>Set</name><argument_list>(<argument><expr><name><name>string</name><operator>.</operator><name>c_string_</name></name></expr></argument>)</argument_list></call></expr>;
}</block>





<operator>~</operator><macro><name>MyString</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>delete</name><index>[]</index></name> <name>c_string_</name></expr>; }</block>


<specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>c_string</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>c_string_</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>Length</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>c_string_</name> <operator>==</operator> <name>NULL</name> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>c_string_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c_string</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
