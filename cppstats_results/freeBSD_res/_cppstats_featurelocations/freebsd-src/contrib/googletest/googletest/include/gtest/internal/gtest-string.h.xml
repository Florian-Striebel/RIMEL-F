<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/internal/gtest-string.h">







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mem.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>String</name> <block>{<block_content>
<label><name>public</name>:</label>









<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CloneCString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c_str</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>












<function_decl><type><specifier>static</specifier> <name>LPCWSTR</name></type> <name>AnsiToUtf16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c_str</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>Utf16ToAnsi</name><parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type> <name>utf16_str</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CStringEquals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>ShowWideCString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>wchar_t</name><operator>*</operator> <name>wide_c_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>WideCStringEquals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CaseInsensitiveCStringEquals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CaseInsensitiveWideCStringEquals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>lhs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>EndsWithCaseInsensitive</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>suffix</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>FormatIntWidth2</name><argument_list>(<argument>int value</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>FormatHexInt</name><argument_list>(<argument>int value</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>FormatByte</name><argument_list>(<argument>unsigned char value</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>String</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>GTEST_API_</name> <name>std</name><operator>::</operator><name>string</name> <call><name>StringStreamToString</name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>stringstream</name><operator>*</operator> <name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
