<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<expr_stmt><expr><call><name>GTEST_DECLARE_string_</name><argument_list>(<argument><expr><name>internal_run_death_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>kDeathTestStyleFlag</name><index>[]</index></name> <init>= <expr><literal type="string">"death_test_style"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>kDeathTestUseFork</name><index>[]</index></name> <init>= <expr><literal type="string">"death_test_use_fork"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>kInternalRunDeathTestFlag</name><index>[]</index></name> <init>= <expr><literal type="string">"internal_run_death_test"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_DEATH_TEST</name></expr></cpp:if>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4251</literal></argument> \
)</argument_list></macro>














<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>DeathTest</name> <block>{<block_content>
<label><name>public</name>:</label>








<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>statement</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RE</name><modifier>*</modifier></type> <name>regex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>DeathTest</name><modifier>*</modifier><modifier>*</modifier></type> <name>test</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>DeathTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>DeathTest</name><argument_list>()</argument_list></macro> <block>{ }</block>


<name>class</name> <name>ReturnSentinel</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>ReturnSentinel</name><argument_list>(<argument><expr><name>DeathTest</name><operator>*</operator> <name>test</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>test_</name><argument_list>(<argument>test</argument>)</argument_list></macro> <block>{ }</block>
<operator>~</operator><macro><name>ReturnSentinel</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>test_</name><operator>-&gt;</operator><name>Abort</name></name><argument_list>(<argument><expr><name>TEST_ENCOUNTERED_RETURN_STATEMENT</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>private</name><operator>:</operator>
<name>DeathTest</name><operator>*</operator> <specifier>const</specifier> <name>test_</name></expr>;
<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ReturnSentinel</name></expr></argument>)</argument_list></call></expr>;
}</block> <name>GTEST_ATTRIBUTE_UNUSED_</name></expr>;</expr_stmt>






<enum>enum <name>TestRole</name> <block>{ <decl><name>OVERSEE_TEST</name></decl>, <decl><name>EXECUTE_TEST</name></decl> }</block>;</enum>


<enum>enum <name>AbortReason</name> <block>{
<decl><name>TEST_ENCOUNTERED_RETURN_STATEMENT</name></decl>,
<decl><name>TEST_THREW_EXCEPTION</name></decl>,
<decl><name>TEST_DID_NOT_DIE</name></decl>
}</block>;</enum>


<function_decl><type><name>virtual</name> <name>TestRole</name></type> <name>AssumeRole</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <name>int</name></type> <name>Wait</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>








<function_decl><type><name>virtual</name> <name>bool</name></type> <name>Passed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>exit_status_ok</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>Abort</name><parameter_list>(<parameter><decl><type><name>AbortReason</name></type> <name>reason</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>LastMessage</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>set_last_death_test_message</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <name>last_death_test_message_</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>DeathTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>


<decl_stmt><decl><type><name>class</name></type> <name>DeathTestFactory</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>DeathTestFactory</name><argument_list>()</argument_list></macro> <block>{ }</block>
<name>virtual</name> <name>bool</name> <macro><name>Create</name><argument_list>(<argument>const char* statement</argument>, <argument>const RE* regex</argument>,
<argument>const char* file</argument>, <argument>int line</argument>, <argument>DeathTest** test</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DefaultDeathTestFactory</name> <range>: <expr><name>public</name> <name>DeathTestFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>bool</name> <macro><name>Create</name><argument_list>(<argument>const char* statement</argument>, <argument>const RE* regex</argument>,
<argument>const char* file</argument>, <argument>int line</argument>, <argument>DeathTest** test</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>



<function_decl><type><name>GTEST_API_</name> <name>bool</name></type> <name>ExitedUnsuccessfully</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_status</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_EXCEPTIONS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_EXECUTE_DEATH_TEST_STATEMENT_</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>death_test</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>try { GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); } catch (const ::std::exception&amp; gtest_exception) { fprintf(stderr, "\n%s: Caught std::exception-derived exception escaping the " "death test statement. Exception message: %s\n", ::testing::internal::FormatFileLocation(__FILE__, __LINE__).c_str(), gtest_exception.what()); fflush(stderr); death_test-&gt;Abort(::testing::internal::DeathTest::TEST_THREW_EXCEPTION); } catch (...) { death_test-&gt;Abort(::testing::internal::DeathTest::TEST_THREW_EXCEPTION); }</cpp:value></cpp:define>















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_EXECUTE_DEATH_TEST_STATEMENT_</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>death_test</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEATH_TEST_</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>predicate</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>, <parameter><type><name>fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_AMBIGUOUS_ELSE_BLOCKER_ if (::testing::internal::AlwaysTrue()) { const ::testing::internal::RE&amp; gtest_regex = (regex); ::testing::internal::DeathTest* gtest_dt; if (!::testing::internal::DeathTest::Create(#statement, &amp;gtest_regex, __FILE__, __LINE__, &amp;gtest_dt)) { goto GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__); } if (gtest_dt != NULL) { ::testing::internal::scoped_ptr&lt; ::testing::internal::DeathTest&gt; gtest_dt_ptr(gtest_dt); switch (gtest_dt-&gt;AssumeRole()) { case ::testing::internal::DeathTest::OVERSEE_TEST: if (!gtest_dt-&gt;Passed(predicate(gtest_dt-&gt;Wait()))) { goto GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__); } break; case ::testing::internal::DeathTest::EXECUTE_TEST: { ::testing::internal::DeathTest::ReturnSentinel gtest_sentinel(gtest_dt); GTEST_EXECUTE_DEATH_TEST_STATEMENT_(statement, gtest_dt); gtest_dt-&gt;Abort(::testing::internal::DeathTest::TEST_DID_NOT_DIE); break; } default: break; } } } else GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__): fail(::testing::internal::DeathTest::LastMessage())</cpp:value></cpp:define>







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_EXECUTE_STATEMENT_</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_AMBIGUOUS_ELSE_BLOCKER_ if (::testing::internal::AlwaysTrue()) { GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); } else if (!::testing::internal::AlwaysTrue()) { const ::testing::internal::RE&amp; gtest_regex = (regex); static_cast&lt;void&gt;(gtest_regex); } else ::testing::Message()</cpp:value></cpp:define>












<decl_stmt><decl><type><name>class</name></type> <name>InternalRunDeathTestFlag</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>InternalRunDeathTestFlag</name><argument_list>(<argument>const std::string&amp; a_file</argument>,
<argument>int a_line</argument>,
<argument>int an_index</argument>,
<argument>int a_write_fd</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>file_</name><argument_list>(<argument><expr><name>a_file</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>line_</name><argument_list>(<argument><expr><name>a_line</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>index_</name><argument_list>(<argument><expr><name>an_index</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>write_fd_</name><argument_list>(<argument>a_write_fd</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>InternalRunDeathTestFlag</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>write_fd_</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>posix</name><operator>::</operator><call><name>Close</name><argument_list>(<argument><expr><name>write_fd_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>file</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>file_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>int</name> <macro><name>line</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>line_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>int</name> <macro><name>index</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>index_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>int</name> <macro><name>write_fd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>write_fd_</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>file_</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_fd_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>InternalRunDeathTestFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<function_decl><type><name>InternalRunDeathTestFlag</name><modifier>*</modifier></type> <name>ParseInternalRunDeathTestFlag</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
