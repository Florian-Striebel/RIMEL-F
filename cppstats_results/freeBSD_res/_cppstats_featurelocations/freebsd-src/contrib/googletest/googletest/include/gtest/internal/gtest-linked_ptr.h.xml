<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h">


































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>


<function_decl><type><name>GTEST_API_</name></type> <name>GTEST_DECLARE_STATIC_MUTEX_</name><parameter_list>(<parameter><decl><type><name>g_linked_ptr_mutex</name></type></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>class</name></type> <name>linked_ptr_internal</name> <block>{<block_content>
<label><name>public</name>:</label>

<function><type><name>void</name></type> <name>join_new</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>next_</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>linked_ptr_internal</name> <specifier>const</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
GTEST_LOCK_EXCLUDED_<parameter_list>(<parameter><decl><type><name>g_linked_ptr_mutex</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>MutexLock</name></type> <name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_linked_ptr_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linked_ptr_internal</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next_</name></name> <operator>!=</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>next_</name></name> <operator>!=</operator> <name>this</name> <operator>&amp;&amp;</operator>
<literal type="string">"Trying to join() a linked ring we are already in. "</literal>
<literal type="string">"Is GMock thread safety enabled?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>depart</name><parameter_list>()</parameter_list>
GTEST_LOCK_EXCLUDED_<parameter_list>(<parameter><decl><type><name>g_linked_ptr_mutex</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>MutexLock</name></type> <name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_linked_ptr_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>linked_ptr_internal</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>next_</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next_</name></name> <operator>!=</operator> <name>this</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>next_</name></name> <operator>!=</operator> <name>next_</name> <operator>&amp;&amp;</operator>
<literal type="string">"Trying to depart() a linked ring we are not in. "</literal>
<literal type="string">"Is GMock thread safety enabled?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <name>next_</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>mutable</name> <name>linked_ptr_internal</name> <specifier>const</specifier><modifier>*</modifier></type> <name>next_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>linked_ptr</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>T</name></type> <name>element_type</name>;</typedef>



<function><type><name>explicit</name></type> <name>linked_ptr</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>capture</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><operator>~</operator><macro><name>linked_ptr</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>depart</name><argument_list>()</argument_list></call></expr>; }</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name> <macro><name>linked_ptr</name><argument_list>(<argument>linked_ptr&lt;U&gt; const&amp; ptr</argument>)</argument_list></macro> <block>{ <expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>; }</block>
<macro><name>linked_ptr</name><argument_list>(<argument>linked_ptr const&amp; ptr</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name> <operator>!=</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name> <name>linked_ptr</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>ptr</name><operator>)</operator> <block>{
<expr><call><name>depart</name><argument_list>()</argument_list></call></expr>;
<expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>linked_ptr</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>linked_ptr</name> <specifier>const</specifier><operator>&amp;</operator> <name>ptr</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>ptr</name> <operator>!=</operator> <name>this</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>depart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></init></decl></decl_stmt>


<function><type><name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>depart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>capture</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>T</name><operator>*</operator> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>value_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>T</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>value_</name></expr>;</return> </block_content>}</block>
T&amp; operator*(</block></decl>) const <block>{<block_content> <return>return <expr><operator>*</operator><name>value_</name></expr>;</return> </block_content>}</block></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>T</name><operator>*</operator> <name>p</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>value_</name> <operator>==</operator> <name>p</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>T</name><operator>*</operator> <name>p</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>value_</name> <operator>!=</operator> <name>p</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>ptr</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>value_</name> <operator>==</operator> <call><name><name>ptr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>ptr</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>value_</name> <operator>!=</operator> <call><name><name>ptr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name></type> <name>linked_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>value_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linked_ptr_internal</name></type> <name>link_</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>depart</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>link_</name><operator>.</operator><name>depart</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <decl_stmt><decl><type><name>delete</name></type> <name>value_</name></decl>;</decl_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>capture</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>value_</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>link_</name><operator>.</operator><name>join_new</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>value_</name> <operator>=</operator> <call><name><name>ptr</name><operator>-&gt;</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>link_</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>link_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>link_</name><operator>.</operator><name>join_new</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>T</name><operator>*</operator> <name>ptr</name><operator>,</operator> <specifier>const</specifier> <name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>x</name><operator>)</operator> <block>{
<return>return <expr><name>ptr</name> <operator>==</operator> <call><name><name>x</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>T</name><operator>*</operator> <name>ptr</name><operator>,</operator> <specifier>const</specifier> <name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>x</name><operator>)</operator> <block>{
<return>return <expr><name>ptr</name> <operator>!=</operator> <call><name><name>x</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>make_linked_ptr</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
