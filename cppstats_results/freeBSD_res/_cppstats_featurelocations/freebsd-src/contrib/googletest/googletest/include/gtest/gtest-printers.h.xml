<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/gtest-printers.h">


































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_TUPLE_</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_ABSL</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"absl/strings/string_view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"absl/types/optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"absl/types/variant.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>



<decl_stmt><decl><type><name>namespace</name></type> <name>internal2</name> <block>{<block_content>



<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintBytesInObjectTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>obj_bytes</name></expr></argument>,
<argument><expr><name>size_t</name> <name>count</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<enum>enum <name>TypeKind</name> <block>{
<decl><name>kProtobuf</name></decl>,
<decl><name>kConvertibleToInteger</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_ABSL</name></expr></cpp:if>
<decl><name>kConvertibleToStringView</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><name>kOtherType</name></decl>
}</block>;</enum>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>TypeKind</name> <name>kTypeKind</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TypeWithoutFormatter</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>PrintValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<macro><name>PrintBytesInObjectTo</name><argument_list>(<argument>static_cast&lt;const unsigned char*&gt;(
reinterpret_cast&lt;const void*&gt;(&amp;value))</argument>,
<argument>sizeof(value)</argument>, <argument>os</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>kProtobufOneLinerMaxLength</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>TypeWithoutFormatter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kProtobuf</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>PrintValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>pretty_str</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>ShortDebugString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>pretty_str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>kProtobufOneLinerMaxLength</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pretty_str</name> <operator>=</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>value</name><operator>.</operator><name>DebugString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="string">"&lt;"</literal> <operator>+</operator> <name>pretty_str</name> <operator>+</operator> <literal type="string">"&gt;"</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>TypeWithoutFormatter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kConvertibleToInteger</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>







<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>PrintValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><specifier>const</specifier> <name>internal</name><operator>::</operator><name>BiggestInt</name> <name>kBigInt</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <name>kBigInt</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_ABSL</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>TypeWithoutFormatter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kConvertibleToStringView</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>PrintValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

























<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Char</name></expr></argument>, <argument><expr><name>typename</name> <name>CharTraits</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<operator>::</operator><name>std</name><operator>::</operator><name><name>basic_ostream</name><argument_list type="generic">&lt;<argument><expr><name>Char</name></expr></argument>, <argument><expr><name>CharTraits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator>
<operator>::</operator><name>std</name><operator>::</operator><name><name>basic_ostream</name><argument_list type="generic">&lt;<argument><expr><name>Char</name></expr></argument>, <argument><expr><name>CharTraits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>os</name><operator>,</operator> <specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>x</name><operator>)</operator> <block>{
<expr><name>TypeWithoutFormatter</name><operator>&lt;</operator><name>T</name></expr>, <expr><operator>(</operator><name>internal</name><operator>::</operator><name><name>IsAProtocolMessage</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>?</operator> <name>kProtobuf</name>
<operator>:</operator> <name>internal</name><operator>::</operator><name><name>ImplicitlyConvertible</name><argument_list type="generic">&lt;
<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name>BiggestInt</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>?</operator> <name>kConvertibleToInteger</name>
<operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_ABSL</name></expr></cpp:if>
<name>internal</name><operator>::</operator><name><name>ImplicitlyConvertible</name><argument_list type="generic">&lt;
<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>absl</name><operator>::</operator><name>string_view</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>?</operator> <name>kConvertibleToStringView</name>
<operator>:</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>kOtherType</name><operator>)</operator><operator>&gt;</operator><operator>::</operator><call><name>PrintValue</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>os</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>os</name></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>namespace</name></type> <name>testing_internal</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>DefaultPrintNonContainerTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>











<expr_stmt><expr><name>using</name> <name>namespace</name> <operator>::</operator><name>testing</name><operator>::</operator><name>internal2</name></expr>;</expr_stmt>














<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>
















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ToPrint</name></expr></argument>, <argument><expr><name>typename</name> <name>OtherOperand</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>FormatForComparison</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>string</name> <macro><name>Format</name><argument_list>(<argument>const ToPrint&amp; value</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>PrintToString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ToPrint</name></expr></argument>, <argument><expr><name>size_t</name> <name>N</name></expr></argument>, <argument><expr><name>typename</name> <name>OtherOperand</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FormatForComparison</name><argument_list type="generic">&lt;<argument><expr><name><name>ToPrint</name><index>[<expr><name>N</name></expr>]</index></name></expr></argument>, <argument><expr><name>OtherOperand</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>string</name> <macro><name>Format</name><argument_list>(<argument>const ToPrint* value</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>FormatForComparison</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ToPrint</name><operator>*</operator></expr></argument>, <argument><expr><name>OtherOperand</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Format</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name><parameter_list>(<parameter><type><name>CharType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>template &lt;typename OtherOperand&gt; class FormatForComparison&lt;CharType*, OtherOperand&gt; { public: static ::std::string Format(CharType* value) { return ::testing::PrintToString(static_cast&lt;const void*&gt;(value)); } }</cpp:value></cpp:define>








<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name><argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name><argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name><argument_list>(<argument><expr><specifier>const</specifier> <name>wchar_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name></cpp:undef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><parameter_list>(<parameter><type><name>CharType</name></type></parameter>, <parameter><type><name>OtherStringType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>template &lt;&gt; class FormatForComparison&lt;CharType*, OtherStringType&gt; { public: static ::std::string Format(CharType* value) { return ::testing::PrintToString(value); } }</cpp:value></cpp:define>








<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_STRING</name></expr></cpp:if>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><operator>::</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>, <argument><expr><operator>::</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_WSTRING</name></expr></cpp:if>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><operator>::</operator><name>wstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><specifier>const</specifier> <name>wchar_t</name></expr></argument>, <argument><expr><operator>::</operator><name>wstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_WSTRING</name></expr></cpp:if>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>wstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name><argument_list>(<argument><expr><specifier>const</specifier> <name>wchar_t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>wstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name></cpp:undef>









<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name>string</name> <macro><name>FormatForComparisonFailureMessage</name><argument_list>(
<argument>const T1&amp; value</argument>, <argument>const T2&amp;</argument> )</argument_list></macro> <block>{
<return>return <expr><name><name>FormatForComparison</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Format</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>








<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>UniversalPrinter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>UniversalPrint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<enum>enum <name>DefaultPrinterType</name> <block>{
<decl><name>kPrintContainer</name></decl>,
<decl><name>kPrintPointer</name></decl>,
<decl><name>kPrintFunctionPointer</name></decl>,
<decl><name>kPrintOther</name></decl>,
}</block>;</enum>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>DefaultPrinterType</name> <name>type</name><operator>&gt;</operator> struct <name>WrapPrinterType</name> <block>{}</block></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>C</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>DefaultPrintTo</name><argument_list>(<argument><expr><name><name>WrapPrinterType</name><argument_list type="generic">&lt;<argument><expr><name>kPrintContainer</name></expr></argument>&gt;</argument_list></name></expr></argument> ,
<argument><expr><specifier>const</specifier> <name>C</name><operator>&amp;</operator> <name>container</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>kMaxCount</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>typename</name> <name>C</name><operator>::</operator><name>const_iterator</name> <name>it</name> <operator>=</operator> <call><name><name>container</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init>
<condition><expr><name>it</name> <operator>!=</operator> <call><name><name>container</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr><operator>,</operator> <expr><operator>++</operator><name>count</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>kMaxCount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" ..."</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>internal</name><operator>::</operator><call><name>UniversalPrint</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>DefaultPrintTo</name><argument_list>(<argument><expr><name><name>WrapPrinterType</name><argument_list type="generic">&lt;<argument><expr><name>kPrintPointer</name></expr></argument>&gt;</argument_list></name></expr></argument> ,
<argument><expr><name>T</name><operator>*</operator> <name>p</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>DefaultPrintTo</name><argument_list>(<argument><expr><name><name>WrapPrinterType</name><argument_list type="generic">&lt;<argument><expr><name>kPrintFunctionPointer</name></expr></argument>&gt;</argument_list></name></expr></argument> ,
<argument><expr><name>T</name><operator>*</operator> <name>p</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>DefaultPrintTo</name><argument_list>(<argument><expr><name><name>WrapPrinterType</name><argument_list type="generic">&lt;<argument><expr><name>kPrintOther</name></expr></argument>&gt;</argument_list></name></expr></argument> ,
<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>testing_internal</name><operator>::</operator><call><name>DefaultPrintNonContainerTo</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>












<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>



















<macro><name>DefaultPrintTo</name><argument_list>(
<argument>WrapPrinterType &lt;
(sizeof(IsContainerTest&lt;T&gt;(<literal type="number">0</literal>)) == sizeof(IsContainer)) &amp;&amp;
!IsRecursiveContainer&lt;T&gt;::value
? kPrintContainer
: !is_pointer&lt;T&gt;::value
? kPrintOther
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>
: std::is_function&lt;typename std::remove_pointer&lt;T&gt;::type&gt;::value
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
: !internal::ImplicitlyConvertible&lt;T</argument>, <argument>const void*&gt;::value
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
? kPrintFunctionPointer
: kPrintPointer &gt; ()</argument>,
<argument>value</argument>, <argument>os</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <name>c</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>signed</name> <name>char</name> <name>c</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>char</name> <name>c</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>



<macro><name>PrintTo</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(c)</argument>, <argument>os</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>bool</name> <name>x</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>wchar_t</name> <name>wc</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>signed</name> <name>char</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>signed</name> <name>char</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_NATIVE_WCHAR_T_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>wchar_t</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>wchar_t</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>wchar_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintRawArrayTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name> <name><name>a</name><index>[]</index></name></expr></argument>, <argument><expr><name>size_t</name> <name>count</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_STRING</name></expr></cpp:if>
<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintStringTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>string</name><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>string</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintStringTo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintStringTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintStringTo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_WSTRING</name></expr></cpp:if>
<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintWideStringTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>wstring</name><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintWideStringTo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_WSTRING</name></expr></cpp:if>
<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>PrintWideStringTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintWideStringTo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_ABSL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>absl</name><operator>::</operator><name>string_view</name> <name>sp</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>nullptr_t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"(nullptr)"</literal></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TR1_TUPLE</name> <operator>||</operator> <name>GTEST_HAS_STD_TUPLE_</name></expr></cpp:if>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTupleTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TR1_TUPLE</name></expr></cpp:if>








<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>, <argument><expr><name>T4</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name></expr></argument>, <argument><expr><name>typename</name> <name>T5</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>, <argument><expr><name>T4</name></expr></argument>, <argument><expr><name>T5</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name></expr></argument>, <argument><expr><name>typename</name> <name>T5</name></expr></argument>,
<argument><expr><name>typename</name> <name>T6</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>, <argument><expr><name>T4</name></expr></argument>, <argument><expr><name>T5</name></expr></argument>, <argument><expr><name>T6</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name></expr></argument>, <argument><expr><name>typename</name> <name>T5</name></expr></argument>,
<argument><expr><name>typename</name> <name>T6</name></expr></argument>, <argument><expr><name>typename</name> <name>T7</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>, <argument><expr><name>T4</name></expr></argument>, <argument><expr><name>T5</name></expr></argument>, <argument><expr><name>T6</name></expr></argument>, <argument><expr><name>T7</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name></expr></argument>, <argument><expr><name>typename</name> <name>T5</name></expr></argument>,
<argument><expr><name>typename</name> <name>T6</name></expr></argument>, <argument><expr><name>typename</name> <name>T7</name></expr></argument>, <argument><expr><name>typename</name> <name>T8</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>, <argument><expr><name>T4</name></expr></argument>, <argument><expr><name>T5</name></expr></argument>, <argument><expr><name>T6</name></expr></argument>, <argument><expr><name>T7</name></expr></argument>, <argument><expr><name>T8</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name></expr></argument>, <argument><expr><name>typename</name> <name>T5</name></expr></argument>,
<argument><expr><name>typename</name> <name>T6</name></expr></argument>, <argument><expr><name>typename</name> <name>T7</name></expr></argument>, <argument><expr><name>typename</name> <name>T8</name></expr></argument>, <argument><expr><name>typename</name> <name>T9</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>, <argument><expr><name>T4</name></expr></argument>, <argument><expr><name>T5</name></expr></argument>, <argument><expr><name>T6</name></expr></argument>, <argument><expr><name>T7</name></expr></argument>, <argument><expr><name>T8</name></expr></argument>, <argument><expr><name>T9</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>, <argument><expr><name>typename</name> <name>T3</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name></expr></argument>, <argument><expr><name>typename</name> <name>T5</name></expr></argument>,
<argument><expr><name>typename</name> <name>T6</name></expr></argument>, <argument><expr><name>typename</name> <name>T7</name></expr></argument>, <argument><expr><name>typename</name> <name>T8</name></expr></argument>, <argument><expr><name>typename</name> <name>T9</name></expr></argument>, <argument><expr><name>typename</name> <name>T10</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(
<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>, <argument><expr><name>T4</name></expr></argument>, <argument><expr><name>T5</name></expr></argument>, <argument><expr><name>T6</name></expr></argument>, <argument><expr><name>T7</name></expr></argument>, <argument><expr><name>T8</name></expr></argument>, <argument><expr><name>T9</name></expr></argument>, <argument><expr><name>T10</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_TUPLE_</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Types</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Types</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintTupleTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'('</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>UniversalPrinter</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4180</literal></argument>)</argument_list></macro>




<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>








<expr_stmt><expr><call><name>PrintTo</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_ABSL</name></expr></cpp:if>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><operator>::</operator><name>absl</name><operator>::</operator><name><name>optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>absl</name><operator>::</operator><name><name>optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"nullopt"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><operator>::</operator><name>absl</name><operator>::</operator><name><name>variant</name><argument_list type="generic">&lt;<argument><expr><name>T</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>absl</name><operator>::</operator><name><name>variant</name><argument_list type="generic">&lt;<argument><expr><name>T</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>absl</name><operator>::</operator><macro><name>visit</name><argument_list>(<argument>Visitor{os}</argument>, <argument>value</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<struct>struct <name>Visitor</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>U</name><operator>&amp;</operator> <name>u</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal> <operator>&lt;&lt;</operator> <call><name><name>GetTypeName</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"' with value "</literal></expr>;
<expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;
}</block>
<operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr>;</expr_stmt>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>UniversalPrintArray</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>*</operator> <name>begin</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{}"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{ "</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>kThreshold</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>kChunkSize</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>kThreshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PrintRawArrayTo</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>PrintRawArrayTo</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>kChunkSize</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", ..., "</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintRawArrayTo</name><argument_list>(<argument><expr><name>begin</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>kChunkSize</name></expr></argument>, <argument><expr><name>kChunkSize</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" }"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>UniversalPrintArray</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>begin</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GTEST_API_</name> <name>void</name></type> <name>UniversalPrintArray</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>wchar_t</name><operator>*</operator> <name>begin</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>size_t</name> <name>N</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><name><name>T</name><index>[<expr><name>N</name></expr>]</index></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>UniversalPrintArray</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4180</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"@"</literal> <operator>&lt;&lt;</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>UniversalTersePrinter</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>size_t</name> <name>N</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><name><name>T</name><index>[<expr><name>N</name></expr>]</index></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><name><name>T</name><index>[<expr><name>N</name></expr>]</index></name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>str</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><name>char</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>str</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_WSTRING</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>wchar_t</name><operator>*</operator> <name>str</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>UniversalPrint</name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>wstring</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><name>wchar_t</name><operator>*</operator> <name>str</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>wchar_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>UniversalTersePrint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>UniversalPrint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>


<typedef>typedef <type><name>T</name></type> <name>T1</name>;</typedef>
<expr_stmt><expr><name><name>UniversalPrinter</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<typedef>typedef <expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Strings</name></expr>;</expr_stmt></typedef>








<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>TupleT</name><operator>&gt;</operator>
struct <name>TuplePolicy</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TR1_TUPLE</name></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>TupleT</name><operator>&gt;</operator>
struct <name>TuplePolicy</name> <block>{
<typedef>typedef <type><name>TupleT</name></type> <name>Tuple</name>;</typedef>
<specifier>static</specifier> <specifier>const</specifier> <name>size_t</name> <name>tuple_size</name> <operator>=</operator> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>I</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>tuple_element</name> <range>: <expr><operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>(</operator><name>I</name><operator>)</operator></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name> <block>{
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>I</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>typename</name> <name><name>AddReference</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>typename</name> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><name><name>tuple_element</name><argument_list type="generic">&lt;
<argument><expr><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>(</operator><name>I</name><operator>)</operator></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>get</name><argument_list>(<argument>const Tuple&amp; tuple</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>TupleT</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>size_t</name> <name><name>TuplePolicy</name><argument_list type="generic">&lt;<argument><expr><name>TupleT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>tuple_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_TUPLE_</name></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name><operator>...</operator> <name>Types</name><operator>&gt;</operator>
struct <name><name>TuplePolicy</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Types</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Types</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>Tuple</name></expr>;</expr_stmt></typedef>
<specifier>static</specifier> <specifier>const</specifier> <name>size_t</name> <name>tuple_size</name> <operator>=</operator> <operator>::</operator><name>std</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>I</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>tuple_element</name> <range>: <expr><operator>::</operator><name>std</name><operator>::</operator><name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>I</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>const</specifier> <name>typename</name> <operator>::</operator><name>std</name><operator>::</operator><name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator> <macro><name>get</name><argument_list>(
<argument>const Tuple&amp; tuple</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>::</operator><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Types</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>size_t</name> <name><name>TuplePolicy</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Types</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>tuple_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TR1_TUPLE</name> <operator>||</operator> <name>GTEST_HAS_STD_TUPLE_</name></expr></cpp:if>








<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>size_t</name> <name>N</name><operator>&gt;</operator>
struct <name>TuplePrefixPrinter</name> <block>{

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>PrintPrefixTo</name><argument_list>(<argument>const Tuple&amp; t</argument>, <argument>::std::ostream* os</argument>)</argument_list></macro> <block>{
<expr><name><name>TuplePrefixPrinter</name><argument_list type="generic">&lt;<argument><expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>PrintPrefixTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;
<macro><name>GTEST_INTENTIONAL_CONST_COND_PUSH_</name><argument_list>()</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GTEST_INTENTIONAL_CONST_COND_POP_</name><argument_list>()</argument_list></call>
<operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block>
<name><name>UniversalPrinter</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name><name>TuplePolicy</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<operator>::</operator><macro><name>Print</name><argument_list>(<argument>TuplePolicy&lt;Tuple&gt;::template get&lt;N - <literal type="number">1</literal>&gt;(t)</argument>, <argument>os</argument>)</argument_list></macro></expr>;
}</block>



<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>TersePrintPrefixToStrings</name><argument_list>(<argument>const Tuple&amp; t</argument>, <argument>Strings* strings</argument>)</argument_list></macro> <block>{
<expr><name><name>TuplePrefixPrinter</name><argument_list type="generic">&lt;<argument><expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>TersePrintPrefixToStrings</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>::</operator><name>std</name><operator>::</operator><name>stringstream</name> <name>ss</name></expr>;
<macro><name>UniversalTersePrint</name><argument_list>(<argument>TuplePolicy&lt;Tuple&gt;::template get&lt;N - <literal type="number">1</literal>&gt;(t)</argument>, <argument>&amp;ss</argument>)</argument_list></macro>;
<expr><call><name><name>strings</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
};


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>TuplePrefixPrinter</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>PrintPrefixTo</name><argument_list>(<argument>const Tuple&amp;</argument>, <argument>::std::ostream*</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>TersePrintPrefixToStrings</name><argument_list>(<argument>const Tuple&amp;</argument>, <argument>Strings*</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>PrintTupleTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TuplePrefixPrinter</name><argument_list type="generic">&lt;<argument><expr><name><name>TuplePolicy</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>tuple_size</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>PrintPrefixTo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<name>Strings</name></type> <name>UniversalTersePrintTupleFieldsToStrings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Tuple</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Strings</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>TuplePrefixPrinter</name><argument_list type="generic">&lt;<argument><expr><name><name>TuplePolicy</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>tuple_size</name></expr></argument>&gt;</argument_list></name><operator>::</operator>
<call><name>TersePrintPrefixToStrings</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_ABSL</name></expr></cpp:if>
namespace <macro><name>internal2</name></macro> <block>{<block_content>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <name><name>TypeWithoutFormatter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kConvertibleToStringView</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>PrintValue</name><argument_list>(
<argument>const T&amp; value</argument>, <argument>::std::ostream* os</argument>)</argument_list></macro> <block>{
<expr><name>internal</name><operator>::</operator><call><name>PrintTo</name><argument_list>(<argument><expr><name>absl</name><operator>::</operator><call><name>string_view</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<operator>::</operator><name>std</name><operator>::</operator><name>string</name> <macro><name>PrintToString</name><argument_list>(<argument>const T&amp; value</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>std</name><operator>::</operator><name>stringstream</name> <name>ss</name></expr>;
<expr><name>internal</name><operator>::</operator><name><name>UniversalTersePrinter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Print</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

}




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/custom/gtest-printers.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
