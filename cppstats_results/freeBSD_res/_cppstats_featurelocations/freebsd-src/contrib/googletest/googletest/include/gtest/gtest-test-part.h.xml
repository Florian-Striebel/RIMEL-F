<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/gtest-test-part.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iosfwd&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-string.h"</cpp:file></cpp:include>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4251</literal></argument> \
)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>TestPartResult</name> <block>{<block_content>
<label><name>public</name>:</label>


<enum>enum <name>Type</name> <block>{
<decl><name>kSuccess</name></decl>,
<decl><name>kNonFatalFailure</name></decl>,
<decl><name>kFatalFailure</name></decl>,
<decl><name>kSkip</name></decl>
}</block>;</enum>




<macro><name>TestPartResult</name><argument_list>(<argument>Type a_type</argument>,
<argument>const char* a_file_name</argument>,
<argument>int a_line_number</argument>,
<argument>const char* a_message</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>type_</name><argument_list>(<argument><expr><name>a_type</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>file_name_</name><argument_list>(<argument><expr><ternary><condition><expr><name>a_file_name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>a_file_name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>line_number_</name><argument_list>(<argument><expr><name>a_line_number</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>summary_</name><argument_list>(<argument><expr><call><name>ExtractSummary</name><argument_list>(<argument><expr><name>a_message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>message_</name><argument_list>(<argument>a_message</argument>)</argument_list></macro> <expr><block>{
}</block>


<name>Type</name> <macro><name>type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type_</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>file_name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>file_name_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>NULL</name> <operator>:</operator> <call><name><name>file_name_</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>int</name> <macro><name>line_number</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>line_number_</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>summary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>summary_</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>message</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>message_</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>skipped</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type_</name> <operator>==</operator> <name>kSkip</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>passed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type_</name> <operator>==</operator> <name>kSuccess</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>nonfatally_failed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type_</name> <operator>==</operator> <name>kNonFatalFailure</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>fatally_failed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type_</name> <operator>==</operator> <name>kFatalFailure</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>failed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>fatally_failed</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>nonfatally_failed</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Type</name></type> <name>type_</name></decl>;</decl_stmt>



<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>ExtractSummary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>file_name_</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>line_number_</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>summary_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>message_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>os</name><operator>,</operator> <specifier>const</specifier> <name>TestPartResult</name><operator>&amp;</operator> <name>result</name><operator>)</operator></expr>;</expr_stmt>





<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>TestPartResultArray</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>TestPartResultArray</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>


<function_decl><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TestPartResult</name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>const</specifier> <name>TestPartResult</name><modifier>&amp;</modifier></type> <name>GetTestPartResult</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>int</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TestPartResult</name></expr></argument>&gt;</argument_list></name> <name>array_</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>TestPartResultArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>TestPartResultReporterInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>TestPartResultReporterInterface</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <call><name>ReportTestPartResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TestPartResult</name><operator>&amp;</operator> <name>result</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>







<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>HasNewFatalFailureHelper</name>
<range>: <expr><name>public</name> <name>TestPartResultReporterInterface</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>HasNewFatalFailureHelper</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>HasNewFatalFailureHelper</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>ReportTestPartResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TestPartResult</name><operator>&amp;</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>has_new_fatal_failure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>has_new_fatal_failure_</name></expr>;</return> }</block>
<name>private</name><operator>:</operator>
<name>bool</name> <name>has_new_fatal_failure_</name></expr>;
<expr><name>TestPartResultReporterInterface</name><operator>*</operator> <name>original_reporter_</name></expr>;

<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>HasNewFatalFailureHelper</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
