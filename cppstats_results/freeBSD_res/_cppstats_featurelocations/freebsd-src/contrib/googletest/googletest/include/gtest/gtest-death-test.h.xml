<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/gtest-death-test.h">




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-death-test-internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>






<expr_stmt><expr><call><name>GTEST_DECLARE_string_</name><argument_list>(<argument><expr><name>death_test_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_DEATH_TEST</name></expr></cpp:if>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>






<function_decl><type><name>GTEST_API_</name> <name>bool</name></type> <name>InDeathTestChild</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>









































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_EXIT</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>predicate</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_DEATH_TEST_(statement, predicate, regex, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_EXIT</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>predicate</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_DEATH_TEST_(statement, predicate, regex, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_DEATH</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, regex)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_DEATH</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, regex)</cpp:value></cpp:define>





<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>ExitedWithCode</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>ExitedWithCode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>int</name> <name>exit_status</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>private</name>:</label>

<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ExitedWithCode</name><operator>&amp;</operator> <name>other</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>exit_code_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_FUCHSIA</name></expr></cpp:if>



<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>KilledBySignal</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>KilledBySignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>int</name> <name>exit_status</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>signum_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_DEBUG_DEATH</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_EXECUTE_STATEMENT_(statement, regex)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_DEBUG_DEATH</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_EXECUTE_STATEMENT_(statement, regex)</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_DEBUG_DEATH</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_DEATH(statement, regex)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_DEBUG_DEATH</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_DEATH(statement, regex)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_UNSUPPORTED_DEATH_TEST</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>, <parameter><type><name>terminator</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_AMBIGUOUS_ELSE_BLOCKER_ if (::testing::internal::AlwaysTrue()) { GTEST_LOG_(WARNING) &lt;&lt; "Death tests are not supported on this platform.\n" &lt;&lt; "Statement '" #statement "' cannot be verified."; } else if (::testing::internal::AlwaysFalse()) { ::testing::internal::RE::PartialMatch(".*", (regex)); GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); terminator; } else ::testing::Message()</cpp:value></cpp:define>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_DEATH_TEST</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_DEATH_IF_SUPPORTED</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_DEATH(statement, regex)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_DEATH_IF_SUPPORTED</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_DEATH(statement, regex)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_DEATH_IF_SUPPORTED</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_UNSUPPORTED_DEATH_TEST(statement, regex, )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_DEATH_IF_SUPPORTED</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_UNSUPPORTED_DEATH_TEST(statement, regex, return)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
