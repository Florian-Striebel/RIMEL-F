<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/internal/gtest-filepath.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-string.h"</cpp:file></cpp:include>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4251</literal></argument> \
)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>












<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>FilePath</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FilePath</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>pathname_</name><argument_list>(<argument><literal type="string">""</literal></argument>)</argument_list></macro> <block>{ }</block>
<call><name>FilePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FilePath</name><operator>&amp;</operator> <name>rhs</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>pathname_</name><argument_list>(<argument>rhs.pathname_</argument>)</argument_list></macro> <block>{ }</block>

<name>explicit</name> <call><name>FilePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>pathname</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>pathname_</name><argument_list>(<argument>pathname</argument>)</argument_list></macro> <block>{
<expr><call><name>Normalize</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>FilePath</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>FilePath</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <block>{
<expr><call><name>Set</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FilePath</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>pathname_</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>pathname_</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>string</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>pathname_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>c_str</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>pathname_</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function_decl><type><specifier>static</specifier> <name>FilePath</name></type> <name>GetCurrentDir</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>FilePath</name></type> <name>MakeFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FilePath</name><modifier>&amp;</modifier></type> <name>directory</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FilePath</name><modifier>&amp;</modifier></type> <name>base_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>FilePath</name></type> <name>ConcatPaths</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FilePath</name><modifier>&amp;</modifier></type> <name>directory</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FilePath</name><modifier>&amp;</modifier></type> <name>relative_path</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><specifier>static</specifier> <name>FilePath</name></type> <name>GenerateUniqueFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FilePath</name><modifier>&amp;</modifier></type> <name>directory</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FilePath</name><modifier>&amp;</modifier></type> <name>base_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extension</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>pathname_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>FilePath</name> <macro><name>RemoveTrailingPathSeparator</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>FilePath</name> <macro><name>RemoveDirectoryName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>FilePath</name> <macro><name>RemoveFileName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>FilePath</name></type> <name>RemoveExtension</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>extension</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>CreateDirectoriesRecursively</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>CreateFolder</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>FileOrDirectoryExists</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>DirectoryExists</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>IsDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>IsRootDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsAbsolutePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>




















<function_decl><type><name>void</name></type> <name>Normalize</name><parameter_list>()</parameter_list>;</function_decl>




<expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>FindLastPathSeparator</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>pathname_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
