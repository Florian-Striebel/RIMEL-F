<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/gtest-message.h">













































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-port.h"</cpp:file></cpp:include>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4251</literal></argument> \
)</argument_list></macro>



<expr_stmt><expr><name>void</name> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>testing</name><operator>::</operator><name>internal</name><operator>::</operator><name>Secret</name><operator>&amp;</operator><operator>,</operator> <name>int</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>



























<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>Message</name> <block>{<block_content>
<label><name>private</name>:</label>


<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <call>(<modifier>*</modifier><name>BasicNarrowIoManip</name>)<argument_list>(<argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Message</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Message</name><operator>&amp;</operator> <name>msg</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ss_</name><argument_list>(<argument>new ::std::stringstream</argument>)</argument_list></macro> <block>{
<expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <call><name><name>msg</name><operator>.</operator><name>GetString</name></name><argument_list>()</argument_list></call></expr>;
}</block>


<name>explicit</name> <call><name>Message</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>str</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ss_</name><argument_list>(<argument>new ::std::stringstream</argument>)</argument_list></macro> <block>{
<expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <name>str</name></expr>;
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_SYMBIAN</name></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name><operator>)</operator> <block>{
<macro><name>StreamHelper</name><argument_list>(<argument>typename internal::is_pointer&lt;T&gt;::type()</argument>, <argument>value</argument>)</argument_list></macro>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>val</name><operator>)</operator> <block>{














<expr><name>using</name> <operator>::</operator><name>operator</name> <operator>&lt;&lt;</operator></expr>;
<expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <name>val</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>














<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><name>T</name><operator>*</operator> <specifier>const</specifier><operator>&amp;</operator> <name>pointer</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>pointer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <name>pointer</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<expr_stmt><expr><name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><name>BasicNarrowIoManip</name> <name>val</name><operator>)</operator> <block>{
<expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <name>val</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><name>bool</name> <name>b</name><operator>)</operator> <block>{
<return>return <expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>b</name> <operator>?</operator> <literal type="string">"true"</literal> <operator>:</operator> <literal type="string">"false"</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>wchar_t</name><operator>*</operator> <name>wide_c_str</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><name>wchar_t</name><operator>*</operator> <name>wide_c_str</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_WSTRING</name></expr></cpp:if>


<expr_stmt><expr><name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>wstr</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_WSTRING</name></expr></cpp:if>


<expr_stmt><expr><name>Message</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>wstr</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_SYMBIAN</name></expr></cpp:if>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>StreamHelper</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><name>true_type</name></expr></argument> , <argument><expr><name>T</name><operator>*</operator> <name>pointer</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pointer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>StreamHelper</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><name>false_type</name></expr></argument> ,
<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list> <block>{<block_content>


<expr_stmt><expr><name>using</name> <operator>::</operator><name>operator</name> <operator>&lt;&lt;</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ss_</name> <operator>&lt;&lt;</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><specifier>const</specifier> <name>internal</name><operator>::</operator><name><name>scoped_ptr</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>stringstream</name></expr></argument>&gt;</argument_list></name> <name>ss_</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Message</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>operator</name> <operator>&lt;&lt;</operator><operator>(</operator><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>os</name><operator>,</operator> <specifier>const</specifier> <name>Message</name><operator>&amp;</operator> <name>sb</name><operator>)</operator> <block>{
<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <call><name><name>sb</name><operator>.</operator><name>GetString</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name>string</name> <macro><name>StreamableToString</name><argument_list>(<argument>const T&amp; streamable</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><call><name>Message</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>streamable</name><operator>)</operator><operator>.</operator><call><name>GetString</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
