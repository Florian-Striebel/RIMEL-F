<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/internal/gtest-port.h">









































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_</name></cpp:macro></cpp:define>





























































































































































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AvailabilityMacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-port-arch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/custom/gtest-port.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_DEV_EMAIL_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEV_EMAIL_</name></cpp:macro> <cpp:value>"googletestframework@@googlegroups.com"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_FLAG_PREFIX_</name></cpp:macro> <cpp:value>"gtest_"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_FLAG_PREFIX_DASH_</name></cpp:macro> <cpp:value>"gtest-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_FLAG_PREFIX_UPPER_</name></cpp:macro> <cpp:value>"GTEST_"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_NAME_</name></cpp:macro> <cpp:value>"Google Test"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PROJECT_URL_</name></cpp:macro> <cpp:value>"https://github.com/google/googletest/"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INIT_GOOGLE_TEST_NAME_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INIT_GOOGLE_TEST_NAME_</name></cpp:macro> <cpp:value>"testing::InitGoogleTest"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_GCC_VER_</name></cpp:macro> <cpp:value>(__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><parameter_list>(<parameter><type><name>warnings</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__pragma(warning(push)) __pragma(warning(disable: warnings))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__pragma(warning(pop))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><parameter_list>(<parameter><type><name>warnings</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_DEPRECATED_PUSH_</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_Pragma("clang diagnostic push") _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"") _Pragma("clang diagnostic ignored \"-Wdeprecated-implementations\"")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_DEPRECATED_POP_</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_Pragma("clang diagnostic pop")</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_DEPRECATED_PUSH_</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISABLE_MSC_DEPRECATED_POP_</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>GTEST_DISABLE_MSC_WARNINGS_POP_()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_LANG_CXX11</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GXX_EXPERIMENTAL_CXX0X__</name> <operator>||</operator> <name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal> <operator>||</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_LANG_CXX11</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_LANG_CXX11</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBCXX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator> <name>__GLIBCXX__</name> <operator>&gt;=</operator> <literal type="number">20110325ul</literal> <operator>&amp;&amp;</operator> <name>__GLIBCXX__</name> <operator>!=</operator> <literal type="number">20110416ul</literal> <operator>&amp;&amp;</operator> <name>__GLIBCXX__</name> <operator>!=</operator> <literal type="number">20120313ul</literal> <operator>&amp;&amp;</operator> <name>__GLIBCXX__</name> <operator>!=</operator> <literal type="number">20110428ul</literal> <operator>&amp;&amp;</operator> <name>__GLIBCXX__</name> <operator>!=</operator> <literal type="number">20120702ul</literal><operator>)</operator><operator>)</operator></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_STDLIB_CXX11</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_STDLIB_CXX11</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_BEGIN_AND_END_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_FORWARD_LIST_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_MSC_FULL_VER</name> <operator>&gt;=</operator> <literal type="number">190023824</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_FUNCTION_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_INITIALIZER_LIST_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_MOVE_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_UNIQUE_PTR_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_SHARED_PTR_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_UNORDERED_MAP_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_UNORDERED_SET_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_TUPLE_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name>tuple</name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_HAS_STD_TUPLE_</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_CPPLIB_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_CPPLIB_VER</name> <operator>&lt;</operator> <literal type="number">520</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_HAS_STD_TUPLE_</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBCXX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_HAS_STD_TUPLE_</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS_MINGW</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>


<typedef>typedef <type><name><name>struct</name> <name>_CRITICAL_SECTION</name></name></type> <name>GTEST_CRITICAL_SECTION</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<typedef>typedef <type><name><name>struct</name> <name>_RTL_CRITICAL_SECTION</name></name></type> <name>GTEST_CRITICAL_SECTION</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_LINUX_ANDROID</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/api-level.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_POSIX_RE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_LINUX_ANDROID</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_POSIX_RE</name></cpp:macro> <cpp:value>(__ANDROID_API__ &gt;= 9)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_POSIX_RE</name></cpp:macro> <cpp:value>(!GTEST_OS_WINDOWS)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_USES_PCRE</name></expr></cpp:if>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_HAS_POSIX_RE</name></expr></cpp:elif>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_USES_POSIX_RE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_OS_WINDOWS</name></expr></cpp:elif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_USES_SIMPLE_RE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_USES_SIMPLE_RE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_CPPUNWIND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_HAS_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>_HAS_EXCEPTIONS</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>(__EXCEPTIONS &amp;&amp; __has_feature(cxx_exceptions))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__EXCEPTIONS</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:elif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__EXCEPTIONS</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HP_aCC</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_STD_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>GTEST_HAS_STD_STRING</name></expr></cpp:elif>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"::std::string isn't available."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_GLOBAL_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_GLOBAL_STRING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_STD_WSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STD_WSTRING</name></cpp:macro> <cpp:value>(!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_GLOBAL_WSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_GLOBAL_WSTRING</name></cpp:macro> <cpp:value>(GTEST_HAS_STD_WSTRING &amp;&amp; GTEST_HAS_GLOBAL_STRING)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_CPPRTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>GTEST_GCC_VER_</name> <operator>&gt;=</operator> <literal type="number">40302</literal><operator>)</operator></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GXX_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_LINUX_ANDROID</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_STLPORT_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>__has_feature(cxx_rtti)</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__IBMCPP__</name> <operator>&gt;=</operator> <literal type="number">900</literal><operator>)</operator></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__RTTI_ALL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_RTTI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_RTTI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;typeinfo&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_PTHREAD</name></cpp:macro> <cpp:value>(GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_PTHREAD</name></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_HASH_MAP_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1900</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_HASH_MAP_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_HASH_SET_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_TR1_TUPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_LINUX_ANDROID</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_STLPORT_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_TR1_TUPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1910</literal><operator>)</operator></expr></cpp:elif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_TR1_TUPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_LANG_CXX11</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_TR1_TUPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_TR1_TUPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_USE_OWN_TR1_TUPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_SYMBIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_USE_OWN_TR1_TUPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDACC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>GTEST_GCC_VER_</name> <operator>&gt;=</operator> <literal type="number">40000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_QNX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_VERSION</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1600</literal> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1900</literal><operator>)</operator></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ENV_HAS_TR1_TUPLE_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBCXX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__GLIBCXX__</name> <operator>&gt;</operator> <literal type="number">20110325</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ENV_HAS_STD_TUPLE_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_ENV_HAS_TR1_TUPLE_</name> <operator>||</operator> <name>GTEST_ENV_HAS_STD_TUPLE_</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_USE_OWN_TR1_TUPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_USE_OWN_TR1_TUPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_TUPLE_</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_TUPLE_NAMESPACE_</name></cpp:macro> <cpp:value>::std</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TR1_TUPLE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_TUPLE_NAMESPACE_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_TUPLE_NAMESPACE_</name></cpp:macro> <cpp:value>::std::tr1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_USE_OWN_TR1_TUPLE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-tuple.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_OS_SYMBIAN</name></expr></cpp:elif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BOOST_HAS_TR1_TUPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BOOST_HAS_TR1_TUPLE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_TR1_DETAIL_CONFIG_HPP_INCLUDED</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>GTEST_GCC_VER_</name> <operator>&gt;=</operator> <literal type="number">40000</literal><operator>)</operator></expr></cpp:elif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_HAS_RTTI</name> <operator>&amp;&amp;</operator> <name>GTEST_GCC_VER_</name> <operator>&lt;</operator> <literal type="number">40302</literal></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TR1_FUNCTIONAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tr1/tuple&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_TR1_FUNCTIONAL</name></cpp:undef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tr1/tuple&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1600</literal></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tr1/tuple&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_CLONE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_LINUX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ia64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_LINUX_ANDROID</name></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&gt;=</operator> <literal type="number">9</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&gt;=</operator> <literal type="number">12</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&gt;=</operator> <literal type="number">17</literal><operator>)</operator></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_CLONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_CLONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_CLONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_CLONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_STREAM_REDIRECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS_MOBILE</name> <operator>||</operator> <name>GTEST_OS_SYMBIAN</name> <operator>||</operator> <name>GTEST_OS_WINDOWS_PHONE</name> <operator>||</operator> <name>GTEST_OS_WINDOWS_RT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STREAM_REDIRECTION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_STREAM_REDIRECTION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GTEST_OS_LINUX</name> <operator>||</operator> <name>GTEST_OS_CYGWIN</name> <operator>||</operator> <name>GTEST_OS_SOLARIS</name> <operator>||</operator> <operator>(</operator><name>GTEST_OS_MAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_IOS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>GTEST_OS_WINDOWS_DESKTOP</name> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal><operator>)</operator> <operator>||</operator> <name>GTEST_OS_WINDOWS_MINGW</name> <operator>||</operator> <name>GTEST_OS_AIX</name> <operator>||</operator> <name>GTEST_OS_HPUX</name> <operator>||</operator> <name>GTEST_OS_OPENBSD</name> <operator>||</operator> <name>GTEST_OS_QNX</name> <operator>||</operator> <name>GTEST_OS_FREEBSD</name> <operator>||</operator> <name>GTEST_OS_NETBSD</name> <operator>||</operator> <name>GTEST_OS_FUCHSIA</name><operator>)</operator></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_DEATH_TEST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__HP_aCC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_TYPED_TEST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_TYPED_TEST_P</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GTEST_HAS_TR1_TUPLE</name> <operator>||</operator> <name>GTEST_HAS_STD_TUPLE_</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_COMBINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_WIDE_STRING_USES_UTF16_</name></cpp:macro> <cpp:value>(GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_SYMBIAN || GTEST_OS_AIX)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_LINUX</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_CAN_STREAM_RESULTS_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_AMBIGUOUS_ELSE_BLOCKER_</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_AMBIGUOUS_ELSE_BLOCKER_</name></cpp:macro> <cpp:value>switch (0) case 0: default:</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_ICC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_UNUSED_</name></cpp:macro> <cpp:value>__attribute__ ((unused))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_UNUSED_</name></cpp:macro> <cpp:value>__attribute__ ((unused))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_ATTRIBUTE_UNUSED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_UNUSED_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_CXX11_EQUALS_DELETE_</name></cpp:macro> <cpp:value>= delete</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_CXX11_EQUALS_DELETE_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_ICC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW_PRINTF_FORMAT</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_PRINTF_</name><parameter_list>(<parameter><type><name>string_index</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(__MINGW_PRINTF_FORMAT, string_index, first_to_check)))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_PRINTF_</name><parameter_list>(<parameter><type><name>string_index</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(__printf__, string_index, first_to_check)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_PRINTF_</name><parameter_list>(<parameter><type><name>string_index</name></type></parameter>, <parameter><type><name>first_to_check</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISALLOW_ASSIGN_</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void operator=(type const &amp;) GTEST_CXX11_EQUALS_DELETE_</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type(type const &amp;) GTEST_CXX11_EQUALS_DELETE_; GTEST_DISALLOW_ASSIGN_(type)</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>GTEST_GCC_VER_</name> <operator>&gt;=</operator> <literal type="number">30400</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_ICC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_MUST_USE_RESULT_</name></cpp:macro> <cpp:value>__attribute__ ((warn_unused_result))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_MUST_USE_RESULT_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INTENTIONAL_CONST_COND_PUSH_</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INTENTIONAL_CONST_COND_POP_</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>GTEST_DISABLE_MSC_WARNINGS_POP_()</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_SEH</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_SEH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_SEH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_IS_THREADSAFE</name></cpp:macro> <cpp:value>(GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ || (GTEST_OS_WINDOWS &amp;&amp; !GTEST_OS_WINDOWS_PHONE &amp;&amp; !GTEST_OS_WINDOWS_RT) || GTEST_HAS_PTHREAD)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_API_</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LINKED_AS_SHARED_LIBRARY</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_API_</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_CREATE_SHARED_LIBRARY</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_API_</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_API_</name></cpp:macro> <cpp:value>__attribute__((visibility ("default")))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_API_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_API_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_DEFAULT_DEATH_TEST_STYLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEFAULT_DEATH_TEST_STYLE</name></cpp:macro> <cpp:value>"fast"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_NO_INLINE_</name></cpp:macro> <cpp:value>__attribute__((noinline))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_NO_INLINE_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_HAS_CXXABI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBCXX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_CXXABI_H_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_CXXABI_H_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>memory_sanitizer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</name></cpp:macro> <cpp:value>__attribute__((no_sanitize_memory))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>address_sanitizer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</name></cpp:macro> <cpp:value>__attribute__((no_sanitize_address))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>thread_sanitizer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</name></cpp:macro> <cpp:value>__attribute__((no_sanitize_thread))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Message</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_TUPLE_NAMESPACE_</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>using</name> <name>GTEST_TUPLE_NAMESPACE_</name><operator>::</operator><name>get</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>GTEST_TUPLE_NAMESPACE_</name><operator>::</operator><name>make_tuple</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>GTEST_TUPLE_NAMESPACE_</name><operator>::</operator><name>tuple</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>GTEST_TUPLE_NAMESPACE_</name><operator>::</operator><name>tuple_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>GTEST_TUPLE_NAMESPACE_</name><operator>::</operator><name>tuple_element</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>Secret</name></decl>;</decl_stmt>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_COMPILE_ASSERT_</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_assert(expr, #msg)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name><operator>&gt;</operator>
struct <name>CompileAssert</name> <block>{
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_COMPILE_ASSERT_</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef ::testing::internal::CompileAssert&lt;(static_cast&lt;bool&gt;(expr))&gt; msg[static_cast&lt;bool&gt;(expr) ? 1 : -1] GTEST_ATTRIBUTE_UNUSED_</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















































<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T1</name></expr><operator>,</operator> <expr><name>typename</name> <name>T2</name><operator>&gt;</operator>
struct <name>StaticAssertTypeEqHelper</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>StaticAssertTypeEqHelper</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{
enum <expr><block>{ <expr><name>value</name> <operator>=</operator> <name>true</name></expr> }</block></expr>;
}</block></expr>;</expr_stmt>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><name>typename</name> <name>U</name><operator>&gt;</operator>
struct <name>IsSame</name> <block>{
enum <expr><block>{ <expr><name>value</name> <operator>=</operator> <name>false</name></expr> }</block></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>IsSame</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{
enum <expr><block>{ <expr><name>value</name> <operator>=</operator> <name>true</name></expr> }</block></expr>;
}</block></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ARRAY_SIZE_</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(array) / sizeof(array[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_STRING</name></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>string</name> <name>string</name></expr>;</expr_stmt></typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name>string</name> <name>string</name></expr>;</expr_stmt></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_WSTRING</name></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>wstring</name> <name>wstring</name></expr>;</expr_stmt></typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_HAS_STD_WSTRING</name></expr></cpp:elif>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name>wstring</name> <name>wstring</name></expr>;</expr_stmt></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><name>GTEST_API_</name> <name>bool</name></type> <name>IsTrue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>condition</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>scoped_ptr</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>T</name></type> <name>element_type</name>;</typedef>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>scoped_ptr</name><argument_list>(<argument><expr><name>T</name><operator>*</operator> <name>p</name> <operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ptr_</name><argument_list>(<argument>p</argument>)</argument_list></macro> <block>{}</block>
<operator>~</operator><macro><name>scoped_ptr</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>reset</name><argument_list>()</argument_list></call></expr>; }</block>

<name>T</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ptr_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>T</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>ptr_</name></expr>;</return> </block_content>}</block>
T* get(</block></decl>) const <block>{<block_content> <return>return <expr><name>ptr_</name></expr>;</return> </block_content>}</block></decl_stmt>

<function><type><name>T</name><modifier>*</modifier></type> <name>release</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>T</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ptr</name> <init>= <expr><name>ptr_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr_</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>ptr_</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsTrue</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>ptr_</name></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr_</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>friend</name> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>scoped_ptr</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>scoped_ptr</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>swap</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ptr_</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>ptr_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>scoped_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_USES_PCRE</name></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_USES_POSIX_RE</name> <operator>||</operator> <name>GTEST_USES_SIMPLE_RE</name></expr></cpp:elif>



<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>RE</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>RE</name><argument_list>(<argument>const RE&amp; other</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>pattern</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>


<macro><name>RE</name><argument_list>(<argument>const ::std::string&amp; regex</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><call><name><name>regex</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_STRING</name></expr></cpp:if>

<macro><name>RE</name><argument_list>(<argument>const ::string&amp; regex</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><call><name><name>regex</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>RE</name><argument_list>(<argument>const char* regex</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><operator>~</operator><call><name>RE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>pattern</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>pattern_</name></expr>;</return> }</block></expr></expr_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>FullMatch</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RE</name><operator>&amp;</operator> <name>re</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>FullMatch</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>PartialMatch</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RE</name><operator>&amp;</operator> <name>re</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>PartialMatch</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_STRING</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>FullMatch</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RE</name><operator>&amp;</operator> <name>re</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>FullMatch</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>PartialMatch</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RE</name><operator>&amp;</operator> <name>re</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>PartialMatch</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>FullMatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RE</name><modifier>&amp;</modifier></type> <name>re</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>PartialMatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RE</name><modifier>&amp;</modifier></type> <name>re</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>regex</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pattern_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_valid_</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_USES_POSIX_RE</name></expr></cpp:if>

<decl_stmt><decl><type><name>regex_t</name></type> <name>full_regex_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>partial_regex_</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>full_pattern_</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GTEST_DISALLOW_ASSIGN_</name><argument_list>(<argument><expr><name>RE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>GTEST_API_</name> <operator>::</operator><name>std</name><operator>::</operator><name>string</name> <macro><name>FormatFileLocation</name><argument_list>(<argument>const char* file</argument>, <argument>int line</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>GTEST_API_</name> <operator>::</operator><name>std</name><operator>::</operator><name>string</name> <macro><name>FormatCompilerIndependentFileLocation</name><argument_list>(<argument>const char* file</argument>,
<argument>int line</argument>)</argument_list></macro></expr>;</expr_stmt>







<enum>enum <name>GTestLogSeverity</name> <block>{
<decl><name>GTEST_INFO</name></decl>,
<decl><name>GTEST_WARNING</name></decl>,
<decl><name>GTEST_ERROR</name></decl>,
<decl><name>GTEST_FATAL</name></decl>
}</block>;</enum>




<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>GTestLog</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>GTestLog</name><argument_list>(<argument>GTestLogSeverity severity</argument>, <argument>const char* file</argument>, <argument>int line</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><operator>~</operator><call><name>GTestLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <macro><name>GetStream</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>::</operator><name>std</name><operator>::</operator><name>cerr</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>GTestLogSeverity</name></type> <name>severity_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>GTestLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_LOG_</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_LOG_</name><parameter_list>(<parameter><type><name>severity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::testing::internal::GTestLog(::testing::internal::GTEST_##severity, __FILE__, __LINE__).GetStream()</cpp:value></cpp:define>



<function><type><specifier>inline</specifier> <name>void</name></type> <name>LogToStderr</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>FlushInfoLog</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_CHECK_</name></expr></argument>)</argument_list></call></expr></cpp:if>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_CHECK_</name><parameter_list>(<parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_AMBIGUOUS_ELSE_BLOCKER_ if (::testing::internal::IsTrue(condition)) ; else GTEST_LOG_(FATAL) &lt;&lt; "Condition " #condition " failed. "</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_CHECK_POSIX_SUCCESS_</name><parameter_list>(<parameter><type><name>posix_call</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (const int gtest_error = (posix_call)) GTEST_LOG_(FATAL) &lt;&lt; #posix_call &lt;&lt; "failed with error " &lt;&lt; gtest_error</cpp:value></cpp:define>







<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>AddReference</name> <block>{ <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>AddReference</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{ <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ADD_REFERENCE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename ::testing::internal::AddReference&lt;T&gt;::type</cpp:value></cpp:define>













<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>ConstRef</name> <block>{ <typedef>typedef <type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>ConstRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{ <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_REFERENCE_TO_CONST_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename ::testing::internal::ConstRef&lt;T&gt;::type</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_MOVE_</name></expr></cpp:if>
<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>forward</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>move</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>RvalueRef</name> <block>{
<typedef>typedef <expr_stmt><expr><name>T</name><operator>&amp;&amp;</operator> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>move</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name></type>
<name>GTEST_ADD_REFERENCE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> forward<parameter_list>(<parameter><decl/></parameter></parameter_list>GTEST_ADD_REFERENCE_<parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> t</function>)</block_content> <block>{<block_content> <return>return <expr><name>t</name></expr>;</return> </block_content>}</block>

template &lt;typename T&gt;
struct RvalueRef <block>{<block_content>
<typedef>typedef <type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef>
</block_content>}</block></block></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>To</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>To</name></type> <name>ImplicitCast_</name><parameter_list>(<parameter><decl><type><name>To</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>x</name></expr>;</return> </block_content>}</block></function>






















<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>To</name></expr></argument>, <argument><expr><name>typename</name> <name>From</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>To</name></type> <name>DownCast_</name><parameter_list>(<parameter><decl><type><name>From</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>




<macro><name>GTEST_INTENTIONAL_CONST_COND_PUSH_</name><argument_list>()</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content>
<macro><name>GTEST_INTENTIONAL_CONST_COND_POP_</name><argument_list>()</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>To</name></type> <name>to</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>From</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_RTTI</name></expr></cpp:if>

<expr_stmt><expr><call><name>GTEST_CHECK_</name><argument_list>(<argument><expr><name>f</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name><name>dynamic_cast</name><argument_list type="generic">&lt;<argument><expr><name>To</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>To</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Derived</name></expr></argument>, <argument><expr><name>class</name> <name>Base</name></expr></argument>&gt;</argument_list></name>
<name>Derived</name><modifier>*</modifier></type> <name>CheckedDowncastToActualType</name><parameter_list>(<parameter><decl><type><name>Base</name><modifier>*</modifier></type> <name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_RTTI</name></expr></cpp:if>
<expr_stmt><expr><call><name>GTEST_CHECK_</name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><operator>*</operator><name>base</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>Derived</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_DOWNCAST_</name></expr></cpp:if>
<return>return <expr><operator>::</operator><call><name><name>down_cast</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_HAS_RTTI</name></expr></cpp:elif>
<return>return <expr><call><name><name>dynamic_cast</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STREAM_REDIRECTION</name></expr></cpp:if>







<function_decl><type><name>GTEST_API_</name> <name>void</name></type> <name>CaptureStdout</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>GTEST_API_</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetCapturedStdout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GTEST_API_</name> <name>void</name></type> <name>CaptureStderr</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>GTEST_API_</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetCapturedStderr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>GTEST_API_</name> <name>size_t</name></type> <name>GetFileSize</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>GTEST_API_</name> <name>std</name><operator>::</operator><name>string</name> <call><name>ReadEntireFile</name><argument_list>(<argument><expr><name>FILE</name><operator>*</operator> <name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>GTEST_API_</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>GetArgvs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_DEATH_TEST</name></expr></cpp:if>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>GetInjectableArgvs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetInjectableArgvs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>new_argvs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>SetInjectableArgvs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>new_argvs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_GLOBAL_STRING</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name></type> <name>SetInjectableArgvs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>new_argvs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>ClearInjectableArgvs</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_IS_THREADSAFE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_PTHREAD</name></expr></cpp:if>



<function><type><specifier>inline</specifier> <name>void</name></type> <name>SleepMilliseconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>timespec</name></type> <name>time</name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><name>n</name> <operator>*</operator> <literal type="number">1000L</literal> <operator>*</operator> <literal type="number">1000L</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_NOTIFICATION_</name></expr></cpp:if>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_HAS_PTHREAD</name></expr></cpp:elif>






<decl_stmt><decl><type><name>class</name></type> <name>Notification</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Notification</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>notified_</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{
<expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<operator>~</operator><macro><name>Notification</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
}</block>



<name>void</name> <macro><name>Notify</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
<expr><name>notified_</name> <operator>=</operator> <name>true</name></expr>;
<expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
}</block>



<name>void</name> <macro><name>WaitForNotification</name><argument_list>()</argument_list></macro> <block>{
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>notified</name> <init>= <expr><name>notified_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>notified</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SleepMilliseconds</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

private:
pthread_mutex_t mutex_</block><empty_stmt>;</empty_stmt></for>
<name>bool</name> <name>notified_</name></block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>Notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_OS_WINDOWS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_PHONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_RT</name></expr></cpp:elif>

<function_decl><type><name>GTEST_API_</name> <name>void</name></type> <name>SleepMilliseconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>AutoHandle</name> <block>{<block_content>
<label><name>public</name>:</label>





<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>Handle</name>;</typedef>
<expr_stmt><expr><call><name>AutoHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>explicit</name></type> <name>AutoHandle</name><parameter_list>(<parameter><decl><type><name>Handle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><operator>~</operator><call><name>AutoHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Handle</name> <macro><name>Get</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>Handle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<function_decl><type><name>bool</name></type> <name>IsCloseable</name><parameter_list>()</parameter_list> const;</function_decl>

<decl_stmt><decl><type><name>Handle</name></type> <name>handle_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>AutoHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>Notification</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Notification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Notify</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>WaitForNotification</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>AutoHandle</name></type> <name>event_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>Notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_PTHREAD</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_MINGW</name></expr></cpp:if>






<decl_stmt><decl><type><name>class</name></type> <name>ThreadWithParamBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ThreadWithParamBase</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>void</name> <call><name>Run</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<extern>extern <literal type="string">"C"</literal> <function><type><specifier>inline</specifier> <name>void</name><modifier>*</modifier></type> <name>ThreadFuncWithCLinkage</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ThreadWithParamBase</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function></extern>













<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ThreadWithParam</name> <range>: <expr><name>public</name> <name>ThreadWithParamBase</name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>void</name></type> <name>UserThreadFunc</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>ThreadWithParam</name><argument_list>(<argument>UserThreadFunc* func</argument>, <argument>T param</argument>, <argument>Notification* thread_can_start</argument>)</argument_list></macro>
<operator>:</operator> <call><name>func_</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call>,
<call><name>param_</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call>,
<call><name>thread_can_start_</name><argument_list>(<argument><expr><name>thread_can_start</name></expr></argument>)</argument_list></call>,
<macro><name>finished_</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{
<expr><name>ThreadWithParamBase</name><operator>*</operator> <specifier>const</specifier> <name>base</name> <operator>=</operator> <name>this</name></expr>;


<expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(
<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ThreadFuncWithCLinkage</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></block>
<operator>~</operator><macro><name>ThreadWithParam</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>Join</name><argument_list>()</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>Join</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>finished_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finished_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

virtual void Run(</block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><name>thread_can_start_</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>thread_can_start_</name><operator>-&gt;</operator><name>WaitForNotification</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<call><name>func_</name><argument_list>(<argument><expr><name>param_</name></expr></argument>)</argument_list></call></block></block></expr></range></decl>;</decl_stmt>
}

private:
<decl_stmt><decl><type><name>UserThreadFunc</name><modifier>*</modifier> <specifier>const</specifier></type> <name>func_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>T</name></type> <name>param_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Notification</name><modifier>*</modifier> <specifier>const</specifier></type> <name>thread_can_start_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>finished_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ThreadWithParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_</name></expr></cpp:if>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_OS_WINDOWS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_PHONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_RT</name></expr></cpp:elif>















<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>Mutex</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>MutexType</name> <block>{ <decl><name>kStatic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>kDynamic</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>



<enum>enum <name>StaticConstructorSelector</name> <block>{ <decl><name>kStaticMutex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> }</block>;</enum>




<function><type><name>explicit</name></type> <name>Mutex</name><parameter_list>(<parameter><decl><type><name>StaticConstructorSelector</name></type></decl></parameter> )</parameter_list> <block>{<block_content/>}</block></function>

<expr_stmt><expr><call><name>Mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>AssertHeld</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>ThreadSafeLazyInit</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>owner_thread_id_</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>MutexType</name></type> <name>type_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>critical_section_init_phase_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GTEST_CRITICAL_SECTION</name><modifier>*</modifier></type> <name>critical_section_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_STATIC_MUTEX_</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern ::testing::internal::Mutex mutex</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEFINE_STATIC_MUTEX_</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)</cpp:value></cpp:define>







<decl_stmt><decl><type><name>class</name></type> <name>GTestMutexLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>GTestMutexLock</name><argument_list>(<argument><expr><name>Mutex</name><operator>*</operator> <name>mutex</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>mutex_</name><argument_list>(<argument>mutex</argument>)</argument_list></macro> <block>{ <expr><call><name><name>mutex_</name><operator>-&gt;</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>; }</block>

<operator>~</operator><macro><name>GTestMutexLock</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>mutex_</name><operator>-&gt;</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>Mutex</name><operator>*</operator> <specifier>const</specifier> <name>mutex_</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>GTestMutexLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name>GTestMutexLock</name></type> <name>MutexLock</name>;</typedef>



<decl_stmt><decl><type><name>class</name></type> <name>ThreadLocalValueHolderBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ThreadLocalValueHolderBase</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ThreadLocalBase</name> <block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><name>virtual</name> <name>ThreadLocalValueHolderBase</name><operator>*</operator> <macro><name>NewValueForCurrentThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<macro><name>ThreadLocalBase</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ThreadLocalBase</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ThreadLocalBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>ThreadLocalRegistry</name> <block>{<block_content>
<label><name>public</name>:</label>


<function_decl><type><specifier>static</specifier> <name>ThreadLocalValueHolderBase</name><modifier>*</modifier></type> <name>GetValueOnCurrentThread</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ThreadLocalBase</name><modifier>*</modifier></type> <name>thread_local_instance</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OnThreadLocalDestroyed</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ThreadLocalBase</name><modifier>*</modifier></type> <name>thread_local_instance</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>ThreadWithParamBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>void</name></type> <name>Join</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Runnable</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>Runnable</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>void</name> <call><name>Run</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>ThreadWithParamBase</name><argument_list>(<argument><expr><name>Runnable</name> <operator>*</operator><name>runnable</name></expr></argument>, <argument><expr><name>Notification</name><operator>*</operator> <name>thread_can_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ThreadWithParamBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>AutoHandle</name></type> <name>thread_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ThreadWithParam</name> <range>: <expr><name>public</name> <name>ThreadWithParamBase</name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>void</name></type> <name>UserThreadFunc</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>ThreadWithParam</name><argument_list>(<argument>UserThreadFunc* func</argument>, <argument>T param</argument>, <argument>Notification* thread_can_start</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>ThreadWithParamBase</name><argument_list>(<argument>new RunnableImpl(func, param)</argument>, <argument>thread_can_start</argument>)</argument_list></macro> <block>{
}</block></block>
<name>virtual</name> <operator>~</operator><macro><name>ThreadWithParam</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>private</name><operator>:</operator>
<name>class</name> <name>RunnableImpl</name> <operator>:</operator> <name>public</name> <name>Runnable</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>RunnableImpl</name><argument_list>(<argument>UserThreadFunc* func</argument>, <argument>T param</argument>)</argument_list></macro>
<operator>:</operator> <call><name>func_</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>,
<macro><name>param_</name><argument_list>(<argument>param</argument>)</argument_list></macro> <expr><block>{
}</block>
<name>virtual</name> <operator>~</operator><macro><name>RunnableImpl</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>void</name> <macro><name>Run</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>func_</name><argument_list>(<argument><expr><name>param_</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>UserThreadFunc</name><operator>*</operator> <specifier>const</specifier> <name>func_</name></expr>;
<expr><specifier>const</specifier> <name>T</name> <name>param_</name></expr>;

<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>RunnableImpl</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ThreadWithParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
};




























<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ThreadLocal</name> <range>: <expr><name>public</name> <name>ThreadLocalBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ThreadLocal</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>default_factory_</name><argument_list>(<argument>new DefaultValueHolderFactory()</argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <call><name>ThreadLocal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>default_factory_</name><argument_list>(<argument>new InstanceValueHolderFactory(value)</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>ThreadLocal</name><argument_list>()</argument_list></macro> <block>{ <expr><name>ThreadLocalRegistry</name><operator>::</operator><call><name>OnThreadLocalDestroyed</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>GetOrCreateValue</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetOrCreateValue</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>T</name><operator>&amp;</operator> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name>pointer</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>set</name><argument_list>(<argument>const T&amp; value</argument>)</argument_list></macro> <block>{ <expr><operator>*</operator><call><name>pointer</name><argument_list>()</argument_list></call> <operator>=</operator> <name>value</name></expr>; }</block>

<name>private</name><operator>:</operator>


<name>class</name> <name>ValueHolder</name> <operator>:</operator> <name>public</name> <name>ThreadLocalValueHolderBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ValueHolder</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>explicit</name> <call><name>ValueHolder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>

<name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>&amp;</operator><name>value_</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>T</name> <name>value_</name></expr>;
<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ValueHolder</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;


<expr><name>T</name><operator>*</operator> <macro><name>GetOrCreateValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ValueHolder</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>ThreadLocalRegistry</name><operator>::</operator><call><name>GetValueOnCurrentThread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>pointer</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>ThreadLocalValueHolderBase</name><operator>*</operator> <macro><name>NewValueForCurrentThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>default_factory_</name><operator>-&gt;</operator><name>MakeNewHolder</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>class</name> <name>ValueHolderFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ValueHolderFactory</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><macro><name>ValueHolderFactory</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>ValueHolder</name><operator>*</operator> <macro><name>MakeNewHolder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ValueHolderFactory</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

<expr><name>class</name> <name>DefaultValueHolderFactory</name> <operator>:</operator> <name>public</name> <name>ValueHolderFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefaultValueHolderFactory</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>ValueHolder</name><operator>*</operator> <macro><name>MakeNewHolder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>new</name> <call><name>ValueHolder</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>DefaultValueHolderFactory</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

<expr><name>class</name> <name>InstanceValueHolderFactory</name> <operator>:</operator> <name>public</name> <name>ValueHolderFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>InstanceValueHolderFactory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>ValueHolder</name><operator>*</operator> <macro><name>MakeNewHolder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>new</name> <call><name>ValueHolder</name><argument_list>(<argument><expr><name>value_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>T</name> <name>value_</name></expr>;

<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>InstanceValueHolderFactory</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

<expr><name><name>scoped_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ValueHolderFactory</name></expr></argument>&gt;</argument_list></name> <name>default_factory_</name></expr>;

<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ThreadLocal</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GTEST_HAS_PTHREAD</name></expr></cpp:elif>


<decl_stmt><decl><type><name>class</name></type> <name>MutexBase</name> <block>{<block_content>
<label><name>public</name>:</label>

<function><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>owner_</name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_owner_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list> <block>{<block_content>




<expr_stmt><expr><name>has_owner_</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>void</name> <macro><name>AssertHeld</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>GTEST_CHECK_</name><argument_list>(<argument><expr><name>has_owner_</name> <operator>&amp;&amp;</operator> <call><name>pthread_equal</name><argument_list>(<argument><expr><name>owner_</name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">"The current thread is not holding the mutex @"</literal> <operator>&lt;&lt;</operator> <name>this</name></expr>;
}</block>






<name>public</name><operator>:</operator>
<name>pthread_mutex_t</name> <name>mutex_</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>has_owner_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>owner_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_STATIC_MUTEX_</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern ::testing::internal::MutexBase mutex</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEFINE_STATIC_MUTEX_</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::testing::internal::MutexBase mutex = {PTHREAD_MUTEX_INITIALIZER, false, 0}</cpp:value></cpp:define>




<decl_stmt><decl><type><name>class</name></type> <name>Mutex</name> <range>: <expr><name>public</name> <name>MutexBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Mutex</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>has_owner_</name> <operator>=</operator> <name>false</name></expr>;
}</block>
<operator>~</operator><macro><name>Mutex</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>GTestMutexLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>GTestMutexLock</name><argument_list>(<argument><expr><name>MutexBase</name><operator>*</operator> <name>mutex</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>mutex_</name><argument_list>(<argument>mutex</argument>)</argument_list></macro> <block>{ <expr><call><name><name>mutex_</name><operator>-&gt;</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>; }</block>

<operator>~</operator><macro><name>GTestMutexLock</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>mutex_</name><operator>-&gt;</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>MutexBase</name><operator>*</operator> <specifier>const</specifier> <name>mutex_</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>GTestMutexLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name>GTestMutexLock</name></type> <name>MutexLock</name>;</typedef>







<decl_stmt><decl><type><name>class</name></type> <name>ThreadLocalValueHolderBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ThreadLocalValueHolderBase</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<extern>extern <literal type="string">"C"</literal> <function><type><specifier>inline</specifier> <name>void</name></type> <name>DeleteThreadLocalValue</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value_holder</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>delete</name></type> <name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ThreadLocalValueHolderBase</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value_holder</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function></extern>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>GTEST_API_</name></type> <name>ThreadLocal</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ThreadLocal</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>key_</name><argument_list>(<argument><expr><call><name>CreateKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>default_factory_</name><argument_list>(<argument>new DefaultValueHolderFactory()</argument>)</argument_list></macro> <expr><block>{}</block>
<name>explicit</name> <call><name>ThreadLocal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>key_</name><argument_list>(<argument><expr><call><name>CreateKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>default_factory_</name><argument_list>(<argument>new InstanceValueHolderFactory(value)</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>ThreadLocal</name><argument_list>()</argument_list></macro> <block>{

<expr><call><name>DeleteThreadLocalValue</name><argument_list>(<argument><expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>key_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;



<expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_key_delete</name><argument_list>(<argument><expr><name>key_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>GetOrCreateValue</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetOrCreateValue</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name>pointer</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><call><name>pointer</name><argument_list>()</argument_list></call> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>class</name></type> <name>ValueHolder</name> <range>: <expr><name>public</name> <name>ThreadLocalValueHolderBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ValueHolder</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>explicit</name> <call><name>ValueHolder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>

<name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>&amp;</operator><name>value_</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>T</name> <name>value_</name></expr>;
<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ValueHolder</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>CreateKey</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>pthread_key_t</name></type> <name>key</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(
<argument><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DeleteThreadLocalValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>T</name><operator>*</operator> <macro><name>GetOrCreateValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>ThreadLocalValueHolderBase</name><operator>*</operator> <specifier>const</specifier> <name>holder</name> <operator>=</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ThreadLocalValueHolderBase</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>key_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>holder</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>CheckedDowncastToActualType</name><argument_list type="generic">&lt;<argument><expr><name>ValueHolder</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>pointer</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>

ValueHolder* const new_holder = default_factory_-&gt;MakeNewHolder(</block></if></if_stmt>)</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ThreadLocalValueHolderBase</name><modifier>*</modifier> <specifier>const</specifier></type> <name>holder_base</name> <init>= <expr><name>new_holder</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GTEST_CHECK_POSIX_SUCCESS_</name><argument_list>(<argument><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>key_</name></expr></argument>, <argument><expr><name>holder_base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>new_holder</name><operator>-&gt;</operator><name>pointer</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ValueHolderFactory</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ValueHolderFactory</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ValueHolderFactory</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>ValueHolder</name><operator>*</operator> <macro><name>MakeNewHolder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ValueHolderFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DefaultValueHolderFactory</name> <range>: <expr><name>public</name> <name>ValueHolderFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DefaultValueHolderFactory</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>ValueHolder</name><operator>*</operator> <macro><name>MakeNewHolder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>new</name> <call><name>ValueHolder</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>DefaultValueHolderFactory</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InstanceValueHolderFactory</name> <range>: <expr><name>public</name> <name>ValueHolderFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>InstanceValueHolderFactory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>ValueHolder</name><operator>*</operator> <macro><name>MakeNewHolder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>new</name> <call><name>ValueHolder</name><argument_list>(<argument><expr><name>value_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>T</name> <name>value_</name></expr>;

<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>InstanceValueHolderFactory</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>pthread_key_t</name></type> <name>key_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>scoped_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ValueHolderFactory</name></expr></argument>&gt;</argument_list></name></type> <name>default_factory_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ThreadLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<decl_stmt><decl><type><name>class</name></type> <name>Mutex</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Mutex</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<function><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<expr_stmt><expr><name>void</name> <macro><name>AssertHeld</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_STATIC_MUTEX_</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern ::testing::internal::Mutex mutex</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEFINE_STATIC_MUTEX_</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::testing::internal::Mutex mutex</cpp:value></cpp:define>






<decl_stmt><decl><type><name>class</name></type> <name>GTestMutexLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>explicit</name></type> <name>GTestMutexLock</name><parameter_list>(<parameter><decl><type><name>Mutex</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name>GTestMutexLock</name></type> <name>MutexLock</name>;</typedef>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>GTEST_API_</name></type> <name>ThreadLocal</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ThreadLocal</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>explicit</name> <call><name>ThreadLocal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>value_</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>
<name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>&amp;</operator><name>value_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>*</operator> <macro><name>pointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><name>value_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>value_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>value_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>T</name></type> <name>value_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><name>GTEST_API_</name> <name>size_t</name></type> <name>GetThreadCount</name><parameter_list>()</parameter_list>;</function_decl>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__SUNPRO_CC</name> <operator>&lt;</operator> <literal type="number">0x5130</literal><operator>)</operator></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ELLIPSIS_NEEDS_POD_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_CAN_COMPARE_NULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_NEEDS_IS_POINTER_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>bool_value</name><operator>&gt;</operator>
struct <name>bool_constant</name> <block>{
<typedef>typedef <type><name><name>bool_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool_value</name></expr></argument>&gt;</argument_list></name></type> <name>type</name>;</typedef>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>bool_value</name></block></expr>;</expr_stmt>
};
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>bool_value</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>bool</name> <name><name>bool_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool_value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;</expr_stmt>

<typedef>typedef <type><name><name>bool_constant</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name></type> <name>false_type</name>;</typedef>
<typedef>typedef <type><name><name>bool_constant</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></type> <name>true_type</name>;</typedef>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>is_same</name> <range>: <expr><name>public</name> <name>false_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name> <name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>is_pointer</name> <range>: <expr><name>public</name> <name>false_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>is_pointer</name><argument_list type="generic">&lt;<argument><expr><name>T</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name> <name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Iterator</name><operator>&gt;</operator>
struct <name>IteratorTraits</name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Iterator</name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>IteratorTraits</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T</name></type> <name>value_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>IteratorTraits</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T</name></type> <name>value_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PATH_SEP_</name></cpp:macro> <cpp:value>"\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_ALT_PATH_SEP_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><name>__int64</name></type> <name>BiggestInt</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PATH_SEP_</name></cpp:macro> <cpp:value>"/"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_HAS_ALT_PATH_SEP_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>BiggestInt</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsAlpha</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>isalpha</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro> <expr><operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsAlNum</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>isalnum</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro> <expr><operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsDigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>isdigit</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro> <expr><operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsLower</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>islower</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro> <expr><operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsSpace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>isspace</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro> <expr><operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsUpper</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>isupper</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro> <expr><operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsXDigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>isxdigit</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro> <expr><operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsXDigit</name><parameter_list>(<parameter><decl><type><name>wchar_t</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>low_byte</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ch</name> <operator>==</operator> <name>low_byte</name> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name>low_byte</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>char</name></type> <name>ToLower</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><macro><name>tolower</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>char</name></type> <name>ToUpper</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><macro><name>toupper</name><argument_list>(<argument>static_cast&lt;unsigned char&gt;(ch)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>StripTrailingSpaces</name><argument_list>(<argument>std::string str</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>iterator</name> <name>it</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;
<while>while <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>str</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsSpace</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block></expr></expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
}







namespace <macro><name>posix</name></macro> <block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS</name></expr></cpp:if>

<typedef>typedef <type><name><name>struct</name> <name>_stat</name></name></type> <name>StatStruct</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>IsATTY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>StrCaseCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>stricmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>StrDup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>IsATTY</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>IsATTY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>StrCaseCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_stricmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>StrDup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_strdup</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>FileNo</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>FileNo</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_fileno</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>Stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>StatStruct</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>RmDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_rmdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StatStruct</name><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>_S_IFDIR</name> <operator>&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mode</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name><name>struct</name> <name>stat</name></name></type> <name>StatStruct</name>;</typedef>

<function><type><specifier>inline</specifier> <name>int</name></type> <name>FileNo</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fileno</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>IsATTY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>Stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>StatStruct</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>StrCaseCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>StrDup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>RmDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>rmdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StatStruct</name><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<macro><name>GTEST_DISABLE_MSC_DEPRECATED_PUSH_</name><argument_list>()</argument_list></macro>

<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>StrNCpy</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_PHONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_RT</name></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>ChDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>chdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>inline</specifier> <name>FILE</name><modifier>*</modifier></type> <name>FOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>FILE</name> <modifier>*</modifier></type><name>FReopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>freopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>FILE</name><modifier>*</modifier></type> <name>FDOpen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>FClose</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>Read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>Write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>StrError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetEnv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS_MOBILE</name> <operator>||</operator> <name>GTEST_OS_WINDOWS_PHONE</name> <operator>||</operator> <name>GTEST_OS_WINDOWS_RT</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SunOS_5_8</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SunOS_5_9</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>env</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>env</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<macro><name>GTEST_DISABLE_MSC_DEPRECATED_POP_</name><argument_list>()</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>



<function_decl><type><name>void</name></type> <name>Abort</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>Abort</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_SNPRINTF_</name><parameter_list>(<parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_snprintf_s(buffer, size, size, format, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_SNPRINTF_</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_SNPRINTF_</name></cpp:macro> <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<decl_stmt><decl><type><specifier>const</specifier> <name>BiggestInt</name></type> <name>kMaxBiggestInt</name> <init>=
<expr><operator>~</operator><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>BiggestInt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BiggestInt</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>



















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>size</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TypeWithSize</name> <block>{<block_content>
<label><name>public</name>:</label>


<typedef>typedef <type><name>void</name></type> <name>UInt</name>;</typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>TypeWithSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>




<typedef>typedef <type><name>int</name></type> <name>Int</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>UInt</name>;</typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>TypeWithSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_OS_WINDOWS</name></expr></cpp:if>
<typedef>typedef <type><name>__int64</name></type> <name>Int</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>UInt</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>Int</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>UInt</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<typedef>typedef <expr_stmt><expr><name><name>TypeWithSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Int</name> <name>Int32</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name><name>TypeWithSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>UInt</name> <name>UInt32</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name><name>TypeWithSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Int</name> <name>Int64</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name><name>TypeWithSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>UInt</name> <name>UInt64</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name><name>TypeWithSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Int</name> <name>TimeInMillis</name></expr>;</expr_stmt></typedef>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_FLAG</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FLAGS_gtest_##name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_USE_OWN_FLAGFILE_FLAG_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_USE_OWN_FLAGFILE_FLAG_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_DECLARE_bool_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_FLAG_SAVER_</name></cpp:macro> <cpp:value>::testing::internal::GTestFlagSaver</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_bool_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_API_ extern bool GTEST_FLAG(name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_int32_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_API_ extern ::testing::internal::Int32 GTEST_FLAG(name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_string_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_API_ extern ::std::string GTEST_FLAG(name)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEFINE_bool_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>default_val</name></type></parameter>, <parameter><type><name>doc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_API_ bool GTEST_FLAG(name) = (default_val)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEFINE_int32_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>default_val</name></type></parameter>, <parameter><type><name>doc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_API_ ::testing::internal::Int32 GTEST_FLAG(name) = (default_val)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DEFINE_string_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>default_val</name></type></parameter>, <parameter><type><name>doc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_EXCLUSIVE_LOCK_REQUIRED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_EXCLUSIVE_LOCK_REQUIRED_</name><parameter_list>(<parameter><type><name>locks</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_LOCK_EXCLUDED_</name><parameter_list>(<parameter><type><name>locks</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><name>bool</name></type> <name>ParseInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Message</name><modifier>&amp;</modifier></type> <name>src_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>Int32</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>BoolFromGTestEnv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>default_val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GTEST_API_</name> <name>Int32</name></type> <name>Int32FromGTestEnv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>Int32</name></type> <name>default_val</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>OutputFlagAlsoCheckEnvVar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>StringFromGTestEnv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>default_val</name></decl></parameter>)</parameter_list>;</function_decl>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
