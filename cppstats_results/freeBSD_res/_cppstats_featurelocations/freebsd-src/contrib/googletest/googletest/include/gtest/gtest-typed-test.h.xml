<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/gtest-typed-test.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_</name></cpp:macro></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



template &lt;typename T&gt;
class FooTest : public testing::Test {
public:
...
typedef std::list&lt;T&gt; List;
static T shared_;
T value_;
};




typedef testing::Types&lt;char, int, unsigned int&gt; MyTypes;
TYPED_TEST_CASE(FooTest, MyTypes);







TYPED_TEST(FooTest, DoesBlah) {



TypeParam n = this-&gt;value_;



n += TestFixture::shared_;



typename TestFixture::List values;
values.push_back(n);
...
}

TYPED_TEST(FooTest, HasPropertyA) { ... }



















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



template &lt;typename T&gt;
class FooTest : public testing::Test {
...
};




TYPED_TEST_CASE_P(FooTest);



TYPED_TEST_P(FooTest, DoesBlah) {

TypeParam n = 0;
...
}

TYPED_TEST_P(FooTest, HasPropertyA) { ... }





REGISTER_TYPED_TEST_CASE_P(FooTest,
DoesBlah, HasPropertyA);









typedef testing::Types&lt;char, int, unsigned int&gt; MyTypes;
INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, MyTypes);










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-type-util.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TYPED_TEST</name></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_TYPE_PARAMS_</name><parameter_list>(<parameter><type><name>TestCaseName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gtest_type_params_##TestCaseName##_</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_NAME_GENERATOR_</name><parameter_list>(<parameter><type><name>TestCaseName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gtest_type_params_##TestCaseName##_NameGenerator</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPED_TEST_CASE</name><parameter_list>(<parameter><type><name>CaseName</name></type></parameter>, <parameter><type><name>Types</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef ::testing::internal::TypeList&lt; Types &gt;::type GTEST_TYPE_PARAMS_( CaseName); typedef ::testing::internal::NameGeneratorSelector&lt;__VA_ARGS__&gt;::type GTEST_NAME_GENERATOR_(CaseName)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPED_TEST</name><parameter_list>(<parameter><type><name>CaseName</name></type></parameter>, <parameter><type><name>TestName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>template &lt;typename gtest_TypeParam_&gt; class GTEST_TEST_CLASS_NAME_(CaseName, TestName) : public CaseName&lt;gtest_TypeParam_&gt; { private: typedef CaseName&lt;gtest_TypeParam_&gt; TestFixture; typedef gtest_TypeParam_ TypeParam; virtual void TestBody(); }; static bool gtest_##CaseName##_##TestName##_registered_ GTEST_ATTRIBUTE_UNUSED_ = ::testing::internal::TypeParameterizedTest&lt; CaseName, ::testing::internal::TemplateSel&lt;GTEST_TEST_CLASS_NAME_(CaseName, TestName)&gt;, GTEST_TYPE_PARAMS_( CaseName)&gt;::Register("", ::testing::internal::CodeLocation( __FILE__, __LINE__), #CaseName, #TestName, 0, ::testing::internal::GenerateNames&lt; GTEST_NAME_GENERATOR_(CaseName), GTEST_TYPE_PARAMS_(CaseName)&gt;()); template &lt;typename gtest_TypeParam_&gt; void GTEST_TEST_CLASS_NAME_(CaseName, TestName)&lt;gtest_TypeParam_&gt;::TestBody()</cpp:value></cpp:define>


























<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_TYPED_TEST_P</name></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_CASE_NAMESPACE_</name><parameter_list>(<parameter><type><name>TestCaseName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gtest_case_##TestCaseName##_</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_TYPED_TEST_CASE_P_STATE_</name><parameter_list>(<parameter><type><name>TestCaseName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gtest_typed_test_case_p_state_##TestCaseName##_</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_REGISTERED_TEST_NAMES_</name><parameter_list>(<parameter><type><name>TestCaseName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gtest_registered_test_names_##TestCaseName##_</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPED_TEST_CASE_P</name><parameter_list>(<parameter><type><name>CaseName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static ::testing::internal::TypedTestCasePState GTEST_TYPED_TEST_CASE_P_STATE_(CaseName)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPED_TEST_P</name><parameter_list>(<parameter><type><name>CaseName</name></type></parameter>, <parameter><type><name>TestName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>namespace GTEST_CASE_NAMESPACE_(CaseName) { template &lt;typename gtest_TypeParam_&gt; class TestName : public CaseName&lt;gtest_TypeParam_&gt; { private: typedef CaseName&lt;gtest_TypeParam_&gt; TestFixture; typedef gtest_TypeParam_ TypeParam; virtual void TestBody(); }; static bool gtest_##TestName##_defined_ GTEST_ATTRIBUTE_UNUSED_ = GTEST_TYPED_TEST_CASE_P_STATE_(CaseName).AddTestName(__FILE__, __LINE__, #CaseName, #TestName); } template &lt;typename gtest_TypeParam_&gt; void GTEST_CASE_NAMESPACE_(CaseName)::TestName&lt;gtest_TypeParam_&gt;::TestBody()</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_TYPED_TEST_CASE_P</name><parameter_list>(<parameter><type><name>CaseName</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>namespace GTEST_CASE_NAMESPACE_(CaseName) { typedef ::testing::internal::Templates&lt;__VA_ARGS__&gt;::type gtest_AllTests_; } static const char* const GTEST_REGISTERED_TEST_NAMES_(CaseName) GTEST_ATTRIBUTE_UNUSED_ = GTEST_TYPED_TEST_CASE_P_STATE_(CaseName).VerifyRegisteredTestNames( __FILE__, __LINE__, #__VA_ARGS__)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTANTIATE_TYPED_TEST_CASE_P</name><parameter_list>(<parameter><type><name>Prefix</name></type></parameter>, <parameter><type><name>CaseName</name></type></parameter>, <parameter><type><name>Types</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static bool gtest_##Prefix##_##CaseName GTEST_ATTRIBUTE_UNUSED_ = ::testing::internal::TypeParameterizedTestCase&lt; CaseName, GTEST_CASE_NAMESPACE_(CaseName)::gtest_AllTests_, ::testing::internal::TypeList&lt; Types &gt;::type&gt;:: Register(#Prefix, ::testing::internal::CodeLocation(__FILE__, __LINE__), &amp;GTEST_TYPED_TEST_CASE_P_STATE_(CaseName), #CaseName, GTEST_REGISTERED_TEST_NAMES_(CaseName), ::testing::internal::GenerateNames&lt; ::testing::internal::NameGeneratorSelector&lt; __VA_ARGS__&gt;::type, ::testing::internal::TypeList&lt; Types &gt;::type&gt;())</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
