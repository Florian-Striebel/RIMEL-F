<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/gtest-spi.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_GTEST_SPI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_GTEST_SPI_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/gtest.h"</cpp:file></cpp:include>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4251</literal></argument> \
)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>










<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>ScopedFakeTestPartResultReporter</name>
<range>: <expr><name>public</name> <name>TestPartResultReporterInterface</name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>InterceptMode</name> <block>{
<expr><name>INTERCEPT_ONLY_CURRENT_THREAD</name></expr>,
<expr><name>INTERCEPT_ALL_THREADS</name></expr>
}</block></expr>;





<expr><name>explicit</name> <call><name>ScopedFakeTestPartResultReporter</name><argument_list>(<argument><expr><name>TestPartResultArray</name><operator>*</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;


<macro><name>ScopedFakeTestPartResultReporter</name><argument_list>(<argument>InterceptMode intercept_mode</argument>,
<argument>TestPartResultArray* result</argument>)</argument_list></macro>;


<expr><name>virtual</name> <operator>~</operator><call><name>ScopedFakeTestPartResultReporter</name><argument_list>()</argument_list></call></expr>;






<expr><name>virtual</name> <name>void</name> <call><name>ReportTestPartResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TestPartResult</name><operator>&amp;</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;
<expr><name>private</name><operator>:</operator>
<name>void</name> <call><name>Init</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>InterceptMode</name> <name>intercept_mode_</name></expr>;
<expr><name>TestPartResultReporterInterface</name><operator>*</operator> <name>old_reporter_</name></expr>;
<expr><name>TestPartResultArray</name><operator>*</operator> <specifier>const</specifier> <name>result_</name></expr>;

<expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>ScopedFakeTestPartResultReporter</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>SingleFailureChecker</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>SingleFailureChecker</name><argument_list>(<argument>const TestPartResultArray* results</argument>,
<argument>TestPartResult::Type type</argument>, <argument>const std::string&amp; substr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SingleFailureChecker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>TestPartResultArray</name><modifier>*</modifier> <specifier>const</specifier></type> <name>results_</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>TestPartResult</name><operator>::</operator><name>Type</name> <name>type_</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>substr_</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>SingleFailureChecker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_FATAL_FAILURE</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>substr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { class GTestExpectFatalFailureHelper {public:static void Execute() { statement; }};::testing::TestPartResultArray gtest_failures;::testing::internal::SingleFailureChecker gtest_checker(&amp;gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));{::testing::ScopedFakeTestPartResultReporter gtest_reporter(::testing::ScopedFakeTestPartResultReporter:: INTERCEPT_ONLY_CURRENT_THREAD, &amp;gtest_failures);GTestExpectFatalFailureHelper::Execute();}} while (::testing::internal::AlwaysFalse())</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_FATAL_FAILURE_ON_ALL_THREADS</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>substr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { class GTestExpectFatalFailureHelper {public:static void Execute() { statement; }};::testing::TestPartResultArray gtest_failures;::testing::internal::SingleFailureChecker gtest_checker(&amp;gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));{::testing::ScopedFakeTestPartResultReporter gtest_reporter(::testing::ScopedFakeTestPartResultReporter:: INTERCEPT_ALL_THREADS, &amp;gtest_failures);GTestExpectFatalFailureHelper::Execute();}} while (::testing::internal::AlwaysFalse())</cpp:value></cpp:define>
















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_NONFATAL_FAILURE</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>substr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {::testing::TestPartResultArray gtest_failures;::testing::internal::SingleFailureChecker gtest_checker(&amp;gtest_failures, ::testing::TestPartResult::kNonFatalFailure, (substr));{::testing::ScopedFakeTestPartResultReporter gtest_reporter(::testing::ScopedFakeTestPartResultReporter:: INTERCEPT_ONLY_CURRENT_THREAD, &amp;gtest_failures);if (::testing::internal::AlwaysTrue()) { statement; }}} while (::testing::internal::AlwaysFalse())</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>substr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {::testing::TestPartResultArray gtest_failures;::testing::internal::SingleFailureChecker gtest_checker(&amp;gtest_failures, ::testing::TestPartResult::kNonFatalFailure, (substr));{::testing::ScopedFakeTestPartResultReporter gtest_reporter(::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, &amp;gtest_failures);if (::testing::internal::AlwaysTrue()) { statement; }}} while (::testing::internal::AlwaysFalse())</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
