<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/gtest_pred_impl.h">



































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/gtest.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ASSERT_</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_AMBIGUOUS_ELSE_BLOCKER_ if (const ::testing::AssertionResult gtest_ar = (expression)) ; else on_failure(gtest_ar.failure_message())</cpp:value></cpp:define>









<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Pred</name></expr></argument>,
<argument><expr><name>typename</name> <name>T1</name></expr></argument>&gt;</argument_list></name>
<name>AssertionResult</name></type> <name>AssertPred1Helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pred_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e1</name></decl></parameter>,
<parameter><decl><type><name>Pred</name></type> <name>pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>v1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pred</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AssertionSuccess</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AssertionFailure</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>pred_text</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal>
<operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">") evaluates to false, where"</literal>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v1</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED_FORMAT1_</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(pred_format(#v1, v1), on_failure)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED1_</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(::testing::AssertPred1Helper(#pred, #v1, pred, v1), on_failure)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED_FORMAT1</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED1</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED1_(pred, v1, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED_FORMAT1</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED1</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED1_(pred, v1, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Pred</name></expr></argument>,
<argument><expr><name>typename</name> <name>T1</name></expr></argument>,
<argument><expr><name>typename</name> <name>T2</name></expr></argument>&gt;</argument_list></name>
<name>AssertionResult</name></type> <name>AssertPred2Helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pred_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><name>Pred</name></type> <name>pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pred</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AssertionSuccess</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AssertionFailure</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>pred_text</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal>
<operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">") evaluates to false, where"</literal>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v1</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v2</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED_FORMAT2_</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(pred_format(#v1, #v2, v1, v2), on_failure)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED2_</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(::testing::AssertPred2Helper(#pred, #v1, #v2, pred, v1, v2), on_failure)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED_FORMAT2</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED2</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED2_(pred, v1, v2, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED_FORMAT2</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED2</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED2_(pred, v1, v2, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Pred</name></expr></argument>,
<argument><expr><name>typename</name> <name>T1</name></expr></argument>,
<argument><expr><name>typename</name> <name>T2</name></expr></argument>,
<argument><expr><name>typename</name> <name>T3</name></expr></argument>&gt;</argument_list></name>
<name>AssertionResult</name></type> <name>AssertPred3Helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pred_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e3</name></decl></parameter>,
<parameter><decl><type><name>Pred</name></type> <name>pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>v2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>v3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pred</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AssertionSuccess</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AssertionFailure</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>pred_text</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal>
<operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e3</name> <operator>&lt;&lt;</operator> <literal type="string">") evaluates to false, where"</literal>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v1</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v2</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e3</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v3</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED_FORMAT3_</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(pred_format(#v1, #v2, #v3, v1, v2, v3), on_failure)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED3_</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(::testing::AssertPred3Helper(#pred, #v1, #v2, #v3, pred, v1, v2, v3), on_failure)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED_FORMAT3</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED3</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED3_(pred, v1, v2, v3, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED_FORMAT3</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED3</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED3_(pred, v1, v2, v3, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Pred</name></expr></argument>,
<argument><expr><name>typename</name> <name>T1</name></expr></argument>,
<argument><expr><name>typename</name> <name>T2</name></expr></argument>,
<argument><expr><name>typename</name> <name>T3</name></expr></argument>,
<argument><expr><name>typename</name> <name>T4</name></expr></argument>&gt;</argument_list></name>
<name>AssertionResult</name></type> <name>AssertPred4Helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pred_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e3</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e4</name></decl></parameter>,
<parameter><decl><type><name>Pred</name></type> <name>pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>v2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>v3</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>v4</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pred</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AssertionSuccess</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AssertionFailure</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>pred_text</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal>
<operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e3</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e4</name> <operator>&lt;&lt;</operator> <literal type="string">") evaluates to false, where"</literal>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v1</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v2</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e3</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v3</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e4</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v4</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED_FORMAT4_</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(pred_format(#v1, #v2, #v3, #v4, v1, v2, v3, v4), on_failure)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED4_</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(::testing::AssertPred4Helper(#pred, #v1, #v2, #v3, #v4, pred, v1, v2, v3, v4), on_failure)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED_FORMAT4</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED4</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED_FORMAT4</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED4</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Pred</name></expr></argument>,
<argument><expr><name>typename</name> <name>T1</name></expr></argument>,
<argument><expr><name>typename</name> <name>T2</name></expr></argument>,
<argument><expr><name>typename</name> <name>T3</name></expr></argument>,
<argument><expr><name>typename</name> <name>T4</name></expr></argument>,
<argument><expr><name>typename</name> <name>T5</name></expr></argument>&gt;</argument_list></name>
<name>AssertionResult</name></type> <name>AssertPred5Helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pred_text</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e3</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e4</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e5</name></decl></parameter>,
<parameter><decl><type><name>Pred</name></type> <name>pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>v2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>v3</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>v4</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T5</name><modifier>&amp;</modifier></type> <name>v5</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pred</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AssertionSuccess</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AssertionFailure</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>pred_text</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal>
<operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e3</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e4</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
<operator>&lt;&lt;</operator> <name>e5</name> <operator>&lt;&lt;</operator> <literal type="string">") evaluates to false, where"</literal>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e1</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v1</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e2</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v2</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e3</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v3</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e4</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v4</name>
<operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <name>e5</name> <operator>&lt;&lt;</operator> <literal type="string">" evaluates to "</literal> <operator>&lt;&lt;</operator> <name>v5</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED_FORMAT5_</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>v5</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(pred_format(#v1, #v2, #v3, #v4, #v5, v1, v2, v3, v4, v5), on_failure)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_PRED5_</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>v5</name></type></parameter>, <parameter><type><name>on_failure</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_ASSERT_(::testing::AssertPred5Helper(#pred, #v1, #v2, #v3, #v4, #v5, pred, v1, v2, v3, v4, v5), on_failure)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED_FORMAT5</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>v5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT5_(pred_format, v1, v2, v3, v4, v5, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PRED5</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>v5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED5_(pred, v1, v2, v3, v4, v5, GTEST_NONFATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED_FORMAT5</name><parameter_list>(<parameter><type><name>pred_format</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>v5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED_FORMAT5_(pred_format, v1, v2, v3, v4, v5, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PRED5</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>v3</name></type></parameter>, <parameter><type><name>v4</name></type></parameter>, <parameter><type><name>v5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_PRED5_(pred, v1, v2, v3, v4, v5, GTEST_FATAL_FAILURE_)</cpp:value></cpp:define>




</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
