<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googletest/include/gtest/internal/gtest-tuple.h">





































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__SUNPRO_CC</name> <operator>&lt;</operator> <literal type="number">0x590</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name></cpp:macro> <cpp:value>public:</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name></cpp:macro> <cpp:value>template &lt;GTEST_10_TYPENAMES_(U)&gt; friend class tuple; private:</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1600</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"gtest's tuple doesn't compile on Visual Studio 2010 or later. GTEST_USE_OWN_TR1_TUPLE must be set to 0 on those compilers."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_0_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_1_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, void, void, void, void, void, void, void, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_2_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, void, void, void, void, void, void, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_3_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, void, void, void, void, void, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_4_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, T##3, void, void, void, void, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_5_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, T##3, T##4, void, void, void, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_6_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, T##3, T##4, T##5, void, void, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_7_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, T##3, T##4, T##5, T##6, void, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_8_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, T##3, T##4, T##5, T##6, T##7, void, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_9_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, T##3, T##4, T##5, T##6, T##7, T##8, void&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_10_TUPLE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tuple&lt;T##0, T##1, T##2, T##3, T##4, T##5, T##6, T##7, T##8, T##9&gt;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_0_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_1_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_2_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_3_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_4_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2, typename T##3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_5_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2, typename T##3, typename T##4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_6_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2, typename T##3, typename T##4, typename T##5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_7_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2, typename T##3, typename T##4, typename T##5, typename T##6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_8_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2, typename T##3, typename T##4, typename T##5, typename T##6, typename T##7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_9_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2, typename T##3, typename T##4, typename T##5, typename T##6, typename T##7, typename T##8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_10_TYPENAMES_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename T##0, typename T##1, typename T##2, typename T##3, typename T##4, typename T##5, typename T##6, typename T##7, typename T##8, typename T##9</cpp:value></cpp:define>






<decl_stmt><decl><type><name>namespace</name></type> <name>std</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tr1</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T0</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name> <name>T1</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name> <operator>=</operator> <name>void</name></expr></argument>,
<argument><expr><name>typename</name> <name>T3</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name> <name>T4</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name> <name>T5</name> <operator>=</operator> <name>void</name></expr></argument>,
<argument><expr><name>typename</name> <name>T6</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name> <name>T7</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name> <name>T8</name> <operator>=</operator> <name>void</name></expr></argument>,
<argument><expr><name>typename</name> <name>T9</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>tuple</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>namespace</name></type> <name>gtest_internal</name> <block>{<block_content>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>ByRef</name> <block>{ <typedef>typedef <type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>ByRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{ <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_BY_REF_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename ::std::tr1::gtest_internal::ByRef&lt;T&gt;::type</cpp:value></cpp:define>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>AddRef</name> <block>{ <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>AddRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{ <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_ADD_REF_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename ::std::tr1::gtest_internal::AddRef&lt;T&gt;::type</cpp:value></cpp:define>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>Get</name></decl>;</decl_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>kIndexValid</name></expr><operator>,</operator> <expr><name>int</name> <name>kIndex</name></expr><operator>,</operator> <expr><name>class</name> <name>Tuple</name><operator>&gt;</operator>
struct <name>TupleElement</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T0</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T1</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T2</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T3</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T4</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T5</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T6</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T7</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T8</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>TupleElement</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <type><name>T9</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>tuple</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>tuple</name><argument_list>(<argument>const tuple&amp;</argument> )</argument_list></macro> <block>{<block_content/>}</block>
<decl_stmt><decl><type><name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <operator>)</operator> <block>{ <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></init></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_1_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_1_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>f0_</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>f0_</name><argument_list>(<argument>f0</argument>)</argument_list></macro> <block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>f0_</name><argument_list>(<argument>t.f0_</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_1_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_1_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>f0_</name><argument_list>(<argument>t.f0_</argument>)</argument_list></macro> <block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_1_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_1_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_1_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_1_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_2_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_2_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f1_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>f1_</name><argument_list>(<argument>f1</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f1_</name><argument_list>(<argument>t.f1_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_2_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_2_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f1_</name><argument_list>(<argument>t.f1_</argument>)</argument_list></macro> <expr><block>{}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U0</name></expr></argument>, <argument><expr><name>typename</name> <name>U1</name></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>U0</name></expr></argument>, <argument><expr><name>U1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f1_</name><argument_list>(<argument>p.second</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_2_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_2_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U0</name></expr></argument>, <argument><expr><name>typename</name> <name>U1</name></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <operator>::</operator><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>U0</name></expr></argument>, <argument><expr><name>U1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>p</name><operator>)</operator> <block>{
<expr><name>f0_</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>first</name></name></expr>;
<expr><name>f1_</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_2_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_2_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_3_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_3_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f2_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f2_</name><argument_list>(<argument>f2</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f2_</name><argument_list>(<argument>t.f2_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_3_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_3_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f2_</name><argument_list>(<argument>t.f2_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_3_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_3_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_3_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_3_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_4_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_4_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f3_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T3</argument>)</argument_list></macro> <name>f3</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>f3_</name><argument_list>(<argument>f3</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f3_</name><argument_list>(<argument>t.f3_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_4_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_4_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>f3_</name><argument_list>(<argument>t.f3_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_4_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_4_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_4_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_4_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f3_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T3</name></type> <name>f3_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_5_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_5_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f4_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T3</argument>)</argument_list></macro> <name>f3</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T4</argument>)</argument_list></macro> <name>f4</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f4_</name><argument_list>(<argument>f4</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>f4_</name><argument_list>(<argument>t.f4_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_5_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_5_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f4_</name><argument_list>(<argument>t.f4_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_5_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_5_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_5_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_5_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f3_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f4_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T3</name></type> <name>f3_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T4</name></type> <name>f4_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_6_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_6_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f5_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T3</argument>)</argument_list></macro> <name>f3</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T4</argument>)</argument_list></macro> <name>f4</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T5</argument>)</argument_list></macro> <name>f5</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>f5_</name><argument_list>(<argument>f5</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f5_</name><argument_list>(<argument>t.f5_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_6_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_6_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f5_</name><argument_list>(<argument>t.f5_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_6_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_6_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_6_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_6_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f3_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f4_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f5_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f5_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T3</name></type> <name>f3_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T4</name></type> <name>f4_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T5</name></type> <name>f5_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_7_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_7_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f6_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T3</argument>)</argument_list></macro> <name>f3</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T4</argument>)</argument_list></macro> <name>f4</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T5</argument>)</argument_list></macro> <name>f5</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T6</argument>)</argument_list></macro> <name>f6</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f6_</name><argument_list>(<argument>f6</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f6_</name><argument_list>(<argument>t.f6_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_7_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_7_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f6_</name><argument_list>(<argument>t.f6_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_7_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_7_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_7_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_7_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f3_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f4_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f5_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f5_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f6_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f6_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T3</name></type> <name>f3_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T4</name></type> <name>f4_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T5</name></type> <name>f5_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T6</name></type> <name>f6_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_8_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_8_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f7_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T3</argument>)</argument_list></macro> <name>f3</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T4</argument>)</argument_list></macro> <name>f4</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T5</argument>)</argument_list></macro> <name>f5</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T6</argument>)</argument_list></macro> <name>f6</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T7</argument>)</argument_list></macro> <name>f7</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f5_</name><argument_list>(<argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f7_</name><argument_list>(<argument>f7</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f7_</name><argument_list>(<argument>t.f7_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_8_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_8_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f7_</name><argument_list>(<argument>t.f7_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_8_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_8_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_8_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_8_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f3_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f4_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f5_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f5_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f6_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f6_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f7_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f7_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T3</name></type> <name>f3_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T4</name></type> <name>f4_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T5</name></type> <name>f5_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T6</name></type> <name>f6_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T7</name></type> <name>f7_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_9_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>GTEST_9_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>f8_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T3</argument>)</argument_list></macro> <name>f3</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T4</argument>)</argument_list></macro> <name>f4</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T5</argument>)</argument_list></macro> <name>f5</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T6</argument>)</argument_list></macro> <name>f6</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T7</argument>)</argument_list></macro> <name>f7</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T8</argument>)</argument_list></macro> <name>f8</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f5_</name><argument_list>(<argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>(<argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f8_</name><argument_list>(<argument>f8</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f7_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f8_</name><argument_list>(<argument>t.f8_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_9_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_9_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f7_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f8_</name><argument_list>(<argument>t.f8_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_9_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_9_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_9_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_9_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f3_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f4_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f5_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f5_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f6_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f6_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f7_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f7_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f8_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f8_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T3</name></type> <name>f3_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T4</name></type> <name>f4_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T5</name></type> <name>f5_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T6</name></type> <name>f6_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T7</name></type> <name>f7_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T8</name></type> <name>f8_</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>tuple</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>gtest_internal</name><operator>::</operator><name>Get</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tuple</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>f8_</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<macro><name>f9_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>tuple</name><argument_list>(<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T0</argument>)</argument_list></macro> <name>f0</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T1</argument>)</argument_list></macro> <name>f1</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T2</argument>)</argument_list></macro> <name>f2</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T3</argument>)</argument_list></macro> <name>f3</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T4</argument>)</argument_list></macro> <name>f4</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T5</argument>)</argument_list></macro> <name>f5</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T6</argument>)</argument_list></macro> <name>f6</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T7</argument>)</argument_list></macro> <name>f7</name></expr></argument>,
<argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T8</argument>)</argument_list></macro> <name>f8</name></expr></argument>, <argument><expr><macro><name>GTEST_BY_REF_</name><argument_list>(<argument>T9</argument>)</argument_list></macro> <name>f9</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>(<argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f8_</name><argument_list>(<argument><expr><name>f8</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f9_</name><argument_list>(<argument>f9</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f7_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f8_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f8_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>f9_</name><argument_list>(<argument>t.f9_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<call><name>tuple</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>f0_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f1_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f2_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>f3_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f4_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f5_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f6_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f7_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f7_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>f8_</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>f8_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>f9_</name><argument_list>(<argument>t.f9_</argument>)</argument_list></macro> <expr><block>{}</block>

<name>tuple</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>tuple</name><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{ <return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>)</operator> <block>{
<return>return <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>tuple</name><modifier>&amp;</modifier></type> <name>CopyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>f0_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f3_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f4_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f5_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f5_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f6_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f6_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f7_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f7_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f8_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f8_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f9_</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>f9_</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T0</name></type> <name>f0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T1</name></type> <name>f1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T2</name></type> <name>f2_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T3</name></type> <name>f3_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T4</name></type> <name>f4_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T5</name></type> <name>f5_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T6</name></type> <name>f6_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T7</name></type> <name>f7_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T8</name></type> <name>f8_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T9</name></type> <name>f9_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<function><type><specifier>inline</specifier> <name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name></type> <name>make_tuple</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_1_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_1_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_1_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_2_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_2_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_2_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_3_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_3_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_3_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_4_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_4_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>f3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_4_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_5_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_5_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>f3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>f4</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_5_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_6_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_6_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>f3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>f4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T5</name><modifier>&amp;</modifier></type> <name>f5</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_6_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_7_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_7_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>f3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>f4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T5</name><modifier>&amp;</modifier></type> <name>f5</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T6</name><modifier>&amp;</modifier></type> <name>f6</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_7_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_8_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_8_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>f3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>f4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T5</name><modifier>&amp;</modifier></type> <name>f5</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T6</name><modifier>&amp;</modifier></type> <name>f6</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T7</name><modifier>&amp;</modifier></type> <name>f7</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_8_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_9_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_9_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>f3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>f4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T5</name><modifier>&amp;</modifier></type> <name>f5</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T6</name><modifier>&amp;</modifier></type> <name>f6</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T7</name><modifier>&amp;</modifier></type> <name>f7</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T8</name><modifier>&amp;</modifier></type> <name>f8</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_9_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name>f7</name></expr></argument>, <argument><expr><name>f8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier></type> <name>GTEST_10_TUPLE_</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> make_tuple<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name><modifier>&amp;</modifier></type> <name>f0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name><modifier>&amp;</modifier></type> <name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name><modifier>&amp;</modifier></type> <name>f2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T3</name><modifier>&amp;</modifier></type> <name>f3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name><modifier>&amp;</modifier></type> <name>f4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T5</name><modifier>&amp;</modifier></type> <name>f5</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T6</name><modifier>&amp;</modifier></type> <name>f6</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T7</name><modifier>&amp;</modifier></type> <name>f7</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>T8</name><modifier>&amp;</modifier></type> <name>f8</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T9</name><modifier>&amp;</modifier></type> <name>f9</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name>f7</name></expr></argument>, <argument><expr><name>f8</name></expr></argument>, <argument><expr><name>f9</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Tuple</name><operator>&gt;</operator> struct <name>tuple_size</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_0_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_0_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_1_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_1_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_2_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_2_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">2</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_3_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_3_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">3</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_4_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_4_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">4</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_5_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_5_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">5</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_6_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_6_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">6</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_7_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_7_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">7</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_8_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_8_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">8</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_9_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_9_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">9</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><call><name>GTEST_10_TYPENAMES_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>value</name> <operator>=</operator> <literal type="number">10</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>int</name> <name>k</name></expr><operator>,</operator> <expr><name>class</name> <name>Tuple</name><operator>&gt;</operator>
struct <name>tuple_element</name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>gtest_internal</name><operator>::</operator><name>TupleElement</name><operator>&lt;</operator>
<name><name>k</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_TUPLE_ELEMENT_</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>Tuple</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename tuple_element&lt;k, Tuple &gt;::type</cpp:value></cpp:define>



<decl_stmt><decl><type><name>namespace</name></type> <name>gtest_internal</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f0_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f1_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f2_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f3_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f4_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f5_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f6_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f7_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f7_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f8_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f8_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>Get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">9</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>Field</name><argument_list>(<argument><expr><name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f9_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>ConstField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Tuple</name><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name><name>t</name><operator>.</operator><name>f9_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>, <argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name></type>
<name>GTEST_ADD_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>get</name><argument_list>(<argument><expr><call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>gtest_internal</name><operator>::</operator><name><name>Get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Field</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>, <argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>&gt;</argument_list></name></type>
<name>GTEST_BY_REF_</name><argument_list>(<argument><expr><call><name>GTEST_TUPLE_ELEMENT_</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>get</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>gtest_internal</name><operator>::</operator><name><name>Get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>ConstField</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>namespace</name></type> <name>gtest_internal</name> <block>{<block_content>





<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>int</name> <name>kSize1</name></expr><operator>,</operator> <expr><name>int</name> <name>kSize2</name><operator>&gt;</operator>
struct <name>SameSizeTuplePrefixComparator</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>SameSizeTuplePrefixComparator</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple1</name></expr></argument>, <argument><expr><name>class</name> <name>Tuple2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name> <macro><name>Eq</name><argument_list>(<argument>const Tuple1&amp;</argument> , <argument>const Tuple2&amp;</argument> )</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>&gt;</argument_list></name>
struct <name><name>SameSizeTuplePrefixComparator</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>, <argument><expr><name>k</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple1</name></expr></argument>, <argument><expr><name>class</name> <name>Tuple2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name> <macro><name>Eq</name><argument_list>(<argument>const Tuple1&amp; t1</argument>, <argument>const Tuple2&amp; t2</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>SameSizeTuplePrefixComparator</name><argument_list type="generic">&lt;<argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Eq</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>::</operator><name>std</name><operator>::</operator><name>tr1</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>, <argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>,</operator>
<specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>u</name><operator>)</operator> <block>{
<return>return <expr><name>gtest_internal</name><operator>::</operator><name><name>SameSizeTuplePrefixComparator</name><argument_list type="generic">&lt;
<argument><expr><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TUPLE_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Eq</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>T</name><operator>)</operator></expr></argument>, <argument><expr><name>GTEST_10_TYPENAMES_</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>t</name><operator>,</operator>
<specifier>const</specifier> <call><name>GTEST_10_TUPLE_</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>&amp;</operator> <name>u</name><operator>)</operator> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>t</name> <operator>==</operator> <name>u</name><operator>)</operator></expr>;</return> }</block>




}
}</expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_0_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_1_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_2_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_3_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_4_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_5_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_6_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_7_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_8_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_9_TUPLE_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_10_TUPLE_</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_0_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_1_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_2_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_3_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_4_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_5_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_6_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_7_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_8_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_9_TYPENAMES_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_10_TYPENAMES_</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_DECLARE_TUPLE_AS_FRIEND_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_BY_REF_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_ADD_REF_</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GTEST_TUPLE_ELEMENT_</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
