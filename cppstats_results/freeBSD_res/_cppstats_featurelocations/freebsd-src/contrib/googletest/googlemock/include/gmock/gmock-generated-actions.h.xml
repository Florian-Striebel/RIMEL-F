<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googlemock/include/gmock/gmock-generated-actions.h">







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/gmock-actions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/internal/gmock-port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>InvokeHelper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>CallbackType</name><operator>*</operator> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>callback</name><operator>-&gt;</operator><name>Run</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>CallbackType</name><operator>*</operator> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>callback</name><operator>-&gt;</operator><name>Run</name></name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>CallbackType</name><operator>*</operator> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>callback</name><operator>-&gt;</operator><name>Run</name></name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>CallbackType</name><operator>*</operator> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>callback</name><operator>-&gt;</operator><name>Run</name></name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>,
<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>CallbackType</name><operator>*</operator> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>callback</name><operator>-&gt;</operator><name>Run</name></name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>,
<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>CallbackType</name><operator>*</operator> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>callback</name><operator>-&gt;</operator><name>Run</name></name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>,
<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>,
<argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>,
<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>,
<argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>,
<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>,
<argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>,
<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>,
<argument><expr><name>typename</name> <name>A10</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>,
<argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>Function</name> <name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>,
<argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>, <argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>function</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">9</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>R</name></type> <name>InvokeMethod</name><argument_list>(<argument><expr><name>Class</name><operator>*</operator> <name>obj_ptr</name></expr></argument>,
<argument><expr><name>MethodPtr</name> <name>method_ptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>,
<argument><expr><name>A9</name></expr></argument>, <argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj_ptr</name><operator>-&gt;*</operator><name>method_ptr</name><operator>)</operator><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator>
<call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">9</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>InvokeCallbackAction</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>InvokeCallbackAction</name><argument_list>(<argument><expr><name>CallbackType</name><operator>*</operator> <name>callback</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>callback_</name><argument_list>(<argument>callback</argument>)</argument_list></macro> <block>{
<expr><call><name><name>callback</name><operator>-&gt;</operator><name>CheckIsRepeatable</name></name><argument_list>()</argument_list></call></expr>;
}</block>







<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name>
<name>Result</name> <macro><name>Perform</name><argument_list>(<argument>const ArgumentTuple&amp; args</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>InvokeCallback</name><argument_list>(
<argument><expr><call><name><name>callback_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallbackType</name></expr></argument>&gt;</argument_list></name></type> <name>callback_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_FIELD_</name><parameter_list>(<parameter><type><name>Tuple</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename ::testing::tuple_element&lt;N, Tuple&gt;::type</cpp:value></cpp:define>




















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>,
<argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>, <argument><expr><name>int</name> <name>k8</name></expr></argument>, <argument><expr><name>int</name> <name>k9</name></expr></argument>, <argument><expr><name>int</name> <name>k10</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>SelectArgs</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k9</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k9</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k10</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <function_decl><type><name>Result</name></type> <name>type</name><parameter_list>()</parameter_list>;</function_decl></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type></decl></parameter> )</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>,
<argument><expr><name>int</name> <name>k4</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>,
<argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>,
<argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>,
<argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>,
<argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>, <argument><expr><name>int</name> <name>k8</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>,
<argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>, <argument><expr><name>int</name> <name>k8</name></expr></argument>, <argument><expr><name>int</name> <name>k9</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>, <argument><expr><name>k9</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>Result</name></type> <name>type</name><argument_list>(<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GMOCK_FIELD_</name><argument_list>(<argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>SelectedArgs</name></expr>;</expr_stmt></typedef>
<function><type><specifier>static</specifier> <name>SelectedArgs</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SelectedArgs</name><argument_list>(<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k9</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GMOCK_FIELD_</name></cpp:undef>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>, <argument><expr><name>int</name> <name>k1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name> <name>k2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name> <name>k3</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>int</name> <name>k4</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name> <name>k5</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name> <name>k6</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name> <name>k7</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name> <name>k8</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>int</name> <name>k9</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name> <name>k10</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>WithArgsAction</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>WithArgsAction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InnerAction</name><operator>&amp;</operator> <name>action</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>action_</name><argument_list>(<argument>action</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name>
<name>operator</name> <macro><name>Action</name></macro><operator>&lt;</operator><name>F</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <macro><name>MakeAction</name><argument_list>(<argument>new Impl&lt;F&gt;(action_)</argument>)</argument_list></macro>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Impl</name> <range>: <expr><name>public</name> <name><name>ActionInterface</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Result</name> <name>Result</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Impl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>InnerAction</name><operator>&amp;</operator> <name>action</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>action_</name><argument_list>(<argument>action</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>Result</name> <macro><name>Perform</name><argument_list>(<argument>const ArgumentTuple&amp; args</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>action_</name><operator>.</operator><name>Perform</name></name><argument_list>(<argument><expr><name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>,
<argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>, <argument><expr><name>k9</name></expr></argument>, <argument><expr><name>k10</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Select</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>SelectArgs</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>,
<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>, <argument><expr><name>k9</name></expr></argument>, <argument><expr><name>k10</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>InnerFunctionType</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name><name>Action</name><argument_list type="generic">&lt;<argument><expr><name>InnerFunctionType</name></expr></argument>&gt;</argument_list></name></type> <name>action_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>InnerAction</name></type> <name>action_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_ASSIGN_</name><argument_list>(<argument><expr><name>WithArgsAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>















<struct>struct <name>ExcessiveArg</name> <block>{}</block>;</struct>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>class</name> <name>Impl</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ActionHelper</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>,
<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>,
<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>,
<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>,
<argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>,
<argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>,
<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>,
<argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>,
<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ExcessiveArg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Result</name></type> <name>Perform</name><argument_list>(<argument><expr><name>Impl</name><operator>*</operator> <name>impl</name></expr></argument>, <argument><expr><specifier>const</specifier> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>,
<argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>impl</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>gmock_PerformImpl</name><argument_list type="generic">&lt;<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>,
<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">9</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>








<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>,
<argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>,
<argument><expr><name>k7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>, <argument><expr><name>int</name> <name>k8</name></expr></argument>,
<argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>,
<argument><expr><name>k8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>, <argument><expr><name>int</name> <name>k8</name></expr></argument>,
<argument><expr><name>int</name> <name>k9</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>, <argument><expr><name>k9</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>,
<argument><expr><name>k9</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k1</name></expr></argument>, <argument><expr><name>int</name> <name>k2</name></expr></argument>, <argument><expr><name>int</name> <name>k3</name></expr></argument>, <argument><expr><name>int</name> <name>k4</name></expr></argument>, <argument><expr><name>int</name> <name>k5</name></expr></argument>, <argument><expr><name>int</name> <name>k6</name></expr></argument>, <argument><expr><name>int</name> <name>k7</name></expr></argument>, <argument><expr><name>int</name> <name>k8</name></expr></argument>,
<argument><expr><name>int</name> <name>k9</name></expr></argument>, <argument><expr><name>int</name> <name>k10</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>,
<argument><expr><name>k9</name></expr></argument>, <argument><expr><name>k10</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>k7</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>,
<argument><expr><name>k9</name></expr></argument>, <argument><expr><name>k10</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>Action2</name></expr></argument>&gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>Action2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>Action3</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action4</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action3</name></expr></argument>, <argument><expr><name>Action4</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>, <argument>Action4 a4</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action4</name></expr></argument>, <argument><expr><name>typename</name> <name>Action5</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action3</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action4</name></expr></argument>,
<argument><expr><name>Action5</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>, <argument>Action4 a4</argument>, <argument>Action5 a5</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action4</name></expr></argument>, <argument><expr><name>typename</name> <name>Action5</name></expr></argument>, <argument><expr><name>typename</name> <name>Action6</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action3</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action4</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action5</name></expr></argument>, <argument><expr><name>Action6</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>, <argument>Action4 a4</argument>, <argument>Action5 a5</argument>, <argument>Action6 a6</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action4</name></expr></argument>, <argument><expr><name>typename</name> <name>Action5</name></expr></argument>, <argument><expr><name>typename</name> <name>Action6</name></expr></argument>, <argument><expr><name>typename</name> <name>Action7</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action3</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action4</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action5</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action6</name></expr></argument>,
<argument><expr><name>Action7</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>, <argument>Action4 a4</argument>, <argument>Action5 a5</argument>, <argument>Action6 a6</argument>,
<argument>Action7 a7</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action4</name></expr></argument>, <argument><expr><name>typename</name> <name>Action5</name></expr></argument>, <argument><expr><name>typename</name> <name>Action6</name></expr></argument>, <argument><expr><name>typename</name> <name>Action7</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action8</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action3</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action4</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action5</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action6</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action7</name></expr></argument>, <argument><expr><name>Action8</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>, <argument>Action4 a4</argument>, <argument>Action5 a5</argument>, <argument>Action6 a6</argument>,
<argument>Action7 a7</argument>, <argument>Action8 a8</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action4</name></expr></argument>, <argument><expr><name>typename</name> <name>Action5</name></expr></argument>, <argument><expr><name>typename</name> <name>Action6</name></expr></argument>, <argument><expr><name>typename</name> <name>Action7</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action8</name></expr></argument>, <argument><expr><name>typename</name> <name>Action9</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action3</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action4</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action5</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action6</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action7</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action8</name></expr></argument>,
<argument><expr><name>Action9</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>, <argument>Action4 a4</argument>, <argument>Action5 a5</argument>, <argument>Action6 a6</argument>,
<argument>Action7 a7</argument>, <argument>Action8 a8</argument>, <argument>Action9 a9</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>a9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Action1</name></expr></argument>, <argument><expr><name>typename</name> <name>Action2</name></expr></argument>, <argument><expr><name>typename</name> <name>Action3</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action4</name></expr></argument>, <argument><expr><name>typename</name> <name>Action5</name></expr></argument>, <argument><expr><name>typename</name> <name>Action6</name></expr></argument>, <argument><expr><name>typename</name> <name>Action7</name></expr></argument>,
<argument><expr><name>typename</name> <name>Action8</name></expr></argument>, <argument><expr><name>typename</name> <name>Action9</name></expr></argument>, <argument><expr><name>typename</name> <name>Action10</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action1</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action2</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action3</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action4</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action5</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action6</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action7</name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action8</name></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><name><name>DoBothAction</name><argument_list type="generic">&lt;<argument><expr><name>Action9</name></expr></argument>, <argument><expr><name>Action10</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<macro><name>DoAll</name><argument_list>(<argument>Action1 a1</argument>, <argument>Action2 a2</argument>, <argument>Action3 a3</argument>, <argument>Action4 a4</argument>, <argument>Action5 a5</argument>, <argument>Action6 a6</argument>,
<argument>Action7 a7</argument>, <argument>Action8 a8</argument>, <argument>Action9 a9</argument>, <argument>Action10 a10</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>a9</name></expr></argument>, <argument><expr><name>a10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

}


































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_const</name></cpp:macro> <cpp:value>args_type&amp; args GTEST_ATTRIBUTE_UNUSED_, arg0_type arg0 GTEST_ATTRIBUTE_UNUSED_, arg1_type arg1 GTEST_ATTRIBUTE_UNUSED_, arg2_type arg2 GTEST_ATTRIBUTE_UNUSED_, arg3_type arg3 GTEST_ATTRIBUTE_UNUSED_, arg4_type arg4 GTEST_ATTRIBUTE_UNUSED_, arg5_type arg5 GTEST_ATTRIBUTE_UNUSED_, arg6_type arg6 GTEST_ATTRIBUTE_UNUSED_, arg7_type arg7 GTEST_ATTRIBUTE_UNUSED_, arg8_type arg8 GTEST_ATTRIBUTE_UNUSED_, arg9_type arg9 GTEST_ATTRIBUTE_UNUSED_</cpp:value></cpp:define>






























































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_2_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_3_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_4_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2, kind3 name3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_5_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_6_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_7_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5, kind6 name6</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_8_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>, <parameter><type><name>kind7</name></type></parameter>, <parameter><type><name>name7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5, kind6 name6, kind7 name7</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_9_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>, <parameter><type><name>kind7</name></type></parameter>, <parameter><type><name>name7</name></type></parameter>, <parameter><type><name>kind8</name></type></parameter>, <parameter><type><name>name8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5, kind6 name6, kind7 name7, kind8 name8</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_HAS_10_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>, <parameter><type><name>kind7</name></type></parameter>, <parameter><type><name>name7</name></type></parameter>, <parameter><type><name>kind8</name></type></parameter>, <parameter><type><name>name8</name></type></parameter>, <parameter><type><name>kind9</name></type></parameter>, <parameter><type><name>name9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5, kind6 name6, kind7 name7, kind8 name8, kind9 name9</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_1_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_2_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_3_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_4_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2, name3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_5_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2, name3, name4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_6_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2, name3, name4, name5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_7_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2, name3, name4, name5, name6</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_8_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>, <parameter><type><name>kind7</name></type></parameter>, <parameter><type><name>name7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2, name3, name4, name5, name6, name7</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_9_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>, <parameter><type><name>kind7</name></type></parameter>, <parameter><type><name>name7</name></type></parameter>, <parameter><type><name>kind8</name></type></parameter>, <parameter><type><name>name8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2, name3, name4, name5, name6, name7, name8</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_HAS_10_TEMPLATE_PARAMS</name><parameter_list>(<parameter><type><name>kind0</name></type></parameter>, <parameter><type><name>name0</name></type></parameter>, <parameter><type><name>kind1</name></type></parameter>, <parameter><type><name>name1</name></type></parameter>, <parameter><type><name>kind2</name></type></parameter>, <parameter><type><name>name2</name></type></parameter>, <parameter><type><name>kind3</name></type></parameter>, <parameter><type><name>name3</name></type></parameter>, <parameter><type><name>kind4</name></type></parameter>, <parameter><type><name>name4</name></type></parameter>, <parameter><type><name>kind5</name></type></parameter>, <parameter><type><name>name5</name></type></parameter>, <parameter><type><name>kind6</name></type></parameter>, <parameter><type><name>name6</name></type></parameter>, <parameter><type><name>kind7</name></type></parameter>, <parameter><type><name>name7</name></type></parameter>, <parameter><type><name>kind8</name></type></parameter>, <parameter><type><name>name8</name></type></parameter>, <parameter><type><name>kind9</name></type></parameter>, <parameter><type><name>name9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name0, name1, name2, name3, name4, name5, name6, name7, name8, name9</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_0_VALUE_PARAMS</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_1_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_2_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_3_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_4_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_5_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_6_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_7_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_8_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_9_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_TYPE_AND_10_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type, typename p9##_type</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_0_VALUE_PARAMS</name><parameter_list>()</parameter_list></cpp:macro><cpp:value>()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_1_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0) : p0(::testing::internal::move(gmock_p0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_2_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_3_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_4_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2)), p3(::testing::internal::move(gmock_p3))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_5_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2)), p3(::testing::internal::move(gmock_p3)), p4(::testing::internal::move(gmock_p4))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_6_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2)), p3(::testing::internal::move(gmock_p3)), p4(::testing::internal::move(gmock_p4)), p5(::testing::internal::move(gmock_p5))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_7_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2)), p3(::testing::internal::move(gmock_p3)), p4(::testing::internal::move(gmock_p4)), p5(::testing::internal::move(gmock_p5)), p6(::testing::internal::move(gmock_p6))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_8_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2)), p3(::testing::internal::move(gmock_p3)), p4(::testing::internal::move(gmock_p4)), p5(::testing::internal::move(gmock_p5)), p6(::testing::internal::move(gmock_p6)), p7(::testing::internal::move(gmock_p7))</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_9_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2)), p3(::testing::internal::move(gmock_p3)), p4(::testing::internal::move(gmock_p4)), p5(::testing::internal::move(gmock_p5)), p6(::testing::internal::move(gmock_p6)), p7(::testing::internal::move(gmock_p7)), p8(::testing::internal::move(gmock_p8))</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_INIT_AND_10_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, p9##_type gmock_p9) : p0(::testing::internal::move(gmock_p0)), p1(::testing::internal::move(gmock_p1)), p2(::testing::internal::move(gmock_p2)), p3(::testing::internal::move(gmock_p3)), p4(::testing::internal::move(gmock_p4)), p5(::testing::internal::move(gmock_p5)), p6(::testing::internal::move(gmock_p6)), p7(::testing::internal::move(gmock_p7)), p8(::testing::internal::move(gmock_p8)), p9(::testing::internal::move(gmock_p9))</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_0_VALUE_PARAMS</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_1_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_2_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_3_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_4_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_5_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_6_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; p5##_type p5;</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_7_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; p5##_type p5; p6##_type p6;</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_8_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; p5##_type p5; p6##_type p6; p7##_type p7;</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_9_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; p5##_type p5; p6##_type p6; p7##_type p7; p8##_type p8;</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DEFN_AND_10_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; p5##_type p5; p6##_type p6; p7##_type p7; p8##_type p8; p9##_type p9;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_0_VALUE_PARAMS</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_1_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_2_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_3_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_4_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2, p3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_5_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2, p3, p4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_6_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2, p3, p4, p5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_7_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2, p3, p4, p5, p6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_8_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2, p3, p4, p5, p6, p7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_9_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2, p3, p4, p5, p6, p7, p8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_AND_10_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0, p1, p2, p3, p4, p5, p6, p7, p8, p9</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_0_VALUE_PARAMS</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_1_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_2_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_3_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_4_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type, p3##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_5_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_6_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_7_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_8_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_9_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_LIST_TYPE_AND_10_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_0_VALUE_PARAMS</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_1_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_2_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_3_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_4_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_5_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_6_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_7_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_8_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_9_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_DECL_AND_10_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_0_VALUE_PARAMS</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_1_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_2_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_3_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_4_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_5_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_6_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_7_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_8_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_9_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INTERNAL_COUNT_AND_10_VALUE_PARAMS</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P10</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_ACTION_CLASS_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value_params</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GTEST_CONCAT_TOKEN_(name##Action, GMOCK_INTERNAL_COUNT_##value_params)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_TEMPLATE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>template_params</name></type></parameter>, <parameter><type><name>value_params</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;GMOCK_INTERNAL_DECL_##template_paramsGMOCK_INTERNAL_DECL_TYPE_##value_params&gt;class GMOCK_ACTION_CLASS_(name, value_params) {public:explicit GMOCK_ACTION_CLASS_(name, value_params)GMOCK_INTERNAL_INIT_##value_params {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;explicit gmock_Impl GMOCK_INTERNAL_INIT_##value_params {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;GMOCK_INTERNAL_DEFN_##value_paramsprivate:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(GMOCK_INTERNAL_LIST_##value_params));}GMOCK_INTERNAL_DEFN_##value_paramsprivate:GTEST_DISALLOW_ASSIGN_(GMOCK_ACTION_CLASS_(name, value_params));};template &lt;GMOCK_INTERNAL_DECL_##template_paramsGMOCK_INTERNAL_DECL_TYPE_##value_params&gt;inline GMOCK_ACTION_CLASS_(name, value_params)&lt;GMOCK_INTERNAL_LIST_##template_paramsGMOCK_INTERNAL_LIST_TYPE_##value_params&gt; name(GMOCK_INTERNAL_DECL_##value_params) {return GMOCK_ACTION_CLASS_(name, value_params)&lt;GMOCK_INTERNAL_LIST_##template_paramsGMOCK_INTERNAL_LIST_TYPE_##value_params&gt;(GMOCK_INTERNAL_LIST_##value_params);}template &lt;GMOCK_INTERNAL_DECL_##template_paramsGMOCK_INTERNAL_DECL_TYPE_##value_params&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::ResultGMOCK_ACTION_CLASS_(name, value_params)&lt;GMOCK_INTERNAL_LIST_##template_paramsGMOCK_INTERNAL_LIST_TYPE_##value_params&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>class name##Action {public:name##Action() {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl() {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;());}private:GTEST_DISALLOW_ASSIGN_(name##Action);};inline name##Action name() {return name##Action();}template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##Action::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>












































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type&gt;class name##ActionP {public:explicit name##ActionP(p0##_type gmock_p0) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;explicit gmock_Impl(p0##_type gmock_p0) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0));}p0##_type p0;private:GTEST_DISALLOW_ASSIGN_(name##ActionP);};template &lt;typename p0##_type&gt;inline name##ActionP&lt;p0##_type&gt; name(p0##_type p0) {return name##ActionP&lt;p0##_type&gt;(p0);}template &lt;typename p0##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP&lt;p0##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>



















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type&gt;class name##ActionP2 {public:name##ActionP2(p0##_type gmock_p0, p1##_type gmock_p1) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1));}p0##_type p0;p1##_type p1;private:GTEST_DISALLOW_ASSIGN_(name##ActionP2);};template &lt;typename p0##_type, typename p1##_type&gt;inline name##ActionP2&lt;p0##_type, p1##_type&gt; name(p0##_type p0, p1##_type p1) {return name##ActionP2&lt;p0##_type, p1##_type&gt;(p0, p1);}template &lt;typename p0##_type, typename p1##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP2&lt;p0##_type, p1##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>
























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P3</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type&gt;class name##ActionP3 {public:name##ActionP3(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2));}p0##_type p0;p1##_type p1;p2##_type p2;private:GTEST_DISALLOW_ASSIGN_(name##ActionP3);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type&gt;inline name##ActionP3&lt;p0##_type, p1##_type, p2##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2) {return name##ActionP3&lt;p0##_type, p1##_type, p2##_type&gt;(p0, p1, p2);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP3&lt;p0##_type, p1##_type, p2##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>





























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P4</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type&gt;class name##ActionP4 {public:name##ActionP4(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2, p3));}p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;private:GTEST_DISALLOW_ASSIGN_(name##ActionP4);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type&gt;inline name##ActionP4&lt;p0##_type, p1##_type, p2##_type, p3##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3) {return name##ActionP4&lt;p0##_type, p1##_type, p2##_type, p3##_type&gt;(p0, p1, p2, p3);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP4&lt;p0##_type, p1##_type, p2##_type, p3##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>







































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P5</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type&gt;class name##ActionP5 {public:name##ActionP5(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2, p3, p4));}p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;private:GTEST_DISALLOW_ASSIGN_(name##ActionP5);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type&gt;inline name##ActionP5&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4) {return name##ActionP5&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type&gt;(p0, p1, p2, p3, p4);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP5&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>












































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P6</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type&gt;class name##ActionP6 {public:name##ActionP6(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2, p3, p4, p5));}p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;private:GTEST_DISALLOW_ASSIGN_(name##ActionP6);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type&gt;inline name##ActionP6&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5) {return name##ActionP6&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type&gt;(p0, p1, p2, p3, p4, p5);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP6&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>
















































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P7</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type&gt;class name##ActionP7 {public:name##ActionP7(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2, p3, p4, p5, p6));}p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;private:GTEST_DISALLOW_ASSIGN_(name##ActionP7);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type&gt;inline name##ActionP7&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6) {return name##ActionP7&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type&gt;(p0, p1, p2, p3, p4, p5, p6);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP7&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>


























































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P8</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type&gt;class name##ActionP8 {public:name##ActionP8(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)), p7(::testing::internal::forward&lt;p7##_type&gt;(gmock_p7)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)), p7(::testing::internal::forward&lt;p7##_type&gt;(gmock_p7)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;p7##_type p7;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2, p3, p4, p5, p6, p7));}p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;p7##_type p7;private:GTEST_DISALLOW_ASSIGN_(name##ActionP8);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type&gt;inline name##ActionP8&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7) {return name##ActionP8&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type&gt;(p0, p1, p2, p3, p4, p5, p6, p7);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP8&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>

































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P9</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type&gt;class name##ActionP9 {public:name##ActionP9(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)), p7(::testing::internal::forward&lt;p7##_type&gt;(gmock_p7)), p8(::testing::internal::forward&lt;p8##_type&gt;(gmock_p8)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)), p7(::testing::internal::forward&lt;p7##_type&gt;(gmock_p7)), p8(::testing::internal::forward&lt;p8##_type&gt;(gmock_p8)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;p7##_type p7;p8##_type p8;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2, p3, p4, p5, p6, p7, p8));}p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;p7##_type p7;p8##_type p8;private:GTEST_DISALLOW_ASSIGN_(name##ActionP9);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type&gt;inline name##ActionP9&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8) {return name##ActionP9&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type&gt;(p0, p1, p2, p3, p4, p5, p6, p7, p8);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP9&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>






































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTION_P10</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type, typename p9##_type&gt;class name##ActionP10 {public:name##ActionP10(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, p9##_type gmock_p9) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)), p7(::testing::internal::forward&lt;p7##_type&gt;(gmock_p7)), p8(::testing::internal::forward&lt;p8##_type&gt;(gmock_p8)), p9(::testing::internal::forward&lt;p9##_type&gt;(gmock_p9)) {}template &lt;typename F&gt;class gmock_Impl : public ::testing::ActionInterface&lt;F&gt; {public:typedef F function_type;typedef typename ::testing::internal::Function&lt;F&gt;::Result return_type;typedef typename ::testing::internal::Function&lt;F&gt;::ArgumentTupleargs_type;gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, p9##_type gmock_p9) : p0(::testing::internal::forward&lt;p0##_type&gt;(gmock_p0)), p1(::testing::internal::forward&lt;p1##_type&gt;(gmock_p1)), p2(::testing::internal::forward&lt;p2##_type&gt;(gmock_p2)), p3(::testing::internal::forward&lt;p3##_type&gt;(gmock_p3)), p4(::testing::internal::forward&lt;p4##_type&gt;(gmock_p4)), p5(::testing::internal::forward&lt;p5##_type&gt;(gmock_p5)), p6(::testing::internal::forward&lt;p6##_type&gt;(gmock_p6)), p7(::testing::internal::forward&lt;p7##_type&gt;(gmock_p7)), p8(::testing::internal::forward&lt;p8##_type&gt;(gmock_p8)), p9(::testing::internal::forward&lt;p9##_type&gt;(gmock_p9)) {}virtual return_type Perform(const args_type&amp; args) {return ::testing::internal::ActionHelper&lt;return_type, gmock_Impl&gt;::Perform(this, args);}template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;return_type gmock_PerformImpl(const args_type&amp; args, arg0_type arg0, arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, arg9_type arg9) const;p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;p7##_type p7;p8##_type p8;p9##_type p9;private:GTEST_DISALLOW_ASSIGN_(gmock_Impl);};template &lt;typename F&gt; operator ::testing::Action&lt;F&gt;() const {return ::testing::Action&lt;F&gt;(new gmock_Impl&lt;F&gt;(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9));}p0##_type p0;p1##_type p1;p2##_type p2;p3##_type p3;p4##_type p4;p5##_type p5;p6##_type p6;p7##_type p7;p8##_type p8;p9##_type p9;private:GTEST_DISALLOW_ASSIGN_(name##ActionP10);};template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type, typename p9##_type&gt;inline name##ActionP10&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type&gt; name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9) {return name##ActionP10&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type&gt;(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);}template &lt;typename p0##_type, typename p1##_type, typename p2##_type, typename p3##_type, typename p4##_type, typename p5##_type, typename p6##_type, typename p7##_type, typename p8##_type, typename p9##_type&gt;template &lt;typename F&gt;template &lt;typename arg0_type, typename arg1_type, typename arg2_type, typename arg3_type, typename arg4_type, typename arg5_type, typename arg6_type, typename arg7_type, typename arg8_type, typename arg9_type&gt;typename ::testing::internal::Function&lt;F&gt;::Resultname##ActionP10&lt;p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type&gt;::gmock_Impl&lt;F&gt;::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const</cpp:value></cpp:define>














































































































namespace <macro><name>testing</name></macro> <block>{<block_content>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4100</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>































<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>invoke_argument</name> <block>{<block_content>



<struct>struct <name>AdlTag</name> <block>{}</block>;</struct>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>,
<parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>,
<parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>A8</name></type> <name>a8</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>,
<argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>,
<parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>A8</name></type> <name>a8</name></decl></parameter>, <parameter><decl><type><name>A9</name></type> <name>a9</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>a9</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>,
<argument><expr><name>typename</name> <name>A9</name></expr></argument>, <argument><expr><name>typename</name> <name>A10</name></expr></argument>&gt;</argument_list></name>
<name>R</name></type> <name>InvokeArgumentAdl</name><parameter_list>(<parameter><decl><type><name>AdlTag</name></type></decl></parameter>, <parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>,
<parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>A8</name></type> <name>a8</name></decl></parameter>, <parameter><decl><type><name>A9</name></type> <name>a9</name></decl></parameter>, <parameter><decl><type><name>A10</name></type> <name>a10</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>a9</name></expr></argument>, <argument><expr><name>a10</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_0_VALUE_PARAMS()</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_1_VALUE_PARAMS(p0)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_2_VALUE_PARAMS(p0, p1)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_3_VALUE_PARAMS(p0, p1, p2)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_4_VALUE_PARAMS(p0, p1, p2, p3)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>, <argument><expr><name>p8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>InvokeArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>using</name> <name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><name>InvokeArgumentAdl</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>InvokeArgumentAdl</name><argument_list type="generic">&lt;<argument><expr><name>return_type</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><name>invoke_argument</name><operator>::</operator><call><name>AdlTag</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>, <argument><expr><name>p8</name></expr></argument>, <argument><expr><name>p9</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>






<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_0_VALUE_PARAMS()</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_1_VALUE_PARAMS(p0)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_2_VALUE_PARAMS(p0, p1)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_3_VALUE_PARAMS(p0, p1, p2)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_4_VALUE_PARAMS(p0, p1, p2, p3)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>, <argument><expr><name>p8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnNew</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(typename, T)</argument>,
<argument>AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>, <argument><expr><name>p6</name></expr></argument>, <argument><expr><name>p7</name></expr></argument>, <argument><expr><name>p8</name></expr></argument>, <argument><expr><name>p9</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/internal/custom/gmock-generated-actions.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
