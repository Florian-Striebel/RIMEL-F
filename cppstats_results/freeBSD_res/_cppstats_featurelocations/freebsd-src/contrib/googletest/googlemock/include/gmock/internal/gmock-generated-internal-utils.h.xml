<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h">








































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/internal/gmock-port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Matcher</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>IgnoredValue</name> <block>{<block_content>
<label><name>public</name>:</label>





<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name></type>
<name>IgnoredValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type></decl></parameter> )</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Tuple</name><operator>&gt;</operator>
struct <name>MatcherTuple</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; &gt;</argument_list></name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name></expr><operator>,</operator> <expr><name>typename</name> <name>A4</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name></expr><operator>,</operator> <expr><name>typename</name> <name>A4</name></expr><operator>,</operator> <expr><name>typename</name> <name>A5</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name></expr><operator>,</operator> <expr><name>typename</name> <name>A4</name></expr><operator>,</operator> <expr><name>typename</name> <name>A5</name></expr><operator>,</operator>
<expr><name>typename</name> <name>A6</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name></expr><operator>,</operator> <expr><name>typename</name> <name>A4</name></expr><operator>,</operator> <expr><name>typename</name> <name>A5</name></expr><operator>,</operator>
<expr><name>typename</name> <name>A6</name></expr><operator>,</operator> <expr><name>typename</name> <name>A7</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name></expr><operator>,</operator> <expr><name>typename</name> <name>A4</name></expr><operator>,</operator> <expr><name>typename</name> <name>A5</name></expr><operator>,</operator>
<expr><name>typename</name> <name>A6</name></expr><operator>,</operator> <expr><name>typename</name> <name>A7</name></expr><operator>,</operator> <expr><name>typename</name> <name>A8</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name></expr><operator>,</operator> <expr><name>typename</name> <name>A4</name></expr><operator>,</operator> <expr><name>typename</name> <name>A5</name></expr><operator>,</operator>
<expr><name>typename</name> <name>A6</name></expr><operator>,</operator> <expr><name>typename</name> <name>A7</name></expr><operator>,</operator> <expr><name>typename</name> <name>A8</name></expr><operator>,</operator> <expr><name>typename</name> <name>A9</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>A1</name></expr><operator>,</operator> <expr><name>typename</name> <name>A2</name></expr><operator>,</operator> <expr><name>typename</name> <name>A3</name></expr><operator>,</operator> <expr><name>typename</name> <name>A4</name></expr><operator>,</operator> <expr><name>typename</name> <name>A5</name></expr><operator>,</operator>
<expr><name>typename</name> <name>A6</name></expr><operator>,</operator> <expr><name>typename</name> <name>A7</name></expr><operator>,</operator> <expr><name>typename</name> <name>A8</name></expr><operator>,</operator> <expr><name>typename</name> <name>A9</name></expr><operator>,</operator> <expr><name>typename</name> <name>A10</name><operator>&gt;</operator>
struct <name><name>MatcherTuple</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>,
<argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>














<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>F</name><operator>&gt;</operator>
struct <name>Function</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>R</name><operator>&gt;</operator>
struct <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>R</name></type> <name>Result</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>()</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>()</parameter_list>;</function_decl></typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A1</name></type> <name>Argument1</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A2</name></type> <name>Argument2</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A3</name></type> <name>Argument3</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A4</name></type> <name>Argument4</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A5</name></type> <name>Argument5</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A6</name></type> <name>Argument6</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A7</name></type> <name>Argument7</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A8</name></type> <name>Argument8</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A9</name></type> <name>Argument9</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>, <parameter><decl><type><name>A9</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>,
<parameter><decl><type><name>A9</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>,
<argument><expr><name>typename</name> <name>A10</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name>, <name>A10</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>A10</name></type> <name>Argument10</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>,
<argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>MatcherTuple</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>ArgumentMatcherTuple</name></expr>;</expr_stmt></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>MakeResultVoid</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>, <parameter><decl><type><name>A9</name></type></decl></parameter>, <parameter><decl><type><name>A10</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>IgnoredValue</name></type> <name>MakeResultIgnoredValue</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>,
<parameter><decl><type><name>A9</name></type></decl></parameter>, <parameter><decl><type><name>A10</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
};

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
