<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googlemock/include/gmock/gmock-more-actions.h">



































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/gmock-generated-actions.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FunctionImpl</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>InvokeAction</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>explicit</name></macro> <macro><name>InvokeAction</name><argument_list>(<argument>FunctionImpl function_impl</argument>)</argument_list></macro>
: <macro><name>function_impl_</name><argument_list>(<argument>function_impl</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name>
<name>Result</name></type> <name>Perform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgumentTuple</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Invoke</name><argument_list>(<argument><expr><name>function_impl_</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>FunctionImpl</name></type> <name>function_impl_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_ASSIGN_</name><argument_list>(<argument><expr><name>InvokeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>InvokeMethodAction</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>InvokeMethodAction</name><argument_list>(<argument>Class* obj_ptr</argument>, <argument>MethodPtr method_ptr</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>method_ptr_</name><argument_list>(<argument><expr><name>method_ptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>obj_ptr_</name><argument_list>(<argument>obj_ptr</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Result</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name>
<name>Result</name> <macro><name>Perform</name><argument_list>(<argument>const ArgumentTuple&amp; args</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>InvokeHelper</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ArgumentTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>InvokeMethod</name><argument_list>(
<argument><expr><name>obj_ptr_</name></expr></argument>, <argument><expr><name>method_ptr_</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>



<decl_stmt><decl><type><specifier>const</specifier> <name>MethodPtr</name></type> <name>method_ptr_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Class</name><modifier>*</modifier> <specifier>const</specifier></type> <name>obj_ptr_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GTEST_DISALLOW_ASSIGN_</name><argument_list>(<argument><expr><name>InvokeMethodAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InputIterator</name></expr></argument>, <argument><expr><name>typename</name> <name>OutputIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>OutputIterator</name></type> <name>CopyElements</name><parameter_list>(<parameter><decl><type><name>InputIterator</name></type> <name>first</name></decl></parameter>,
<parameter><decl><type><name>InputIterator</name></type> <name>last</name></decl></parameter>,
<parameter><decl><type><name>OutputIterator</name></type> <name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>first</name> <operator>!=</operator> <name>last</name></expr>;</condition> <incr><expr><operator>++</operator><name>first</name></expr><operator>,</operator> <expr><operator>++</operator><name>output</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <operator>*</operator><name>first</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>





<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FunctionImpl</name></expr></argument>&gt;</argument_list></name>
<name><name>PolymorphicAction</name><argument_list type="generic">&lt;<argument><expr><name>internal</name><operator>::</operator><name><name>InvokeAction</name><argument_list type="generic">&lt;<argument><expr><name>FunctionImpl</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Invoke</name><parameter_list>(
<parameter><decl><type><name>FunctionImpl</name></type> <name>function_impl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>MakePolymorphicAction</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>InvokeAction</name><argument_list type="generic">&lt;<argument><expr><name>FunctionImpl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>function_impl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Class</name></expr></argument>, <argument><expr><name>typename</name> <name>MethodPtr</name></expr></argument>&gt;</argument_list></name>
<name><name>PolymorphicAction</name><argument_list type="generic">&lt;<argument><expr><name>internal</name><operator>::</operator><name><name>InvokeMethodAction</name><argument_list type="generic">&lt;<argument><expr><name>Class</name></expr></argument>, <argument><expr><name>MethodPtr</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Invoke</name><parameter_list>(
<parameter><decl><type><name>Class</name><modifier>*</modifier></type> <name>obj_ptr</name></decl></parameter>, <parameter><decl><type><name>MethodPtr</name></type> <name>method_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>MakePolymorphicAction</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>InvokeMethodAction</name><argument_list type="generic">&lt;<argument><expr><name>Class</name></expr></argument>, <argument><expr><name>MethodPtr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>obj_ptr</name></expr></argument>, <argument><expr><name>method_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithoutArgs</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name> <name>k</name></expr></argument>, <argument><expr><name>typename</name> <name>InnerAction</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>internal</name><operator>::</operator><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k</name></expr></argument>&gt;</argument_list></name>
<macro><name>WithArg</name><argument_list>(<argument>const InnerAction&amp; action</argument>)</argument_list></macro> <block>{
<return>return <expr><name>internal</name><operator>::</operator><call><name><name>WithArgsAction</name><argument_list type="generic">&lt;<argument><expr><name>InnerAction</name></expr></argument>, <argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4100</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>ReturnArg</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_0_VALUE_PARAMS()</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>



<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>SaveArg</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_1_VALUE_PARAMS(pointer)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pointer</name> <operator>=</operator> <operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>



<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>SaveArgPointee</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_1_VALUE_PARAMS(pointer)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pointer</name> <operator>=</operator> <operator>*</operator><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>



<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>SetArgReferee</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_1_VALUE_PARAMS(value)</argument>)</argument_list></macro> <block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <operator>::</operator><name>testing</name><operator>::</operator><name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>, <argument><expr><name>args_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>argk_type</name></expr>;</expr_stmt></typedef>



<expr_stmt><expr><call><name>GTEST_COMPILE_ASSERT_</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><name><name>is_reference</name><argument_list type="generic">&lt;<argument><expr><name>argk_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>SetArgReferee_must_be_used_with_a_reference_argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block>






<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>SetArrayArgument</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_2_VALUE_PARAMS(first, last)</argument>)</argument_list></macro> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>internal</name><operator>::</operator><call><name>CopyElements</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>copy</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>



<macro><name>ACTION_TEMPLATE</name><argument_list>(<argument>DeleteArg</argument>,
<argument>HAS_1_TEMPLATE_PARAMS(int, k)</argument>,
<argument>AND_0_VALUE_PARAMS()</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>delete</name> <operator>::</operator><name>testing</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>k</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>ACTION_P</name><argument_list>(<argument>ReturnPointee</argument>, <argument>pointer</argument>)</argument_list></macro> <block>{<block_content> <return>return <expr><operator>*</operator><name>pointer</name></expr>;</return> </block_content>}</block>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_EXCEPTIONS</name></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4702</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>ACTION_P</name><argument_list>(<argument>Throw</argument>, <argument>exception</argument>)</argument_list></macro> <block>{<block_content> <decl_stmt><decl><type><name>throw</name></type> <name>exception</name></decl>;</decl_stmt> </block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
