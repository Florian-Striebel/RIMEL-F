<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h">

































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/gmock-spec-builders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/internal/gmock-port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>NiceMock</name> <range>: <expr><name>public</name> <name>MockClass</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>NiceMock</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>()</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>







<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>NiceMock</name><argument_list>(<argument><expr><name>A</name><operator>&amp;&amp;</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>std::forward&lt;A&gt;(arg)</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>An</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><name>A1</name><operator>&amp;&amp;</operator> <name>arg1</name></expr></argument>, <argument><expr><name>A2</name><operator>&amp;&amp;</operator> <name>arg2</name></expr></argument>, <argument><expr><name>An</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>std::forward&lt;A1&gt;(arg1)</argument>, <argument>std::forward&lt;A2&gt;(arg2)</argument>,
<argument>std::forward&lt;An&gt;(args)...</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>,
<argument>a6</argument>, <argument>a7</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>,
<argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A9</name><operator>&amp;</operator> <name>a9</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>, <argument>a9</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>, <argument><expr><name>typename</name> <name>A10</name></expr></argument>&gt;</argument_list></name>
<call><name>NiceMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A9</name><operator>&amp;</operator> <name>a9</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A10</name><operator>&amp;</operator> <name>a10</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>, <argument>a9</argument>, <argument>a10</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>AllowUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>~</operator><macro><name>NiceMock</name><argument_list>()</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>UnregisterCallReaction</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>NiceMock</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>NaggyMock</name> <range>: <expr><name>public</name> <name>MockClass</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>NaggyMock</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>()</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>







<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>NaggyMock</name><argument_list>(<argument><expr><name>A</name><operator>&amp;&amp;</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>std::forward&lt;A&gt;(arg)</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>An</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><name>A1</name><operator>&amp;&amp;</operator> <name>arg1</name></expr></argument>, <argument><expr><name>A2</name><operator>&amp;&amp;</operator> <name>arg2</name></expr></argument>, <argument><expr><name>An</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>std::forward&lt;A1&gt;(arg1)</argument>, <argument>std::forward&lt;A2&gt;(arg2)</argument>,
<argument>std::forward&lt;An&gt;(args)...</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>,
<argument>a6</argument>, <argument>a7</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>,
<argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A9</name><operator>&amp;</operator> <name>a9</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>, <argument>a9</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>, <argument><expr><name>typename</name> <name>A10</name></expr></argument>&gt;</argument_list></name>
<call><name>NaggyMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A9</name><operator>&amp;</operator> <name>a9</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A10</name><operator>&amp;</operator> <name>a10</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>, <argument>a9</argument>, <argument>a10</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>WarnUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>~</operator><macro><name>NaggyMock</name><argument_list>()</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>UnregisterCallReaction</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>NaggyMock</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>StrictMock</name> <range>: <expr><name>public</name> <name>MockClass</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StrictMock</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>()</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_LANG_CXX11</name></expr></cpp:if>







<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>StrictMock</name><argument_list>(<argument><expr><name>A</name><operator>&amp;&amp;</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>std::forward&lt;A&gt;(arg)</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>An</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><name>A1</name><operator>&amp;&amp;</operator> <name>arg1</name></expr></argument>, <argument><expr><name>A2</name><operator>&amp;&amp;</operator> <name>arg2</name></expr></argument>, <argument><expr><name>An</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>std::forward&lt;A1&gt;(arg1)</argument>, <argument>std::forward&lt;A2&gt;(arg2)</argument>,
<argument>std::forward&lt;An&gt;(args)...</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>,
<argument>a6</argument>, <argument>a7</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>,
<argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A9</name><operator>&amp;</operator> <name>a9</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>, <argument>a9</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>,
<argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>, <argument><expr><name>typename</name> <name>A10</name></expr></argument>&gt;</argument_list></name>
<call><name>StrictMock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>A1</name><operator>&amp;</operator> <name>a1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A2</name><operator>&amp;</operator> <name>a2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A3</name><operator>&amp;</operator> <name>a3</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A4</name><operator>&amp;</operator> <name>a4</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A5</name><operator>&amp;</operator> <name>a5</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A6</name><operator>&amp;</operator> <name>a6</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A7</name><operator>&amp;</operator> <name>a7</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A8</name><operator>&amp;</operator> <name>a8</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>A9</name><operator>&amp;</operator> <name>a9</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>A10</name><operator>&amp;</operator> <name>a10</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MockClass</name><argument_list>(<argument>a1</argument>, <argument>a2</argument>, <argument>a3</argument>, <argument>a4</argument>, <argument>a5</argument>, <argument>a6</argument>, <argument>a7</argument>, <argument>a8</argument>, <argument>a9</argument>, <argument>a10</argument>)</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>FailUninterestingCalls</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>~</operator><macro><name>StrictMock</name><argument_list>()</argument_list></macro> <block>{
<expr><operator>::</operator><name>testing</name><operator>::</operator><name>Mock</name><operator>::</operator><call><name>UnregisterCallReaction</name><argument_list>(
<argument><expr><name>internal</name><operator>::</operator><call><name><name>ImplicitCast_</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>StrictMock</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>








<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>NiceMock</name><argument_list type="generic">&lt;<argument><expr><name><name>NiceMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>NiceMock</name><argument_list type="generic">&lt;<argument><expr><name><name>NaggyMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>NiceMock</name><argument_list type="generic">&lt;<argument><expr><name><name>StrictMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>NaggyMock</name><argument_list type="generic">&lt;<argument><expr><name><name>NiceMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>NaggyMock</name><argument_list type="generic">&lt;<argument><expr><name><name>NaggyMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>NaggyMock</name><argument_list type="generic">&lt;<argument><expr><name><name>StrictMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>StrictMock</name><argument_list type="generic">&lt;<argument><expr><name><name>NiceMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>StrictMock</name><argument_list type="generic">&lt;<argument><expr><name><name>NaggyMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>StrictMock</name><argument_list type="generic">&lt;<argument><expr><name><name>StrictMock</name><argument_list type="generic">&lt;<argument><expr><name>MockClass</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
