<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h">







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_FUNCTION_MOCKERS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_FUNCTION_MOCKERS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/gmock-spec-builders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/internal/gmock-internal-utils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>FunctionMockerBase</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>FunctionMocker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>()</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>()</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m4</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m5</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m5</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m6</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m5</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m6</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m7</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m5</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m6</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m7</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m8</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>,
<argument><expr><name>m8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>A8</name></type> <name>a8</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>, <parameter><decl><type><name>A9</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m5</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m6</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m7</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m8</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m9</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>,
<argument><expr><name>m8</name></expr></argument>, <argument><expr><name>m9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>A8</name></type> <name>a8</name></decl></parameter>, <parameter><decl><type><name>A9</name></type> <name>a9</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>, <argument><expr><name>typename</name> <name>A4</name></expr></argument>,
<argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>, <argument><expr><name>typename</name> <name>A9</name></expr></argument>,
<argument><expr><name>typename</name> <name>A10</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>FunctionMocker</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name>, <name>A10</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name>
<name>internal</name><operator>::</operator><name><name>FunctionMockerBase</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name>, <name>A10</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <function_decl><type><name>R</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>A1</name></type></decl></parameter>, <parameter><decl><type><name>A2</name></type></decl></parameter>, <parameter><decl><type><name>A3</name></type></decl></parameter>, <parameter><decl><type><name>A4</name></type></decl></parameter>, <parameter><decl><type><name>A5</name></type></decl></parameter>, <parameter><decl><type><name>A6</name></type></decl></parameter>, <parameter><decl><type><name>A7</name></type></decl></parameter>, <parameter><decl><type><name>A8</name></type></decl></parameter>, <parameter><decl><type><name>A9</name></type></decl></parameter>, <parameter><decl><type><name>A10</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>internal</name><operator>::</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ArgumentTuple</name> <name>ArgumentTuple</name></expr>;</expr_stmt></typedef>

<function><type><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name></type> <name>With</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m5</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m6</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m7</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m8</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m9</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m10</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MockSpec</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>::</operator><name>testing</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>,
<argument><expr><name>m8</name></expr></argument>, <argument><expr><name>m9</name></expr></argument>, <argument><expr><name>m10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>R</name></type> <name>Invoke</name><parameter_list>(<parameter><decl><type><name>A1</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>A2</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>A3</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>A4</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>A5</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>A6</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>A7</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>A8</name></type> <name>a8</name></decl></parameter>, <parameter><decl><type><name>A9</name></type> <name>a9</name></decl></parameter>,
<parameter><decl><type><name>A10</name></type> <name>a10</name></decl></parameter>)</parameter_list> <block>{<block_content>




<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>InvokeWith</name></name><argument_list>(<argument><expr><call><name>ArgumentTuple</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A3</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A4</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A5</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A7</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A9</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a9</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>internal</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>A10</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};









































<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockType</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>MockType</name><modifier>*</modifier></type> <name>AdjustConstness_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MockType</name><modifier>*</modifier></type> <name>mock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>mock</name></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MockType</name></expr></argument>&gt;</argument_list></name>
<name>MockType</name><modifier>*</modifier></type> <name>AdjustConstness_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MockType</name><modifier>*</modifier></type> <name>mock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>MockType</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

}






using <expr_stmt><expr><name>internal</name><operator>::</operator><name>FunctionMocker</name></expr>;</expr_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_RESULT_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tn ::testing::internal::Function&lt;__VA_ARGS__&gt;::Result</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_ARG_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>N</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tn ::testing::internal::Function&lt;__VA_ARGS__&gt;::Argument##N</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_MATCHER_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>N</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const ::testing::Matcher&lt;GMOCK_ARG_(tn, N, __VA_ARGS__)&gt;&amp;</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_MOCKER_</name><parameter_list>(<parameter><type><name>arity</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GTEST_CONCAT_TOKEN_(gmock##constness##arity##_##Method##_, __LINE__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD0_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method() constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 0), this_method_does_not_take_0_arguments); GMOCK_MOCKER_(0, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(0, constness, Method).Invoke(); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method() constness { GMOCK_MOCKER_(0, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(0, constness, Method).With(); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(0, constness, Method)</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD1_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 1), this_method_does_not_take_1_argument); GMOCK_MOCKER_(1, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(1, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1) constness { GMOCK_MOCKER_(1, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(1, constness, Method).With(gmock_a1); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(1, constness, Method)</cpp:value></cpp:define>


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD2_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 2), this_method_does_not_take_2_arguments); GMOCK_MOCKER_(2, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(2, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2) constness { GMOCK_MOCKER_(2, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(2, constness, Method).With(gmock_a1, gmock_a2); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(2, constness, Method)</cpp:value></cpp:define>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD3_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 3), this_method_does_not_take_3_arguments); GMOCK_MOCKER_(3, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(3, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3) constness { GMOCK_MOCKER_(3, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(3, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(3, constness, Method)</cpp:value></cpp:define>





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD4_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 4), this_method_does_not_take_4_arguments); GMOCK_MOCKER_(4, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(4, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;( gmock_a4)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4) constness { GMOCK_MOCKER_(4, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(4, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3, gmock_a4); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(4, constness, Method)</cpp:value></cpp:define>










































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD5_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, __VA_ARGS__) gmock_a5) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 5), this_method_does_not_take_5_arguments); GMOCK_MOCKER_(5, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(5, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;( gmock_a4), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;( gmock_a5)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5) constness { GMOCK_MOCKER_(5, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(5, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3, gmock_a4, gmock_a5); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(5, constness, Method)</cpp:value></cpp:define>















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD6_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 6), this_method_does_not_take_6_arguments); GMOCK_MOCKER_(6, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(6, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;( gmock_a4), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;( gmock_a5), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;( gmock_a6)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6) constness { GMOCK_MOCKER_(6, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(6, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3, gmock_a4, gmock_a5, gmock_a6); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(6, constness, Method)</cpp:value></cpp:define>




















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD7_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 7), this_method_does_not_take_7_arguments); GMOCK_MOCKER_(7, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(7, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;( gmock_a4), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;( gmock_a5), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;( gmock_a6), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;( gmock_a7)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7) constness { GMOCK_MOCKER_(7, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(7, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(7, constness, Method)</cpp:value></cpp:define>


























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD8_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_ARG_(tn, 8, __VA_ARGS__) gmock_a8) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 8), this_method_does_not_take_8_arguments); GMOCK_MOCKER_(8, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(8, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;( gmock_a4), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;( gmock_a5), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;( gmock_a6), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;( gmock_a7), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 8, __VA_ARGS__)&gt;( gmock_a8)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_MATCHER_(tn, 8, __VA_ARGS__) gmock_a8) constness { GMOCK_MOCKER_(8, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(8, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7, gmock_a8); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 8, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(8, constness, Method)</cpp:value></cpp:define>































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD9_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_ARG_(tn, 8, __VA_ARGS__) gmock_a8, GMOCK_ARG_(tn, 9, __VA_ARGS__) gmock_a9) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 9), this_method_does_not_take_9_arguments); GMOCK_MOCKER_(9, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(9, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;( gmock_a4), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;( gmock_a5), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;( gmock_a6), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;( gmock_a7), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 8, __VA_ARGS__)&gt;( gmock_a8), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 9, __VA_ARGS__)&gt;( gmock_a9)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_MATCHER_(tn, 8, __VA_ARGS__) gmock_a8, GMOCK_MATCHER_(tn, 9, __VA_ARGS__) gmock_a9) constness { GMOCK_MOCKER_(9, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(9, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7, gmock_a8, gmock_a9); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 8, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 9, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(9, constness, Method)</cpp:value></cpp:define>




































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_METHOD10_</name><parameter_list>(<parameter><type><name>tn</name></type></parameter>, <parameter><type><name>constness</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>Method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_RESULT_(tn, __VA_ARGS__) ct Method(GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_ARG_(tn, 8, __VA_ARGS__) gmock_a8, GMOCK_ARG_(tn, 9, __VA_ARGS__) gmock_a9, GMOCK_ARG_(tn, 10, __VA_ARGS__) gmock_a10) constness { GTEST_COMPILE_ASSERT_( (::testing::tuple_size&lt;tn ::testing::internal::Function&lt; __VA_ARGS__&gt;::ArgumentTuple&gt;::value == 10), this_method_does_not_take_10_arguments); GMOCK_MOCKER_(10, constness, Method).SetOwnerAndName(this, #Method); return GMOCK_MOCKER_(10, constness, Method) .Invoke(::testing::internal::forward&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;( gmock_a1), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;( gmock_a2), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;( gmock_a3), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;( gmock_a4), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;( gmock_a5), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;( gmock_a6), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;( gmock_a7), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 8, __VA_ARGS__)&gt;( gmock_a8), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 9, __VA_ARGS__)&gt;( gmock_a9), ::testing::internal::forward&lt;GMOCK_ARG_(tn, 10, __VA_ARGS__)&gt;( gmock_a10)); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_MATCHER_(tn, 8, __VA_ARGS__) gmock_a8, GMOCK_MATCHER_(tn, 9, __VA_ARGS__) gmock_a9, GMOCK_MATCHER_(tn, 10, __VA_ARGS__) gmock_a10) constness { GMOCK_MOCKER_(10, constness, Method).RegisterOwner(this); return GMOCK_MOCKER_(10, constness, Method) .With(gmock_a1, gmock_a2, gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7, gmock_a8, gmock_a9, gmock_a10); } ::testing::MockSpec&lt;__VA_ARGS__&gt; gmock_##Method( const ::testing::internal::WithoutMatchers&amp;, constness ::testing::internal::Function&lt;__VA_ARGS__&gt;*) const { return ::testing::internal::AdjustConstness_##constness(this) -&gt;gmock_##Method(::testing::A&lt;GMOCK_ARG_(tn, 1, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 2, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 3, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 4, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 5, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 6, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 7, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 8, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 9, __VA_ARGS__)&gt;(), ::testing::A&lt;GMOCK_ARG_(tn, 10, __VA_ARGS__)&gt;()); } mutable ::testing::FunctionMocker&lt;__VA_ARGS__&gt; GMOCK_MOCKER_(10, constness, Method)</cpp:value></cpp:define>








































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD0</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD1</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD2</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD3</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD4</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD5</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD6</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD7</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD8</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD9</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD10</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(, , , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD0</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD1</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD2</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD3</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD4</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD5</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD6</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD7</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD8</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD9</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD10</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD0_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD1_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD2_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD3_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD4_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD5_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD6_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD7_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD8_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD9_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD10_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(typename, , , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD0_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD1_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD2_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD3_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD4_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD5_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD6_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD7_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD8_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD9_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD10_T</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(typename, const, , m, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD0_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD1_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD2_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD3_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD4_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD5_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD6_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD7_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD8_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD9_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD10_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD0_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD1_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD2_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD3_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD4_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD5_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD6_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD7_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD8_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD9_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD10_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD0_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD1_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD2_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD3_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD4_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD5_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD6_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD7_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD8_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD9_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_METHOD10_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(typename, , ct, m, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD0_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD0_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD1_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD1_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD2_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD2_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD3_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD3_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD4_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD4_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD5_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD5_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD6_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD6_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD7_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD7_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD8_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD8_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD9_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD9_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_CONST_METHOD10_T_WITH_CALLTYPE</name><parameter_list>(<parameter><type><name>ct</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GMOCK_METHOD10_(typename, const, ct, m, __VA_ARGS__)</cpp:value></cpp:define>
















































<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>MockFunction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD0_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD1_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD2_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD3_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD4_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>,</operator> <name>A3</name> <name>a3</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD5_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>,</operator> <name>A3</name> <name>a3</name><operator>,</operator> <name>A4</name> <name>a4</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD6_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>,</operator> <name>A3</name> <name>a3</name><operator>,</operator> <name>A4</name> <name>a4</name><operator>,</operator> <name>A5</name> <name>a5</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD7_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>,</operator> <name>A3</name> <name>a3</name><operator>,</operator> <name>A4</name> <name>a4</name><operator>,</operator> <name>A5</name> <name>a5</name><operator>,</operator> <name>A6</name> <name>a6</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD8_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>,</operator> <name>A3</name> <name>a3</name><operator>,</operator> <name>A4</name> <name>a4</name><operator>,</operator> <name>A5</name> <name>a5</name><operator>,</operator> <name>A6</name> <name>a6</name><operator>,</operator> <name>A7</name> <name>a7</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD9_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>,</operator> <name>A3</name> <name>a3</name><operator>,</operator> <name>A4</name> <name>a4</name><operator>,</operator> <name>A5</name> <name>a5</name><operator>,</operator> <name>A6</name> <name>a6</name><operator>,</operator> <name>A7</name> <name>a7</name><operator>,</operator>
<name>A8</name> <name>a8</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>R</name></expr></argument>, <argument><expr><name>typename</name> <name>A0</name></expr></argument>, <argument><expr><name>typename</name> <name>A1</name></expr></argument>, <argument><expr><name>typename</name> <name>A2</name></expr></argument>, <argument><expr><name>typename</name> <name>A3</name></expr></argument>,
<argument><expr><name>typename</name> <name>A4</name></expr></argument>, <argument><expr><name>typename</name> <name>A5</name></expr></argument>, <argument><expr><name>typename</name> <name>A6</name></expr></argument>, <argument><expr><name>typename</name> <name>A7</name></expr></argument>, <argument><expr><name>typename</name> <name>A8</name></expr></argument>,
<argument><expr><name>typename</name> <name>A9</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>MockFunction</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MockFunction</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>MOCK_METHOD10_T</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>A2</name></expr></argument>, <argument><expr><name>A3</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>A6</name></expr></argument>, <argument><expr><name>A7</name></expr></argument>, <argument><expr><name>A8</name></expr></argument>, <argument><expr><name>A9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_STD_FUNCTION_</name></expr></cpp:if>
<expr_stmt><expr><operator>::</operator><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>R</name><operator>(</operator><name>A0</name>, <name>A1</name>, <name>A2</name>, <name>A3</name>, <name>A4</name>, <name>A5</name>, <name>A6</name>, <name>A7</name>, <name>A8</name>, <name>A9</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <macro><name>AsStdFunction</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><name>A0</name> <name>a0</name><operator>,</operator> <name>A1</name> <name>a1</name><operator>,</operator> <name>A2</name> <name>a2</name><operator>,</operator> <name>A3</name> <name>a3</name><operator>,</operator> <name>A4</name> <name>a4</name><operator>,</operator> <name>A5</name> <name>a5</name><operator>,</operator> <name>A6</name> <name>a6</name><operator>,</operator> <name>A7</name> <name>a7</name><operator>,</operator>
<name>A8</name> <name>a8</name><operator>,</operator> <name>A9</name> <name>a9</name><operator>)</operator> <operator>-&gt;</operator> <name>R</name> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Call</name></name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>::</operator><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>a9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>MockFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
