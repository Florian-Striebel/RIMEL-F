<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googlemock/include/gmock/gmock-cardinalities.h">





































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/internal/gmock-port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/gtest.h"</cpp:file></cpp:include>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name><argument_list>(<argument><literal type="number">4251</literal></argument> \
)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>testing</name> <block>{<block_content>












<decl_stmt><decl><type><name>class</name></type> <name>CardinalityInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>CardinalityInterface</name><argument_list>()</argument_list></macro> <block>{}</block>



<name>virtual</name> <name>int</name> <macro><name>ConservativeLowerBound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>int</name> <macro><name>ConservativeUpperBound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>INT_MAX</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>IsSatisfiedByCallCount</name><argument_list>(<argument><expr><name>int</name> <name>call_count</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>IsSaturatedByCallCount</name><argument_list>(<argument><expr><name>int</name> <name>call_count</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DescribeTo</name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name> <name>GTEST_API_</name></type> <name>Cardinality</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>Cardinality</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>


<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Cardinality</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CardinalityInterface</name><operator>*</operator> <name>impl</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>impl_</name><argument_list>(<argument>impl</argument>)</argument_list></macro> <block>{}</block>



<name>int</name> <macro><name>ConservativeLowerBound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>impl_</name><operator>-&gt;</operator><name>ConservativeLowerBound</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>int</name> <macro><name>ConservativeUpperBound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>impl_</name><operator>-&gt;</operator><name>ConservativeUpperBound</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsSatisfiedByCallCount</name><argument_list>(<argument><expr><name>int</name> <name>call_count</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>impl_</name><operator>-&gt;</operator><name>IsSatisfiedByCallCount</name></name><argument_list>(<argument><expr><name>call_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsSaturatedByCallCount</name><argument_list>(<argument><expr><name>int</name> <name>call_count</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>impl_</name><operator>-&gt;</operator><name>IsSaturatedByCallCount</name></name><argument_list>(<argument><expr><name>call_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsOverSaturatedByCallCount</name><argument_list>(<argument><expr><name>int</name> <name>call_count</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>impl_</name><operator>-&gt;</operator><name>IsSaturatedByCallCount</name></name><argument_list>(<argument><expr><name>call_count</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>impl_</name><operator>-&gt;</operator><name>IsSatisfiedByCallCount</name></name><argument_list>(<argument><expr><name>call_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>DescribeTo</name><argument_list>(<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><call><name><name>impl_</name><operator>-&gt;</operator><name>DescribeTo</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>DescribeActualCallCountTo</name><argument_list>(<argument><expr><name>int</name> <name>actual_call_count</name></expr></argument>,
<argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>os</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>linked_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CardinalityInterface</name></expr></argument>&gt;</argument_list></name> <name>impl_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>GTEST_API_</name> <name>Cardinality</name></type> <name>AtLeast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>GTEST_API_</name> <name>Cardinality</name></type> <name>AtMost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>GTEST_API_</name> <name>Cardinality</name></type> <name>AnyNumber</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>GTEST_API_</name> <name>Cardinality</name></type> <name>Between</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>GTEST_API_</name> <name>Cardinality</name></type> <name>Exactly</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>inline</specifier> <name>Cardinality</name></type> <name>MakeCardinality</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CardinalityInterface</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Cardinality</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<macro><name>GTEST_DISABLE_MSC_WARNINGS_POP_</name><argument_list>()</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
