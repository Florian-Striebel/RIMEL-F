<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/googletest/googlemock/test/gmock_link_test.h">

















































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GMOCK_TEST_GMOCK_LINK_TEST_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GMOCK_TEST_GMOCK_LINK_TEST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gmock/gmock.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/gtest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/internal/gtest-port.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>A</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Action</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>AllOf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>AnyOf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Assign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>ContainerEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>DoAll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>DoDefault</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>DoubleEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>ElementsAre</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>ElementsAreArray</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>EndsWith</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Eq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Field</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>FloatEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Ge</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Gt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>HasSubstr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>IgnoreResult</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Invoke</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>InvokeArgument</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>InvokeWithoutArgs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>IsNull</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>IsSubsetOf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>IsSupersetOf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Le</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Lt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Matcher</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>MatcherCast</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>NanSensitiveDoubleEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>NanSensitiveFloatEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Ne</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Not</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>NotNull</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Pointee</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Property</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Ref</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>ResultOf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Return</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>ReturnNull</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>ReturnRef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>SetArgPointee</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>SetArrayArgument</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>StartsWith</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>StrCaseEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>StrCaseNe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>StrEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>StrNe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Truly</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>TypedEq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>WithArg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>WithArgs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>WithoutArgs</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>SetErrnoAndReturn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_EXCEPTIONS</name></expr></cpp:if>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>Throw</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>ContainsRegex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>testing</name><operator>::</operator><name>MatchesRegex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Interface</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>Interface</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>void</name> <call><name>VoidFromString</name><argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>str</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>char</name><modifier>*</modifier></type> <name>StringFromString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>int</name></type> <name>IntFromString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>int</name><modifier>&amp;</modifier></type> <name>IntRefFromString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>VoidFromFunc</name><parameter_list>(<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>VoidFromIntRef</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>n</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>VoidFromFloat</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>n</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>VoidFromDouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>n</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>VoidFromVector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>v</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Mock</name><range>: <expr><name>public</name> <name>Interface</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Mock</name><argument_list>()</argument_list></macro> <block>{}</block>

<call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>VoidFromString</name></expr></argument>, <argument><expr><call><name>void</name><argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>StringFromString</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>IntFromString</name></expr></argument>, <argument><expr><call><name>int</name><argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>IntRefFromString</name></expr></argument>, <argument><expr><name>int</name><operator>&amp;</operator><operator>(</operator><name>char</name><operator>*</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>VoidFromFunc</name></expr></argument>, <argument><expr><call><name>void</name><argument_list>(<argument><expr><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator><name>func</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>VoidFromIntRef</name></expr></argument>, <argument><expr><call><name>void</name><argument_list>(<argument><expr><name>int</name><operator>&amp;</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>VoidFromFloat</name></expr></argument>, <argument><expr><macro><name>void</name><argument_list>(<argument>float n</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>VoidFromDouble</name></expr></argument>, <argument><expr><macro><name>void</name><argument_list>(<argument>double n</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;
<expr><call><name>MOCK_METHOD1</name><argument_list>(<argument><expr><name>VoidFromVector</name></expr></argument>, <argument><expr><call><name>void</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name><argument_list>(<argument><expr><name>Mock</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InvokeHelper</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>void</name></type> <name>StaticVoidFromVoid</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>VoidFromVoid</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>StaticVoidFromString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter> )</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>VoidFromString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter> )</parameter_list> <block>{<block_content/>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>StaticIntFromString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>StaticBoolFromString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FieldHelper</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>FieldHelper</name><argument_list>(<argument>int a_field</argument>)</argument_list></macro> : <macro><name>field_</name><argument_list>(<argument>a_field</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>int</name> <macro><name>field</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>field_</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field_</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestReturnVoid</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestReturn</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>StringFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>StringFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestReturnNull</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestReturnRef</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>IntRefFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>ReturnRef</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>IntRefFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestAssign</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestSetArgPointee</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name><name>SetArgPointee</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestSetArrayArgument</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch2</name> <init>= <expr><literal type="char">'y'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name><name>SetArrayArgument</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch2</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ch2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GTEST_OS_WINDOWS_MOBILE</name></expr></cpp:if>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestSetErrnoAndReturn</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>IntFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>SetErrnoAndReturn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>IntFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestInvoke</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InvokeHelper</name></type> <name>test_invoke_helper</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Invoke</name><argument_list>(<argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>StaticVoidFromString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Invoke</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_invoke_helper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>VoidFromString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestInvokeWithoutArgs</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InvokeHelper</name></type> <name>test_invoke_helper</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>InvokeWithoutArgs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>StaticVoidFromVoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>InvokeWithoutArgs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_invoke_helper</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>VoidFromVoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestInvokeArgument</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFunc</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name><name>InvokeArgument</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromFunc</name></name><argument_list>(<argument><expr><name>InvokeHelper</name><operator>::</operator><name>StaticVoidFromString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestWithArg</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name><name>WithArg</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>Invoke</name><argument_list>(<argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>StaticVoidFromString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestWithArgs</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name><name>WithArgs</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>Invoke</name><argument_list>(<argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>StaticVoidFromString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestWithoutArgs</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>WithoutArgs</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestDoAll</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>DoAll</name><argument_list>(<argument><expr><call><name><name>SetArgPointee</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestDoDefault</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>DoDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestIgnoreResult</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>IgnoreResult</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GTEST_HAS_EXCEPTIONS</name></expr></cpp:if>

<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestThrow</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Throw</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT_THROW</name><argument_list>(<argument><expr><call><name><name>mock</name><operator>.</operator><name>VoidFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4100</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<macro><name>namespace</name></macro> <block>{<block_content>
<macro><name>ACTION</name><argument_list>(<argument>Return1</argument>)</argument_list></macro> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestActionMacro</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>IntFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>Return1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>IntFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>namespace</name></macro> <block>{<block_content>
<macro><name>ACTION_P</name><argument_list>(<argument>ReturnArgument</argument>, <argument>ret_value</argument>)</argument_list></macro> <block>{<block_content> <return>return <expr><name>ret_value</name></expr>;</return> </block_content>}</block>
</block_content>}</block>

<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestActionPMacro</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>IntFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>ReturnArgument</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>IntFromString</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>namespace</name></macro> <block>{<block_content>
<macro><name>ACTION_P2</name><argument_list>(<argument>ReturnEqualsEitherOf</argument>, <argument>first</argument>, <argument>second</argument>)</argument_list></macro> <block>{<block_content>
<return>return <expr><name>arg0</name> <operator>==</operator> <name>first</name> <operator>||</operator> <name>arg0</name> <operator>==</operator> <name>second</name></expr>;</return>
</block_content>}</block>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestActionP2Macro</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>IntFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillOnce</name><argument_list>(<argument><expr><call><name>ReturnEqualsEitherOf</name><argument_list>(<argument><expr><literal type="string">"one"</literal></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>IntFromString</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherAnything</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherA</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name><name>A</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatchersEq</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><literal type="string">"x"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>Eq</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatchersRelations</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFloat</name><argument_list>(<argument><expr><call><name>Lt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFloat</name><argument_list>(<argument><expr><call><name>Gt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFloat</name><argument_list>(<argument><expr><call><name>Le</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFloat</name><argument_list>(<argument><expr><call><name>Ge</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFloat</name><argument_list>(<argument><expr><call><name>Ne</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherNotNull</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>NotNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherIsNull</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>IsNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherRef</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromIntRef</name><argument_list>(<argument><expr><call><name>Ref</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherTypedEq</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromIntRef</name><argument_list>(<argument><expr><call><name><name>TypedEq</name><argument_list type="generic">&lt;<argument><expr><name>int</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>



<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatchersFloatingPoint</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFloat</name><argument_list>(<argument><expr><call><name>FloatEq</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromDouble</name><argument_list>(<argument><expr><call><name>DoubleEq</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromFloat</name><argument_list>(<argument><expr><call><name>NanSensitiveFloatEq</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromDouble</name><argument_list>(<argument><expr><call><name>NanSensitiveDoubleEq</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherContainsRegex</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>ContainsRegex</name><argument_list>(<argument><expr><literal type="string">".*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherMatchesRegex</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>MatchesRegex</name><argument_list>(<argument><expr><literal type="string">".*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatchersSubstrings</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>StartsWith</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>EndsWith</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>HasSubstr</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatchersStringEquality</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>StrEq</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>StrNe</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>StrCaseEq</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromString</name><argument_list>(<argument><expr><call><name>StrCaseNe</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherElementsAre</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromVector</name><argument_list>(<argument><expr><call><name>ElementsAre</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherElementsAreArray</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromVector</name><argument_list>(<argument><expr><call><name>ElementsAreArray</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherIsSubsetOf</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromVector</name><argument_list>(<argument><expr><call><name>IsSubsetOf</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherIsSupersetOf</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromVector</name><argument_list>(<argument><expr><call><name>IsSupersetOf</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherContainerEq</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Mock</name></type> <name>mock</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_CALL</name><argument_list>(<argument><expr><name>mock</name></expr></argument>, <argument><expr><call><name>VoidFromVector</name><argument_list>(<argument><expr><call><name>ContainerEq</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WillByDefault</name><argument_list>(<argument><expr><call><name>Return</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherField</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>FieldHelper</name></type> <name>helper</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldHelper</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>Field</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FieldHelper</name><operator>::</operator><name>field_</name></expr></argument>, <argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldHelper</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>m2</name> <init>= <expr><call><name>Field</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FieldHelper</name><operator>::</operator><name>field_</name></expr></argument>, <argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m2</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherProperty</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>FieldHelper</name></type> <name>helper</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldHelper</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>Property</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FieldHelper</name><operator>::</operator><name>field</name></expr></argument>, <argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldHelper</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>m2</name> <init>= <expr><call><name>Property</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FieldHelper</name><operator>::</operator><name>field</name></expr></argument>, <argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m2</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherResultOf</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>char</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>ResultOf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>StaticIntFromString</name></expr></argument>, <argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherPointee</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>Pointee</name><argument_list>(<argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherTruly</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>Truly</name><argument_list>(<argument><expr><operator>&amp;</operator><name>InvokeHelper</name><operator>::</operator><name>StaticBoolFromString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherAllOf</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>AllOf</name><argument_list>(<argument><expr><name>_</name></expr></argument>, <argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherAnyOf</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>AnyOf</name><argument_list>(<argument><expr><name>_</name></expr></argument>, <argument><expr><call><name>Eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherNot</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name>Not</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_FALSE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>TEST</name><argument_list>(<argument>LinkTest</argument>, <argument>TestMatcherCast</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name><name>MatcherCast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT_TRUE</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>Matches</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
