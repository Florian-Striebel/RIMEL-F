<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/lua/src/lobject.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lobject_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lobject_h</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llimits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_TAG</name></cpp:macro> <cpp:value>LUA_TTHREAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_TAGS</name></cpp:macro> <cpp:value>(LAST_TAG+1)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_TPROTO</name></cpp:macro> <cpp:value>(LAST_TAG+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_TUPVAL</name></cpp:macro> <cpp:value>(LAST_TAG+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_TDEADKEY</name></cpp:macro> <cpp:value>(LAST_TAG+3)</cpp:value></cpp:define>





<typedef>typedef <type><name><name>union</name> <name>GCObject</name></name></type> <name>GCObject</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CommonHeader</name></cpp:macro> <cpp:value>GCObject *next; lu_byte tt; lu_byte marked</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>GCheader</name> <block>{
<expr_stmt><expr><name>CommonHeader</name></expr>;</expr_stmt>
}</block></struct></type> <name>GCheader</name>;</typedef>







<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
}</block></union></type> <name>Value</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TValuefields</name></cpp:macro> <cpp:value>Value value; int tt</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>lua_TValue</name> <block>{
<expr_stmt><expr><name>TValuefields</name></expr>;</expr_stmt>
}</block></struct></type> <name>TValue</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttisnil</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TNIL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttisnumber</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TNUMBER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttisstring</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TSTRING)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttistable</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TTABLE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttisfunction</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TFUNCTION)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttisboolean</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TBOOLEAN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttisuserdata</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TUSERDATA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttisthread</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TTHREAD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttislightuserdata</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TLIGHTUSERDATA)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ttype</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((o)-&gt;tt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(iscollectable(o), (o)-&gt;value.gc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttislightuserdata(o), (o)-&gt;value.p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttisnumber(o), (o)-&gt;value.n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rawtsvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttisstring(o), &amp;(o)-&gt;value.gc-&gt;ts)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;rawtsvalue(o)-&gt;tsv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rawuvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttisuserdata(o), &amp;(o)-&gt;value.gc-&gt;u)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;rawuvalue(o)-&gt;uv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttisfunction(o), &amp;(o)-&gt;value.gc-&gt;cl)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttistable(o), &amp;(o)-&gt;value.gc-&gt;h)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttisboolean(o), (o)-&gt;value.b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>thvalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>check_exp(ttisthread(o), &amp;(o)-&gt;value.gc-&gt;th)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_isfalse</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttisnil(o) || (ttisboolean(o) &amp;&amp; bvalue(o) == 0))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkconsistency</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_assert(!iscollectable(obj) || (ttype(obj) == (obj)-&gt;value.gc-&gt;gch.tt))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkliveness</name><parameter_list>(<parameter><type><name>g</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_assert(!iscollectable(obj) || ((ttype(obj) == (obj)-&gt;value.gc-&gt;gch.tt) &amp;&amp; !isdead(g, (obj)-&gt;value.gc)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setnilvalue</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((obj)-&gt;tt=LUA_TNIL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setnvalue</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.n=(x); i_o-&gt;tt=LUA_TNUMBER; }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setpvalue</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.p=(x); i_o-&gt;tt=LUA_TLIGHTUSERDATA; }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setbvalue</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.b=(x); i_o-&gt;tt=LUA_TBOOLEAN; }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setsvalue</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.gc=cast(GCObject *, (x)); i_o-&gt;tt=LUA_TSTRING; checkliveness(G(L),i_o); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setuvalue</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.gc=cast(GCObject *, (x)); i_o-&gt;tt=LUA_TUSERDATA; checkliveness(G(L),i_o); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setthvalue</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.gc=cast(GCObject *, (x)); i_o-&gt;tt=LUA_TTHREAD; checkliveness(G(L),i_o); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setclvalue</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.gc=cast(GCObject *, (x)); i_o-&gt;tt=LUA_TFUNCTION; checkliveness(G(L),i_o); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sethvalue</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.gc=cast(GCObject *, (x)); i_o-&gt;tt=LUA_TTABLE; checkliveness(G(L),i_o); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setptvalue</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TValue *i_o=(obj); i_o-&gt;value.gc=cast(GCObject *, (x)); i_o-&gt;tt=LUA_TPROTO; checkliveness(G(L),i_o); }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setobj</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>obj1</name></type></parameter>,<parameter><type><name>obj2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const TValue *o2=(obj2); TValue *o1=(obj1); o1-&gt;value = o2-&gt;value; o1-&gt;tt=o2-&gt;tt; checkliveness(G(L),o1); }</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setobjs2s</name></cpp:macro> <cpp:value>setobj</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setobj2s</name></cpp:macro> <cpp:value>setobj</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setsvalue2s</name></cpp:macro> <cpp:value>setsvalue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sethvalue2s</name></cpp:macro> <cpp:value>sethvalue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setptvalue2s</name></cpp:macro> <cpp:value>setptvalue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setobjt2t</name></cpp:macro> <cpp:value>setobj</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setobj2t</name></cpp:macro> <cpp:value>setobj</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setobj2n</name></cpp:macro> <cpp:value>setobj</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setsvalue2n</name></cpp:macro> <cpp:value>setsvalue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setttype</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>tt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(obj) = (tt))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iscollectable</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) &gt;= LUA_TSTRING)</cpp:value></cpp:define>



<typedef>typedef <type><name>TValue</name> <modifier>*</modifier></type><name>StkId</name>;</typedef>





<typedef>typedef <type><union>union <name>TString</name> <block>{
<decl_stmt><decl><type><name>L_Umaxalign</name></type> <name>dummy</name></decl>;</decl_stmt>
<struct>struct <block>{
<expr_stmt><expr><name>CommonHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>reserved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl><name>tsv</name></decl>;</struct>
}</block></union></type> <name>TString</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getstr</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cast(const char *, (ts) + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svalue</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getstr(rawtsvalue(o))</cpp:value></cpp:define>



<typedef>typedef <type><union>union <name>Udata</name> <block>{
<decl_stmt><decl><type><name>L_Umaxalign</name></type> <name>dummy</name></decl>;</decl_stmt>
<struct>struct <block>{
<expr_stmt><expr><name>CommonHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Table</name></name> <modifier>*</modifier></type><name>metatable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Table</name></name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl><name>uv</name></decl>;</struct>
}</block></union></type> <name>Udata</name>;</typedef>







<typedef>typedef <type><struct>struct <name>Proto</name> <block>{
<expr_stmt><expr><name>CommonHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Instruction</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Proto</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lineinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>LocVar</name></name> <modifier>*</modifier></type><name>locvars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TString</name> <modifier>*</modifier><modifier>*</modifier></type><name>upvalues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizeupvalues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizecode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizelineinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizelocvars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linedefined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastlinedefined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>gclist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>nups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>numparams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>is_vararg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>maxstacksize</name></decl>;</decl_stmt>
}</block></struct></type> <name>Proto</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARARG_HASARG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARARG_ISVARARG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARARG_NEEDSARG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>LocVar</name> <block>{
<decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endpc</name></decl>;</decl_stmt>
}</block></struct></type> <name>LocVar</name>;</typedef>







<typedef>typedef <type><struct>struct <name>UpVal</name> <block>{
<expr_stmt><expr><name>CommonHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>TValue</name></type> <name>value</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>UpVal</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>UpVal</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block> <decl><name>l</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>UpVal</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ClosureHeader</name></cpp:macro> <cpp:value>CommonHeader; lu_byte isC; lu_byte nupvalues; GCObject *gclist; struct Table *env</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <name>CClosure</name> <block>{
<expr_stmt><expr><name>ClosureHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lua_CFunction</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TValue</name></type> <name><name>upvalue</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CClosure</name>;</typedef>


<typedef>typedef <type><struct>struct <name>LClosure</name> <block>{
<expr_stmt><expr><name>ClosureHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Proto</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name><name>upvals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>LClosure</name>;</typedef>


<typedef>typedef <type><union>union <name>Closure</name> <block>{
<decl_stmt><decl><type><name>CClosure</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LClosure</name></type> <name>l</name></decl>;</decl_stmt>
}</block></union></type> <name>Closure</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iscfunction</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TFUNCTION &amp;&amp; clvalue(o)-&gt;c.isC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isLfunction</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ttype(o) == LUA_TFUNCTION &amp;&amp; !clvalue(o)-&gt;c.isC)</cpp:value></cpp:define>






<typedef>typedef <type><union>union <name>TKey</name> <block>{
<struct>struct <block>{
<expr_stmt><expr><name>TValuefields</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block> <decl><name>nk</name></decl>;</struct>
<decl_stmt><decl><type><name>TValue</name></type> <name>tvk</name></decl>;</decl_stmt>
}</block></union></type> <name>TKey</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Node</name> <block>{
<decl_stmt><decl><type><name>TValue</name></type> <name>i_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TKey</name></type> <name>i_key</name></decl>;</decl_stmt>
}</block></struct></type> <name>Node</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Table</name> <block>{
<expr_stmt><expr><name>CommonHeader</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lu_byte</name></type> <name>lsizenode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Table</name></name> <modifier>*</modifier></type><name>metatable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>lastfree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>gclist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizearray</name></decl>;</decl_stmt>
}</block></struct></type> <name>Table</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lmod</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(check_exp((size&amp;(size-1))==0, (cast(int, (s) &amp; ((size)-1)))))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>twoto</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1&lt;&lt;(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizenode</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(twoto((t)-&gt;lsizenode))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaO_nilobject</name></cpp:macro> <cpp:value>(&amp;luaO_nilobject_)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>LUAI_DATA</name> <specifier>const</specifier> <name>TValue</name></type> <name>luaO_nilobject_</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ceillog2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaO_log2((x)-1) + 1)</cpp:value></cpp:define>

<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaO_log2</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaO_int2fb</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaO_fb2int</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaO_rawequalObj</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaO_str2d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaO_pushvfstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>argp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaO_pushfstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaO_chunkid</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
