<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/lua/src/lzio.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lzio_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzio_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOZ</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>Zio</name></name></type> <name>ZIO</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>char2int</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cast(int, cast(unsigned char, (c)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zgetc</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((z)-&gt;n--)&gt;0 ? char2int(*(z)-&gt;p++) : luaZ_fill(z))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Mbuffer</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>Mbuffer</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaZ_initbuffer</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>buff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buff)-&gt;buffer = NULL, (buff)-&gt;buffsize = 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaZ_buffer</name><parameter_list>(<parameter><type><name>buff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buff)-&gt;buffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaZ_sizebuffer</name><parameter_list>(<parameter><type><name>buff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buff)-&gt;buffsize)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaZ_bufflen</name><parameter_list>(<parameter><type><name>buff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buff)-&gt;n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaZ_resetbuffer</name><parameter_list>(<parameter><type><name>buff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buff)-&gt;n = 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaZ_resizebuffer</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>buff</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(luaM_reallocvector(L, (buff)-&gt;buffer, (buff)-&gt;buffsize, size, char), (buff)-&gt;buffsize = size)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaZ_freebuffer</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>buff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaZ_resizebuffer(L, buff, 0)</cpp:value></cpp:define>


<function_decl><type><name>LUAI_FUNC</name> <name>char</name> <modifier>*</modifier></type><name>luaZ_openspace</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Mbuffer</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaZ_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>lua_Reader</name></type> <name>reader</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>size_t</name></type> <name>luaZ_read</name> <parameter_list>(<parameter><decl><type><name>ZIO</name><modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaZ_lookahead</name> <parameter_list>(<parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>Zio</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_Reader</name></type> <name>reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaZ_fill</name> <parameter_list>(<parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
