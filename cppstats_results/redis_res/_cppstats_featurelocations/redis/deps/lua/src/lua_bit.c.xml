<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/lua/src/lua_bit.c">



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_BITOP_VERSION</name></cpp:macro> <cpp:value>"1.0.2"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>__int32</name></type> <name>int32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>uint32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int32_t</name></type> <name>SBits</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>UBits</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_DOUBLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>UBits</name></type> <name>b</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></union></type> <name>BitNum</name>;</typedef>


<function><type><specifier>static</specifier> <name>UBits</name></type> <name>barg</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BitNum</name></type> <name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UBits</name></type> <name>b</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">502</literal></expr></cpp:if>
<expr_stmt><expr><name><name>bn</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>bn</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_DOUBLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bn</name><operator>.</operator><name>n</name></name> <operator>+=</operator> <literal type="number">6755399441055744.0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SWAPPED_DOUBLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>UBits</name><operator>)</operator><operator>(</operator><name><name>bn</name><operator>.</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>UBits</name><operator>)</operator><name><name>bn</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_INT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_LONG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_LONGLONG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_LONG_LONG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_LLONG</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>UBits</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lua_Number</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>bn</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>UBits</name><operator>)</operator><operator>(</operator><name>SBits</name><operator>)</operator><name><name>bn</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"A 'float' lua_Number type is incompatible with this library"</cpp:literal></cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unknown number type, check LUA_NUMBER_* in luaconf.h"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">502</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>luaL_typerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRET</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_pushnumber(L, (lua_Number)(SBits)(b)); return 1;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bit_tobit</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content> <macro><name>BRET</name><argument_list>(<argument>barg(L, <literal type="number">1</literal>)</argument>)</argument_list></macro> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bit_bnot</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content> <macro><name>BRET</name><argument_list>(<argument>~barg(L, <literal type="number">1</literal>)</argument>)</argument_list></macro> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_OP</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>opr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int func(lua_State *L) { int i; UBits b = barg(L, 1); for (i = lua_gettop(L); i &gt; 1; i--) b opr barg(L, i); BRET(b) }</cpp:value></cpp:define>


<macro><name>BIT_OP</name><argument_list>(<argument>bit_band</argument>, <argument>&amp;=</argument>)</argument_list></macro>
<macro><name>BIT_OP</name><argument_list>(<argument>bit_bor</argument>, <argument>|=</argument>)</argument_list></macro>
<macro><name>BIT_OP</name><argument_list>(<argument>bit_bxor</argument>, <argument>^=</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bshl</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(b &lt;&lt; n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bshr</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(b &gt;&gt; n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bsar</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((SBits)b &gt;&gt; n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>brol</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b &lt;&lt; n) | (b &gt;&gt; (32-n)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bror</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b &lt;&lt; (32-n)) | (b &gt;&gt; n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_SH</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int func(lua_State *L) { UBits b = barg(L, 1); UBits n = barg(L, 2) &amp; 31; BRET(fn(b, n)) }</cpp:value></cpp:define>


<macro><name>BIT_SH</name><argument_list>(<argument>bit_lshift</argument>, <argument>bshl</argument>)</argument_list></macro>
<macro><name>BIT_SH</name><argument_list>(<argument>bit_rshift</argument>, <argument>bshr</argument>)</argument_list></macro>
<macro><name>BIT_SH</name><argument_list>(<argument>bit_arshift</argument>, <argument>bsar</argument>)</argument_list></macro>
<macro><name>BIT_SH</name><argument_list>(<argument>bit_rol</argument>, <argument>brol</argument>)</argument_list></macro>
<macro><name>BIT_SH</name><argument_list>(<argument>bit_ror</argument>, <argument>bror</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bit_bswap</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UBits</name></type> <name>b</name> <init>= <expr><call><name>barg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<macro><name>BRET</name><argument_list>(<argument>b</argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bit_tohex</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UBits</name></type> <name>b</name> <init>= <expr><call><name>barg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SBits</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><call><name>lua_isnone</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><operator>(</operator><name>SBits</name><operator>)</operator><call><name>barg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hexdigits</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt> <expr_stmt><expr><name>hexdigits</name> <operator>=</operator> <literal type="string">"0123456789ABCDEF"</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>hexdigits</name><index>[<expr><name>b</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></for>
<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>luaL_Reg</name></name></type> <name><name>bit_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"tobit"</literal></expr>, <expr><name>bit_tobit</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bnot"</literal></expr>, <expr><name>bit_bnot</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"band"</literal></expr>, <expr><name>bit_band</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bor"</literal></expr>, <expr><name>bit_bor</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bxor"</literal></expr>, <expr><name>bit_bxor</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lshift"</literal></expr>, <expr><name>bit_lshift</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rshift"</literal></expr>, <expr><name>bit_rshift</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arshift"</literal></expr>, <expr><name>bit_arshift</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rol"</literal></expr>, <expr><name>bit_rol</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ror"</literal></expr>, <expr><name>bit_ror</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bswap"</literal></expr>, <expr><name>bit_bswap</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tohex"</literal></expr>, <expr><name>bit_tohex</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAD_SAR</name></cpp:macro> <cpp:value>(bsar(-8, 2) != (SBits)-2)</cpp:value></cpp:define>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_bit</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UBits</name></type> <name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><literal type="number">1437217655L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>barg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <operator>(</operator><name>UBits</name><operator>)</operator><literal type="number">1437217655L</literal> <operator>||</operator> <name>BAD_SAR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"compiled with incompatible luaconf.h"</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_NUMBER_DOUBLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <operator>(</operator><name>UBits</name><operator>)</operator><literal type="number">1610612736L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"use D3DCREATE_FPU_PRESERVE with DirectX"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <operator>(</operator><name>UBits</name><operator>)</operator><literal type="number">1127743488L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"not compiled with SWAPPED_DOUBLE"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>BAD_SAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"arithmetic right-shift broken"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"bit library self-test failed (%s)"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">502</literal></expr></cpp:if>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"bit"</literal></expr></argument>, <argument><expr><name>bit_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>luaL_newlib</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>bit_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
