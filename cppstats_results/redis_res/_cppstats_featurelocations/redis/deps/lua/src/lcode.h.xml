<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/lua/src/lcode.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lcode_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcode_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lparser.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_JUMP</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>





<typedef>typedef <type><enum>enum <name>BinOpr</name> <block>{
<decl><name>OPR_ADD</name></decl>, <decl><name>OPR_SUB</name></decl>, <decl><name>OPR_MUL</name></decl>, <decl><name>OPR_DIV</name></decl>, <decl><name>OPR_MOD</name></decl>, <decl><name>OPR_POW</name></decl>,
<decl><name>OPR_CONCAT</name></decl>,
<decl><name>OPR_NE</name></decl>, <decl><name>OPR_EQ</name></decl>,
<decl><name>OPR_LT</name></decl>, <decl><name>OPR_LE</name></decl>, <decl><name>OPR_GT</name></decl>, <decl><name>OPR_GE</name></decl>,
<decl><name>OPR_AND</name></decl>, <decl><name>OPR_OR</name></decl>,
<decl><name>OPR_NOBINOPR</name></decl>
}</block></enum></type> <name>BinOpr</name>;</typedef>


<typedef>typedef <type><enum>enum <name>UnOpr</name> <block>{ <decl><name>OPR_MINUS</name></decl>, <decl><name>OPR_NOT</name></decl>, <decl><name>OPR_LEN</name></decl>, <decl><name>OPR_NOUNOPR</name></decl> }</block></enum></type> <name>UnOpr</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getcode</name><parameter_list>(<parameter><type><name>fs</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fs)-&gt;f-&gt;code[(e)-&gt;u.s.info])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaK_codeAsBx</name><parameter_list>(<parameter><type><name>fs</name></type></parameter>,<parameter><type><name>o</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>sBx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaK_codeABx(fs,o,A,(sBx)+MAXARG_sBx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaK_setmultret</name><parameter_list>(<parameter><type><name>fs</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>luaK_setreturns(fs, e, LUA_MULTRET)</cpp:value></cpp:define>

<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_codeABx</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>OpCode</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>Bx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_codeABC</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>OpCode</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_fixline</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_nil</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_reserveregs</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_checkstack</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_stringK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_numberK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_dischargevars</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_exp2anyreg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_exp2nextreg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_exp2val</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_exp2RK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_self</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_indexed</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_goiftrue</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_storevar</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_setreturns</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nresults</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_setoneret</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_jump</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_ret</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nret</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_patchlist</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_patchtohere</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_concat</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>l1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>int</name></type> <name>luaK_getlabel</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_prefix</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>UnOpr</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_infix</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>BinOpr</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_posfix</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>BinOpr</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUAI_FUNC</name> <name>void</name></type> <name>luaK_setlist</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nelems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tostore</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
