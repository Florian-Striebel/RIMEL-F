<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/test/include/test/SFMT-alti.h">


















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SFMT_ALTI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFMT_ALTI_H</name></cpp:macro></cpp:define>









<function><type><name>JEMALLOC_ALWAYS_INLINE</name>
<name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_recursion</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sl1</name> <init>= <expr><name>ALTI_SL1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sr1</name> <init>= <expr><name>ALTI_SR1</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><name>ALTI_MSK64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm_sl</name> <init>= <expr><name>ALTI_SL2_PERM64</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm_sr</name> <init>= <expr><name>ALTI_SR2_PERM64</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><name>ALTI_MSK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm_sl</name> <init>= <expr><name>ALTI_SL2_PERM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm_sr</name> <init>= <expr><name>ALTI_SR2_PERM</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>perm_sl</name></expr></argument>, <argument><expr><name>perm_sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>sr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>perm_sr</name></expr></argument>, <argument><expr><name>perm_sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>sl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>vec_and</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_all</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <name>POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_recursion</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_recursion</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_array</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <name>POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_recursion</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_recursion</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_recursion</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>N</name> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_recursion</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALTI_SWAP</name></cpp:macro> <cpp:value>(vector unsigned char) (4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALTI_SWAP</name></cpp:macro> <cpp:value>{4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm</name> <init>= <expr><name>ALTI_SWAP</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>perm</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
