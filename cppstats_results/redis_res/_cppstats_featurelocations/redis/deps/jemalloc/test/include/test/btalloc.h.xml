<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/test/include/test/btalloc.h">
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>btalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>btalloc_n_proto</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void *btalloc_##n(size_t size, unsigned bits);</cpp:value></cpp:define>

<macro><name>btalloc_n_proto</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>btalloc_n_proto</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>btalloc_n_gen</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void * btalloc_##n(size_t size, unsigned bits) { void *p; if (bits == 0) { p = mallocx(size, 0); } else { switch (bits &amp; 0x1U) { case 0: p = (btalloc_0(size, bits &gt;&gt; 1)); break; case 1: p = (btalloc_1(size, bits &gt;&gt; 1)); break; default: not_reached(); } } assert_ptr_not_null(p, "Unexpected mallocx() failure"); return p; }</cpp:value></cpp:define>





















</unit>
