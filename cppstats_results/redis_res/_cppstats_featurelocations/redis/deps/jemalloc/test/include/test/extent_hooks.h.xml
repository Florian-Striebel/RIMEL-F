<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/test/include/test/extent_hooks.h">




<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>extent_alloc_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>extent_dalloc_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_destroy_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>extent_commit_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>extent_decommit_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>extent_purge_lazy_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>extent_purge_forced_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>extent_split_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>extent_merge_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr_a</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr_b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>extent_hooks_t</name> <modifier>*</modifier></type><name>default_hooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>extent_hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{
<expr><name>extent_alloc_hook</name></expr>,
<expr><name>extent_dalloc_hook</name></expr>,
<expr><name>extent_destroy_hook</name></expr>,
<expr><name>extent_commit_hook</name></expr>,
<expr><name>extent_decommit_hook</name></expr>,
<expr><name>extent_purge_lazy_hook</name></expr>,
<expr><name>extent_purge_forced_hook</name></expr>,
<expr><name>extent_split_hook</name></expr>,
<expr><name>extent_merge_hook</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_alloc</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_dalloc</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_destroy</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_commit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_decommit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_purge_lazy</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_purge_forced</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_split</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>try_merge</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_dalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_commit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_decommit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_purge_lazy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_purge_forced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_split</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>called_merge</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_dalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_commit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_decommit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_purge_lazy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_purge_forced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_split</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_merge</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_HOOK</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc_printf(fmt, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_HOOK</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_alloc_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, new_addr=%p, size=%zu, alignment=%zu, "</literal>
<literal type="string">"*zero=%s, *commit=%s, arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>,
<argument><expr><name>new_addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>zero</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>commit</name></expr> ?</condition><then>
<expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name>extent_alloc_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_alloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_alloc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>default_hooks</name><operator>-&gt;</operator><name>alloc</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>new_addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>,
<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_alloc</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_dalloc_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, committed=%s, "</literal>
<literal type="string">"arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><ternary><condition><expr><name>committed</name></expr> ?</condition><then>
<expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>dalloc</name></name></expr></argument>, <argument><expr><name>extent_dalloc_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_dalloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_dalloc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>default_hooks</name><operator>-&gt;</operator><name>dalloc</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>committed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_dalloc</name> <operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extent_destroy_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, committed=%s, "</literal>
<literal type="string">"arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><ternary><condition><expr><name>committed</name></expr> ?</condition><then>
<expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>destroy</name></name></expr></argument>, <argument><expr><name>extent_destroy_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_destroy</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>default_hooks</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>committed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_commit_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, offset=%zu, "</literal>
<literal type="string">"length=%zu, arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><name>extent_commit_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_commit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_commit</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>default_hooks</name><operator>-&gt;</operator><name>commit</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_commit</name> <operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_decommit_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, offset=%zu, "</literal>
<literal type="string">"length=%zu, arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>decommit</name></name></expr></argument>, <argument><expr><name>extent_decommit_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_decommit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_decommit</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>default_hooks</name><operator>-&gt;</operator><name>decommit</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_decommit</name> <operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_purge_lazy_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, offset=%zu, "</literal>
<literal type="string">"length=%zu arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name></expr></argument>, <argument><expr><name>extent_purge_lazy_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_purge_lazy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_purge_lazy</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>default_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name><name>default_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_purge_lazy</name> <operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_purge_forced_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, offset=%zu, "</literal>
<literal type="string">"length=%zu arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name></expr></argument>, <argument><expr><name>extent_purge_forced_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_purge_forced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_purge_forced</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>default_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name><name>default_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_purge_forced</name> <operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_split_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size_a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, size_a=%zu, "</literal>
<literal type="string">"size_b=%zu, committed=%s, arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>,
<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size_a</name></expr></argument>, <argument><expr><name>size_b</name></expr></argument>, <argument><expr><ternary><condition><expr><name>committed</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>split</name></name></expr></argument>, <argument><expr><name>extent_split_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_split</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_split</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name><name>default_hooks</name><operator>-&gt;</operator><name>split</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name><name>default_hooks</name><operator>-&gt;</operator><name>split</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size_a</name></expr></argument>, <argument><expr><name>size_b</name></expr></argument>,
<argument><expr><name>committed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>did_split</name> <operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_merge_hook</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr_a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_a</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr_b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr_a=%p, size_a=%zu, addr_b=%p "</literal>
<literal type="string">"size_b=%zu, committed=%s, arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>,
<argument><expr><name>addr_a</name></expr></argument>, <argument><expr><name>size_a</name></expr></argument>, <argument><expr><name>addr_b</name></expr></argument>, <argument><expr><name>size_b</name></expr></argument>, <argument><expr><ternary><condition><expr><name>committed</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
<argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>merge</name></name></expr></argument>, <argument><expr><name>extent_merge_hook</name></expr></argument>,
<argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr_a</name> <operator>+</operator> <name>size_a</name><operator>)</operator></expr></argument>, <argument><expr><name>addr_b</name></expr></argument>,
<argument><expr><literal type="string">"Extents not mergeable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>called_merge</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_merge</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name><name>default_hooks</name><operator>-&gt;</operator><name>merge</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name><name>default_hooks</name><operator>-&gt;</operator><name>merge</name></name><argument_list>(<argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><name>addr_a</name></expr></argument>, <argument><expr><name>size_a</name></expr></argument>, <argument><expr><name>addr_b</name></expr></argument>, <argument><expr><name>size_b</name></expr></argument>,
<argument><expr><name>committed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>did_merge</name> <operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extent_hooks_prep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>default_hooks</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arena.0.extent_hooks"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>default_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
