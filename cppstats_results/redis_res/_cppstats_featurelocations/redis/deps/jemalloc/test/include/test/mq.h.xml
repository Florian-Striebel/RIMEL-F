<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/test/include/test/mq.h"><function_decl><type><name>void</name></type> <name>mq_nanosleep</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ns</name></decl></parameter>)</parameter_list>;</function_decl>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mq_msg</name><parameter_list>(<parameter><type><name>a_mq_msg_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ql_elm(a_mq_msg_type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mq_gen</name><parameter_list>(<parameter><type><name>a_attr</name></type></parameter>, <parameter><type><name>a_prefix</name></type></parameter>, <parameter><type><name>a_mq_type</name></type></parameter>, <parameter><type><name>a_mq_msg_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { mtx_t lock; ql_head(a_mq_msg_type) msgs; unsigned count; } a_mq_type; a_attr bool a_prefix##init(a_mq_type *mq) { if (mtx_init(&amp;mq-&gt;lock)) { return true; } ql_new(&amp;mq-&gt;msgs); mq-&gt;count = 0; return false; } a_attr void a_prefix##fini(a_mq_type *mq) { mtx_fini(&amp;mq-&gt;lock); } a_attr unsigned a_prefix##count(a_mq_type *mq) { unsigned count; mtx_lock(&amp;mq-&gt;lock); count = mq-&gt;count; mtx_unlock(&amp;mq-&gt;lock); return count; } a_attr a_mq_msg_type * a_prefix##tryget(a_mq_type *mq) { a_mq_msg_type *msg; mtx_lock(&amp;mq-&gt;lock); msg = ql_first(&amp;mq-&gt;msgs); if (msg != NULL) { ql_head_remove(&amp;mq-&gt;msgs, a_mq_msg_type, a_field); mq-&gt;count--; } mtx_unlock(&amp;mq-&gt;lock); return msg; } a_attr a_mq_msg_type * a_prefix##get(a_mq_type *mq) { a_mq_msg_type *msg; unsigned ns; msg = a_prefix##tryget(mq); if (msg != NULL) { return msg; } ns = 1; while (true) { mq_nanosleep(ns); msg = a_prefix##tryget(mq); if (msg != NULL) { return msg; } if (ns &lt; 1000*1000*1000) { ns &lt;&lt;= 1; if (ns &gt; 1000*1000*1000) { ns = 1000*1000*1000; } } } } a_attr void a_prefix##put(a_mq_type *mq, a_mq_msg_type *msg) { mtx_lock(&amp;mq-&gt;lock); ql_elm_new(msg, a_field); ql_tail_insert(&amp;mq-&gt;msgs, msg, a_field); mq-&gt;count++; mtx_unlock(&amp;mq-&gt;lock); }</cpp:value></cpp:define>












































































</unit>
