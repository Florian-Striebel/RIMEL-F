<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/test/src/SFMT.c">














































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFMT_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/SFMT-params.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_BIG_ENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_ENDIAN64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BIG_ENDIAN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__amd64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_ENDIAN64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_ENDIAN64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"-DONLY64 must be specified with -DBIG_ENDIAN64"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONLY64</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<union>union <name>W128_T</name> <block>{
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>

<typedef>typedef <type><name><name>union</name> <name>W128_T</name></name></type> <name>w128_t</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<union>union <name>W128_T</name> <block>{
<decl_stmt><decl><type><name>__m128i</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>

<typedef>typedef <type><name><name>union</name> <name>W128_T</name></name></type> <name>w128_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<struct>struct <name>W128_T</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>u</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>W128_T</name></name></type> <name>w128_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>sfmt_s</name> <block>{

<decl_stmt><decl><type><name>w128_t</name></type> <name><name>sfmt</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
}</block>;</struct>







<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>parity</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>PARITY1</name></expr>, <expr><name>PARITY2</name></expr>, <expr><name>PARITY3</name></expr>, <expr><name>PARITY4</name></expr>}</block></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>idxof</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rshift128</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lshift128</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_all</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_array</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>func1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>func2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>period_certification</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/SFMT-alti.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/SFMT-sse2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>idxof</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>idxof</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rshift128</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>th</name></decl>, <decl><type ref="prev"/><name>tl</name></decl>, <decl><type ref="prev"/><name>oh</name></decl>, <decl><type ref="prev"/><name>ol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>oh</name> <operator>=</operator> <name>th</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ol</name> <operator>=</operator> <name>tl</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ol</name> <operator>|=</operator> <name>th</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>ol</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>oh</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>oh</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rshift128</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>th</name></decl>, <decl><type ref="prev"/><name>tl</name></decl>, <decl><type ref="prev"/><name>oh</name></decl>, <decl><type ref="prev"/><name>ol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>oh</name> <operator>=</operator> <name>th</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ol</name> <operator>=</operator> <name>tl</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ol</name> <operator>|=</operator> <name>th</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>ol</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>oh</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>oh</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lshift128</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>th</name></decl>, <decl><type ref="prev"/><name>tl</name></decl>, <decl><type ref="prev"/><name>oh</name></decl>, <decl><type ref="prev"/><name>ol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>oh</name> <operator>=</operator> <name>th</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ol</name> <operator>=</operator> <name>tl</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>oh</name> <operator>|=</operator> <name>tl</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>ol</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>oh</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>oh</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lshift128</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>th</name></decl>, <decl><type ref="prev"/><name>tl</name></decl>, <decl><type ref="prev"/><name>oh</name></decl>, <decl><type ref="prev"/><name>ol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>oh</name> <operator>=</operator> <name>th</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ol</name> <operator>=</operator> <name>tl</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>oh</name> <operator>|=</operator> <name>tl</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>shift</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>ol</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>oh</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>oh</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>do_recursion</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>w128_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>w128_t</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lshift128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>SL2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rshift128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>SR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK2</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK1</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK4</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK3</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>do_recursion</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>w128_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>w128_t</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lshift128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>SL2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rshift128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>SR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK1</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK2</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK3</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>x</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>SR1</name><operator>)</operator> <operator>&amp;</operator> <name>MSK4</name><operator>)</operator> <operator>^</operator> <name><name>y</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>SL1</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_all</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>r1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <name>POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name></expr>]</index></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>,
<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>,
<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gen_rand_array</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>r1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <name>POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name></expr>]</index></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>N</name> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>N</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>POS1</name> <operator>-</operator> <name>N</name></expr>]</index></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>func1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1664525UL</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>func2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1566083941UL</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>period_certification</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>work</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>psfmt32</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>inner</name> <operator>^=</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <name><name>parity</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>inner</name> <operator>^=</operator> <name>inner</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>inner</name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inner</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>work</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>work</name> <operator>&amp;</operator> <name><name>parity</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^=</operator> <name>work</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>work</name> <operator>=</operator> <name>work</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_idstring</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>IDSTR</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>get_min_array_size32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>N32</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>get_min_array_size64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>N64</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>uint32_t</name></type> <name>gen_rand32</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>psfmt32</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <name>N32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gen_rand_all</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>psfmt32</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint32_t</name></type> <name>gen_rand32_range</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>above</name></decl>;</decl_stmt>

<expr_stmt><expr><name>above</name> <operator>=</operator> <literal type="number">0xffffffffU</literal> <operator>-</operator> <operator>(</operator><literal type="number">0xffffffffU</literal> <operator>%</operator> <name>limit</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gen_rand32</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>above</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>limit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>uint64_t</name></type> <name>gen_rand64</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>psfmt32</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>psfmt64</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <name>N32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gen_rand_all</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>psfmt32</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>psfmt32</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>r2</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>r1</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>psfmt64</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>gen_rand64_range</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>above</name></decl>;</decl_stmt>

<expr_stmt><expr><name>above</name> <operator>=</operator> <call><name>KQU</name><argument_list>(<argument><expr><literal type="number">0xffffffffffffffff</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><call><name>KQU</name><argument_list>(<argument><expr><literal type="number">0xffffffffffffffff</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>limit</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gen_rand64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>above</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>limit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>

























<function><type><name>void</name></type> <name>fill_array32</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_rand_array</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>w128_t</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>N32</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


























<function><type><name>void</name></type> <name>fill_array64</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>N64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_rand_array</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>w128_t</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>N32</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLY64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>(</operator><name>w128_t</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>sfmt_t</name> <modifier>*</modifier></type><name>init_gen_rand</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>psfmt32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>posix_memalign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w128_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sfmt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>sfmt_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psfmt32</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N32</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1812433253UL</literal> <operator>*</operator> <operator>(</operator><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>^</operator> <operator>(</operator><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator>
<operator>+</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>N32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>period_certification</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>sfmt_t</name> <modifier>*</modifier></type><name>init_by_array</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>init_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>N</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>psfmt32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>posix_memalign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w128_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sfmt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>sfmt_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psfmt32</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">623</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">68</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">39</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>lag</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name></name></expr></argument>, <argument><expr><literal type="number">0x8b</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sfmt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key_length</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>N32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>key_length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>N32</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>func1</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>N32</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>key_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>mid</name> <operator>+</operator> <name>lag</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>count</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name>key_length</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>func1</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>N32</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>init_key</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name> <operator>+</operator> <name>lag</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>N32</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>func1</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>N32</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name> <operator>+</operator> <name>lag</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>N32</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N32</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>func2</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name>
<operator>+</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>N32</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name> <operator>+</operator> <name>lag</name><operator>)</operator> <operator>%</operator> <name>N32</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>N32</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>N32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>period_certification</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fini_gen_rand</name><parameter_list>(<parameter><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
