<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/src/zone.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This source file is for zones on Darwin (OS X)."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<typedef>typedef <type><struct>struct <name>_malloc_zone_t</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved2</name></decl>;</decl_stmt>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>size</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>malloc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>calloc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>valloc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>realloc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zone_name</name></decl>;</decl_stmt>
<function_decl><type><name>unsigned</name></type> (<modifier>*</modifier><name>batch_malloc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>batch_free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>malloc_introspection_t</name></name> <modifier>*</modifier></type><name>introspect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>version</name></decl>;</decl_stmt>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>memalign</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_definite_size</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>pressure_relief</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>malloc_zone_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>vm_address_t</name></type> <name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>vm_range_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>malloc_statistics_t</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>blocks_in_use</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size_in_use</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_size_in_use</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size_allocated</name></decl>;</decl_stmt>
}</block></struct></type> <name>malloc_statistics_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>kern_return_t</name></type> <name>memory_reader_t</name><parameter_list>(<parameter><decl><type><name>task_t</name></type></decl></parameter>, <parameter><decl><type><name>vm_address_t</name></type></decl></parameter>, <parameter><decl><type><name>vm_size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>vm_range_recorder_t</name><parameter_list>(<parameter><decl><type><name>task_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>vm_range_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>malloc_introspection_t</name> <block>{
<function_decl><type><name>kern_return_t</name></type> (<modifier>*</modifier><name>enumerator</name>)<parameter_list>(<parameter><decl><type><name>task_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>vm_address_t</name></type></decl></parameter>, <parameter><decl><type><name>memory_reader_t</name></type></decl></parameter>, <parameter><decl><type><name>vm_range_recorder_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>good_size</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>boolean_t</name></type> (<modifier>*</modifier><name>check</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>boolean_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>log</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>force_lock</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>force_unlock</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>statistics</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>malloc_statistics_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>boolean_t</name></type> (<modifier>*</modifier><name>zone_locked</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>boolean_t</name></type> (<modifier>*</modifier><name>enable_discharge_checking</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>boolean_t</name></type> (<modifier>*</modifier><name>disable_discharge_checking</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>discharge</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BLOCKS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>enumerate_discharged_pointers</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>^</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>enumerate_unavailable_without_blocks</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>reinit_lock</name>)<parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>malloc_introspection_t</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>kern_return_t</name></type> <name>malloc_get_all_zones</name><parameter_list>(<parameter><decl><type><name>task_t</name></type></decl></parameter>, <parameter><decl><type><name>memory_reader_t</name></type></decl></parameter>, <parameter><decl><type><name>vm_address_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>malloc_zone_t</name> <modifier>*</modifier></type><name>malloc_default_zone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>malloc_zone_register</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>malloc_zone_unregister</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>extern</specifier> <name>malloc_zone_t</name> <modifier>*</modifier></type><name>malloc_default_purgeable_zone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
JEMALLOC_ATTR<parameter_list>(<parameter><decl><type><name>weak_import</name></type></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>malloc_zone_t</name> <modifier>*</modifier></type><name>default_zone</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>purgeable_zone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>malloc_zone_t</name></type> <name>jemalloc_zone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>malloc_introspection_t</name></name></type> <name>jemalloc_zone_introspect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>zone_force_lock_pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>zone_size</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>zone_malloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>zone_calloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>zone_valloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_free</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>zone_realloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>zone_memalign</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_free_definite_size</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_destroy</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>zone_batch_malloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>results</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_requested</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_batch_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>to_be_freed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_to_be_freed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>zone_pressure_relief</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>goal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>zone_good_size</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>kern_return_t</name></type> <name>zone_enumerator</name><parameter_list>(<parameter><decl><type><name>task_t</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>type_mask</name></decl></parameter>,
<parameter><decl><type><name>vm_address_t</name></type> <name>zone_address</name></decl></parameter>, <parameter><decl><type><name>memory_reader_t</name></type> <name>reader</name></decl></parameter>,
<parameter><decl><type><name>vm_range_recorder_t</name></type> <name>recorder</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>boolean_t</name></type> <name>zone_check</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_print</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>boolean_t</name></type> <name>verbose</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_log</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_force_lock</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_force_unlock</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_statistics</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>,
<parameter><decl><type><name>malloc_statistics_t</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>boolean_t</name></type> <name>zone_locked</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zone_reinit_lock</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>zone_size</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>









<return>return <expr><call><name>ivsalloc</name><argument_list>(<argument><expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>zone_malloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>je_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>zone_calloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>je_calloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>zone_valloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>je_posix_memalign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>PAGE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_free</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ivsalloc</name><argument_list>(<argument><expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>je_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>zone_realloc</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ivsalloc</name><argument_list>(<argument><expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>je_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>zone_memalign</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>je_posix_memalign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_free_definite_size</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alloc_size</name> <operator>=</operator> <call><name>ivsalloc</name><argument_list>(<argument><expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alloc_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>alloc_size</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>je_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_destroy</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>zone_batch_malloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>results</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num_requested</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_requested</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>je_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_batch_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>to_be_freed</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num_to_be_freed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_to_be_freed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zone_free</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>to_be_freed</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to_be_freed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>zone_pressure_relief</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_malloc_zone_t</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>goal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>zone_good_size</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>kern_return_t</name></type>
<name>zone_enumerator</name><parameter_list>(<parameter><decl><type><name>task_t</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>type_mask</name></decl></parameter>,
<parameter><decl><type><name>vm_address_t</name></type> <name>zone_address</name></decl></parameter>, <parameter><decl><type><name>memory_reader_t</name></type> <name>reader</name></decl></parameter>,
<parameter><decl><type><name>vm_range_recorder_t</name></type> <name>recorder</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>KERN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>boolean_t</name></type>
<name>zone_check</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_print</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>boolean_t</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_log</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_force_lock</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isthreaded</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>zone_force_lock_pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zone_force_lock_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jemalloc_prefork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_force_unlock</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list> <block>{<block_content>












<if_stmt><if>if <condition>(<expr><name>isthreaded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>zone_force_lock_pid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpid</name><argument_list>()</argument_list></call> <operator>==</operator> <name>zone_force_lock_pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jemalloc_postfork_parent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>jemalloc_postfork_child</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>zone_force_lock_pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_statistics</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>malloc_statistics_t</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>blocks_in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>size_in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>max_size_in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>size_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>boolean_t</name></type>
<name>zone_locked</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_reinit_lock</name><parameter_list>(<parameter><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>zone_force_unlock</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>zone_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>malloc</name></name> <operator>=</operator> <name>zone_malloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>calloc</name></name> <operator>=</operator> <name>zone_calloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>valloc</name></name> <operator>=</operator> <name>zone_valloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>free</name></name> <operator>=</operator> <name>zone_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>realloc</name></name> <operator>=</operator> <name>zone_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>zone_destroy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>zone_name</name></name> <operator>=</operator> <literal type="string">"jemalloc_zone"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>batch_malloc</name></name> <operator>=</operator> <name>zone_batch_malloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>batch_free</name></name> <operator>=</operator> <name>zone_batch_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>introspect</name></name> <operator>=</operator> <operator>&amp;</operator><name>jemalloc_zone_introspect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>memalign</name></name> <operator>=</operator> <name>zone_memalign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>free_definite_size</name></name> <operator>=</operator> <name>zone_free_definite_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone</name><operator>.</operator><name>pressure_relief</name></name> <operator>=</operator> <name>zone_pressure_relief</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>enumerator</name></name> <operator>=</operator> <name>zone_enumerator</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>good_size</name></name> <operator>=</operator> <name>zone_good_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>check</name></name> <operator>=</operator> <name>zone_check</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>print</name></name> <operator>=</operator> <name>zone_print</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>log</name></name> <operator>=</operator> <name>zone_log</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>force_lock</name></name> <operator>=</operator> <name>zone_force_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>force_unlock</name></name> <operator>=</operator> <name>zone_force_unlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>statistics</name></name> <operator>=</operator> <name>zone_statistics</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>zone_locked</name></name> <operator>=</operator> <name>zone_locked</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>enable_discharge_checking</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>disable_discharge_checking</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>discharge</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BLOCKS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>enumerate_discharged_pointers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>enumerate_unavailable_without_blocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>jemalloc_zone_introspect</name><operator>.</operator><name>reinit_lock</name></name> <operator>=</operator> <name>zone_reinit_lock</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>malloc_zone_t</name> <modifier>*</modifier></type>
<name>zone_default_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>malloc_zone_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>zones</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_zones</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>










<if_stmt><if>if <condition>(<expr><name>KERN_SUCCESS</name> <operator>!=</operator> <call><name>malloc_get_all_zones</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>vm_address_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>zones</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_zones</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>num_zones</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_zones</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>zones</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>malloc_default_zone</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>zone_promote</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>malloc_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl>;</decl_stmt>

<do>do <block>{<block_content>








<expr_stmt><expr><call><name>malloc_zone_unregister</name><argument_list>(<argument><expr><name>default_zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_zone_register</name><argument_list>(<argument><expr><name>default_zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<if_stmt><if>if <condition>(<expr><name>purgeable_zone</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_zone_unregister</name><argument_list>(<argument><expr><name>purgeable_zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_zone_register</name><argument_list>(<argument><expr><name>purgeable_zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>zone_default_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>zone</name> <operator>!=</operator> <operator>&amp;</operator><name>jemalloc_zone</name></expr>)</condition>;</do>
</block_content>}</block></function>

<macro><name>JEMALLOC_ATTR</name><argument_list>(<argument>constructor</argument>)</argument_list></macro>
<function><type><name>void</name></type>
<name>zone_register</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>




<expr_stmt><expr><name>default_zone</name> <operator>=</operator> <call><name>zone_default_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>default_zone</name><operator>-&gt;</operator><name>zone_name</name></name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>default_zone</name><operator>-&gt;</operator><name>zone_name</name></name></expr></argument>,
<argument><expr><literal type="string">"DefaultMallocZone"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>












<expr_stmt><expr><name>purgeable_zone</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>malloc_default_purgeable_zone</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:
<expr><call><name>malloc_default_purgeable_zone</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><call><name>zone_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_zone_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jemalloc_zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>zone_promote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
