<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/background_thread_structs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_BACKGROUND_THREAD_STRUCTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_BACKGROUND_THREAD_STRUCTS_H</name></cpp:macro></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_BACKGROUND_THREAD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_LAZY_LOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_PTHREAD_CREATE_WRAPPER</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKGROUND_THREAD_INDEFINITE_SLEEP</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BACKGROUND_THREAD_LIMIT</name></cpp:macro> <cpp:value>MALLOCX_ARENA_LIMIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NUM_BACKGROUND_THREAD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>background_thread_stopped</name></decl>,
<decl><name>background_thread_started</name></decl>,

<decl><name>background_thread_paused</name></decl>,
}</block></enum></type> <name>background_thread_state_t</name>;</typedef>

<struct>struct <name>background_thread_info_s</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_BACKGROUND_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>background_thread_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_b_t</name></type> <name>indefinite_sleep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nstime_t</name></type> <name>next_wakeup</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>size_t</name></type> <name>npages_to_purge_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tot_n_runs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nstime_t</name></type> <name>tot_sleep_time</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>background_thread_info_s</name></name></type> <name>background_thread_info_t</name>;</typedef>

<struct>struct <name>background_thread_stats_s</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>num_runs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nstime_t</name></type> <name>run_interval</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>background_thread_stats_s</name></name></type> <name>background_thread_stats_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
