<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_ATOMIC_GCC_ATOMIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_ATOMIC_GCC_ATOMIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INIT</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{__VA_ARGS__}</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>atomic_memory_order_relaxed</name></decl>,
<decl><name>atomic_memory_order_acquire</name></decl>,
<decl><name>atomic_memory_order_release</name></decl>,
<decl><name>atomic_memory_order_acq_rel</name></decl>,
<decl><name>atomic_memory_order_seq_cst</name></decl>
}</block></enum></type> <name>atomic_memory_order_t</name>;</typedef>

<function><type><name>ATOMIC_INLINE</name> <name>int</name></type>
<name>atomic_enum_to_builtin</name><parameter_list>(<parameter><decl><type><name>atomic_memory_order_t</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>mo</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>atomic_memory_order_relaxed</name></expr>:</case>
<return>return <expr><name>__ATOMIC_RELAXED</name></expr>;</return>
<case>case <expr><name>atomic_memory_order_acquire</name></expr>:</case>
<return>return <expr><name>__ATOMIC_ACQUIRE</name></expr>;</return>
<case>case <expr><name>atomic_memory_order_release</name></expr>:</case>
<return>return <expr><name>__ATOMIC_RELEASE</name></expr>;</return>
<case>case <expr><name>atomic_memory_order_acq_rel</name></expr>:</case>
<return>return <expr><name>__ATOMIC_ACQ_REL</name></expr>;</return>
<case>case <expr><name>atomic_memory_order_seq_cst</name></expr>:</case>
<return>return <expr><name>__ATOMIC_SEQ_CST</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ATOMIC_INLINE</name> <name>void</name></type>
<name>atomic_fence</name><parameter_list>(<parameter><decl><type><name>atomic_memory_order_t</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__atomic_thread_fence</name><argument_list>(<argument><expr><call><name>atomic_enum_to_builtin</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { type repr; } atomic_##short_type##_t; ATOMIC_INLINE type atomic_load_##short_type(const atomic_##short_type##_t *a, atomic_memory_order_t mo) { type result; __atomic_load(&amp;a-&gt;repr, &amp;result, atomic_enum_to_builtin(mo)); return result; } ATOMIC_INLINE void atomic_store_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { __atomic_store(&amp;a-&gt;repr, &amp;val, atomic_enum_to_builtin(mo)); } ATOMIC_INLINE type atomic_exchange_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { type result; __atomic_exchange(&amp;a-&gt;repr, &amp;val, &amp;result, atomic_enum_to_builtin(mo)); return result; } ATOMIC_INLINE bool atomic_compare_exchange_weak_##short_type(atomic_##short_type##_t *a, UNUSED type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { return __atomic_compare_exchange(&amp;a-&gt;repr, expected, &amp;desired, true, atomic_enum_to_builtin(success_mo), atomic_enum_to_builtin(failure_mo)); } ATOMIC_INLINE bool atomic_compare_exchange_strong_##short_type(atomic_##short_type##_t *a, UNUSED type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { return __atomic_compare_exchange(&amp;a-&gt;repr, expected, &amp;desired, false, atomic_enum_to_builtin(success_mo), atomic_enum_to_builtin(failure_mo)); }</cpp:value></cpp:define>


















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_GENERATE_ATOMICS(type, short_type, lg_size) ATOMIC_INLINE type atomic_fetch_add_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __atomic_fetch_add(&amp;a-&gt;repr, val, atomic_enum_to_builtin(mo)); } ATOMIC_INLINE type atomic_fetch_sub_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __atomic_fetch_sub(&amp;a-&gt;repr, val, atomic_enum_to_builtin(mo)); } ATOMIC_INLINE type atomic_fetch_and_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __atomic_fetch_and(&amp;a-&gt;repr, val, atomic_enum_to_builtin(mo)); } ATOMIC_INLINE type atomic_fetch_or_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __atomic_fetch_or(&amp;a-&gt;repr, val, atomic_enum_to_builtin(mo)); } ATOMIC_INLINE type atomic_fetch_xor_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return __atomic_fetch_xor(&amp;a-&gt;repr, val, atomic_enum_to_builtin(mo)); }</cpp:value></cpp:define>






































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
