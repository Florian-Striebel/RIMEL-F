<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/arena_stats.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_ARENA_STATS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_ARENA_STATS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex_prof.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>

<macro><name>JEMALLOC_DIAGNOSTIC_DISABLE_SPURIOUS</name></macro>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>atomic_u64_t</name></type> <name>arena_stats_u64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>uint64_t</name></type> <name>arena_stats_u64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>arena_stats_large_s</name></name></type> <name>arena_stats_large_t</name>;</typedef>
<struct>struct <name>arena_stats_large_s</name> <block>{




<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nmalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>ndalloc</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nrequests</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nfills</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nflushes</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>curlextents</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>arena_stats_decay_s</name></name></type> <name>arena_stats_decay_t</name>;</typedef>
<struct>struct <name>arena_stats_decay_s</name> <block>{

<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>npurge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nmadvise</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>purged</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>arena_stats_extents_s</name></name></type> <name>arena_stats_extents_t</name>;</typedef>
<struct>struct <name>arena_stats_extents_s</name> <block>{






<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>ndirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>dirty_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>nmuzzy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>muzzy_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>nretained</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>retained_bytes</name></decl>;</decl_stmt>
}</block>;</struct>






<typedef>typedef <type><name><name>struct</name> <name>arena_stats_s</name></name></type> <name>arena_stats_t</name>;</typedef>
<struct>struct <name>arena_stats_s</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>mapped</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>retained</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>extent_avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arena_stats_decay_t</name></type> <name>decay_dirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_decay_t</name></type> <name>decay_muzzy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>internal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>resident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>metadata_thp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>allocated_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nmalloc_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>ndalloc_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nfills_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nflushes_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_u64_t</name></type> <name>nrequests_large</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>abandoned_vm</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>tcache_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutex_prof_data_t</name></type> <name><name>mutex_prof_data</name><index>[<expr><name>mutex_prof_num_arena_mutexes</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>arena_stats_large_t</name></type> <name><name>lstats</name><index>[<expr><name>SC_NSIZES</name> <operator>-</operator> <name>SC_NBINS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nstime_t</name></type> <name>uptime</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>arena_stats_init</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>arena_stats_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arena_stats</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="string">"arena_stats"</literal></expr></argument>,
<argument><expr><name>WITNESS_RANK_ARENA_STATS</name></expr></argument>, <argument><expr><name>malloc_mutex_rank_exclusive</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_lock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_unlock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>arena_stats_read_u64</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>,
<parameter><decl><type><name>arena_stats_u64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>atomic_load_u64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>p</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_add_u64</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>,
<parameter><decl><type><name>arena_stats_u64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>atomic_fetch_add_u64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_sub_u64</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>,
<parameter><decl><type><name>arena_stats_u64_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><call><name>atomic_fetch_sub_u64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>-</operator> <name>x</name> <operator>&lt;=</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>+</operator> <name>x</name> <operator>&gt;=</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_accum_u64</name><parameter_list>(<parameter><decl><type><name>arena_stats_u64_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_dst</name> <init>= <expr><call><name>atomic_load_u64</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_u64</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>cur_dst</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>+=</operator> <name>src</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>arena_stats_read_zu</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>,
<parameter><decl><type><name>atomic_zu_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>atomic_load_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atomic_load_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_add_zu</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>,
<parameter><decl><type><name>atomic_zu_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>atomic_fetch_add_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur</name> <init>= <expr><call><name>atomic_load_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_sub_zu</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>,
<parameter><decl><type><name>atomic_zu_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>r</name> <init>= <expr><call><name>atomic_fetch_sub_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>-</operator> <name>x</name> <operator>&lt;=</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur</name> <init>= <expr><call><name>atomic_load_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cur</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_accum_zu</name><parameter_list>(<parameter><decl><type><name>atomic_zu_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_dst</name> <init>= <expr><call><name>atomic_load_zu</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>cur_dst</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_large_flush_nrequests_add</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>,
<parameter><decl><type><name>szind_t</name></type> <name>szind</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nrequests</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>arena_stats_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>arena_stats_large_t</name> <modifier>*</modifier></type><name>lstats</name> <init>= <expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>lstats</name><index>[<expr><name>szind</name> <operator>-</operator> <name>SC_NBINS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>arena_stats_add_u64</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena_stats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lstats</name><operator>-&gt;</operator><name>nrequests</name></name></expr></argument>, <argument><expr><name>nrequests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_add_u64</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena_stats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lstats</name><operator>-&gt;</operator><name>nflushes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_stats_mapped_add</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_stats_t</name> <modifier>*</modifier></type><name>arena_stats</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>arena_stats_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_add_zu</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena_stats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena_stats</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
