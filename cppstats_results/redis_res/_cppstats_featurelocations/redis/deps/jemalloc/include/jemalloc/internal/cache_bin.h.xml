<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/cache_bin.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_CACHE_BIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_CACHE_BIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ql.h"</cpp:file></cpp:include>

















<typedef>typedef <type><name>int32_t</name></type> <name>cache_bin_sz_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>cache_bin_stats_s</name></name></type> <name>cache_bin_stats_t</name>;</typedef>
<struct>struct <name>cache_bin_stats_s</name> <block>{




<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrequests</name></decl>;</decl_stmt>
}</block>;</struct>





<typedef>typedef <type><name><name>struct</name> <name>cache_bin_info_s</name></name></type> <name>cache_bin_info_t</name>;</typedef>
<struct>struct <name>cache_bin_info_s</name> <block>{

<decl_stmt><decl><type><name>cache_bin_sz_t</name></type> <name>ncached_max</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>cache_bin_s</name></name></type> <name>cache_bin_t</name>;</typedef>
<struct>struct <name>cache_bin_s</name> <block>{

<decl_stmt><decl><type><name>cache_bin_sz_t</name></type> <name>low_water</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_bin_sz_t</name></type> <name>ncached</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>cache_bin_stats_t</name></type> <name>tstats</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>avail</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>cache_bin_array_descriptor_s</name></name></type> <name>cache_bin_array_descriptor_t</name>;</typedef>
<struct>struct <name>cache_bin_array_descriptor_s</name> <block>{




<macro><name>ql_elm</name><argument_list>(<argument>cache_bin_array_descriptor_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>bins_small</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>bins_large</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>cache_bin_array_descriptor_init</name><parameter_list>(<parameter><decl><type><name>cache_bin_array_descriptor_t</name> <modifier>*</modifier></type><name>descriptor</name></decl></parameter>,
<parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>bins_small</name></decl></parameter>, <parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>bins_large</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_elm_new</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descriptor</name><operator>-&gt;</operator><name>bins_small</name></name> <operator>=</operator> <name>bins_small</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descriptor</name><operator>-&gt;</operator><name>bins_large</name></name> <operator>=</operator> <name>bins_large</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type>
<name>cache_bin_alloc_easy</name><parameter_list>(<parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name><operator>--</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>&lt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>low_water</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>cache_bin_dalloc_easy</name><parameter_list>(<parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>cache_bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>==</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>ncached_max</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>&lt;</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>ncached_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name><name>bin</name><operator>-&gt;</operator><name>ncached</name></name><operator>)</operator> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
