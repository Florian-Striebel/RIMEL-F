<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/mutex_prof.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_MUTEX_PROF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_MUTEX_PROF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/nstime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tsd_types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_PROF_GLOBAL_MUTEXES</name></cpp:macro> <cpp:value>OP(background_thread) OP(ctl) OP(prof)</cpp:value></cpp:define>




<typedef>typedef <type><enum>enum <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>mtx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>global_prof_mutex_##mtx,</cpp:value></cpp:define>
<decl><name>MUTEX_PROF_GLOBAL_MUTEXES</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>
<name>mutex_prof_num_global_mutexes</name></decl>
}</block></enum></type> <name>mutex_prof_global_ind_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_PROF_ARENA_MUTEXES</name></cpp:macro> <cpp:value>OP(large) OP(extent_avail) OP(extents_dirty) OP(extents_muzzy) OP(extents_retained) OP(decay_dirty) OP(decay_muzzy) OP(base) OP(tcache_list)</cpp:value></cpp:define>










<typedef>typedef <type><enum>enum <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>mtx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arena_prof_mutex_##mtx,</cpp:value></cpp:define>
<decl><name>MUTEX_PROF_ARENA_MUTEXES</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>
<name>mutex_prof_num_arena_mutexes</name></decl>
}</block></enum></type> <name>mutex_prof_arena_ind_t</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_PROF_UINT64_COUNTERS</name></cpp:macro> <cpp:value>OP(num_ops, uint64_t, "n_lock_ops", false, num_ops) OP(num_ops_ps, uint64_t, "(#/sec)", true, num_ops) OP(num_wait, uint64_t, "n_waiting", false, num_wait) OP(num_wait_ps, uint64_t, "(#/sec)", true, num_wait) OP(num_spin_acq, uint64_t, "n_spin_acq", false, num_spin_acq) OP(num_spin_acq_ps, uint64_t, "(#/sec)", true, num_spin_acq) OP(num_owner_switch, uint64_t, "n_owner_switch", false, num_owner_switch) OP(num_owner_switch_ps, uint64_t, "(#/sec)", true, num_owner_switch) OP(total_wait_time, uint64_t, "total_wait_ns", false, total_wait_time) OP(total_wait_time_ps, uint64_t, "(#/sec)", true, total_wait_time) OP(max_wait_time, uint64_t, "max_wait_ns", false, max_wait_time)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_PROF_UINT32_COUNTERS</name></cpp:macro> <cpp:value>OP(max_num_thds, uint32_t, "max_n_thds", false, max_num_thds)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_PROF_COUNTERS</name></cpp:macro> <cpp:value>MUTEX_PROF_UINT64_COUNTERS MUTEX_PROF_UINT32_COUNTERS</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>counter</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>human</name></type></parameter>, <parameter><type><name>derived</name></type></parameter>, <parameter><type><name>base_counter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mutex_counter_##counter,</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNTER_ENUM</name><parameter_list>(<parameter><type><name>counter_list</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef enum { counter_list mutex_prof_num_##t##_counters } mutex_prof_##t##_counter_ind_t;</cpp:value></cpp:define>





<macro><name>COUNTER_ENUM</name><argument_list>(<argument>MUTEX_PROF_UINT64_COUNTERS</argument>, <argument>uint64_t</argument>)</argument_list></macro>
<macro><name>COUNTER_ENUM</name><argument_list>(<argument>MUTEX_PROF_UINT32_COUNTERS</argument>, <argument>uint32_t</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COUNTER_ENUM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

<typedef>typedef <type><struct>struct <block>{





<decl_stmt><decl><type><name>nstime_t</name></type> <name>tot_wait_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nstime_t</name></type> <name>max_wait_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>n_wait_times</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>n_spin_acquired</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_n_thds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_u32_t</name></type> <name>n_waiting_thds</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>uint64_t</name></type> <name>n_owner_switches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>prev_owner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>n_lock_ops</name></decl>;</decl_stmt>
}</block></struct></type> <name>mutex_prof_data_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
