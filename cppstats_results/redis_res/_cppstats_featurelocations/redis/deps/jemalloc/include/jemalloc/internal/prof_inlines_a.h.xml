<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_PROF_INLINES_A_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_PROF_INLINES_A_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>prof_accum_add</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>prof_accum_t</name> <modifier>*</modifier></type><name>prof_accum</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>accumbytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>overflow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>;</decl_stmt>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <call><name>atomic_load_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a0</name> <operator>+</operator> <name>accumbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a1</name> <operator>&gt;=</operator> <name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>overflow</name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>&gt;=</operator> <name>prof_interval</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>%=</operator> <name>prof_interval</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_weak_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a0</name></expr></argument>,
<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a0</name> <operator>+</operator> <name>accumbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>overflow</name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>&gt;=</operator> <name>prof_interval</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>%=</operator> <name>prof_interval</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>overflow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>prof_accum_cancel</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>prof_accum_t</name> <modifier>*</modifier></type><name>prof_accum</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <call><name>atomic_load_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a0</name> <operator>&gt;=</operator> <name>SC_LARGE_MINCLASS</name> <operator>-</operator> <name>usize</name><operator>)</operator></expr>
?</condition><then> <expr><name>a0</name> <operator>-</operator> <operator>(</operator><name>SC_LARGE_MINCLASS</name> <operator>-</operator> <name>usize</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_weak_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a0</name></expr></argument>,
<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a0</name> <operator>&gt;=</operator> <name>SC_LARGE_MINCLASS</name> <operator>-</operator> <name>usize</name><operator>)</operator></expr>
?</condition><then> <expr><name>a0</name> <operator>-</operator> <operator>(</operator><name>SC_LARGE_MINCLASS</name> <operator>-</operator> <name>usize</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prof_accum</name><operator>-&gt;</operator><name>accumbytes</name></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prof_accum</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>prof_active_get_unlocked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>






<return>return <expr><name>prof_active</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
