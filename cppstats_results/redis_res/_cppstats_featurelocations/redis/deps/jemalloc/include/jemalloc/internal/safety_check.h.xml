<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/safety_check.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_SAFETY_CHECK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_SAFETY_CHECK_H</name></cpp:macro></cpp:define>

<function_decl><type><name>void</name></type> <name>safety_check_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>safety_check_set_abort</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>abort_fn</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>safety_check_set_redzone</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bumped_usize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize</name> <operator>&lt;</operator> <name>bumped_usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>usize</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bumped_usize</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>usize</name> <operator>+</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator> <literal type="number">0xBC</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>safety_check_verify_redzone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bumped_usize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>usize</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bumped_usize</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>usize</name> <operator>+</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="number">0xBC</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>safety_check_fail</name><argument_list>(<argument><expr><literal type="string">"Use after free error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
