<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_ARENA_INLINES_B_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_ARENA_INLINES_B_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/rtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sz.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ticker.h"</cpp:file></cpp:include>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>arena_has_default_hooks</name><parameter_list>(<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>extent_hooks_get</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>extent_hooks_default</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>arena_t</name> <modifier>*</modifier></type>
<name>arena_choose_maybe_huge</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arena</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>arena</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>oversize_threshold</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>tsd_arena</name> <init>= <expr><call><name>tsd_arena_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tsd_arena</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>arena_is_auto</name><argument_list>(<argument><expr><name>tsd_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>arena_choose_huge</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>arena_choose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>prof_tctx_t</name> <modifier>*</modifier></type>
<name>arena_prof_tctx_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>alloc_ctx_t</name> <modifier>*</modifier></type><name>alloc_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>alloc_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>large_prof_tctx_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>alloc_ctx</name><operator>-&gt;</operator><name>slab</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>large_prof_tctx_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_prof_tctx_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
<parameter><decl><type><name>alloc_ctx_t</name> <modifier>*</modifier></type><name>alloc_ctx</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>alloc_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>large_prof_tctx_set</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>alloc_ctx</name><operator>-&gt;</operator><name>slab</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>large_prof_tctx_set</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_prof_tctx_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>large_prof_tctx_reset</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>nstime_t</name></type>
<name>arena_prof_alloc_time_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>alloc_ctx_t</name> <modifier>*</modifier></type><name>alloc_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>large_prof_alloc_time_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_prof_alloc_time_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>alloc_ctx_t</name> <modifier>*</modifier></type><name>alloc_ctx</name></decl></parameter>,
<parameter><decl><type><name>nstime_t</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>large_prof_alloc_time_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_decay_ticks</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nticks</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ticker_t</name> <modifier>*</modifier></type><name>decay_ticker</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>decay_ticker</name> <operator>=</operator> <call><name>decay_ticker_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><call><name>arena_ind_get</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>decay_ticker</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>ticker_ticks</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>, <argument><expr><name>nticks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arena_decay</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_decay_tick</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_assert_not_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>decay_dirty</name><operator>.</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_mutex_assert_not_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>decay_muzzy</name><operator>.</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arena_decay_ticks</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_decay_extent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>,<parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_extent_hooks</name></decl></parameter>,
<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>extent_size</name> <init>= <expr><call><name>extent_size_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>extent_dalloc_wrapper</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>,
<argument><expr><name>r_extent_hooks</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>arena_stats_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_add_u64</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>decay_dirty</name><operator>.</operator><name>stats</name><operator>-&gt;</operator><name>nmadvise</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_add_u64</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>decay_dirty</name><operator>.</operator><name>stats</name><operator>-&gt;</operator><name>purged</name></name></expr></argument>, <argument><expr><name>extent_size</name> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_sub_zu</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>mapped</name></name></expr></argument>,
<argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arena_stats_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type>
<name>arena_malloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>,
<parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SC_SMALL_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>tcache_alloc_small</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>,
<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>tcache_maxclass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>tcache_alloc_large</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>,
<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>tcache_maxclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>arena_malloc_hard</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>arena_t</name> <modifier>*</modifier></type>
<name>arena_aalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>arena_salloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name> <init>= <expr><call><name>rtree_szind_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>!=</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sz_index2size</name><argument_list>(<argument><expr><name>szind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>size_t</name></type>
<name>arena_vsalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>









<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rtree_extent_szind_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_state_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>extent_state_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ptr</name> <operator>||</operator> <call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>!=</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sz_index2size</name><argument_list>(<argument><expr><name>szind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_dalloc_large_no_tcache</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>szind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>szind</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arena_dalloc_promoted</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>large_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_dalloc_no_tcache</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>slab</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtree_szind_slab_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>,
<argument><expr><name>rtree_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>==</operator> <call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>slab</name> <operator>==</operator> <call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>arena_dalloc_small</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>arena_dalloc_large_no_tcache</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_dalloc_large</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>szind</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>szind</name> <operator>&lt;</operator> <name>nhbins</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>szind</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arena_dalloc_promoted</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tcache_dalloc_large</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>,
<argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>large_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_dalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,
<parameter><decl><type><name>alloc_ctx_t</name> <modifier>*</modifier></type><name>alloc_ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arena_dalloc_no_tcache</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>slab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alloc_ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>szind</name> <operator>=</operator> <name><name>alloc_ctx</name><operator>-&gt;</operator><name>szind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slab</name> <operator>=</operator> <name><name>alloc_ctx</name><operator>-&gt;</operator><name>slab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>!=</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rtree_ctx</name> <operator>=</operator> <call><name>tsd_rtree_ctx</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtree_szind_slab_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtree_ctx</name> <operator>=</operator> <call><name>tsd_rtree_ctx</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>,
<argument><expr><name>rtree_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>==</operator> <call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>slab</name> <operator>==</operator> <call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcache_dalloc_small</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>,
<argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>arena_dalloc_large</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arena_sdalloc_no_tcache</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>slab</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_prof</name> <operator>||</operator> <operator>!</operator><name>opt_prof</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>szind</name> <operator>=</operator> <call><name>sz_size2index</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slab</name> <operator>=</operator> <operator>(</operator><name>szind</name> <operator>&lt;</operator> <name>SC_NBINS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>config_prof</name> <operator>&amp;&amp;</operator> <name>opt_prof</name><operator>)</operator> <operator>||</operator> <name>config_debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rtree_szind_slab_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>==</operator> <call><name>sz_size2index</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>config_prof</name> <operator>&amp;&amp;</operator> <name>opt_prof</name><operator>)</operator> <operator>||</operator> <name>slab</name> <operator>==</operator> <operator>(</operator><name>szind</name> <operator>&lt;</operator> <name>SC_NBINS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>==</operator> <call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>slab</name> <operator>==</operator> <call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>arena_dalloc_small</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>arena_dalloc_large_no_tcache</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>arena_sdalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,
<parameter><decl><type><name>alloc_ctx_t</name> <modifier>*</modifier></type><name>alloc_ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slow_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tcache</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arena_sdalloc_no_tcache</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>slab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alloc_ctx_t</name></type> <name>local_ctx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <name>opt_prof</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alloc_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtree_szind_slab_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>local_ctx</name><operator>.</operator><name>szind</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>local_ctx</name><operator>.</operator><name>slab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>local_ctx</name><operator>.</operator><name>szind</name></name> <operator>==</operator> <call><name>sz_size2index</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alloc_ctx</name> <operator>=</operator> <operator>&amp;</operator><name>local_ctx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slab</name> <operator>=</operator> <name><name>alloc_ctx</name><operator>-&gt;</operator><name>slab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>szind</name> <operator>=</operator> <name><name>alloc_ctx</name><operator>-&gt;</operator><name>szind</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>szind</name> <operator>=</operator> <call><name>sz_size2index</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slab</name> <operator>=</operator> <operator>(</operator><name>szind</name> <operator>&lt;</operator> <name>SC_NBINS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsd_rtree_ctx</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtree_szind_slab_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>==</operator> <call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>slab</name> <operator>==</operator> <call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tcache_dalloc_small</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>,
<argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>arena_dalloc_large</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>, <argument><expr><name>slow_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
