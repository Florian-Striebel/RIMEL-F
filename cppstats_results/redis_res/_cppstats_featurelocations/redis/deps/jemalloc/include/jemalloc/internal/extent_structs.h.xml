<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/extent_structs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_EXTENT_STRUCTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_EXTENT_STRUCTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bit_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ql.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>extent_state_active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>extent_state_dirty</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>extent_state_muzzy</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>extent_state_retained</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>extent_state_t</name>;</typedef>


<struct>struct <name>extent_s</name> <block>{







































































<decl_stmt><decl><type><name>uint64_t</name></type> <name>e_bits</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name><parameter_list>(<parameter><type><name>CURRENT_FIELD_WIDTH</name></type></parameter>, <parameter><type><name>CURRENT_FIELD_SHIFT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((((uint64_t)0x1U) &lt;&lt; (CURRENT_FIELD_WIDTH)) - 1)) &lt;&lt; (CURRENT_FIELD_SHIFT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_ARENA_WIDTH</name></cpp:macro> <cpp:value>MALLOCX_ARENA_BITS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_ARENA_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_ARENA_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_ARENA_WIDTH, EXTENT_BITS_ARENA_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SLAB_WIDTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SLAB_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_ARENA_WIDTH + EXTENT_BITS_ARENA_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SLAB_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_SLAB_WIDTH, EXTENT_BITS_SLAB_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_COMMITTED_WIDTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_COMMITTED_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_SLAB_WIDTH + EXTENT_BITS_SLAB_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_COMMITTED_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_COMMITTED_WIDTH, EXTENT_BITS_COMMITTED_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_DUMPABLE_WIDTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_DUMPABLE_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_COMMITTED_WIDTH + EXTENT_BITS_COMMITTED_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_DUMPABLE_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_DUMPABLE_WIDTH, EXTENT_BITS_DUMPABLE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_ZEROED_WIDTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_ZEROED_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_DUMPABLE_WIDTH + EXTENT_BITS_DUMPABLE_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_ZEROED_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_ZEROED_WIDTH, EXTENT_BITS_ZEROED_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_STATE_WIDTH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_STATE_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_ZEROED_WIDTH + EXTENT_BITS_ZEROED_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_STATE_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_STATE_WIDTH, EXTENT_BITS_STATE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SZIND_WIDTH</name></cpp:macro> <cpp:value>LG_CEIL(SC_NSIZES)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SZIND_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_STATE_WIDTH + EXTENT_BITS_STATE_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SZIND_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_SZIND_WIDTH, EXTENT_BITS_SZIND_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_NFREE_WIDTH</name></cpp:macro> <cpp:value>(LG_SLAB_MAXREGS + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_NFREE_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_SZIND_WIDTH + EXTENT_BITS_SZIND_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_NFREE_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_NFREE_WIDTH, EXTENT_BITS_NFREE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_BINSHARD_WIDTH</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_BINSHARD_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_NFREE_WIDTH + EXTENT_BITS_NFREE_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_BINSHARD_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_BINSHARD_WIDTH, EXTENT_BITS_BINSHARD_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_IS_HEAD_WIDTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_IS_HEAD_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_BINSHARD_WIDTH + EXTENT_BITS_BINSHARD_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_IS_HEAD_MASK</name></cpp:macro> <cpp:value>MASK(EXTENT_BITS_IS_HEAD_WIDTH, EXTENT_BITS_IS_HEAD_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SN_SHIFT</name></cpp:macro> <cpp:value>(EXTENT_BITS_IS_HEAD_WIDTH + EXTENT_BITS_IS_HEAD_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_BITS_SN_MASK</name></cpp:macro> <cpp:value>(UINT64_MAX &lt;&lt; EXTENT_BITS_SN_SHIFT)</cpp:value></cpp:define>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e_addr</name></decl>;</decl_stmt>

<union>union <block>{







<decl_stmt><decl><type><name>size_t</name></type> <name>e_size_esn</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_SIZE_MASK</name></cpp:macro> <cpp:value>((size_t)~(PAGE-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENT_ESN_MASK</name></cpp:macro> <cpp:value>((size_t)PAGE-1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>size_t</name></type> <name>e_bsize</name></decl>;</decl_stmt>
}</block>;</union>








<macro><name>ql_elm</name><argument_list>(<argument>extent_t</argument>)</argument_list></macro> <expr_stmt><expr><name>ql_link</name></expr>;</expr_stmt>





<macro><name>phn</name><argument_list>(<argument>extent_t</argument>)</argument_list></macro> <expr_stmt><expr><name>ph_link</name></expr>;</expr_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>arena_slab_data_t</name></type> <name>e_slab_data</name></decl>;</decl_stmt>


<struct>struct <block>{

<decl_stmt><decl><type><name>nstime_t</name></type> <name>e_alloc_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_p_t</name></type> <name>e_prof_tctx</name></decl>;</decl_stmt>
}</block>;</struct>
}</block>;</union>
}</block>;</struct>
<typedef>typedef <macro><name>ql_head</name><argument_list>(<argument>extent_t</argument>)</argument_list></macro> <expr_stmt><expr><name>extent_list_t</name></expr>;</expr_stmt></typedef>
<typedef>typedef <macro><name>ph</name><argument_list>(<argument>extent_t</argument>)</argument_list></macro> <expr_stmt><expr><name>extent_tree_t</name></expr>;</expr_stmt></typedef>
<typedef>typedef <macro><name>ph</name><argument_list>(<argument>extent_t</argument>)</argument_list></macro> <expr_stmt><expr><name>extent_heap_t</name></expr>;</expr_stmt></typedef>


<struct>struct <name>extents_s</name> <block>{
<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>extent_heap_t</name></type> <name><name>heaps</name><index>[<expr><name>SC_NPSIZES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name><name>nextents</name><index>[<expr><name>SC_NPSIZES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name><name>nbytes</name><index>[<expr><name>SC_NPSIZES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bitmap_t</name></type> <name><name>bitmap</name><index>[<expr><call><name>BITMAP_GROUPS</name><argument_list>(<argument><expr><name>SC_NPSIZES</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>extent_list_t</name></type> <name>lru</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>npages</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>extent_state_t</name></type> <name>state</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>delay_coalesce</name></decl>;</decl_stmt>
}</block>;</struct>







<struct>struct <name>extent_util_stats_s</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>nfree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nregs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>extent_util_stats_verbose_s</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>slabcur_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nfree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nregs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bin_nfree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bin_nregs</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
