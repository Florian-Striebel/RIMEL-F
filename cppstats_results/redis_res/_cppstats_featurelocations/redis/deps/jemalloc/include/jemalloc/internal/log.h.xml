<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/log.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_LOG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_LOG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/malloc_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_LOG_VAR_BUFSIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_LOG_VAR_BUFSIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_LOG_BUFSIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>























<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>log_var_names</name><index>[<expr><name>JEMALLOC_LOG_VAR_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>atomic_b_t</name></type> <name>log_init_done</name></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>log_var_s</name></name></type> <name>log_var_t</name>;</typedef>
<struct>struct <name>log_var_s</name> <block>{




<decl_stmt><decl><type><name>atomic_u_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_NOT_INITIALIZED</name></cpp:macro> <cpp:value>0U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_INITIALIZED_NOT_ENABLED</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_ENABLED</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_VAR_INIT</name><parameter_list>(<parameter><type><name>name_str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ATOMIC_INIT(LOG_NOT_INITIALIZED), name_str}</cpp:value></cpp:define>






<function_decl><type><name>unsigned</name></type> <name>log_var_update_state</name><parameter_list>(<parameter><decl><type><name>log_var_t</name> <modifier>*</modifier></type><name>log_var</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log_do_begin</name><parameter_list>(<parameter><type><name>log_var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (config_log) { unsigned log_state = atomic_load_u(&amp;(log_var).state, ATOMIC_RELAXED); if (unlikely(log_state == LOG_NOT_INITIALIZED)) { log_state = log_var_update_state(&amp;(log_var)); assert(log_state != LOG_NOT_INITIALIZED); } if (log_state == LOG_ENABLED) { {</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log_do_end</name><parameter_list>(<parameter><type><name>log_var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>} } }</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>log_impl_varargs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>JEMALLOC_LOG_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dst_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dst_offset</name> <operator>+=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>JEMALLOC_LOG_BUFSIZE</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_offset</name> <operator>+=</operator> <call><name>malloc_vsnprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>dst_offset</name></expr></argument>,
<argument><expr><name>JEMALLOC_LOG_BUFSIZE</name> <operator>-</operator> <name>dst_offset</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_offset</name> <operator>+=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>dst_offset</name></expr></argument>,
<argument><expr><name>JEMALLOC_LOG_BUFSIZE</name> <operator>-</operator> <name>dst_offset</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>malloc_write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><name>log_var_str</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { static log_var_t log_var = LOG_VAR_INIT(log_var_str); log_do_begin(log_var) log_impl_varargs((log_var).name, __VA_ARGS__); log_do_end(log_var) } while (0)</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
