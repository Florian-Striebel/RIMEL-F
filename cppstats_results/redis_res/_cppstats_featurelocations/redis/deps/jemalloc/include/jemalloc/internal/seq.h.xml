<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/jemalloc/include/jemalloc/internal/seq.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_SEQ_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_SEQ_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seq_define</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { atomic_zu_t seq; atomic_zu_t data[ (sizeof(type) + sizeof(size_t) - 1) / sizeof(size_t)]; } seq_##short_type##_t; static inline void seq_store_##short_type(seq_##short_type##_t *dst, type *src) { size_t buf[sizeof(dst-&gt;data) / sizeof(size_t)]; buf[sizeof(buf) / sizeof(size_t) - 1] = 0; memcpy(buf, src, sizeof(type)); size_t old_seq = atomic_load_zu(&amp;dst-&gt;seq, ATOMIC_RELAXED); atomic_store_zu(&amp;dst-&gt;seq, old_seq + 1, ATOMIC_RELAXED); atomic_fence(ATOMIC_RELEASE); for (size_t i = 0; i &lt; sizeof(buf) / sizeof(size_t); i++) { atomic_store_zu(&amp;dst-&gt;data[i], buf[i], ATOMIC_RELAXED); } atomic_store_zu(&amp;dst-&gt;seq, old_seq + 2, ATOMIC_RELEASE); } static inline bool seq_try_load_##short_type(type *dst, seq_##short_type##_t *src) { size_t buf[sizeof(src-&gt;data) / sizeof(size_t)]; size_t seq1 = atomic_load_zu(&amp;src-&gt;seq, ATOMIC_ACQUIRE); if (seq1 % 2 != 0) { return false; } for (size_t i = 0; i &lt; sizeof(buf) / sizeof(size_t); i++) { buf[i] = atomic_load_zu(&amp;src-&gt;data[i], ATOMIC_RELAXED); } atomic_fence(ATOMIC_ACQUIRE); size_t seq2 = atomic_load_zu(&amp;src-&gt;seq, ATOMIC_RELAXED); if (seq1 != seq2) { return false; } memcpy(dst, buf, sizeof(type)); return true; }</cpp:value></cpp:define>












































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
