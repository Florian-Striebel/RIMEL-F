<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/ssl.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis_ssl.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>__redisSetError</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>redisSSLContext</name> <block>{

<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ssl_ctx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server_name</name></decl>;</decl_stmt>
}</block>;</struct>


<typedef>typedef <type><struct>struct <name>redisSSL</name> <block>{



<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>lastLen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>wantRead</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>pendingWrite</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisSSL</name>;</typedef>


<decl_stmt><decl><type><name>redisContextFuncs</name></type> <name>redisContextSSLFuncs</name></decl>;</decl_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIREDIS_USE_CRYPTO_LOCKS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_USE_CRYPTO_LOCKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>CRITICAL_SECTION</name></type> <name>sslLockType</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sslLockInit</name><parameter_list>(<parameter><decl><type><name>sslLockType</name><modifier>*</modifier></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sslLockAcquire</name><parameter_list>(<parameter><decl><type><name>sslLockType</name><modifier>*</modifier></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sslLockRelease</name><parameter_list>(<parameter><decl><type><name>sslLockType</name><modifier>*</modifier></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>pthread_mutex_t</name></type> <name>sslLockType</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sslLockInit</name><parameter_list>(<parameter><decl><type><name>sslLockType</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sslLockAcquire</name><parameter_list>(<parameter><decl><type><name>sslLockType</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sslLockRelease</name><parameter_list>(<parameter><decl><type><name>sslLockType</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>sslLockType</name><modifier>*</modifier></type> <name>ossl_locks</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opensslDoLock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lkid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sslLockType</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>ossl_locks</name> <operator>+</operator> <name>lkid</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CRYPTO_LOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sslLockAcquire</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sslLockRelease</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>line</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>initOpensslLocks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>nlocks</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CRYPTO_get_locking_callback</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nlocks</name> <operator>=</operator> <call><name>CRYPTO_num_locks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ossl_locks</name> <operator>=</operator> <call><name>hi_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ossl_locks</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ossl_locks</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>nlocks</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sslLockInit</name><argument_list>(<argument><expr><name>ossl_locks</name> <operator>+</operator> <name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CRYPTO_set_locking_callback</name><argument_list>(<argument><expr><name>opensslDoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>redisInitOpenSSL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_USE_CRYPTO_LOCKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>initOpensslLocks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>redisSSLContextGetError</name><parameter_list>(<parameter><decl><type><name>redisSSLContextError</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDIS_SSL_CTX_NONE</name></expr>:</case>
<return>return <expr><literal type="string">"No Error"</literal></expr>;</return>
<case>case <expr><name>REDIS_SSL_CTX_CREATE_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to create OpenSSL SSL_CTX"</literal></expr>;</return>
<case>case <expr><name>REDIS_SSL_CTX_CERT_KEY_REQUIRED</name></expr>:</case>
<return>return <expr><literal type="string">"Client cert and key must both be specified or skipped"</literal></expr>;</return>
<case>case <expr><name>REDIS_SSL_CTX_CA_CERT_LOAD_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to load CA Certificate or CA Path"</literal></expr>;</return>
<case>case <expr><name>REDIS_SSL_CTX_CLIENT_CERT_LOAD_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to load client certificate"</literal></expr>;</return>
<case>case <expr><name>REDIS_SSL_CTX_PRIVATE_KEY_LOAD_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to load private key"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Unknown error code"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisFreeSSLContext</name><parameter_list>(<parameter><decl><type><name>redisSSLContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>server_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>server_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>redisSSLContext</name> <modifier>*</modifier></type><name>redisCreateSSLContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cacert_filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>capath</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>private_key_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl></parameter>, <parameter><decl><type><name>redisSSLContextError</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>redisSSLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>hi_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisSSLContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_client_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>REDIS_SSL_CTX_CREATE_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_NO_SSLv2</name> <operator>|</operator> <name>SSL_OP_NO_SSLv3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cert_filename</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>private_key_filename</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>private_key_filename</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cert_filename</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>REDIS_SSL_CTX_CERT_KEY_REQUIRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>capath</name> <operator>||</operator> <name>cacert_filename</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>cacert_filename</name></expr></argument>, <argument><expr><name>capath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>REDIS_SSL_CTX_CA_CERT_LOAD_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cert_filename</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>cert_filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>REDIS_SSL_CTX_CLIENT_CERT_LOAD_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>private_key_filename</name></expr></argument>, <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>REDIS_SSL_CTX_PRIVATE_KEY_LOAD_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>server_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>server_name</name></name> <operator>=</operator> <call><name>hi_strdup</name><argument_list>(<argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ctx</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>redisFreeSSLContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>redisSSLConnect</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>privctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><literal type="string">"redisContext was already associated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>redisSSL</name> <modifier>*</modifier></type><name>rssl</name> <init>= <expr><call><name>hi_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisSSL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rssl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OOM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>funcs</name></name> <operator>=</operator> <operator>&amp;</operator><name>redisContextSSLFuncs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>ssl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_set_mode</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>privctx</name></name> <operator>=</operator> <name>rssl</name></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>rv</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name> <operator>||</operator> <name>rv</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>privctx</name></name> <operator>=</operator> <name>rssl</name></expr>;</expr_stmt>
<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>err</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"SSL_connect failed: %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>e</name> <init>= <expr><call><name>ERR_peek_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"SSL_connect failed: %s"</literal></expr></argument>,
<argument><expr><call><name>ERR_reason_error_string</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>rssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>redisInitiateSSL</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>redisSSLConnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>redisInitiateSSLWithContext</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>redisSSLContext</name> <modifier>*</modifier></type><name>redis_ssl_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>redis_ssl_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>privctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><call><name>SSL_new</name><argument_list>(<argument><expr><name><name>redis_ssl_ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ssl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create new SSL instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>redis_ssl_ctx</name><operator>-&gt;</operator><name>server_name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_set_tlsext_host_name</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>redis_ssl_ctx</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><literal type="string">"Failed to set server_name/SNI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>redisSSLConnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>maybeCheckWant</name><parameter_list>(<parameter><decl><type><name>redisSSL</name> <modifier>*</modifier></type><name>rssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rv</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>wantRead</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rv</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>pendingWrite</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>redisSSLFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privctx</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>redisSSL</name> <modifier>*</modifier></type><name>rsc</name> <init>= <expr><name>privctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rsc</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rsc</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>rsc</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>rsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>redisSSLRead</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufcap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisSSL</name> <modifier>*</modifier></type><name>rssl</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>privctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufcap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_EOF</name></expr></argument>, <argument><expr><literal type="string">"Server closed the connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Resource temporarily unavailable"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>maybeCheckWant</name><argument_list>(<argument><expr><name>rssl</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>redisSSLWrite</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisSSL</name> <modifier>*</modifier></type><name>rssl</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>privctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name><name>rssl</name><operator>-&gt;</operator><name>lastLen</name></name></expr> ?</condition><then> <expr><name><name>rssl</name><operator>-&gt;</operator><name>lastLen</name></name></expr> </then><else>: <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>SSL_write</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>lastLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>lastLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>rssl</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>maybeCheckWant</name><argument_list>(<argument><expr><name>rssl</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisSSLAsyncRead</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisSSL</name> <modifier>*</modifier></type><name>rssl</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>privctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>wantRead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rssl</name><operator>-&gt;</operator><name>pendingWrite</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>pendingWrite</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>redisBufferWrite</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_EL_ADD_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>redisBufferRead</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_EL_ADD_READ</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisProcessCallbacks</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisSSLAsyncWrite</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisSSL</name> <modifier>*</modifier></type><name>rssl</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>privctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>pendingWrite</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>redisBufferWrite</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__redisAsyncDisconnect</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rssl</name><operator>-&gt;</operator><name>wantRead</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rssl</name><operator>-&gt;</operator><name>pendingWrite</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_EL_DEL_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_EL_ADD_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_EL_DEL_WRITE</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>_EL_ADD_READ</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>redisContextFuncs</name></type> <name>redisContextSSLFuncs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>free_privctx</name> <operator>=</operator> <name>redisSSLFree</name></expr>,
<expr><operator>.</operator><name>async_read</name> <operator>=</operator> <name>redisSSLAsyncRead</name></expr>,
<expr><operator>.</operator><name>async_write</name> <operator>=</operator> <name>redisSSLAsyncWrite</name></expr>,
<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>redisSSLRead</name></expr>,
<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>redisSSLWrite</name></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
