<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockcompat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_TEST_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis_ssl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>

<enum>enum <name>connection_type</name> <block>{
<decl><name>CONN_TCP</name></decl>,
<decl><name>CONN_UNIX</name></decl>,
<decl><name>CONN_FD</name></decl>,
<decl><name>CONN_SSL</name></decl>
}</block>;</enum>

<struct>struct <name>config</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>connection_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
}</block> <decl><name>tcp</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
}</block> <decl><name>unix_sock</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ca_cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
}</block> <decl><name>ssl</name></decl>;</struct>
}</block>;</struct>

<struct>struct <name>privdata</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dtor_counter</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>pushCounters</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>str</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_TEST_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>redisSSLContext</name> <modifier>*</modifier></type><name>_ssl_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skips</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>_s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ printf("#%02d ", ++tests); printf(_s); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_cond</name><parameter_list>(<parameter><type><name>_c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(_c) printf("\033[0;32mPASSED\033[0;0m\n"); else {printf("\033[0;31mFAILED\033[0;0m\n"); fails++;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_skipped</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ printf("\033[01;33mSKIPPED\033[0;0m\n"); skips++; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal><operator>)</operator><operator>+</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>assert</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(e)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_VERSION_FIELD</name></cpp:macro> <cpp:value>"redis_version:"</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>get_redis_version</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>majorptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minorptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>REDIS_VERSION_FIELD</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REDIS_VERSION_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>eptr</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>eptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>majorptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>majorptr</name> <operator>=</operator> <name>major</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>minorptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>minorptr</name> <operator>=</operator> <name>minor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>abort</name>:</label>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: Cannot determine Redis version, aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>redisContext</name> <modifier>*</modifier></type><name>select_database</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>


<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SELECT 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DBSIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>integer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Database #9 is not empty, test can not continue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>send_hello</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expected</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"HELLO %d"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><name>version</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>REDIS_REPLY_MAP</name></expr> </then><else>: <expr><name>REDIS_REPLY_ARRAY</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>send_client_tracking</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"CLIENT TRACKING %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disconnect</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>


<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SELECT 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FLUSHDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>keep_fd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>redisFreeKeepFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_ssl_handshake</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_TEST_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redisInitiateSSLWithContext</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>_ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SSL error: %s\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>redisContext</name> <modifier>*</modifier></type><name>do_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_TCP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnect</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_SSL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnect</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>ssl</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>ssl</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_UNIX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectUnix</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_FD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>dummy_ctx</name> <init>= <expr><call><name>redisConnectUnix</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dummy_ctx</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>disconnect</name><argument_list>(<argument><expr><name>dummy_ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connecting to inherited fd %d\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectFd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection error: can't allocate redis context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection error: %s\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_SSL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_ssl_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>select_database</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_reconnect</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>redisReconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_SSL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_ssl_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_format_commands</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command without interpolation: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%s string interpolation: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%s and an empty string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$0\r\n\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with an empty string in between proper interpolations: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$0\r\n\r\n$3\r\nfoo\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%b string interpolation: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %b %b"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="string">"b\0r"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nb\0r\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%b and an empty string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %b %b"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$0\r\n\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with literal %%: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %% %%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$1\r\n%\r\n$1\r\n%\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEGER_WIDTH_TEST</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { type value = 123; test("Format command with printf-delegation (" #type "): "); len = redisFormatCommand(&amp;cmd,"key:%08" fmt " str:%s", value, "hello"); test_cond(strncmp(cmd,"*2\r\n$12\r\nkey:00000123\r\n$9\r\nstr:hello\r\n",len) == 0 &amp;&amp; len == 4+5+(12+2)+4+(9+2)); hi_free(cmd); } while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_WIDTH_TEST</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { type value = 123.0; test("Format command with printf-delegation (" #type "): "); len = redisFormatCommand(&amp;cmd,"key:%08.3f str:%s", value, "hello"); test_cond(strncmp(cmd,"*2\r\n$12\r\nkey:0123.000\r\n$9\r\nstr:hello\r\n",len) == 0 &amp;&amp; len == 4+5+(12+2)+4+(9+2)); hi_free(cmd); } while(0)</cpp:value></cpp:define>








<expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"hhd"</literal></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"hd"</literal></expr></argument>, <argument><expr><name>short</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"lld"</literal></argument>, <argument>long long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"u"</literal></argument>, <argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"hhu"</literal></argument>, <argument>unsigned char</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"hu"</literal></argument>, <argument>unsigned short</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"lu"</literal></argument>, <argument>unsigned long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"llu"</literal></argument>, <argument>unsigned long long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>FLOAT_WIDTH_TEST</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FLOAT_WIDTH_TEST</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with invalid printf format: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"key:%08p %b"</literal></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">1234</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"SET"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"foo\0xxx"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"bar"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>lens</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command by passing argc/argv without lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command by passing argc/argv with lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>lens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$7\r\nfoo\0xxx\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">7</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>hisds</name></type> <name>sds_cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sds_cmd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command into hisds by passing argc/argv without lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatSdsCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sds_cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sds_cmd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command into hisds by passing argc/argv with lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatSdsCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sds_cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>lens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$7\r\nfoo\0xxx\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">7</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_append_formatted_commands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>do_connect</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Append format command: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"SET foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>redisAppendFormattedCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_reply_reader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Error handling in reply parser: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"@foo\r\n"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Protocol error, got \"@\" as reply type byte"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Memory cleanup in reply parser: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"*2\r\n"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"$5\r\nhello\r\n"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"@foo\r\n"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Protocol error, got \"@\" as reply type byte"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can handle arbitrarily nested multi-bulks: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"*1\r\n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"$6\r\nLOLWUT\r\n"</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse arbitrarily nested multi-bulks correctly: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"LOLWUT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Correctly parses LLONG_MAX: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">":9223372036854775807\r\n"</literal></expr></argument>,<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>integer</name> <operator>==</operator> <name>LLONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when &gt; LLONG_MAX: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">":9223372036854775808\r\n"</literal></expr></argument>,<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Bad integer value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Correctly parses LLONG_MIN: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">":-9223372036854775808\r\n"</literal></expr></argument>,<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>integer</name> <operator>==</operator> <name>LLONG_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when &lt; LLONG_MIN: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">":-9223372036854775809\r\n"</literal></expr></argument>,<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Bad integer value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when array &lt; -1: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"*-2\r\n+asdf\r\n"</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Multi-bulk length out of range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when bulk &lt; -1: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"$-2\r\nasdf\r\n"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Bulk string length out of range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can configure maximum multi-bulk elements: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>maxelements</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"*1025\r\n"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Multi-bulk length out of range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Multi-bulk never overflows regardless of maxelements: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bad_mbulk_len</name> <init>= <expr><operator>(</operator><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>bad_mbulk_reply</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>bad_mbulk_reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bad_mbulk_reply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"*%llu\r\n+asdf\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>bad_mbulk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>maxelements</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>bad_mbulk_reply</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>bad_mbulk_reply</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLONG_MAX</name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr></cpp:if>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when array &gt; SIZE_MAX: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"*9223372036854775807\r\n+asdf\r\n"</literal></expr></argument>,<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Multi-bulk length out of range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when bulk &gt; SIZE_MAX: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"$9223372036854775807\r\nasdf\r\n"</literal></expr></argument>,<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Bulk string length out of range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Works with NULL functions for reply: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"+OK\r\n"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Works when a single newline (\\r\\n) covers two calls to feed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"+OK\r"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't reset state after protocol error: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"x"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't do empty allocation for empty multi bulk: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"*0\r\n"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse RESP3 verbatim strings: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"=10\r\ntxt:LOLWUT\r\n"</literal></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_VERB</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"LOLWUT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse RESP3 push messages: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"&gt;2\r\n$6\r\nLOLWUT\r\n:42\r\n"</literal></expr></argument>,<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_PUSH</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"LOLWUT"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_free_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>redisCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't fail when redisFree is passed a NULL value: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>redisCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>redisCtx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't fail when freeReplyObject is passed a NULL value: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hi_malloc_fail</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hi_calloc_fail</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nmemb</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hi_realloc_fail</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_allocator_injection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>hiredisAllocFuncs</name></type> <name>ha</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mallocFn</name> <operator>=</operator> <name>hi_malloc_fail</name></expr>,
<expr><operator>.</operator><name>callocFn</name> <operator>=</operator> <name>hi_calloc_fail</name></expr>,
<expr><operator>.</operator><name>reallocFn</name> <operator>=</operator> <name>hi_realloc_fail</name></expr>,
<expr><operator>.</operator><name>strdupFn</name> <operator>=</operator> <name>strdup</name></expr>,
<expr><operator>.</operator><name>freeFn</name> <operator>=</operator> <name>free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>hiredisSetAllocators</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"redisContext uses injected allocators: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>redisConnect</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">6379</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"redisReader uses injected allocators: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>reader</name> <init>= <expr><call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>hiredisResetAllocators</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIREDIS_BAD_DOMAIN</name></cpp:macro> <cpp:value>"idontexist-noreally.com"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_connection_errors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{<expr><operator>.</operator><name>ai_family</name> <operator>=</operator> <name>AF_INET</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>HIREDIS_BAD_DOMAIN</name></expr></argument>, <argument><expr><literal type="string">"6379"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai_tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns error when host cannot be resolved: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnect</name><argument_list>(<argument><expr><name>HIREDIS_BAD_DOMAIN</name></expr></argument>, <argument><expr><literal type="number">6379</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_OTHER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Name or service not known"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Can't resolve: "</literal> <name>HIREDIS_BAD_DOMAIN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Name does not resolve"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"nodename nor servname provided, or not known"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"No address associated with hostname"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Temporary failure in name resolution"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"hostname nor servname provided, or not known"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"no address associated with name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"No such host is known. "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Skipping NXDOMAIN test. Found evil ISP!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns error when the port is not open: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnect</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Connection refused"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns error when the unix_sock socket path doesn't accept connections: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectUnix</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"/tmp/idontexist.sock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>push_handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pushCounters</name></name> <modifier>*</modifier></type><name>pcounts</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>r</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>payload</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_PUSH</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>elements</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>payload</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>payload</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>payload</name> <operator>=</operator> <name><name>payload</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>payload</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcounts</name><operator>-&gt;</operator><name>str</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>payload</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_NIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcounts</name><operator>-&gt;</operator><name>nil</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>push_handler_async</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ac</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>reply</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_resp3_push_handler</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pushCounters</name></name></type> <name>pc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisPushFn</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>send_hello</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_client_tracking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>privdata</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>privdata</name></name> <operator>=</operator> <operator>&amp;</operator><name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GET key:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"RESP3 PUSH messages are handled out of band by default: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SET key:0 val:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GET key:0"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>redisSetPushCallback</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>push_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"We can set a custom RESP3 PUSH handler: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SET key:0 val:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator> <name><name>pc</name><operator>.</operator><name>str</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"We properly handle a NIL invalidation payload: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"FLUSHDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator> <name><name>pc</name><operator>.</operator><name>nil</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"With no handler, PUSH replies come in-band: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisSetPushCallback</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GET key:0"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"SET key:0 invalid"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"With no PUSH handler, no replies are lost: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisSetPushCallback</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>privdata</name></name> <operator>=</operator> <name>privdata</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_client_tracking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_hello</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>redisOptions</name></type> <name>get_redis_tcp_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>REDIS_OPTIONS_SET_TCP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_resp3_push_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"We set a default RESP3 handler for redisContext: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>get_redis_tcp_options</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>redisConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>push_cb</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"We don't set a default RESP3 push handler for redisAsyncContext: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>get_redis_tcp_options</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ac</name> <operator>=</operator> <call><name>redisAsyncConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>push_cb</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAsyncFree</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Our REDIS_OPT_NO_PUSH_AUTOFREE flag works: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>get_redis_tcp_options</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>options</name></name> <operator>|=</operator> <name>REDIS_OPT_NO_PUSH_AUTOFREE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>redisConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>push_cb</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"We can use redisOptions to set a custom PUSH handler for redisContext: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>get_redis_tcp_options</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>push_cb</name></name> <operator>=</operator> <name>push_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>redisConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>push_cb</name></name> <operator>==</operator> <name>push_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"We can use redisOptions to set a custom PUSH handler for redisAsyncContext: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>get_redis_tcp_options</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>async_push_cb</name></name> <operator>=</operator> <name>push_handler_async</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ac</name> <operator>=</operator> <call><name>redisAsyncConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>push_cb</name></name> <operator>==</operator> <name>push_handler_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisAsyncFree</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_privdata</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>privdata</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dtor_counter</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_privdata_hooks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>privdata</name></name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisOptions</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"We can use redisOptions to set privdata: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>get_redis_tcp_options</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REDIS_OPTIONS_SET_PRIVDATA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>free_privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>redisConnectWithOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>privdata</name></name> <operator>==</operator> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Our privdata destructor fires when we free the context: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>dtor_counter</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>do_connect</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Is able to deliver commands: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_STATUS &amp;&amp;
strcasecmp(reply-&gt;str,<literal type="string">"pong"</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Is a able to send commands verbatim: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name> <argument_list>(<argument>reply-&gt;type == REDIS_REPLY_STATUS &amp;&amp;
strcasecmp(reply-&gt;str,<literal type="string">"ok"</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"%%s String interpolation works: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"%%b String interpolation works: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET %b %b"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="string">"hello\x00world"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_STRING &amp;&amp;
memcmp(reply-&gt;str,<literal type="string">"hello\x00world"</literal>,<literal type="number">11</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Binary reply length is correct: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument>reply-&gt;len == <literal type="number">11</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse nil replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"GET nokey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_NIL</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse integer replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"INCR mycounter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_INTEGER &amp;&amp; reply-&gt;integer == <literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse multi bulk replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_ARRAY &amp;&amp;
reply-&gt;elements == <literal type="number">2</literal> &amp;&amp;
!memcmp(reply-&gt;element[<literal type="number">0</literal>]-&gt;str,<literal type="string">"bar"</literal>,<literal type="number">3</literal>) &amp;&amp;
!memcmp(reply-&gt;element[<literal type="number">1</literal>]-&gt;str,<literal type="string">"foo"</literal>,<literal type="number">3</literal>)</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can handle nested multi bulk replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"MULTI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 -1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <operator>(</operator><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"EXEC"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator>
<name><name>reply</name><operator>-&gt;</operator><name>elements</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator>
<name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"pong"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can pass NULL to redisGetReply: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_redis_version</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>test_resp3_push_handler</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>test_resp3_push_options</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_privdata_hooks</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>detect_debug_sleep</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>detected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"DEBUG SLEEP 0\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cause</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr> </then><else>: <expr><literal type="string">"(none)"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error testing for DEBUG SLEEP (Redis error: %s), exiting\n"</literal></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>detected</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>detected</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_connection_timeouts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sleep_cmd</name> <init>= <expr><literal type="string">"DEBUG SLEEP 3\r\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>do_connect</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Successfully completes a command when the timeout is not exceeded: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET foo fast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisSetTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"fast"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>do_connect</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Does not return a reply when the command times out: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>detect_debug_sleep</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisAppendFormattedCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sleep_cmd</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sleep_cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisSetTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Resource temporarily unavailable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_TIMEOUT</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"recv timeout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>test_skipped</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Reconnect properly reconnects after a timeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_reconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"PONG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Reconnect properly uses owned parameters: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name> <operator>=</operator> <literal type="string">"foo"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name> <operator>=</operator> <literal type="string">"foo"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_reconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"PONG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_io_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>do_connect</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_redis_version</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns I/O error when the connection is lost: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"QUIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>_reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_EOF</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Server closed the connection"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>do_connect</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns I/O error on socket timeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisSetTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>respcode</name> <init>= <expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>_reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>respcode</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>respcode</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_invalid_timeout_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when an invalid timeout usec value is given to redisConnectWithTimeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectWithTimeout</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid timeout specified"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when an invalid timeout sec value is given to redisConnectWithTimeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>LONG_MAX</name><operator>)</operator> <operator>-</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectWithTimeout</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid timeout specified"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name> <modifier>*</modifier></type><name>hi_malloc_safe</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>hi_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_throughput</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>do_connect</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>replies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Throughput:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">500</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>hi_malloc_safe</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx PING: %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>hi_malloc_safe</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 499"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx LRANGE with 500 elements: %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>hi_malloc_safe</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"INCRBY incrkey %d"</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx INCRBY: %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>hi_malloc_safe</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx PING (pipelined): %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>hi_malloc_safe</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 499"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx LRANGE with 500 elements (pipelined): %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>hi_malloc_safe</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"INCRBY incrkey %d"</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>hi_free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx INCRBY (pipelined): %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




































































































<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config</name></name></type> <name>cfg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>tcp</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>host</name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>,
<expr><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">6379</literal></expr>
}</block></expr>,
<expr><operator>.</operator><name>unix_sock</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>path</name> <operator>=</operator> <literal type="string">"/tmp/redis.sock"</literal></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>throughput</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test_inherit_fd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skips_as_fails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test_unix_socket</name></decl>;</decl_stmt>


<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--skip-throughput"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>throughput</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--skip-inherit-fd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>test_inherit_fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--skips-as-fails"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skips_as_fails</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_TEST_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--ssl-port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--ssl-host"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--ssl-ca-cert"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>ca_cert</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--ssl-cert"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>cert</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--ssl-key"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid argument: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_unix_socket</name> <operator>=</operator> <call><name>access</name><argument_list>(<argument><expr><name><name>cfg</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>test_unix_socket</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>test_allocator_injection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_format_commands</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_reply_reader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_connection_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_free_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting against TCP connection (%s:%d):\n"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CONN_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_connection</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_connection_timeouts</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_io_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_invalid_timeout_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_append_formatted_commands</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>throughput</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>test_throughput</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting against Unix socket connection (%s): "</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>test_unix_socket</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CONN_UNIX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_connection</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_connection_timeouts</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_io_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>throughput</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>test_throughput</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>test_skipped</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_TEST_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>port</name></name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>host</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redisInitOpenSSL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_ssl_ctx</name> <operator>=</operator> <call><name>redisCreateSSLContext</name><argument_list>(<argument><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>ca_cert</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>cert</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>_ssl_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting against SSL connection (%s:%d):\n"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>ssl</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CONN_SSL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blocking_connection</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_connection_timeouts</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_io_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_invalid_timeout_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_append_formatted_commands</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>throughput</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>test_throughput</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>redisFreeSSLContext</name><argument_list>(<argument><expr><name>_ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_ssl_ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>test_inherit_fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting against inherited fd (%s): "</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>test_unix_socket</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CONN_FD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_blocking_connection</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>test_skipped</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fails</name> <operator>||</operator> <operator>(</operator><name>skips_as_fails</name> <operator>&amp;&amp;</operator> <name>skips</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** %d TESTS FAILED ***\n"</literal></expr></argument>, <argument><expr><name>fails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skips</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** %d TESTS SKIPPED ***\n"</literal></expr></argument>, <argument><expr><name>skips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ALL TESTS PASSED (%d skipped)\n"</literal></expr></argument>, <argument><expr><name>skips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
