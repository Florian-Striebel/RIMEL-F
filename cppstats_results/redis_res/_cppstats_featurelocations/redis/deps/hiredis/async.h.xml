<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/async.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HIREDIS_ASYNC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__HIREDIS_ASYNC_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>redisAsyncContext</name>;</struct_decl>
<struct_decl>struct <name>dict</name>;</struct_decl>


<typedef>typedef <function_decl><type><name>void</name></type> (<name>redisCallbackFn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisAsyncContext</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>redisCallback</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>redisCallback</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pending_subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisCallback</name>;</typedef>


<typedef>typedef <type><struct>struct <name>redisCallbackList</name> <block>{
<decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>head</name></decl>, <modifier>*</modifier><name>tail</name>;</decl_stmt>
}</block></struct></type> <name>redisCallbackList</name>;</typedef>


<typedef>typedef <function_decl><type><name>void</name></type> (<name>redisDisconnectCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>redisAsyncContext</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>redisConnectCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>redisAsyncContext</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type>(<name>redisTimerCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <type><struct>struct <name>redisAsyncContext</name> <block>{

<decl_stmt><decl><type><name>redisContext</name></type> <name>c</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errstr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dataCleanup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>addRead</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>delRead</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>addWrite</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>delWrite</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>scheduleTimer</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>ev</name></decl>;</struct>



<decl_stmt><decl><type><name>redisDisconnectCallback</name> <modifier>*</modifier></type><name>onDisconnect</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>redisConnectCallback</name> <modifier>*</modifier></type><name>onConnect</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>redisCallbackList</name></type> <name>replies</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>saddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name>redisCallbackList</name></type> <name>invalid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dict</name></name> <modifier>*</modifier></type><name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dict</name></name> <modifier>*</modifier></type><name>patterns</name></decl>;</decl_stmt>
}</block> <decl><name>sub</name></decl>;</struct>


<decl_stmt><decl><type><name>redisAsyncPushFn</name> <modifier>*</modifier></type><name>push_cb</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisAsyncContext</name>;</typedef>


<function_decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectWithOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectBind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectBindWithReuse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>redisAsyncConnectUnix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisAsyncSetConnectCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisConnectCallback</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisAsyncSetDisconnectCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisDisconnectCallback</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>redisAsyncPushFn</name> <modifier>*</modifier></type><name>redisAsyncSetPushCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisAsyncPushFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisAsyncSetTimeout</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisAsyncDisconnect</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisAsyncFree</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>redisAsyncHandleRead</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisAsyncHandleWrite</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisAsyncHandleTimeout</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisAsyncRead</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisAsyncWrite</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>redisvAsyncCommand</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisAsyncCommand</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisAsyncCommandArgv</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>argvlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisAsyncFormattedCommand</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>redisCallbackFn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
