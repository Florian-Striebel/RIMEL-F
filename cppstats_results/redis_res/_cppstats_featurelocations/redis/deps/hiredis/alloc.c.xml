<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/alloc.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>hiredisAllocFuncs</name></type> <name>hiredisAllocFns</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mallocFn</name> <operator>=</operator> <name>malloc</name></expr>,
<expr><operator>.</operator><name>callocFn</name> <operator>=</operator> <name>calloc</name></expr>,
<expr><operator>.</operator><name>reallocFn</name> <operator>=</operator> <name>realloc</name></expr>,
<expr><operator>.</operator><name>strdupFn</name> <operator>=</operator> <name>strdup</name></expr>,
<expr><operator>.</operator><name>freeFn</name> <operator>=</operator> <name>free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>hiredisAllocFuncs</name></type> <name>hiredisSetAllocators</name><parameter_list>(<parameter><decl><type><name>hiredisAllocFuncs</name> <modifier>*</modifier></type><name>override</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>hiredisAllocFuncs</name></type> <name>orig</name> <init>= <expr><name>hiredisAllocFns</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hiredisAllocFns</name> <operator>=</operator> <operator>*</operator><name>override</name></expr>;</expr_stmt>

<return>return <expr><name>orig</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>hiredisResetAllocators</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>hiredisAllocFns</name> <operator>=</operator> <operator>(</operator><name>hiredisAllocFuncs</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>mallocFn</name> <operator>=</operator> <name>malloc</name></expr>,
<expr><operator>.</operator><name>callocFn</name> <operator>=</operator> <name>calloc</name></expr>,
<expr><operator>.</operator><name>reallocFn</name> <operator>=</operator> <name>realloc</name></expr>,
<expr><operator>.</operator><name>strdupFn</name> <operator>=</operator> <name>strdup</name></expr>,
<expr><operator>.</operator><name>freeFn</name> <operator>=</operator> <name>free</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name> <modifier>*</modifier></type><name>hi_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>hiredisAllocFns</name><operator>.</operator><name>mallocFn</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hi_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>SIZE_MAX</name> <operator>/</operator> <name>size</name> <operator>&lt;</operator> <name>nmemb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>hiredisAllocFns</name><operator>.</operator><name>callocFn</name></name><argument_list>(<argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>hi_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>hiredisAllocFns</name><operator>.</operator><name>reallocFn</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>hi_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>hiredisAllocFns</name><operator>.</operator><name>strdupFn</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hi_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>hiredisAllocFns</name><operator>.</operator><name>freeFn</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
