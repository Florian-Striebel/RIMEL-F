<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/sockcompat.c">





























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_SOCKCOMPAT_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockcompat.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_wsaErrorToErrno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WSAEWOULDBLOCK</name></expr>:</case>
<return>return <expr><name>EWOULDBLOCK</name></expr>;</return>
<case>case <expr><name>WSAEINPROGRESS</name></expr>:</case>
<return>return <expr><name>EINPROGRESS</name></expr>;</return>
<case>case <expr><name>WSAEALREADY</name></expr>:</case>
<return>return <expr><name>EALREADY</name></expr>;</return>
<case>case <expr><name>WSAENOTSOCK</name></expr>:</case>
<return>return <expr><name>ENOTSOCK</name></expr>;</return>
<case>case <expr><name>WSAEDESTADDRREQ</name></expr>:</case>
<return>return <expr><name>EDESTADDRREQ</name></expr>;</return>
<case>case <expr><name>WSAEMSGSIZE</name></expr>:</case>
<return>return <expr><name>EMSGSIZE</name></expr>;</return>
<case>case <expr><name>WSAEPROTOTYPE</name></expr>:</case>
<return>return <expr><name>EPROTOTYPE</name></expr>;</return>
<case>case <expr><name>WSAENOPROTOOPT</name></expr>:</case>
<return>return <expr><name>ENOPROTOOPT</name></expr>;</return>
<case>case <expr><name>WSAEPROTONOSUPPORT</name></expr>:</case>
<return>return <expr><name>EPROTONOSUPPORT</name></expr>;</return>
<case>case <expr><name>WSAEOPNOTSUPP</name></expr>:</case>
<return>return <expr><name>EOPNOTSUPP</name></expr>;</return>
<case>case <expr><name>WSAEAFNOSUPPORT</name></expr>:</case>
<return>return <expr><name>EAFNOSUPPORT</name></expr>;</return>
<case>case <expr><name>WSAEADDRINUSE</name></expr>:</case>
<return>return <expr><name>EADDRINUSE</name></expr>;</return>
<case>case <expr><name>WSAEADDRNOTAVAIL</name></expr>:</case>
<return>return <expr><name>EADDRNOTAVAIL</name></expr>;</return>
<case>case <expr><name>WSAENETDOWN</name></expr>:</case>
<return>return <expr><name>ENETDOWN</name></expr>;</return>
<case>case <expr><name>WSAENETUNREACH</name></expr>:</case>
<return>return <expr><name>ENETUNREACH</name></expr>;</return>
<case>case <expr><name>WSAENETRESET</name></expr>:</case>
<return>return <expr><name>ENETRESET</name></expr>;</return>
<case>case <expr><name>WSAECONNABORTED</name></expr>:</case>
<return>return <expr><name>ECONNABORTED</name></expr>;</return>
<case>case <expr><name>WSAECONNRESET</name></expr>:</case>
<return>return <expr><name>ECONNRESET</name></expr>;</return>
<case>case <expr><name>WSAENOBUFS</name></expr>:</case>
<return>return <expr><name>ENOBUFS</name></expr>;</return>
<case>case <expr><name>WSAEISCONN</name></expr>:</case>
<return>return <expr><name>EISCONN</name></expr>;</return>
<case>case <expr><name>WSAENOTCONN</name></expr>:</case>
<return>return <expr><name>ENOTCONN</name></expr>;</return>
<case>case <expr><name>WSAETIMEDOUT</name></expr>:</case>
<return>return <expr><name>ETIMEDOUT</name></expr>;</return>
<case>case <expr><name>WSAECONNREFUSED</name></expr>:</case>
<return>return <expr><name>ECONNREFUSED</name></expr>;</return>
<case>case <expr><name>WSAELOOP</name></expr>:</case>
<return>return <expr><name>ELOOP</name></expr>;</return>
<case>case <expr><name>WSAENAMETOOLONG</name></expr>:</case>
<return>return <expr><name>ENAMETOOLONG</name></expr>;</return>
<case>case <expr><name>WSAEHOSTUNREACH</name></expr>:</case>
<return>return <expr><name>EHOSTUNREACH</name></expr>;</return>
<case>case <expr><name>WSAENOTEMPTY</name></expr>:</case>
<return>return <expr><name>ENOTEMPTY</name></expr>;</return>
<default>default:</default>

<return>return <expr><name>EIO</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_updateErrno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>_wsaErrorToErrno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_initWinsock</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s_initialized</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>WSADATA</name></type> <name>wsadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>WSAStartup</name><argument_list>(<argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>_wsaErrorToErrno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_initWinsock</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EAI_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WSATRY_AGAIN</name></expr>:</case> <return>return <expr><name>EAI_AGAIN</name></expr>;</return>
<case>case <expr><name>WSAEINVAL</name></expr>:</case> <return>return <expr><name>EAI_BADFLAGS</name></expr>;</return>
<case>case <expr><name>WSAEAFNOSUPPORT</name></expr>:</case> <return>return <expr><name>EAI_FAMILY</name></expr>;</return>
<case>case <expr><name>WSA_NOT_ENOUGH_MEMORY</name></expr>:</case> <return>return <expr><name>EAI_MEMORY</name></expr>;</return>
<case>case <expr><name>WSAHOST_NOT_FOUND</name></expr>:</case> <return>return <expr><name>EAI_NONAME</name></expr>;</return>
<case>case <expr><name>WSATYPE_NOT_FOUND</name></expr>:</case> <return>return <expr><name>EAI_SERVICE</name></expr>;</return>
<case>case <expr><name>WSAESOCKTNOSUPPORT</name></expr>:</case> <return>return <expr><name>EAI_SOCKTYPE</name></expr>;</return>
<default>default:</default> <return>return <expr><name>EAI_FAIL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>win32_gai_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>errcode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EAI_AGAIN</name></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSATRY_AGAIN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EAI_BADFLAGS</name></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EAI_FAMILY</name></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSAEAFNOSUPPORT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EAI_MEMORY</name></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSA_NOT_ENOUGH_MEMORY</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EAI_NONAME</name></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSAHOST_NOT_FOUND</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EAI_SERVICE</name></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSATYPE_NOT_FOUND</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EAI_SOCKTYPE</name></expr>:</case> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSAESOCKTNOSUPPORT</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>errcode</name> <operator>=</operator> <name>WSANO_RECOVERY</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>win32_freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SOCKET</name></type> <name>win32_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_initWinsock</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_ioctl</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>request</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_bind</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>bind</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_connect</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINPROGRESS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_getsockopt</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>optlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name> <operator>==</operator> <name>SOL_SOCKET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>optname</name> <operator>==</operator> <name>SO_RCVTIMEO</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>optname</name> <operator>==</operator> <name>SO_SNDTIMEO</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>optlen</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name>optval</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>dwlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>WSAEFAULT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>optlen</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_setsockopt</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>optlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name> <operator>==</operator> <name>SOL_SOCKET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>optname</name> <operator>==</operator> <name>SO_RCVTIMEO</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>optname</name> <operator>==</operator> <name>SO_SNDTIMEO</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name>optval</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>timeout</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_close</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>win32_recv</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>win32_send</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>send</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>WSAPoll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_updateErrno</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
