<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/read.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HIREDIS_READ_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__HIREDIS_READ_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ERR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ERR_IO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ERR_EOF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ERR_PROTOCOL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ERR_OOM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ERR_TIMEOUT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_ERR_OTHER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_ARRAY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_INTEGER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_NIL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_STATUS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_ERROR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_DOUBLE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_BOOL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_MAP</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_SET</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_ATTR</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_PUSH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_BIGNUM</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_REPLY_VERB</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_READER_MAX_BUF</name></cpp:macro> <cpp:value>(1024*16)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_READER_MAX_ARRAY_ELEMENTS</name></cpp:macro> <cpp:value>((1LL&lt;&lt;32) - 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>redisReadTask</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>elements</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisReadTask</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisReadTask</name>;</typedef>

<typedef>typedef <type><struct>struct <name>redisReplyObjectFunctions</name> <block>{
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>createString</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>createArray</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>createInteger</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>createDouble</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>createNil</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>createBool</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freeObject</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>redisReplyObjectFunctions</name>;</typedef>

<typedef>typedef <type><struct>struct <name>redisReader</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>maxelements</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>redisReadTask</name> <modifier>*</modifier><modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tasks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ridx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>redisReplyObjectFunctions</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisReader</name>;</typedef>


<function_decl><type><name>redisReader</name> <modifier>*</modifier></type><name>redisReaderCreateWithFunctions</name><parameter_list>(<parameter><decl><type><name>redisReplyObjectFunctions</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisReaderFree</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisReaderFeed</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisReaderGetReply</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisReaderSetPrivdata</name><parameter_list>(<parameter><type><name>_r</name></type></parameter>, <parameter><type><name>_p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(((redisReader*)(_r))-&gt;privdata = (_p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisReaderGetObject</name><parameter_list>(<parameter><type><name>_r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((redisReader*)(_r))-&gt;reply)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisReaderGetError</name><parameter_list>(<parameter><type><name>_r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((redisReader*)(_r))-&gt;errstr)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
