<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/sds.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdsalloc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hi_sdsHdrSize</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>type</name><operator>&amp;</operator><name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hisdshdr5</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hisdshdr8</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hisdshdr16</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hisdshdr32</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hisdshdr64</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name></type> <name>hi_sdsReqType</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>string_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HI_SDS_TYPE_5</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HI_SDS_TYPE_8</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HI_SDS_TYPE_16</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HI_SDS_TYPE_32</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>HI_SDS_TYPE_64</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>hisds</name></type> <name>hi_sdsnewlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>init</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>initlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hisds</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><call><name>hi_sdsReqType</name><argument_list>(<argument><expr><name>initlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>HI_SDS_TYPE_5</name> <operator>&amp;&amp;</operator> <name>initlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>HI_SDS_TYPE_8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdrlen</name> <init>= <expr><call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name>hi_s_malloc</name><argument_list>(<argument><expr><name>hdrlen</name><operator>+</operator><name>initlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdrlen</name><operator>+</operator><name>initlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>sh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name> <operator>|</operator> <operator>(</operator><name>initlen</name> <operator>&lt;&lt;</operator> <name>HI_SDS_TYPE_BITS</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>initlen</name> <operator>&amp;&amp;</operator> <name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>init</name></expr></argument>, <argument><expr><name>initlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>initlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>hisds</name></type> <name>hi_sdsempty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>hisds</name></type> <name>hi_sdsnew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>initlen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>init</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>initlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>hisds</name></type> <name>hi_sdsdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>hi_sdsfree</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>-</operator><call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><name>void</name></type> <name>hi_sdsupdatelen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reallen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>hi_sdsclear</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>hisds</name></type> <name>hi_sdsMakeRoomFor</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>addlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sh</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newsh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name> <init>= <expr><call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>oldtype</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>HI_SDS_TYPE_MASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdrlen</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;=</operator> <name>addlen</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>-</operator><call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name>oldtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>len</name><operator>+</operator><name>addlen</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <name>HI_SDS_MAX_PREALLOC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <name>HI_SDS_MAX_PREALLOC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>hi_sdsReqType</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>HI_SDS_TYPE_5</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>HI_SDS_TYPE_8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldtype</name><operator>==</operator><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>hi_s_realloc</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><name>hdrlen</name><operator>+</operator><name>newlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>hi_s_malloc</name><argument_list>(<argument><expr><name>hdrlen</name><operator>+</operator><name>newlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>hi_sdssetalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>hisds</name></type> <name>hi_sdsRemoveFreeSpace</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sh</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newsh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>oldtype</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>HI_SDS_TYPE_MASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>-</operator><call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name>oldtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>hi_sdsReqType</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldtype</name><operator>==</operator><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>hi_s_realloc</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><name>hdrlen</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>hi_s_malloc</name><argument_list>(<argument><expr><name>hdrlen</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>hi_sdssetalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>size_t</name></type> <name>hi_sdsAllocSize</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><call><name>hi_sdsalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><name>alloc</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name> <modifier>*</modifier></type><name>hi_sdsAllocPtr</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>s</name><operator>-</operator><call><name>hi_sdsHdrSize</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
























<function><type><name>void</name></type> <name>hi_sdsIncrLen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>incr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>flags</name><operator>&amp;</operator><name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>oldlen</name> <init>= <expr><call><name>HI_SDS_TYPE_5_LEN</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>oldlen</name><operator>+</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>oldlen</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>HI_SDS_TYPE_5</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>oldlen</name><operator>+</operator><name>incr</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>HI_SDS_TYPE_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>oldlen</name><operator>+</operator><name>incr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>hisds</name></type> <name>hi_sdsgrowzero</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>curlen</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><name>curlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>curlen</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>len</name><operator>-</operator><name>curlen</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>hisds</name></type> <name>hi_sdscatlen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>curlen</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>curlen</name><operator>+</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>curlen</name><operator>+</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>hisds</name></type> <name>hi_sdscat</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>hisds</name></type> <name>hi_sdscatsds</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>hisds</name></type> <name>hi_sdscpylen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hi_sdsalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>hisds</name></type> <name>hi_sdscpy</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>hi_sdscpylen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_LLSTR_SIZE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>hi_sdsll2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>



<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>value</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal><operator>+</operator><operator>(</operator><name>v</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>v</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name><operator>-</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>s</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>hi_sdsull2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal><operator>+</operator><operator>(</operator><name>v</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>v</name></expr>)</condition>;</do>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name><operator>-</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>s</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aux</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>hisds</name></type> <name>hi_sdsfromlonglong</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HI_SDS_LLSTR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>hi_sdsll2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>hisds</name></type> <name>hi_sdscatvprintf</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>cpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>staticbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>staticbuf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>staticbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>hi_s_malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>staticbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cpy</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>staticbuf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buflen</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>hi_s_malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>


<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>hi_sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>staticbuf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>hisds</name></type> <name>hi_sdscatprintf</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>hi_sdscatvprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>hisds</name></type> <name>hi_sdscatfmt</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>unum</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmt_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>f</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>next</name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmt_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>,<argument>long long</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HI_SDS_LLSTR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>hi_sdsll2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmt_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unum</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>,<argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>unum</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>,<argument>unsigned long long</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HI_SDS_LLSTR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>hi_sdsull2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>unum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmt_error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>

<label><name>fmt_error</name>:</label>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>hisds</name></type> <name>hi_sdstrim</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>end</name> <operator>=</operator> <name>s</name><operator>+</operator><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>sp</name> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while<condition>(<expr><name>ep</name> <operator>&gt;</operator> <name>sp</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><operator>*</operator><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ep</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sp</name> <operator>&gt;</operator> <name>ep</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>ep</name><operator>-</operator><name>sp</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>





















<function><type><name>int</name></type> <name>hi_sdsrange</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>len</name><operator>+</operator><name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>len</name><operator>+</operator><name>end</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>start</name> <operator>&gt;</operator> <name>end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>start</name> <operator>&gt;</operator> <name>end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&amp;&amp;</operator> <name>newlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>newlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>hi_sdstolower</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>hi_sdstoupper</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>hi_sdscmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>minlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>minlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>l1</name> <operator>&lt;</operator> <name>l2</name><operator>)</operator></expr> ?</condition><then> <expr><name>l1</name></expr> </then><else>: <expr><name>l2</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>minlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>l1</name><operator>-</operator><name>l2</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>hisds</name> <modifier>*</modifier></type><name>hi_sdssplitlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seplen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>elements</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slots</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hisds</name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seplen</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>hi_s_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hisds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>tokens</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>len</name><operator>-</operator><operator>(</operator><name>seplen</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slots</name> <operator>&lt;</operator> <name>elements</name><operator>+</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>hisds</name> <modifier>*</modifier></type><name>newtokens</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slots</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newtokens</name> <operator>=</operator> <call><name>hi_s_realloc</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hisds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newtokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tokens</name> <operator>=</operator> <name>newtokens</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>seplen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><name>j</name><operator>)</operator> <operator>==</operator> <name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>j</name></expr></argument>,<argument><expr><name>sep</name></expr></argument>,<argument><expr><name>seplen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>=</operator> <call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>start</name></expr></argument>,<argument><expr><name>j</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>elements</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>j</name><operator>+</operator><name>seplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name><operator>+</operator><name>seplen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>=</operator> <call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>start</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>elements</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>elements</name></expr>;</expr_stmt>
<return>return <expr><name>tokens</name></expr>;</return>

<label><name>cleanup</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elements</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>hi_sdsfreesplitres</name><parameter_list>(<parameter><decl><type><name>hisds</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tokens</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>hisds</name></type> <name>hi_sdscatrepr</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\""</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\%c"</literal></expr></argument>,<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\r"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\t"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\a'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\a"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\b"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>hi_sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\x%02x"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\""</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>hi_hex_digit_to_int</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <return>return <expr><literal type="number">5</literal></expr>;</return>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> <return>return <expr><literal type="number">6</literal></expr>;</return>
<case>case <expr><literal type="char">'7'</literal></expr>:</case> <return>return <expr><literal type="number">7</literal></expr>;</return>
<case>case <expr><literal type="char">'8'</literal></expr>:</case> <return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><literal type="char">'9'</literal></expr>:</case> <return>return <expr><literal type="number">9</literal></expr>;</return>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case> <return>return <expr><literal type="number">10</literal></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <return>return <expr><literal type="number">11</literal></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <return>return <expr><literal type="number">12</literal></expr>;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <return>return <expr><literal type="number">13</literal></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <return>return <expr><literal type="number">14</literal></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case> <return>return <expr><literal type="number">15</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




















<function><type><name>hisds</name> <modifier>*</modifier></type><name>hi_sdssplitargs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vector</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>inq</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>insq</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>hi_sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>inq</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator>
<call><name>isxdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>isxdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte</name></decl>;</decl_stmt>

<expr_stmt><expr><name>byte</name> <operator>=</operator> <operator>(</operator><call><name>hi_hex_digit_to_int</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">16</literal><operator>)</operator><operator>+</operator>
<call><name>hi_hex_digit_to_int</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>byte</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>done</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>insq</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><literal type="string">"'"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>done</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><name>done</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>inq</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><name>insq</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_vector</name> <init>= <expr><call><name>hi_s_realloc</name><argument_list>(<argument><expr><name>vector</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_vector</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vector</name> <operator>=</operator> <name>new_vector</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vector</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vector</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vector</name> <operator>=</operator> <call><name>hi_s_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>vector</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<label><name>err</name>:</label>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>hisds</name></type> <name>hi_sdsmapchars</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>setlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>hisds</name></type> <name>hi_sdsjoin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>hisds</name></type> <name>join</name> <init>= <expr><call><name>hi_sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>hi_sdscat</name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>argc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>hi_sdscat</name><argument_list>(<argument><expr><name>join</name></expr></argument>,<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>join</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>hisds</name></type> <name>hi_sdsjoinsds</name><parameter_list>(<parameter><decl><type><name>hisds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seplen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>hisds</name></type> <name>join</name> <init>= <expr><call><name>hi_sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>hi_sdscatsds</name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>argc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>hi_sdscatlen</name><argument_list>(<argument><expr><name>join</name></expr></argument>,<argument><expr><name>sep</name></expr></argument>,<argument><expr><name>seplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>join</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name> <modifier>*</modifier></type><name>hi_sds_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>hi_s_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>hi_sds_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>hi_s_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>hi_sds_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>hi_s_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HI_SDS_TEST_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testhelp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"limits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(x)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>hi_sdsTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>hisds</name></type> <name>x</name> <init>= <expr><call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"Create a string and obtain the length"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">3</literal> &amp;&amp; memcmp(x,<literal type="string">"foo\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"Create a string with specified length"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">2</literal> &amp;&amp; memcmp(x,<literal type="string">"fo\0"</literal>,<literal type="number">3</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdscat</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"Strings concatenation"</literal></expr></argument>,
<argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"fobar\0"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdscpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscpy() against an originally longer string"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">1</literal> &amp;&amp; memcmp(x,<literal type="string">"a\0"</literal>,<literal type="number">2</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdscpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscpy() against an originally shorter string"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">33</literal> &amp;&amp;
memcmp(x,<literal type="string">"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0"</literal>,<literal type="number">33</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdscatprintf</name><argument_list>(<argument><expr><call><name>hi_sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscatprintf() seems working in the base case"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">3</literal> &amp;&amp; memcmp(x,<literal type="string">"123\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdscatfmt</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"Hello %s World %I,%I--"</literal></expr></argument>, <argument><expr><literal type="string">"Hi!"</literal></expr></argument>, <argument><expr><name>LLONG_MIN</name></expr></argument>,<argument><expr><name>LLONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscatfmt() seems working in the base case"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">60</literal> &amp;&amp;
memcmp(x,<literal type="string">"--Hello Hi! World -9223372036854775808,"</literal>
<literal type="string">"9223372036854775807--"</literal>,<literal type="number">60</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdscatfmt</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"%u,%U--"</literal></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><name>ULLONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscatfmt() seems working with unsigned numbers"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">35</literal> &amp;&amp;
memcmp(x,<literal type="string">"--4294967295,18446744073709551615--"</literal>,<literal type="number">35</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">" x "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdstrim</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">" x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdstrim() works when all chars match"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">" x "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdstrim</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdstrim() works when a single char remains"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">1</literal> &amp;&amp; x[<literal type="number">0</literal>] == <literal type="char">'x'</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"xxciaoyyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdstrim</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"xy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdstrim() correctly trims characters"</literal></argument>,
<argument>hi_sdslen(x) == <literal type="number">4</literal> &amp;&amp; memcmp(x,<literal type="string">"ciao\0"</literal>,<literal type="number">5</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdsrange(...,1,1)"</literal></argument>,
<argument>hi_sdslen(y) == <literal type="number">1</literal> &amp;&amp; memcmp(y,<literal type="string">"i\0"</literal>,<literal type="number">2</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdsrange(...,1,-1)"</literal></argument>,
<argument>hi_sdslen(y) == <literal type="number">3</literal> &amp;&amp; memcmp(y,<literal type="string">"iao\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdsrange(...,-2,-1)"</literal></argument>,
<argument>hi_sdslen(y) == <literal type="number">2</literal> &amp;&amp; memcmp(y,<literal type="string">"ao\0"</literal>,<literal type="number">3</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdsrange(...,2,1)"</literal></argument>,
<argument>hi_sdslen(y) == <literal type="number">0</literal> &amp;&amp; memcmp(y,<literal type="string">"\0"</literal>,<literal type="number">1</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdsrange(...,1,100)"</literal></argument>,
<argument>hi_sdslen(y) == <literal type="number">3</literal> &amp;&amp; memcmp(y,<literal type="string">"iao\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdsrange(...,100,100)"</literal></argument>,
<argument>hi_sdslen(y) == <literal type="number">0</literal> &amp;&amp; memcmp(y,<literal type="string">"\0"</literal>,<literal type="number">1</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"foa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscmp(foo,foa)"</literal></argument>, <argument>hi_sdscmp(x,y) &gt; <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscmp(bar,bar)"</literal></argument>, <argument>hi_sdscmp(x,y) == <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"aar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscmp(bar,bar)"</literal></argument>, <argument>hi_sdscmp(x,y) &lt; <literal type="number">0</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnewlen</name><argument_list>(<argument><expr><literal type="string">"\a\n\0foo\r"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>hi_sdscatrepr</name><argument_list>(<argument><expr><call><name>hi_sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>test_cond</name><argument_list>(<argument><literal type="string">"hi_sdscatrepr(...data...)"</literal></argument>,
<argument>memcmp(y,<literal type="string">"\"\\a\\n\\x00foo\\r\""</literal>,<literal type="number">15</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oldfree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsnew</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"hi_sdsnew() free/len buffers"</literal></expr></argument>, <argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>oldlen</name> <init>= <expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>hi_sdsMakeRoomFor</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>x</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>HI_SDS_TYPE_MASK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"sdsMakeRoomFor() len"</literal></expr></argument>, <argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>oldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>HI_SDS_TYPE_5</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"hi_sdsMakeRoomFor() free"</literal></expr></argument>, <argument><expr><call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldfree</name> <operator>=</operator> <call><name>hi_sdsavail</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>x</name><operator>+</operator><name>oldlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal><operator>+</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>hi_sdsIncrLen</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"hi_sdsMakeRoomFor() content"</literal></expr></argument>,
<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"0ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"sdsMakeRoomFor() final length"</literal></expr></argument>,<argument><expr><call><name>hi_sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hi_sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>
<expr_stmt><expr><call><name>test_report</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HI_SDS_TEST_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>hi_sdsTest</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
