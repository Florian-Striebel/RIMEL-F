<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/deps/hiredis/sds.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HIREDIS_SDS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIREDIS_SDS_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_MAX_PREALLOC</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__attribute__</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ssize_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MAX</name></cpp:macro> <cpp:value>(LLONG_MAX &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>char</name> <modifier>*</modifier></type><name>hisds</name>;</typedef>



<struct>struct <macro><name>__attribute__</name> <argument_list>(<argument>(__packed__)</argument>)</argument_list></macro> <name>hisdshdr5</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <macro><name>__attribute__</name> <argument_list>(<argument>(__packed__)</argument>)</argument_list></macro> <name>hisdshdr8</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <macro><name>__attribute__</name> <argument_list>(<argument>(__packed__)</argument>)</argument_list></macro> <name>hisdshdr16</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <macro><name>__attribute__</name> <argument_list>(<argument>(__packed__)</argument>)</argument_list></macro> <name>hisdshdr32</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <macro><name>__attribute__</name> <argument_list>(<argument>(__packed__)</argument>)</argument_list></macro> <name>hisdshdr64</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_5</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_16</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_64</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_MASK</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_HDR_VAR</name><parameter_list>(<parameter><type><name>T</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct hisdshdr##T *sh = (struct hisdshdr##T *)((s)-(sizeof(struct hisdshdr##T)));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_HDR</name><parameter_list>(<parameter><type><name>T</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct hisdshdr##T *)((s)-(sizeof(struct hisdshdr##T))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI_SDS_TYPE_5_LEN</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)&gt;&gt;HI_SDS_TYPE_BITS)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>hi_sdslen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_TYPE_5_LEN</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>hi_sdsavail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>flags</name><operator>&amp;</operator><name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>-</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>-</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>-</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>HI_SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>-</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hi_sdssetlen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>flags</name><operator>&amp;</operator><name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>HI_SDS_TYPE_5</name> <operator>|</operator> <operator>(</operator><name>newlen</name> <operator>&lt;&lt;</operator> <name>HI_SDS_TYPE_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hi_sdsinclen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>flags</name><operator>&amp;</operator><name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>newlen</name> <init>= <expr><call><name>HI_SDS_TYPE_5_LEN</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>+</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>inc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>HI_SDS_TYPE_5</name> <operator>|</operator> <operator>(</operator><name>newlen</name> <operator>&lt;&lt;</operator> <name>HI_SDS_TYPE_BITS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>+=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>inc</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>inc</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>inc</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>inc</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>hi_sdsalloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_TYPE_5_LEN</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name></expr>;</return>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case>
<return>return <expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hi_sdssetalloc</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>flags</name><operator>&amp;</operator><name>HI_SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HI_SDS_TYPE_5</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_8</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_16</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_32</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HI_SDS_TYPE_64</name></expr>:</case>
<expr_stmt><expr><call><name>HI_SDS_HDR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>alloc</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>newlen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function_decl><type><name>hisds</name></type> <name>hi_sdsnewlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>init</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>initlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsnew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsempty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sdsfree</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsgrowzero</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdscatlen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdscat</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdscatsds</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdscpylen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdscpy</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>hisds</name></type> <name>hi_sdscatvprintf</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>hisds</name></type> <name>hi_sdscatprintf</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>hisds</name></type> <name>hi_sdscatprintf</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>hisds</name></type> <name>hi_sdscatfmt</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdstrim</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hi_sdsrange</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sdsupdatelen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sdsclear</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hi_sdscmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hisds</name></type> <name>s2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name> <modifier>*</modifier></type><name>hi_sdssplitlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seplen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sdsfreesplitres</name><parameter_list>(<parameter><decl><type><name>hisds</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sdstolower</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sdstoupper</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsfromlonglong</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdscatrepr</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name> <modifier>*</modifier></type><name>hi_sdssplitargs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsmapchars</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>setlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsjoin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsjoinsds</name><parameter_list>(<parameter><decl><type><name>hisds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seplen</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>hisds</name></type> <name>hi_sdsMakeRoomFor</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>addlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sdsIncrLen</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>incr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hisds</name></type> <name>hi_sdsRemoveFreeSpace</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>hi_sdsAllocSize</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hi_sdsAllocPtr</name><parameter_list>(<parameter><decl><type><name>hisds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hi_sds_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hi_sds_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hi_sds_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>hi_sdsTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
