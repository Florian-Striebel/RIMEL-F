<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/rax.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rax.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAX_MALLOC_INCLUDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAX_MALLOC_INCLUDE</name></cpp:macro> <cpp:value>"rax_malloc.h"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> RAX_MALLOC_INCLUDE</cpp:include>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>raxNotFound</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"rax-not-found-pointer"</literal></expr></init></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>raxDebugShowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAX_DEBUG_MSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (raxDebugMsg) { printf("%s:%s:%d:\t", __FILE__, __func__, __LINE__); printf(__VA_ARGS__); fflush(stdout); }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugnode</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>raxDebugShowNode(msg,n)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugnode</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>raxDebugMsg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>raxSetDebugMsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>raxDebugMsg</name> <operator>=</operator> <name>onoff</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>raxStackInit</name><parameter_list>(<parameter><decl><type><name>raxStack</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>static_items</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>maxitems</name></name> <operator>=</operator> <name>RAX_STACK_STATIC_ITEMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>raxStackPush</name><parameter_list>(<parameter><decl><type><name>raxStack</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>maxitems</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>static_items</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>rax_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>ts</name><operator>-&gt;</operator><name>maxitems</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>static_items</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>static_items</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>ts</name><operator>-&gt;</operator><name>maxitems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>newalloc</name> <init>= <expr><call><name>rax_realloc</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>ts</name><operator>-&gt;</operator><name>maxitems</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newalloc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>newalloc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>maxitems</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>raxStackPop</name><parameter_list>(<parameter><decl><type><name>raxStack</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>raxStackPeek</name><parameter_list>(<parameter><decl><type><name>raxStack</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>ts</name><operator>-&gt;</operator><name>items</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>raxStackFree</name><parameter_list>(<parameter><decl><type><name>raxStack</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name> <operator>!=</operator> <name><name>ts</name><operator>-&gt;</operator><name>static_items</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>raxPadding</name><parameter_list>(<parameter><type><name>nodesize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof(void*)-((nodesize+4) % sizeof(void*))) &amp; (sizeof(void*)-1))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>raxNodeLastChildPtr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((raxNode**) ( ((char*)(n)) + raxNodeCurrentLength(n) - sizeof(raxNode*) - (((n)-&gt;iskey &amp;&amp; !(n)-&gt;isnull) ? sizeof(void*) : 0) ))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>raxNodeFirstChildPtr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((raxNode**) ( (n)-&gt;data + (n)-&gt;size + raxPadding((n)-&gt;size)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>raxNodeCurrentLength</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( sizeof(raxNode)+(n)-&gt;size+ raxPadding((n)-&gt;size)+ ((n)-&gt;iscompr ? sizeof(raxNode*) : sizeof(raxNode*)*(n)-&gt;size)+ (((n)-&gt;iskey &amp;&amp; !(n)-&gt;isnull)*sizeof(void*)) )</cpp:value></cpp:define>










<function><type><name>raxNode</name> <modifier>*</modifier></type><name>raxNewNode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>children</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datafield</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nodesize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>children</name><operator>+</operator><call><name>raxPadding</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call><operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>children</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>datafield</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nodesize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>rax_malloc</name><argument_list>(<argument><expr><name>nodesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>children</name></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>rax</name> <modifier>*</modifier></type><name>raxNew</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name> <init>= <expr><call><name>rax_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rax</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rax</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numele</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>raxNewNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rax</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>rax</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>raxNode</name> <modifier>*</modifier></type><name>raxReallocForData</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>raxNodeCurrentLength</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rax_realloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>curlen</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>raxSetData</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ndata</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>n</name><operator>+</operator><call><name>raxNodeCurrentLength</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ndata</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>raxGetData</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ndata</name> <init>=<expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>n</name><operator>+</operator><call><name>raxNodeCurrentLength</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>,<argument><expr><name>ndata</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>raxNode</name> <modifier>*</modifier></type><name>raxAddChild</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>childptr</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>parentlink</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>raxNodeCurrentLength</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name> <init>= <expr><call><name>raxNodeCurrentLength</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>



<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>raxNewNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>newn</name> <init>= <expr><call><name>rax_realloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>newn</name></expr>;</expr_stmt>





























<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>







<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>n</name><operator>+</operator><name>curlen</name><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>n</name><operator>+</operator><name>newlen</name><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>












<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name> <init>= <expr><name>newlen</name> <operator>-</operator> <name>curlen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>











<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name><name>n</name><operator>-&gt;</operator><name>size</name></name><operator>+</operator>
<call><name>raxPadding</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><name>shift</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><name>shift</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>childfield</name> <init>= <expr><operator>(</operator><name>raxNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>pos</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>childfield</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>childptr</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>parentlink</name> <operator>=</operator> <name>childfield</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>raxNode</name> <modifier>*</modifier></type><name>raxCompressNode</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Compress node: %.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>child</name> <operator>=</operator> <call><name>raxNewNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>newsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>len</name><operator>+</operator><call><name>raxPadding</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newsize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>newn</name> <init>= <expr><call><name>rax_realloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>newn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>childfield</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>childfield</name></expr></argument>,<argument><expr><name>child</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>raxLowWalk</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>stopnode</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>splitpos</name></decl></parameter>, <parameter><decl><type><name>raxStack</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>parentlink</name> <init>= <expr><operator>&amp;</operator><name><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"Lookup current node"</literal></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxStackPush</name><argument_list>(<argument><expr><name>ts</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>children</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><name>children</name><operator>+</operator><name>j</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parentlink</name> <operator>=</operator> <name>children</name><operator>+</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



</block_content>}</block></while>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"Lookup stop node is"</literal></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stopnode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>stopnode</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>plink</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>plink</name> <operator>=</operator> <name>parentlink</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>splitpos</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>splitpos</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>raxGenericInsert</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overwrite</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>parentlink</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"###Insert %.*s with value %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>raxLowWalk</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>j</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>||</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"###Insert: node representing key exists\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>||</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>isnull</name></name> <operator>&amp;&amp;</operator> <name>overwrite</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>raxReallocForData</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>old</name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>overwrite</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numele</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






























































































































<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"ALGO 1: Stopped at compressed node %.*s (%p)\n"</literal></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Still to insert: %.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name><operator>-</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Splitting at %d: '%c'\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Other (key) letter is '%c'\n"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>childfield</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>,<argument><expr><name>childfield</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Next is %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"iskey %d\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"key value is %p\n"</literal></expr></argument>, <argument><expr><call><name>raxGetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>trimmedlen</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>postfixlen</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>split_node_is_key</name> <init>= <expr><operator>!</operator><name>trimmedlen</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>isnull</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nodesize</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>splitnode</name> <init>= <expr><call><name>raxNewNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>split_node_is_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>trimmed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>postfix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trimmedlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nodesize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>trimmedlen</name><operator>+</operator><call><name>raxPadding</name><argument_list>(<argument><expr><name>trimmedlen</name></expr></argument>)</argument_list></call><operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nodesize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>trimmed</name> <operator>=</operator> <call><name>rax_malloc</name><argument_list>(<argument><expr><name>nodesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>postfixlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nodesize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>postfixlen</name><operator>+</operator><call><name>raxPadding</name><argument_list>(<argument><expr><name>postfixlen</name></expr></argument>)</argument_list></call><operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>postfix</name> <operator>=</operator> <call><name>rax_malloc</name><argument_list>(<argument><expr><name>nodesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>splitnode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>trimmedlen</name> <operator>&amp;&amp;</operator> <name>trimmed</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>postfixlen</name> <operator>&amp;&amp;</operator> <name>postfix</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>splitnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>splitnode</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ndata</name> <init>= <expr><call><name>raxGetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>splitnode</name></expr></argument>,<argument><expr><name>ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>splitnode</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>splitnode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>trimmed</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <ternary><condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>isnull</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ndata</name> <init>= <expr><call><name>raxGetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>,<argument><expr><name>ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>splitnode</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>splitnode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>trimmed</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>trimmed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parentlink</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>postfixlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>postfixlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <name>postfixlen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>postfix</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>postfixlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>postfix</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>splitchild</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>splitnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>splitchild</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>postfix</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>postfix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>splitnode</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"ALGO 2: Stopped at compressed node %.*s (%p) j = %d\n"</literal></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>postfixlen</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nodesize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>postfixlen</name><operator>+</operator><call><name>raxPadding</name><argument_list>(<argument><expr><name>postfixlen</name></expr></argument>)</argument_list></call><operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nodesize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>postfix</name> <init>= <expr><call><name>rax_malloc</name><argument_list>(<argument><expr><name>nodesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nodesize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>j</name><operator>+</operator><call><name>raxPadding</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nodesize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>trimmed</name> <init>= <expr><call><name>rax_malloc</name><argument_list>(<argument><expr><name>nodesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>postfix</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>trimmed</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>childfield</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>,<argument><expr><name>childfield</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>postfixlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <name>postfixlen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>postfix</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>postfix</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>j</name></expr></argument>,<argument><expr><name>postfixlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>next</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <name>j</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trimmed</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>trimmed</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>trimmed</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>trimmed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><call><name>raxGetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>,<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>trimmed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>postfix</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>postfix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numele</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name><operator>-</operator><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Inserting compressed node\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>comprsize</name> <init>= <expr><name>len</name><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comprsize</name> <operator>&gt;</operator> <name>RAX_NODE_MAX_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>comprsize</name> <operator>=</operator> <name>RAX_NODE_MAX_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>newh</name> <init>= <expr><call><name>raxCompressNode</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>comprsize</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>newh</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parentlink</name> <operator>=</operator> <call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>comprsize</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Inserting normal node\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_parentlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>newh</name> <init>= <expr><call><name>raxAddChild</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>new_parentlink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>newh</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parentlink</name> <operator>=</operator> <name>new_parentlink</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>newh</name> <init>= <expr><call><name>raxReallocForData</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>newh</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numele</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>oom</name>:</label>





<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numele</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>raxInsert</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>raxGenericInsert</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>old</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>raxTryInsert</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>raxGenericInsert</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>old</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>raxFind</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"###Lookup: %.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>splitpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><call><name>raxLowWalk</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>splitpos</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>len</name> <operator>||</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name>splitpos</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>raxNotFound</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>raxGetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>raxFindParentLink</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>raxNode</name> <modifier>*</modifier></type><name>raxRemoveChild</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"raxRemoveChild before"</literal></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"raxRemoveChild after"</literal></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>parent</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>c</name> <init>= <expr><name>cp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>



<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<decl_stmt><decl><type><name>int</name></type> <name>taillen</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name><name>parent</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"raxRemoveChild tail len: %d\n"</literal></expr></argument>, <argument><expr><name>taillen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>taillen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>size</name></name><operator>+</operator><literal type="number">4</literal><operator>)</operator> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>cp</name><operator>)</operator><operator>-</operator><name>shift</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><name>taillen</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>valuelen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>isnull</name></name><operator>)</operator></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>c</name><operator>)</operator><operator>-</operator><name>shift</name></expr></argument>,<argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>taillen</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>+</operator><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>



<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>rax_realloc</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,<argument><expr><call><name>raxNodeCurrentLength</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newnode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"raxRemoveChild after"</literal></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><ternary><condition><expr><name>newnode</name></expr> ?</condition><then> <expr><name>newnode</name></expr> </then><else>: <expr><name>parent</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>raxRemove</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxStack</name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"###Delete: %.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStackInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>splitpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><call><name>raxLowWalk</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>splitpos</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>len</name> <operator>||</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name>splitpos</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStackFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>old</name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numele</name></name><operator>--</operator></expr>;</expr_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>trycompress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Key deleted in node without children. Cleanup needed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>h</name> <operator>!=</operator> <name><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>child</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Freeing child %p [%.*s] key:%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>child</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>child</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>child</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>iskey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>raxStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Unlinking child %p from parent %p\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>child</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>raxRemoveChild</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>!=</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>raxStackPeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>parentlink</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parentlink</name> <operator>=</operator> <operator>&amp;</operator><name><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>parentlink</name> <operator>=</operator> <call><name>raxFindParentLink</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>new</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>new</name><operator>-&gt;</operator><name>iskey</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trycompress</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>trycompress</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>trycompress</name> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>.</operator><name>oom</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>trycompress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>












































<if_stmt><if>if <condition>(<expr><name>trycompress</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"After removing %.*s:\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"Compression may be needed"</literal></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Seek start node\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>raxStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>iskey</name></name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"Going up to"</literal></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>comprsize</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nodes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>comprsize</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>RAX_NODE_MAX_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nodes</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>comprsize</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>nodes</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>nodesize</name> <init>=
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>comprsize</name><operator>+</operator><call><name>raxPadding</name><argument_list>(<argument><expr><name>comprsize</name></expr></argument>)</argument_list></call><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>raxNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>rax_malloc</name><argument_list>(<argument><expr><name>nodesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>raxStackFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>iskey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>comprsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>++</operator></expr>;</expr_stmt>




<expr_stmt><expr><name>comprsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>comprsize</name></expr></argument>,<argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>comprsize</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>iskey</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"New node"</literal></expr></argument>,<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>parentlink</name> <init>= <expr><call><name>raxFindParentLink</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>parentlink</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>new</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Compressed %d nodes, %d total bytes\n"</literal></expr></argument>,
<argument><expr><name>nodes</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>comprsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>raxStackFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>raxRecursiveFree</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"free traversing"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numchildren</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>numchildren</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxRecursiveFree</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>child</name></expr></argument>,<argument><expr><name>free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>debugnode</name><argument_list>(<argument><expr><literal type="string">"free depth-first"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>free_callback</name> <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><call><name>raxGetData</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>raxFreeWithCallback</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>raxRecursiveFree</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr></argument>,<argument><expr><name>free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rax</name><operator>-&gt;</operator><name>numnodes</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>raxFree</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>rax</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>raxStart</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>RAX_ITER_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rt</name></name> <operator>=</operator> <name>rt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>key_static_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_max</name></name> <operator>=</operator> <name>RAX_ITER_STATIC_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStackInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>raxIteratorAddChars</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>key_max</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>key_len</name></name><operator>+</operator><name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name><name>it</name><operator>-&gt;</operator><name>key_static_string</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:
<expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_max</name> <init>= <expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name><operator>+</operator><name>len</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>rax_realloc</name><argument_list>(<argument><expr><name>old</name></expr></argument>,<argument><expr><name>new_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>old</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>it</name><operator>-&gt;</operator><name>key_static_string</name></name></expr> </then><else>: <expr><name>old</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>key_static_string</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_max</name></name> <operator>=</operator> <name>new_max</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name><operator>+</operator><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>raxIteratorDelChars</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><name>int</name></type> <name>raxIteratorNextStep</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noup</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RAX_ITER_EOF</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RAX_ITER_JUST_SEEKED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>orig_key_len</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>orig_stack_items</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>items</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>orig_node</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>children</name> <init>= <expr><ternary><condition><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noup</name> <operator>&amp;&amp;</operator> <name>children</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"GO DEEPER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxStackPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node_cb</name></name> <operator>&amp;&amp;</operator> <call><name><name>it</name><operator>-&gt;</operator><name>node_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_noup</name> <init>= <expr><name>noup</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noup</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name><name>it</name><operator>-&gt;</operator><name>rt</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>orig_stack_items</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>orig_key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>orig_node</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>prevchild</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>raxStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>noup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>todel</name> <init>= <expr><ternary><condition><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxIteratorDelChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>todel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name>old_noup</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"SCAN NEXT %c\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>prevchild</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"SCAN found a new node\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxStackPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node_cb</name></name> <operator>&amp;&amp;</operator> <call><name><name>it</name><operator>-&gt;</operator><name>node_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>raxSeekGreatest</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxStackPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>raxIteratorPrevStep</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noup</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RAX_ITER_EOF</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RAX_ITER_JUST_SEEKED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>orig_key_len</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>orig_stack_items</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>items</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>orig_node</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_noup</name> <init>= <expr><name>noup</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noup</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name><name>it</name><operator>-&gt;</operator><name>rt</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>orig_stack_items</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>orig_key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>orig_node</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>prevchild</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>raxStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>noup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>todel</name> <init>= <expr><ternary><condition><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxIteratorDelChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>todel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name>old_noup</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"SCAN PREV %c\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>prevchild</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"SCAN found a new node\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxStackPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxSeekGreatest</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>raxSeek</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ele</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAX_ITER_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>rt</name><operator>-&gt;</operator><name>numele</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_EOF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>


<return>return <expr><call><name>raxSeek</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="string">"&gt;="</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>rt</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxSeekGreatest</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iskey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>splitpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><call><name>raxLowWalk</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>rt</name></name></expr></argument>,<argument><expr><name>ele</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>splitpos</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>oom</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>||</operator> <name>splitpos</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>ele</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lt</name> <operator>||</operator> <name>gt</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>ele</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><name>splitpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"After initial seek: i=%d len=%d key=%.*s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>ele</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Seek normal node on mismatch: %.*s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>raxIteratorPrevStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>raxIteratorNextStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>!=</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Compressed mismatch: %.*s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nodechar</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>splitpos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keychar</name> <init>= <expr><name><name>ele</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gt</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>nodechar</name> <operator>&gt;</operator> <name>keychar</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorNextStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorNextStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>nodechar</name> <operator>&lt;</operator> <name>keychar</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxSeekGreatest</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorPrevStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"No mismatch: %.*s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iscompr</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>iskey</name></name> <operator>&amp;&amp;</operator> <name>splitpos</name> <operator>&amp;&amp;</operator> <name>lt</name></expr>)</condition> <block>{<block_content>












<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>raxIteratorNextStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>raxIteratorPrevStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_JUST_SEEKED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_EOF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>raxNext</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorNextStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RAX_ITER_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>raxPrev</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorPrevStep</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RAX_ITER_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>raxRandomWalk</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>steps</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>rt</name><operator>-&gt;</operator><name>numele</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RAX_ITER_EOF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>steps</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>fle</name> <init>= <expr><literal type="number">1</literal><operator>+</operator><call><name>floor</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>rt</name><operator>-&gt;</operator><name>numele</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fle</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>steps</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>fle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>steps</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numchildren</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>numchildren</name><operator>+</operator><operator>(</operator><name>n</name> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>rt</name><operator>-&gt;</operator><name>head</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>numchildren</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>raxStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todel</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxIteratorDelChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>todel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxIteratorAddChars</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><name>r</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>+</operator><name>r</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxStackPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>steps</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>raxGetData</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>raxCompare</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>minlen</name> <init>= <expr><ternary><condition><expr><name>key_len</name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>key_len</name></name></expr> ?</condition><then> <expr><name>key_len</name></expr> </then><else>: <expr><name><name>iter</name><operator>-&gt;</operator><name>key_len</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>minlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>gt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>key_len</name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>key_len</name></name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>eq</name> <operator>&amp;&amp;</operator> <name>key_len</name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>key_len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>key_len</name></name> <operator>&lt;</operator> <name>key_len</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>gt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>key_len</name></name> <operator>&gt;</operator> <name>key_len</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>gt</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>lt</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>raxStop</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>key_static_string</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rax_free</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>raxStackFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>raxEOF</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RAX_ITER_EOF</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>raxSize</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>rax</name><operator>-&gt;</operator><name>numele</name></name></expr>;</return>
</block_content>}</block></function>





























<function><type><name>void</name></type> <name>raxRecursiveShow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lpad</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><literal type="char">'['</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>e</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><literal type="char">']'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numchars</name> <init>= <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%.*s%c"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>numchars</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"=%p"</literal></expr></argument>,<argument><expr><call><name>raxGetData</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numchildren</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lpad</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>numchildren</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>numchildren</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lpad</name> <operator>+=</operator> <name>numchars</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numchildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>branch</name> <init>= <expr><literal type="string">" `-(%c) "</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>numchildren</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lpad</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>branch</name></expr></argument>,<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxRecursiveShow</name><argument_list>(<argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lpad</name></expr></argument>,<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>raxShow</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>raxRecursiveShow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>raxDebugShowNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>raxDebugMsg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %p [%.*s] key:%u size:%u children:"</literal></expr></argument>,
<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numcld</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cldptr</name> <init>= <expr><call><name>raxNodeLastChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>numcld</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>numcld</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,<argument><expr><name>cldptr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cldptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%p "</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


















<function><type><name>unsigned</name> <name>long</name></type> <name>raxTouch</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>debugf</name><argument_list>(<argument><expr><literal type="string">"Touching %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>iskey</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>raxGetData</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numchildren</name> <init>= <expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>iscompr</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>raxNodeFirstChildPtr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numchildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>numchildren</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,<argument><expr><name>cp</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">0x65d1760</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>raxTouch</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>
</unit>
