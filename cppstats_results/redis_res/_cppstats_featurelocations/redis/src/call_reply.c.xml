<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/call_reply.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"call_reply.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLY_FLAG_ROOT</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLY_FLAG_PARSED</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLY_FLAG_RESP3</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>






<struct>struct <name>CallReply</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>original_proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>proto_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>



<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
}</block> <decl><name>verbatim_str</name></decl>;</struct>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>CallReply</name></name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
}</block> <decl><name>val</name></decl>;</union>

<decl_stmt><decl><type><name><name>struct</name> <name>CallReply</name></name> <modifier>*</modifier></type><name>attribute</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplySetSharedData</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extra_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>proto</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>proto_len</name></name> <operator>=</operator> <name>proto_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>extra_flags</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyNull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_NULL</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><name>REPLY_FLAG_RESP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyNullBulkString</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_NULL</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyNullArray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_NULL</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyBulkString</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_STRING</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyError</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_ERROR</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplySimpleStr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_STRING</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyLong</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_INTEGER</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyDouble</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_DOUBLE</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><name>REPLY_FLAG_RESP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyVerbatimString</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_VERBATIM_STRING</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><name>REPLY_FLAG_RESP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>verbatim_str</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>verbatim_str</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyBigNumber</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_BIG_NUMBER</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><name>REPLY_FLAG_RESP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyBool</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callReplySetSharedData</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_BOOL</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>, <argument><expr><name>REPLY_FLAG_RESP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyParseCollection</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elements_per_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><name>elements_per_entry</name> <operator>*</operator> <name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CallReply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <name>elements_per_entry</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>elements_per_entry</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>elements_per_entry</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>.</operator><name>private_data</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>private_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseReply</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>REPLY_FLAG_PARSED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>REPLY_FLAG_RESP3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REPLY_FLAG_RESP3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>proto</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>proto_len</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyAttribute</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name></name> <operator>=</operator> <call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CallReply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_REPLY_ATTRIBUTE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callReplyParseCollection</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REPLY_FLAG_PARSED</name> <operator>|</operator> <name>REPLY_FLAG_RESP3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>private_data</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>parseReply</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>proto</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>proto_len</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>curr_location</name></name> <operator>-</operator> <name>proto</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REPLY_FLAG_RESP3</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyArray</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_REPLY_ARRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callReplyParseCollection</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplySet</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_REPLY_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callReplyParseCollection</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REPLY_FLAG_RESP3</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyMap</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_REPLY_MAP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callReplyParseCollection</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REPLY_FLAG_RESP3</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyParseError</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDISMODULE_REPLY_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>freeCallReplyInternal</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_REPLY_ARRAY</name> <operator>||</operator> <name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_REPLY_SET</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rep</name><operator>-&gt;</operator><name>len</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>freeCallReplyInternal</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_REPLY_MAP</name> <operator>||</operator> <name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDISMODULE_REPLY_ATTRIBUTE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rep</name><operator>-&gt;</operator><name>len</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>freeCallReplyInternal</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeCallReplyInternal</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeCallReplyInternal</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>freeCallReply</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REPLY_FLAG_ROOT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REPLY_FLAG_PARSED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeCallReplyInternal</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>original_proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ReplyParserCallbacks</name></type> <name>DefaultParserCallbacks</name> <init>= <expr><block>{
<expr><operator>.</operator><name>null_callback</name> <operator>=</operator> <name>callReplyNull</name></expr>,
<expr><operator>.</operator><name>bulk_string_callback</name> <operator>=</operator> <name>callReplyBulkString</name></expr>,
<expr><operator>.</operator><name>null_bulk_string_callback</name> <operator>=</operator> <name>callReplyNullBulkString</name></expr>,
<expr><operator>.</operator><name>null_array_callback</name> <operator>=</operator> <name>callReplyNullArray</name></expr>,
<expr><operator>.</operator><name>error_callback</name> <operator>=</operator> <name>callReplyError</name></expr>,
<expr><operator>.</operator><name>simple_str_callback</name> <operator>=</operator> <name>callReplySimpleStr</name></expr>,
<expr><operator>.</operator><name>long_callback</name> <operator>=</operator> <name>callReplyLong</name></expr>,
<expr><operator>.</operator><name>array_callback</name> <operator>=</operator> <name>callReplyArray</name></expr>,
<expr><operator>.</operator><name>set_callback</name> <operator>=</operator> <name>callReplySet</name></expr>,
<expr><operator>.</operator><name>map_callback</name> <operator>=</operator> <name>callReplyMap</name></expr>,
<expr><operator>.</operator><name>double_callback</name> <operator>=</operator> <name>callReplyDouble</name></expr>,
<expr><operator>.</operator><name>bool_callback</name> <operator>=</operator> <name>callReplyBool</name></expr>,
<expr><operator>.</operator><name>big_number_callback</name> <operator>=</operator> <name>callReplyBigNumber</name></expr>,
<expr><operator>.</operator><name>verbatim_string_callback</name> <operator>=</operator> <name>callReplyVerbatimString</name></expr>,
<expr><operator>.</operator><name>attribute_callback</name> <operator>=</operator> <name>callReplyAttribute</name></expr>,
<expr><operator>.</operator><name>error</name> <operator>=</operator> <name>callReplyParseError</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type> <name>callReplyParse</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REPLY_FLAG_PARSED</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ReplyParser</name></type> <name>parser</name> <init>= <expr><block>{<expr><operator>.</operator><name>curr_location</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>proto</name></name></expr>, <expr><operator>.</operator><name>callbacks</name> <operator>=</operator> <name>DefaultParserCallbacks</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parseReply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REPLY_FLAG_PARSED</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>callReplyType</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rep</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_REPLY_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>callReplyGetString</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_STRING</name> <operator>&amp;&amp;</operator>
<name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_ERROR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name> <name>long</name></type> <name>callReplyGetLongLong</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_INTEGER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LLONG_MIN</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>ll</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>double</name></type> <name>callReplyGetDouble</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_DOUBLE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LLONG_MIN</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>d</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>callReplyGetBool</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_BOOL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INT_MIN</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>ll</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>size_t</name></type> <name>callReplyGetLen</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDISMODULE_REPLY_STRING</name></expr>:</case>
<case>case <expr><name>REDISMODULE_REPLY_ERROR</name></expr>:</case>
<case>case <expr><name>REDISMODULE_REPLY_ARRAY</name></expr>:</case>
<case>case <expr><name>REDISMODULE_REPLY_SET</name></expr>:</case>
<case>case <expr><name>REDISMODULE_REPLY_MAP</name></expr>:</case>
<case>case <expr><name>REDISMODULE_REPLY_ATTRIBUTE</name></expr>:</case>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CallReply</name> <modifier>*</modifier></type><name>callReplyGetCollectionElement</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elements_per_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <name>elements_per_entry</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name></name><operator>+</operator><name>idx</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>CallReply</name> <modifier>*</modifier></type><name>callReplyGetArrayElement</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_ARRAY</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>callReplyGetCollectionElement</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>CallReply</name> <modifier>*</modifier></type><name>callReplyGetSetElement</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_SET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>callReplyGetCollectionElement</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>callReplyGetMapElementInternal</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>CallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>CallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>rep</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <call><name>callReplyGetCollectionElement</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>idx</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>callReplyGetCollectionElement</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>idx</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>callReplyGetMapElement</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>CallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>CallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetMapElementInternal</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_MAP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>CallReply</name> <modifier>*</modifier></type><name>callReplyGetAttribute</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>attribute</name></name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>callReplyGetAttributeElement</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>CallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>CallReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>callReplyGetMapElementInternal</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>REDISMODULE_REPLY_MAP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>callReplyGetBigNumber</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_BIG_NUMBER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>callReplyGetVerbatim</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>callReplyParse</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDISMODULE_REPLY_VERBATIM_STRING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>verbatim_str</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>verbatim_str</name><operator>.</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>callReplyGetProto</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>proto_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>proto_len</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>proto_len</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>proto</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name> <modifier>*</modifier></type><name>callReplyGetPrivateData</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>private_data</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>callReplyIsResp3</name><parameter_list>(<parameter><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>rep</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REPLY_FLAG_RESP3</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>CallReply</name> <modifier>*</modifier></type><name>callReplyCreate</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CallReply</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>REPLY_FLAG_ROOT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>original_proto</name></name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>proto_len</name></name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name>private_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>attribute</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
