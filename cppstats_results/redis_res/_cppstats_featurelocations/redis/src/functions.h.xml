<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/functions.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FUNCTIONS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FUNCTIONS_H_</name></cpp:macro></cpp:define>














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redismodule.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>functionLibInfo</name></name></type> <name>functionLibInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>engine</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl>;</decl_stmt>



<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>create</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>, <parameter><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>call</name>)<parameter_list>(<parameter><decl><type><name>scriptRunCtx</name> <modifier>*</modifier></type><name>r_ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>compiled_function</name></decl></parameter>,
<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nargs</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>get_used_memory</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>get_function_memory_overhead</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>compiled_function</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>get_engine_memory_overhead</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_function</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>compiled_function</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>engine</name>;</typedef>



<typedef>typedef <type><struct>struct <name>engineInfo</name> <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>engine</name> <modifier>*</modifier></type><name>engine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
}</block></struct></type> <name>engineInfo</name>;</typedef>



<typedef>typedef <type><struct>struct <name>functionInfo</name> <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>function</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>functionLibInfo</name><modifier>*</modifier></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>f_flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>functionInfo</name>;</typedef>



<struct>struct <name>functionLibInfo</name> <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>functions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>engineInfo</name> <modifier>*</modifier></type><name>ei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>desc</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>functionsRegisterEngine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>engine_name</name></decl></parameter>, <parameter><decl><type><name>engine</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>functionsCreateWithLibraryCtx</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>lib_name</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>engine_name</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>replace</name></decl></parameter>, <parameter><decl><type><name>sds</name><modifier>*</modifier></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>functionsMemory</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>functionsMemoryOverhead</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>functionsNum</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>functionsLibNum</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>dict</name><modifier>*</modifier></type> <name>functionsLibGet</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>functionsLibCtxfunctionsLen</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>functionsLibCtxGetCurrent</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>functionsLibCtxCreate</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionsLibCtxClearCurrent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionsLibCtxFree</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionsLibCtxClear</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionsLibCtxSwapWithCurrent</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>functionLibCreateFunction</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>f_flags</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>luaEngineInitEngine</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>functionsInit</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
