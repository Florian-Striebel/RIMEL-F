<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/defrag.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DEFRAG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function_decl><type><name>int</name></type> <name>je_get_defrag_hint</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>defragDictBucketCallback</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>bucketref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name><modifier>*</modifier></type> <name>replaceSatelliteDictKeyPtrAndOrDefragDictEntry</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>oldkey</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>newkey</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name><modifier>*</modifier></type> <name>activeDefragAlloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newptr</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>je_get_defrag_hint</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_misses</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>zmalloc_size</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newptr</name> <operator>=</operator> <call><name>zmalloc_no_tcache</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree_no_tcache</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newptr</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>sds</name></type> <name>activeDefragSds</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>sdsptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>sdsAllocPtr</name><argument_list>(<argument><expr><name>sdsptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>newptr</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><name>sdsptr</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sdsptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newptr</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>sdsptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>robj</name> <modifier>*</modifier></type><name>activeDefragStringOb</name><parameter_list>(<parameter><decl><type><name>robj</name><modifier>*</modifier></type> <name>ob</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>refcount</name></name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name><operator>!=</operator><name>OBJ_STRING</name> <operator>||</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name><operator>!=</operator><name>OBJ_ENCODING_EMBSTR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name><operator>==</operator><name>OBJ_ENCODING_RAW</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>newsds</name> <init>= <expr><call><name>activeDefragSds</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newsds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name><operator>==</operator><name>OBJ_ENCODING_EMBSTR</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>long</name></type> <name>ofs</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>ob</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>ret</name> <operator>+</operator> <name>ofs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name><operator>!=</operator><name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown string encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>long</name></type> <name>dictIterDefragEntry</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>newde</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newde</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name> <operator>=</operator> <name>newde</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newde</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>table</name></name></expr>]</index><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>newde</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newde</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>newde</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>table</name></name></expr>]</index><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>newde</name></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name></type> <name>dictDefragTables</name><parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>newtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>newtable</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newtable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>newtable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newtable</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newtable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>d</name><operator>-&gt;</operator><name>ht_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>newtable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>zslUpdateNode</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>oldnode</name></decl></parameter>, <parameter><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><name>zskiplistNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>zsl</name><operator>-&gt;</operator><name>level</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>update</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>forward</name> <operator>==</operator> <name>oldnode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>update</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>forward</name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>zsl</name><operator>-&gt;</operator><name>header</name></name><operator>!=</operator><name>oldnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newnode</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>forward</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>forward</name><operator>-&gt;</operator><name>backward</name></name><operator>==</operator><name>oldnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>forward</name><operator>-&gt;</operator><name>backward</name></name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>zsl</name><operator>-&gt;</operator><name>tail</name></name><operator>==</operator><name>oldnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zsl</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>double</name> <modifier>*</modifier></type><name>zslDefrag</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>oldele</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>newele</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name><name>update</name><index>[<expr><name>ZSKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>ele</name> <init>= <expr><ternary><condition><expr><name>newele</name></expr>?</condition><then> <expr><name>newele</name></expr></then><else>: <expr><name>oldele</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>zsl</name><operator>-&gt;</operator><name>header</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>zsl</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>forward</name> <operator>&amp;&amp;</operator>
<name><name>x</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>forward</name><operator>-&gt;</operator><name>ele</name></name> <operator>!=</operator> <name>oldele</name> <operator>&amp;&amp;</operator>


<operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>forward</name><operator>-&gt;</operator><name>score</name></name> <operator>&lt;</operator> <name>score</name> <operator>||</operator>
<operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>forward</name><operator>-&gt;</operator><name>score</name></name> <operator>==</operator> <name>score</name> <operator>&amp;&amp;</operator>
<call><name>sdscmp</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>forward</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>,<argument><expr><name>ele</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>forward</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>update</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>forward</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>x</name> <operator>&amp;&amp;</operator> <name>score</name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>ele</name></name><operator>==</operator><name>oldele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newele</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>ele</name></name> <operator>=</operator> <name>newele</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>newx</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zslUpdateNode</name><argument_list>(<argument><expr><name>zsl</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>newx</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>newx</name><operator>-&gt;</operator><name>score</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>long</name></type> <name>activeDefragZsetEntry</name><parameter_list>(<parameter><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>newsds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>newscore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newscore</name> <operator>=</operator> <call><name>zslDefrag</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sdsele</name></expr></argument>, <argument><expr><name>newsds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newscore</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr><name>newscore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFRAG_SDS_DICT_NO_VAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFRAG_SDS_DICT_VAL_IS_SDS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFRAG_SDS_DICT_VAL_IS_STROB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFRAG_SDS_DICT_VAL_VOID_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<function><type><name>long</name></type> <name>activeDefragSdsDict</name><parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>newsds</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>newsds</name></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_IS_SDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sdsele</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newsds</name></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_IS_STROB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>newele</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ele</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newele</name> <operator>=</operator> <call><name>activeDefragStringOb</name><argument_list>(<argument><expr><name>ele</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newele</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_VOID_PTR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newptr</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newptr</name></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>dictIterDefragEntry</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name></type> <name>activeDefragList</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newln</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>ln</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newln</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>newln</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newln</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newln</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newln</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_IS_SDS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>newsds</name></decl>, <decl><type ref="prev"/><name>sdsele</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>newsds</name></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_IS_STROB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>newele</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ele</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newele</name> <operator>=</operator> <call><name>activeDefragStringOb</name><argument_list>(<argument><expr><name>ele</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>newele</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_VOID_PTR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newptr</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>newptr</name></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name></type> <name>activeDefragSdsListAndDict</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_val_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newsds</name></decl>, <decl><type ref="prev"/><name>sdsele</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>ln</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newln</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>newln</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newln</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newln</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newln</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <name>newln</name></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sdsele</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name> <init>= <expr><call><name>dictGetHash</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>newsds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>deref</name> <init>= <expr><call><name>dictFindEntryRefByPtrAndHash</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>sdsele</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>deref</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>deref</name><operator>)</operator><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dict_val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_IS_SDS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>newsds</name></decl>, <decl><type ref="prev"/><name>sdsele</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newsds</name></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dict_val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_IS_STROB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>newele</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ele</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newele</name> <operator>=</operator> <call><name>activeDefragStringOb</name><argument_list>(<argument><expr><name>ele</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newele</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dict_val_type</name> <operator>==</operator> <name>DEFRAG_SDS_DICT_VAL_VOID_PTR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newptr</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newptr</name></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>dictIterDefragEntry</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>dictEntry</name><modifier>*</modifier></type> <name>replaceSatelliteDictKeyPtrAndOrDefragDictEntry</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>oldkey</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>newkey</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>deref</name> <init>= <expr><call><name>dictFindEntryRefByPtrAndHash</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>oldkey</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>deref</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><operator>*</operator><name>deref</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>newde</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newde</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>de</name> <operator>=</operator> <operator>*</operator><name>deref</name> <operator>=</operator> <name>newde</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newkey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>newkey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>de</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>activeDefragQuickListNode</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name></decl></parameter>, <parameter><decl><type><name>quicklistNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>node_ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>newnode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name> <init>= <expr><operator>*</operator><name>node_ref</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>newzl</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newnode</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>newnode</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ql</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newnode</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ql</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>node_ref</name> <operator>=</operator> <name>node</name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newzl</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>node</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>newzl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>activeDefragQuickListNodes</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>ql</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>activeDefragQuickListNode</name><argument_list>(<argument><expr><name>ql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>defragLater</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>key</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>defrag_later</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>long</name></type> <name>scanLaterList</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>endtime</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bookmark_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_LIST</name> <operator>||</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cursor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>ql</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>quicklistBookmarkFind</name><argument_list>(<argument><expr><name>ql</name></expr></argument>, <argument><expr><literal type="string">"_AD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cursor</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator> <operator>+=</operator> <call><name>activeDefragQuickListNode</name><argument_list>(<argument><expr><name>ql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>iterations</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>bookmark_failed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ustime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>endtime</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>quicklistBookmarkCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ql</name></expr></argument>, <argument><expr><literal type="string">"_AD"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bookmark_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ql</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>quicklistBookmarkDelete</name><argument_list>(<argument><expr><name>ql</name></expr></argument>, <argument><expr><literal type="string">"_AD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>bookmark_failed</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name></decl>;</decl_stmt>
}</block></struct></type> <name>scanLaterZsetData</name>;</typedef>

<function><type><name>void</name></type> <name>scanLaterZsetCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>_de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><operator>(</operator><name>dictEntry</name><operator>*</operator><operator>)</operator><name>_de</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scanLaterZsetData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>defragged</name></name> <operator>+=</operator> <call><name>activeDefragZsetEntry</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>zs</name></name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>scanLaterZset</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_ZSET</name> <operator>||</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><operator>(</operator><name>zset</name><operator>*</operator><operator>)</operator><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scanLaterZsetData</name></type> <name>data</name> <init>= <expr><block>{<expr><name>zs</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <call><name>dictScan</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><name>scanLaterZsetCallback</name></expr></argument>, <argument><expr><name>defragDictBucketCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>data</name><operator>.</operator><name>defragged</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scanLaterSetCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>_de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><operator>(</operator><name>dictEntry</name><operator>*</operator><operator>)</operator><name>_de</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>newsds</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr><operator>,</operator> <expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>scanLaterSet</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_SET</name> <operator>||</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <call><name>dictScan</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><name>scanLaterSetCallback</name></expr></argument>, <argument><expr><name>defragDictBucketCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scanLaterHashCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>_de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><operator>(</operator><name>dictEntry</name><operator>*</operator><operator>)</operator><name>_de</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>newsds</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr><operator>,</operator> <expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sdsele</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr><operator>,</operator> <expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>scanLaterHash</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_HASH</name> <operator>||</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <call><name>dictScan</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><name>scanLaterHashCallback</name></expr></argument>, <argument><expr><name>defragDictBucketCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>defragQuicklist</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newql</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name> <operator>&amp;&amp;</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newql</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>ql</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ql</name> <operator>=</operator> <name>newql</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ql</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defragLater</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>activeDefragQuickListNodes</name><argument_list>(<argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>defragZsetSkiplist</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><operator>(</operator><name>zset</name><operator>*</operator><operator>)</operator><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>newzs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>newzsl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>newdict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zskiplistNode</name></name> <modifier>*</modifier></type><name>newheader</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name> <operator>&amp;&amp;</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newzs</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>zs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>zs</name> <operator>=</operator> <name>newzs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newzsl</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name> <operator>=</operator> <name>newzsl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newheader</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>newheader</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defragLater</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>activeDefragZsetEntry</name><argument_list>(<argument><expr><name>zs</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newdict</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name>newdict</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>dictDefragTables</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>defragHash</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name> <operator>&amp;&amp;</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defragLater</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>activeDefragSdsDict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEFRAG_SDS_DICT_VAL_IS_SDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newd</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>newd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>dictDefragTables</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>defragSet</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name> <operator>&amp;&amp;</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defragLater</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>activeDefragSdsDict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DEFRAG_SDS_DICT_NO_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newd</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>newd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>dictDefragTables</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>defragRaxNode</name><parameter_list>(<parameter><decl><type><name>raxNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>noderef</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>raxNode</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><operator>*</operator><name>noderef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newnode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>noderef</name> <operator>=</operator> <name>newnode</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>scanLaterStreamListpacks</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>endtime</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>last</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STREAM</name> <operator>||</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cursor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>defragRaxNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ri</name><operator>.</operator><name>node_cb</name></name> <operator>=</operator> <name>defragRaxNode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ri</name><operator>.</operator><name>node_cb</name></name> <operator>=</operator> <name>defragRaxNode</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cursor</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newdata</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newdata</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>.</operator><name>data</name></name><operator>=</operator><name>newdata</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>iterations</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ustime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>endtime</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name><operator>==</operator><sizeof>sizeof<argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>last</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>raxDefragFunction</name>)<parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<function><type><name>long</name></type> <name>defragRadixTree</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier><modifier>*</modifier></type><name>raxref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defrag_data</name></decl></parameter>, <parameter><decl><type><name>raxDefragFunction</name> <modifier>*</modifier></type><name>element_cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>element_cb_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name><modifier>*</modifier></type> <name>rax</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rax</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><operator>*</operator><name>raxref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><operator>*</operator><name>raxref</name> <operator>=</operator> <name>rax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rax</name> <operator>=</operator> <operator>*</operator><name>raxref</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ri</name><operator>.</operator><name>node_cb</name></name> <operator>=</operator> <name>defragRaxNode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defragRaxNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rax</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>element_cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newdata</name> <operator>=</operator> <call><name>element_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>, <argument><expr><name>element_cb_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>defrag_data</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>newdata</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newdata</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newdata</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>raxSetData</name><argument_list>(<argument><expr><name><name>ri</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>.</operator><name>data</name></name><operator>=</operator><name>newdata</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>defragged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamConsumer</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
}</block></struct></type> <name>PendingEntryContext</name>;</typedef>

<function><type><name>void</name><modifier>*</modifier></type> <name>defragStreamConsumerPendingEntry</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>defragged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PendingEntryContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newnack</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nack</name><operator>-&gt;</operator><name>consumer</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>newnack</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>nack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newnack</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cg</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>newnack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>prev</name><operator>==</operator><name>nack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><name>newnack</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>defragStreamConsumer</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>streamConsumer</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newc</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newsds</name> <init>= <expr><call><name>activeDefragSds</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newsds</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>defragged</name><operator>)</operator><operator>++</operator></expr><operator>,</operator> <expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pel</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PendingEntryContext</name></type> <name>pel_ctx</name> <init>= <expr><block>{<expr><name>cg</name></expr>, <expr><name>c</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>defragged</name> <operator>+=</operator> <call><name>defragRadixTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>defragStreamConsumerPendingEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pel_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>newc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>defragStreamConsumerGroup</name><parameter_list>(<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cg</name><operator>-&gt;</operator><name>consumers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>defragged</name> <operator>+=</operator> <call><name>defragRadixTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cg</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>defragStreamConsumer</name></expr></argument>, <argument><expr><name>cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cg</name><operator>-&gt;</operator><name>pel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>defragged</name> <operator>+=</operator> <call><name>defragRadixTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cg</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>defragStream</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STREAM</name> <operator>&amp;&amp;</operator> <name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>news</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>news</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>s</name> <operator>=</operator> <name>news</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>newrax</name> <init>= <expr><call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newrax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name> <operator>=</operator> <name>newrax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>defragLater</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragRadixTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragRadixTree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>defragStreamConsumerGroup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name></type> <name>defragModule</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>kde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>moduleDefragValue</name><argument_list>(<argument><expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>defragLater</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>kde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name></type> <name>defragKey</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>keysds</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>newob</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>newzl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>newsds</name></decl>;</decl_stmt>


<expr_stmt><expr><name>newsds</name> <operator>=</operator> <call><name>activeDefragSds</name><argument_list>(<argument><expr><name>keysds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newsds</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>newsds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name> <init>= <expr><call><name>dictGetHash</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>replaceSatelliteDictKeyPtrAndOrDefragDictEntry</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>, <argument><expr><name>keysds</name></expr></argument>, <argument><expr><name>newsds</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ob</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newob</name> <operator>=</operator> <call><name>activeDefragStringOb</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defragged</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>newob</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <name>newob</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragQuicklist</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown list encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragSet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>intset</name> <modifier>*</modifier></type><name>newis</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>is</name> <init>= <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newis</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>newis</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newzl</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>newzl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragZsetSkiplist</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown sorted set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_LISTPACK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newzl</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defragged</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ob</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>newzl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragHash</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown hash encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragStream</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>defragModule</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>defragScanCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><call><name>defragKey</name><argument_list>(<argument><expr><operator>(</operator><name>redisDb</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></argument>, <argument><expr><operator>(</operator><name>dictEntry</name><operator>*</operator><operator>)</operator><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>+=</operator> <name>defragged</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>defragged</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_hits</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_misses</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>defragDictBucketCallback</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>bucketref</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while<condition>(<expr><operator>*</operator><name>bucketref</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><operator>*</operator><name>bucketref</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newde</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newde</name> <operator>=</operator> <call><name>activeDefragAlloc</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bucketref</name> <operator>=</operator> <name>newde</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <name>d</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>db</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dict</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>slotToKeyReplaceEntry</name><argument_list>(<argument><expr><name>newde</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bucketref</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>bucketref</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>







<function><type><name>float</name></type> <name>getAllocatorFragmentation</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_frag_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>resident</name></decl>, <decl><type ref="prev"/><name>active</name></decl>, <decl><type ref="prev"/><name>allocated</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>zmalloc_get_allocator_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>active</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>frag_pct</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>active</name> <operator>/</operator> <name>allocated</name><operator>)</operator><operator>*</operator><literal type="number">100</literal> <operator>-</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>frag_bytes</name> <init>= <expr><name>active</name> <operator>-</operator> <name>allocated</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rss_pct</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>resident</name> <operator>/</operator> <name>allocated</name><operator>)</operator><operator>*</operator><literal type="number">100</literal> <operator>-</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rss_bytes</name> <init>= <expr><name>resident</name> <operator>-</operator> <name>allocated</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>out_frag_bytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_frag_bytes</name> <operator>=</operator> <name>frag_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"allocated=%zu, active=%zu, resident=%zu, frag=%.0f%% (%.0f%% rss), frag_bytes=%zu (%zu rss)"</literal></expr></argument>,
<argument><expr><name>allocated</name></expr></argument>, <argument><expr><name>active</name></expr></argument>, <argument><expr><name>resident</name></expr></argument>, <argument><expr><name>frag_pct</name></expr></argument>, <argument><expr><name>rss_pct</name></expr></argument>, <argument><expr><name>frag_bytes</name></expr></argument>, <argument><expr><name>rss_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>frag_pct</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>long</name></type> <name>defragOtherGlobals</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>defragged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>activeDefragSdsDict</name><argument_list>(<argument><expr><call><name>evalScriptsDict</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFRAG_SDS_DICT_VAL_IS_STROB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>defragged</name> <operator>+=</operator> <call><name>moduleDefragGlobals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defragged</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>defragLaterItem</name><parameter_list>(<parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>endtime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>scanLaterList</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>+=</operator> <call><name>scanLaterSet</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>+=</operator> <call><name>scanLaterZset</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>+=</operator> <call><name>scanLaterHash</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>scanLaterStreamListpacks</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>moduleLateDefrag</name><argument_list>(<argument><expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ob</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>sds</name></type> <name>defrag_later_current_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>defrag_later_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>defragLaterStep</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>endtime</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>prev_defragged</name> <init>= <expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>prev_scanned</name> <init>= <expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>key_defragged</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>defrag_later_cursor</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>defrag_later</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>defrag_later_current_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>defrag_later_current_key</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>defrag_later</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>defrag_later_cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>defrag_later_current_key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>defrag_later</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>head</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>defrag_later_current_key</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>defrag_later_cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>defrag_later_current_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>key_defragged</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>quit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>defragLaterItem</name><argument_list>(<argument><expr><name>de</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defrag_later_cursor</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>,<argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>quit</name> <operator>||</operator> <operator>(</operator><operator>++</operator><name>iterations</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>-</operator> <name>prev_defragged</name> <operator>&gt;</operator> <literal type="number">512</literal> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name> <operator>-</operator> <name>prev_scanned</name> <operator>&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quit</name> <operator>||</operator> <call><name>ustime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>endtime</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>key_defragged</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_hits</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_misses</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_defragged</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_scanned</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name>defrag_later_cursor</name></expr>)</condition>;</do>
<if_stmt><if>if<condition>(<expr><name>key_defragged</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_hits</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_misses</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOLATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>y1</name></type></parameter>, <parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (y1) + ((x)-(x1)) * ((y2)-(y1)) / ((x2)-(x1)) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIMIT</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y)&lt;(min)? min: ((y)&gt;(max)? max: (y)))</cpp:value></cpp:define>


<function><type><name>void</name></type> <name>computeDefragCycles</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>frag_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>frag_pct</name> <init>= <expr><call><name>getAllocatorFragmentation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frag_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>frag_pct</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name> <operator>||</operator> <name>frag_bytes</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_ignore_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>cpu_pct</name> <init>= <expr><call><name>INTERPOLATE</name><argument_list>(<argument><expr><name>frag_pct</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cpu_pct</name> <operator>=</operator> <call><name>LIMIT</name><argument_list>(<argument><expr><name>cpu_pct</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cpu_pct</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>active_defrag_running</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name> <operator>=</operator> <name>cpu_pct</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Starting active defrag, frag=%.0f%%, frag_bytes=%zu, cpu=%d%%"</literal></expr></argument>,
<argument><expr><name>frag_pct</name></expr></argument>, <argument><expr><name>frag_bytes</name></expr></argument>, <argument><expr><name>cpu_pct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>activeDefragCycle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_db</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>start_scan</name></decl>, <decl><type ref="prev"/><name>start_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>prev_defragged</name> <init>= <expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>prev_scanned</name> <init>= <expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>timelimit</name></decl>, <decl><type ref="prev"/><name>endtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>latency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>listEmpty</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>defrag_later</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>defrag_later_current_key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>defrag_later_cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>current_db</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>update_metrics</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>computeDefragCycles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timelimit</name> <operator>=</operator> <literal type="number">1000000</literal><operator>*</operator><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>timelimit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>timelimit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>endtime</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>timelimit</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyStartMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>&amp;&amp;</operator> <call><name>defragLaterStep</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name>current_db</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>defragOtherGlobals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>ustime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>frag_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>frag_pct</name> <init>= <expr><call><name>getAllocatorFragmentation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frag_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Active defrag done in %dms, reallocated=%d, frag=%.0f%%, frag_bytes=%zu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>now</name> <operator>-</operator> <name>start_scan</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>-</operator> <name>start_stat</name><operator>)</operator></expr></argument>, <argument><expr><name>frag_pct</name></expr></argument>, <argument><expr><name>frag_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_scan</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_db</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>computeDefragCycles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ustime</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>endtime</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>current_db</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_scan</name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_stat</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <operator>&amp;</operator><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>current_db</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>defragLaterStep</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>dictScan</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>defragScanCallback</name></expr></argument>, <argument><expr><name>defragDictBucketCallback</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name> <operator>||</operator> <operator>(</operator><operator>++</operator><name>iterations</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>-</operator> <name>prev_defragged</name> <operator>&gt;</operator> <literal type="number">512</literal> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name> <operator>-</operator> <name>prev_scanned</name> <operator>&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name> <operator>||</operator> <call><name>ustime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>endtime</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_defragged</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_scanned</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name>cursor</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quit</name></expr>)</condition>;</do>
</block_content>}</block> while<condition>(<expr><operator>!</operator><name>quit</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>latencyEndMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"active-defrag-cycle"</literal></expr></argument>,<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>update_metrics</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elapsedStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_total_active_defrag_time</name></name> <operator>+=</operator> <call><name>elapsedUs</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type> <name>activeDefragCycle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>activeDefragAlloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>robj</name> <modifier>*</modifier></type><name>activeDefragStringOb</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>defragged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
