<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/crc64.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crcspeed.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name><name>crc64_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLY</name></cpp:macro> <cpp:value>UINT64_C(0xad93d23594c935a9)</cpp:value></cpp:define>



































<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint_fast64_t</name></type> <name>crc_reflect</name><parameter_list>(<parameter><decl><type><name>uint_fast64_t</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint_fast64_t</name></type> <name>ret</name> <init>= <expr><name>data</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>uint64_t</name></type> <name>_crc64</name><parameter_list>(<parameter><decl><type><name>uint_fast64_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>in_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>bit</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name> <init>= <expr><name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint_fast8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>crc</name> <operator>&amp;</operator> <literal type="number">0x8000000000000000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>!</operator><name>bit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>^=</operator> <name>POLY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>crc</name> <operator>&amp;=</operator> <literal type="number">0xffffffffffffffff</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>&amp;</operator> <literal type="number">0xffffffffffffffff</literal></expr>;</expr_stmt>
<return>return <expr><call><name>crc_reflect</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">0x0000000000000000</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>crc64_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>crcspeed64native_init</name><argument_list>(<argument><expr><name>_crc64</name></expr></argument>, <argument><expr><name>crc64_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>crc64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>crcspeed64native</name><argument_list>(<argument><expr><name>crc64_table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(x)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>crc64Test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>crc64_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[calcula]: e9c6d914c4b8d9ca == %016"</literal> <name>PRIx64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>_crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"123456789"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[64speed]: e9c6d914c4b8d9ca == %016"</literal> <name>PRIx64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"123456789"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>li</name><index>[]</index></name> <init>= <expr><literal type="string">"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed "</literal>
<literal type="string">"do eiusmod tempor incididunt ut labore et dolore magna "</literal>
<literal type="string">"aliqua. Ut enim ad minim veniam, quis nostrud exercitation "</literal>
<literal type="string">"ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis "</literal>
<literal type="string">"aute irure dolor in reprehenderit in voluptate velit esse "</literal>
<literal type="string">"cillum dolore eu fugiat nulla pariatur. Excepteur sint "</literal>
<literal type="string">"occaecat cupidatat non proident, sunt in culpa qui officia "</literal>
<literal type="string">"deserunt mollit anim id est laborum."</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[calcula]: c7794709e69683b3 == %016"</literal> <name>PRIx64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>_crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>li</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[64speed]: c7794709e69683b3 == %016"</literal> <name>PRIx64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>li</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>crc64Test</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
