<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/function_lua.c">








































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"script_lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lualib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_ENGINE_NAME</name></cpp:macro> <cpp:value>"LUA"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTRY_ENGINE_CTX_NAME</name></cpp:macro> <cpp:value>"__ENGINE_CTX__"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTRY_ERROR_HANDLER_NAME</name></cpp:macro> <cpp:value>"__ERROR_HANDLER__"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTRY_LOAD_CTX_NAME</name></cpp:macro> <cpp:value>"__LIBRARY_CTX__"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBRARY_API_NAME</name></cpp:macro> <cpp:value>"__LIBRARY_API__"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_TIMEOUT_MS</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>luaEngineCtx</name> <block>{
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl>;</decl_stmt>
}</block></struct></type> <name>luaEngineCtx</name>;</typedef>


<typedef>typedef <type><struct>struct <name>luaFunctionCtx</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>lua_function_ref</name></decl>;</decl_stmt>
}</block></struct></type> <name>luaFunctionCtx</name>;</typedef>

<typedef>typedef <type><struct>struct <name>loadCtx</name> <block>{
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>start_time</name></decl>;</decl_stmt>
}</block></struct></type> <name>loadCtx</name>;</typedef>

<typedef>typedef <type><struct>struct <name>registerFunctionArgs</name> <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>luaFunctionCtx</name> <modifier>*</modifier></type><name>lua_f_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>f_flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>registerFunctionArgs</name>;</typedef>





<function><type><specifier>static</specifier> <name>void</name></type> <name>luaEngineLoadHook</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>loadCtx</name> <modifier>*</modifier></type><name>load_ctx</name> <init>= <expr><call><name>luaGetFromRegistry</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REGISTRY_LOAD_CTX_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration</name> <init>= <expr><call><name>elapsedMs</name><argument_list>(<argument><expr><name><name>load_ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&gt;</operator> <name>LOAD_TIMEOUT_MS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_sethook</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>luaEngineLoadHook</name></expr></argument>, <argument><expr><name>LUA_MASKLINE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"FUNCTION LOAD timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>luaEngineCreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>, <parameter><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>blob</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>luaEngineCtx</name> <modifier>*</modifier></type><name>lua_engine_ctx</name> <init>= <expr><name>engine_ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name> <init>= <expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></init></decl>;</decl_stmt>




















<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REDIS_API_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LIBRARY_API_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>luaSetGlobalProtection</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"@user_function"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Error compiling function: %s"</literal></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>loadCtx</name></type> <name>load_ctx</name> <init>= <expr><block>{
<expr><operator>.</operator><name>li</name> <operator>=</operator> <name>li</name></expr>,
<expr><operator>.</operator><name>start_time</name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaSaveOnRegistry</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REGISTRY_LOAD_CTX_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>load_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfenv</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_sethook</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaEngineLoadHook</name></expr></argument>,<argument><expr><name>LUA_MASKCOUNT</name></expr></argument>,<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Error registering functions: %s"</literal></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_sethook</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaSaveOnRegistry</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REGISTRY_LOAD_CTX_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_sethook</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaSaveOnRegistry</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REGISTRY_LOAD_CTX_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REDIS_API_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_GLOBALSINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"__newindex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_GLOBALSINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>luaEngineCall</name><parameter_list>(<parameter><decl><type><name>scriptRunCtx</name> <modifier>*</modifier></type><name>run_ctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>compiled_function</name></decl></parameter>,
<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>nkeys</name></decl></parameter>,
<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>nargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>luaEngineCtx</name> <modifier>*</modifier></type><name>lua_engine_ctx</name> <init>= <expr><name>engine_ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name> <init>= <expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>luaFunctionCtx</name> <modifier>*</modifier></type><name>f_ctx</name> <init>= <expr><name>compiled_function</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REGISTRY_ERROR_HANDLER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name><name>f_ctx</name><operator>-&gt;</operator><name>lua_function_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaCallFunction</name><argument_list>(<argument><expr><name>run_ctx</name></expr></argument>, <argument><expr><name>lua</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>luaEngineGetUsedMemoy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>luaEngineCtx</name> <modifier>*</modifier></type><name>lua_engine_ctx</name> <init>= <expr><name>engine_ctx</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>luaMemory</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>luaEngineFunctionMemoryOverhead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>compiled_function</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zmalloc_size</name><argument_list>(<argument><expr><name>compiled_function</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>luaEngineMemoryOverhead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>luaEngineCtx</name> <modifier>*</modifier></type><name>lua_engine_ctx</name> <init>= <expr><name>engine_ctx</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>zmalloc_size</name><argument_list>(<argument><expr><name>lua_engine_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luaEngineFreeFunction</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine_ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>compiled_function</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>luaEngineCtx</name> <modifier>*</modifier></type><name>lua_engine_ctx</name> <init>= <expr><name>engine_ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name> <init>= <expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>luaFunctionCtx</name> <modifier>*</modifier></type><name>f_ctx</name> <init>= <expr><name>compiled_function</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_unref</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>f_ctx</name><operator>-&gt;</operator><name>lua_function_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>f_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luaRegisterFunctionArgsInitialize</name><parameter_list>(<parameter><decl><type><name>registerFunctionArgs</name> <modifier>*</modifier></type><name>register_f_args</name></decl></parameter>,
<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>sds</name></type> <name>desc</name></decl></parameter>,
<parameter><decl><type><name>luaFunctionCtx</name> <modifier>*</modifier></type><name>lua_f_ctx</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>register_f_args</name> <operator>=</operator> <operator>(</operator><name>registerFunctionArgs</name><operator>)</operator><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <name>desc</name></expr>,
<expr><operator>.</operator><name>lua_f_ctx</name> <operator>=</operator> <name>lua_f_ctx</name></expr>,
<expr><operator>.</operator><name>f_flags</name> <operator>=</operator> <name>flags</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luaRegisterFunctionArgsDispose</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>registerFunctionArgs</name> <modifier>*</modifier></type><name>register_f_args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>register_f_args</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>register_f_args</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>register_f_args</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lua_unref</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>register_f_args</name><operator>-&gt;</operator><name>lua_f_ctx</name><operator>-&gt;</operator><name>lua_function_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>register_f_args</name><operator>-&gt;</operator><name>lua_f_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>luaRegisterFunctionReadFlags</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>C_ERR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TNIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag_str</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>scriptFlag</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name>scripts_flags_def</name></expr></init></decl>;</init> <condition><expr><name><name>flag</name><operator>-&gt;</operator><name>str</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>flag</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f_flags</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>f_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>luaRegisterFunctionReadNamedArgs</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>registerFunctionArgs</name> <modifier>*</modifier></type><name>register_f_args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>luaFunctionCtx</name> <modifier>*</modifier></type><name>lua_f_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_istable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"calling redis.register_function with a single argument is only applicable to Lua table (representing named arguments)."</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"named argument key given to redis.register_function is not a string"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"function_name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>luaGetStringSds</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"function_name argument given to redis.register_function must be a string"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>luaGetStringSds</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"description argument given to redis.register_function must be a string"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"callback"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"callback argument given to redis.register_function must be a function"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lua_function_ref</name> <init>= <expr><call><name>luaL_ref</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lua_f_ctx</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lua_f_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lua_f_ctx</name><operator>-&gt;</operator><name>lua_function_ref</name></name> <operator>=</operator> <name>lua_function_ref</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_istable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"flags argument to redis.register_function must be a table representing function flags"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>luaRegisterFunctionReadFlags</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"unknown flag given"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"unknown argument given to redis.register_function"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"redis.register_function must get a function name argument"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lua_f_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"redis.register_function must get a callback argument"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>luaRegisterFunctionArgsInitialize</name><argument_list>(<argument><expr><name>register_f_args</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>lua_f_ctx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lua_f_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_unref</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>lua_f_ctx</name><operator>-&gt;</operator><name>lua_function_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>lua_f_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>luaRegisterFunctionReadPositionalArgs</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>registerFunctionArgs</name> <modifier>*</modifier></type><name>register_f_args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>luaFunctionCtx</name> <modifier>*</modifier></type><name>lua_f_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>luaGetStringSds</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"first argument to redis.register_function must be a string"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"second argument to redis.register_function must be a function"</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lua_function_ref</name> <init>= <expr><call><name>luaL_ref</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lua_f_ctx</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lua_f_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lua_f_ctx</name><operator>-&gt;</operator><name>lua_function_ref</name></name> <operator>=</operator> <name>lua_function_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaRegisterFunctionArgsInitialize</name><argument_list>(<argument><expr><name>register_f_args</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lua_f_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>luaRegisterFunctionReadArgs</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>registerFunctionArgs</name> <modifier>*</modifier></type><name>register_f_args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>argc</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"wrong number of arguments to redis.register_function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>luaRegisterFunctionReadNamedArgs</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>register_f_args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>luaRegisterFunctionReadPositionalArgs</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>register_f_args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>luaRegisterFunction</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>registerFunctionArgs</name></type> <name>register_f_args</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>loadCtx</name> <modifier>*</modifier></type><name>load_ctx</name> <init>= <expr><call><name>luaGetFromRegistry</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>REGISTRY_LOAD_CTX_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>load_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"redis.register_function can only be called on FUNCTION LOAD command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>luaRaiseError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>luaRegisterFunctionReadArgs</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>register_f_args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>luaRaiseError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>sds</name></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>functionLibCreateFunction</name><argument_list>(<argument><expr><name><name>register_f_args</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>register_f_args</name><operator>.</operator><name>lua_f_ctx</name></name></expr></argument>, <argument><expr><name><name>load_ctx</name><operator>-&gt;</operator><name>li</name></name></expr></argument>, <argument><expr><name><name>register_f_args</name><operator>.</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>register_f_args</name><operator>.</operator><name>f_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>luaRegisterFunctionArgsDispose</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>register_f_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>luaRaiseError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaEngineInitEngine</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>luaEngineCtx</name> <modifier>*</modifier></type><name>lua_engine_ctx</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lua_engine_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name> <operator>=</operator> <call><name>lua_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaRegisterRedisAPI</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>LIBRARY_API_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><literal type="string">"register_function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>luaRegisterFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaRegisterLogFunction</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaRegisterVersion</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>REGISTRY_ERROR_HANDLER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errh_func</name> <init>= <expr><literal type="string">"local dbg = debug\n"</literal>
<literal type="string">"local error_handler = function (err)\n"</literal>
<literal type="string">" local i = dbg.getinfo(2,'nSl')\n"</literal>
<literal type="string">" if i and i.what == 'C' then\n"</literal>
<literal type="string">" i = dbg.getinfo(3,'nSl')\n"</literal>
<literal type="string">" end\n"</literal>
<literal type="string">" if i then\n"</literal>
<literal type="string">" return i.source .. ':' .. i.currentline .. ': ' .. err\n"</literal>
<literal type="string">" else\n"</literal>
<literal type="string">" return err\n"</literal>
<literal type="string">" end\n"</literal>
<literal type="string">"end\n"</literal>
<literal type="string">"return error_handler"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>errh_func</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>errh_func</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"@err_handler_def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>luaRegisterGlobalProtectionFunction</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>LUA_GLOBALSINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaSetGlobalProtection</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>luaSaveOnRegistry</name><argument_list>(<argument><expr><name><name>lua_engine_ctx</name><operator>-&gt;</operator><name>lua</name></name></expr></argument>, <argument><expr><name>REGISTRY_ENGINE_CTX_NAME</name></expr></argument>, <argument><expr><name>lua_engine_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>engine</name> <modifier>*</modifier></type><name>lua_engine</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lua_engine</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>lua_engine</name> <operator>=</operator> <operator>(</operator><name>engine</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>engine_ctx</name> <operator>=</operator> <name>lua_engine_ctx</name></expr>,
<expr><operator>.</operator><name>create</name> <operator>=</operator> <name>luaEngineCreate</name></expr>,
<expr><operator>.</operator><name>call</name> <operator>=</operator> <name>luaEngineCall</name></expr>,
<expr><operator>.</operator><name>get_used_memory</name> <operator>=</operator> <name>luaEngineGetUsedMemoy</name></expr>,
<expr><operator>.</operator><name>get_function_memory_overhead</name> <operator>=</operator> <name>luaEngineFunctionMemoryOverhead</name></expr>,
<expr><operator>.</operator><name>get_engine_memory_overhead</name> <operator>=</operator> <name>luaEngineMemoryOverhead</name></expr>,
<expr><operator>.</operator><name>free_function</name> <operator>=</operator> <name>luaEngineFreeFunction</name></expr>,
}</block></expr>;</expr_stmt>
<return>return <expr><call><name>functionsRegisterEngine</name><argument_list>(<argument><expr><name>LUA_ENGINE_NAME</name></expr></argument>, <argument><expr><name>lua_engine</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
