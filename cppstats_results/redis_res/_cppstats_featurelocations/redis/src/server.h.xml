<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/server.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__REDIS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__REDIS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"solarisfixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomicvar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hdr_histogram.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSYSTEMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;systemd/sd-daemon.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>mstime_t</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ustime_t</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"anet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ziplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"latency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sparkline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quicklist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_CORE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redismodule.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zipmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endianconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc64.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ERR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_DEFAULT_HZ</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MIN_HZ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MAX_HZ</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CLIENTS_PER_CLOCK_TICK</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MAX_LINE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRON_DBS_PER_CALL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_MAX_WRITES_PER_EVENT</name></cpp:macro> <cpp:value>(1024*64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_SHARED_SELECT_CMDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_SHARED_INTEGERS</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_SHARED_BULKHDR_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_MAX_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_REWRITE_ITEMS_PER_CMD</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_ANNOTATION_LINE_MAX_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_AUTHPASS_MAX_LEN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_RUN_ID_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_EOF_MARK_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_REPL_BACKLOG_MIN_SIZE</name></cpp:macro> <cpp:value>(1024*16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_BGSAVE_RETRY_DELAY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_DEFAULT_PID_FILE</name></cpp:macro> <cpp:value>"/var/run/redis.pid"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_DEFAULT_BINDADDR_COUNT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_DEFAULT_BINDADDR</name></cpp:macro> <cpp:value>{ "*", "-::*" }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_HOST_STR_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_IP_STR_LEN</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_ADDR_STR_LEN</name></cpp:macro> <cpp:value>(NET_IP_STR_LEN+32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_HOST_PORT_STR_LEN</name></cpp:macro> <cpp:value>(NET_HOST_STR_LEN+32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_BINDADDR_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MIN_RESERVED_FDS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_DEFAULT_PROC_TITLE_TEMPLATE</name></cpp:macro> <cpp:value>"{title} {listen-addr} {server-mode}"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MEM_USAGE_BUCKET_MIN_LOG</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MEM_USAGE_BUCKET_MAX_LOG</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MEM_USAGE_BUCKETS</name></cpp:macro> <cpp:value>(1+CLIENT_MEM_USAGE_BUCKET_MAX_LOG-CLIENT_MEM_USAGE_BUCKET_MIN_LOG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_EXPIRE_CYCLE_SLOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_EXPIRE_CYCLE_FAST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_CHILD_NOERROR_RETVAL</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_COW_DUTY_CYCLE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_METRIC_SAMPLES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_METRIC_COMMAND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_METRIC_NET_INPUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_METRIC_NET_OUTPUT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_METRIC_COUNT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_IOBUF_LEN</name></cpp:macro> <cpp:value>(1024*16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_REPLY_CHUNK_BYTES</name></cpp:macro> <cpp:value>(16*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_INLINE_MAX_SIZE</name></cpp:macro> <cpp:value>(1024*64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_MBULK_BIG_ARG</name></cpp:macro> <cpp:value>(1024*32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_RESIZE_THRESHOLD</name></cpp:macro> <cpp:value>(1024*32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_STR_SIZE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_AUTOSYNC_BYTES</name></cpp:macro> <cpp:value>(1024*1024*4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIMIT_PENDING_QUERYBUF</name></cpp:macro> <cpp:value>(4*1024*1024)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_FDSET_INCR</name></cpp:macro> <cpp:value>(CONFIG_MIN_RESERVED_FDS+96)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_OOM_MASTER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_OOM_REPLICA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_OOM_BGCHILD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_OOM_COUNT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name><name>configOOMScoreAdjValuesDefaults</name><index>[<expr><name>CONFIG_OOM_COUNT</name></expr>]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHTABLE_MIN_FILL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHTABLE_MAX_LOAD_FACTOR</name></cpp:macro> <cpp:value>1.618</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_WRITE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_READONLY</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_DENYOOM</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_MODULE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ADMIN</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_PUBSUB</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_NOSCRIPT</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_BLOCKING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_LOADING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_STALE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_SKIP_MONITOR</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_SKIP_SLOWLOG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ASKING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_FAST</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_NO_AUTH</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_MAY_REPLICATE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_SENTINEL</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ONLY_SENTINEL</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_NO_MANDATORY_KEYS</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_PROTECTED</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_MODULE_GETKEYS</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_MODULE_NO_CLUSTER</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;22)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_NO_ASYNC_LOADING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_NO_MULTI</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_MOVABLE_KEYS</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ALLOW_BUSY</name></cpp:macro> <cpp:value>((1ULL&lt;&lt;26))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_KEYSPACE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_READ</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_WRITE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_SET</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_SORTEDSET</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_LIST</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_HASH</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_STRING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_BITMAP</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_HYPERLOGLOG</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_GEO</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_STREAM</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_PUBSUB</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_ADMIN</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_FAST</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_SLOW</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_BLOCKING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_DANGEROUS</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_CONNECTION</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_TRANSACTION</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_CATEGORY_SCRIPTING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;20)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_RO</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_RW</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_OW</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_RM</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;3)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_ACCESS</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_UPDATE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_INSERT</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_DELETE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;7)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_CHANNEL</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_KEY_INCOMPLETE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;9)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_WAIT_REWRITE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_NOT_EXIST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_EMPTY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_OPEN_ERR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_FAILED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_TRUNCATED</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_DOC_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_DOC_DEPRECATED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_DOC_SYSCMD</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_SLAVE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MASTER</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MONITOR</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MULTI</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_BLOCKED</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_DIRTY_CAS</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_CLOSE_AFTER_REPLY</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_UNBLOCKED</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_SCRIPT</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_ASKING</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_CLOSE_ASAP</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_UNIX_SOCKET</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_DIRTY_EXEC</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MASTER_FORCE_REPLY</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_FORCE_AOF</name></cpp:macro> <cpp:value>(1&lt;&lt;14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_FORCE_REPL</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PRE_PSYNC</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_READONLY</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PUBSUB</name></cpp:macro> <cpp:value>(1&lt;&lt;18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PREVENT_AOF_PROP</name></cpp:macro> <cpp:value>(1&lt;&lt;19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PREVENT_REPL_PROP</name></cpp:macro> <cpp:value>(1&lt;&lt;20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PREVENT_PROP</name></cpp:macro> <cpp:value>(CLIENT_PREVENT_AOF_PROP|CLIENT_PREVENT_REPL_PROP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PENDING_WRITE</name></cpp:macro> <cpp:value>(1&lt;&lt;21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_REPLY_OFF</name></cpp:macro> <cpp:value>(1&lt;&lt;22)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_REPLY_SKIP_NEXT</name></cpp:macro> <cpp:value>(1&lt;&lt;23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_REPLY_SKIP</name></cpp:macro> <cpp:value>(1&lt;&lt;24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_LUA_DEBUG</name></cpp:macro> <cpp:value>(1&lt;&lt;25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_LUA_DEBUG_SYNC</name></cpp:macro> <cpp:value>(1&lt;&lt;26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_MODULE</name></cpp:macro> <cpp:value>(1&lt;&lt;27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PROTECTED</name></cpp:macro> <cpp:value>(1&lt;&lt;28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PENDING_COMMAND</name></cpp:macro> <cpp:value>(1&lt;&lt;30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TRACKING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;31)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TRACKING_BROKEN_REDIR</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TRACKING_BCAST</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;33)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TRACKING_OPTIN</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;34)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TRACKING_OPTOUT</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;35)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TRACKING_CACHING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;36)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TRACKING_NOLOOP</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;37)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_IN_TO_TABLE</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;38)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_PROTOCOL_ERROR</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;39)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_CLOSE_AFTER_COMMAND</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;40)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_DENY_BLOCKING</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;41)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_REPL_RDBONLY</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;42)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_NO_EVICT</name></cpp:macro> <cpp:value>(1ULL&lt;&lt;43)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_LIST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_WAIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_MODULE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_STREAM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_ZSET</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_POSTPONE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_SHUTDOWN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKED_NUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_REQ_INLINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_REQ_MULTIBULK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TYPE_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TYPE_SLAVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TYPE_PUBSUB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TYPE_MASTER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TYPE_COUNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_TYPE_OBUF_COUNT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<typedef>typedef <type><enum>enum <block>{
<decl><name>REPL_STATE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>REPL_STATE_CONNECT</name></decl>,
<decl><name>REPL_STATE_CONNECTING</name></decl>,

<decl><name>REPL_STATE_RECEIVE_PING_REPLY</name></decl>,
<decl><name>REPL_STATE_SEND_HANDSHAKE</name></decl>,
<decl><name>REPL_STATE_RECEIVE_AUTH_REPLY</name></decl>,
<decl><name>REPL_STATE_RECEIVE_PORT_REPLY</name></decl>,
<decl><name>REPL_STATE_RECEIVE_IP_REPLY</name></decl>,
<decl><name>REPL_STATE_RECEIVE_CAPA_REPLY</name></decl>,
<decl><name>REPL_STATE_SEND_PSYNC</name></decl>,
<decl><name>REPL_STATE_RECEIVE_PSYNC_REPLY</name></decl>,

<decl><name>REPL_STATE_TRANSFER</name></decl>,
<decl><name>REPL_STATE_CONNECTED</name></decl>,
}</block></enum></type> <name>repl_state</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>NO_FAILOVER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FAILOVER_WAIT_FOR_SYNC</name></decl>,
<decl><name>FAILOVER_IN_PROGRESS</name></decl>

}</block></enum></type> <name>failover_state</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_STATE_WAIT_BGSAVE_START</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_STATE_WAIT_BGSAVE_END</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_STATE_SEND_BULK</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_STATE_ONLINE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_CAPA_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_CAPA_EOF</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_CAPA_PSYNC2</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_REQ_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_REQ_RDB_EXCLUDE_DATA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_REQ_RDB_EXCLUDE_FUNCTIONS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_REQ_RDB_MASK</name></cpp:macro> <cpp:value>(SLAVE_REQ_RDB_EXCLUDE_DATA | SLAVE_REQ_RDB_EXCLUDE_FUNCTIONS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_REPL_SYNCIO_TIMEOUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPL_BACKLOG_TRIM_BLOCKS_PER_CALL</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPL_BACKLOG_INDEX_PER_BLOCKS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_HEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_TAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSET_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSET_MAX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT_OP_GET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_VERBOSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_NOTICE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_WARNING</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_RAW</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPERVISED_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPERVISED_AUTODETECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPERVISED_SYSTEMD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPERVISED_UPSTART</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSKIPLIST_MAXLEVEL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSKIPLIST_P</name></cpp:macro> <cpp:value>0.25</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_FSYNC_NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_FSYNC_ALWAYS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOF_FSYNC_EVERYSEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPL_DISKLESS_LOAD_DISABLED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPL_DISKLESS_LOAD_WHEN_DB_EMPTY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPL_DISKLESS_LOAD_SWAPDB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CLIENT_AUTH_NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CLIENT_AUTH_YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_CLIENT_AUTH_OPTIONAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZE_DUMP_NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZE_DUMP_YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZE_DUMP_CLIENTS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECTED_ACTION_ALLOWED_NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECTED_ACTION_ALLOWED_YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECTED_ACTION_ALLOWED_LOCAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_OP_UNION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_OP_DIFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_OP_INTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OOM_SCORE_ADJ_NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OOM_SCORE_RELATIVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OOM_SCORE_ADJ_ABSOLUTE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_FLAG_LRU</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_FLAG_LFU</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_FLAG_ALLKEYS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_FLAG_NO_SHARED_INTEGERS</name></cpp:macro> <cpp:value>(MAXMEMORY_FLAG_LRU|MAXMEMORY_FLAG_LFU)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_VOLATILE_LRU</name></cpp:macro> <cpp:value>((0&lt;&lt;8)|MAXMEMORY_FLAG_LRU)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_VOLATILE_LFU</name></cpp:macro> <cpp:value>((1&lt;&lt;8)|MAXMEMORY_FLAG_LFU)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_VOLATILE_TTL</name></cpp:macro> <cpp:value>(2&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_VOLATILE_RANDOM</name></cpp:macro> <cpp:value>(3&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_ALLKEYS_LRU</name></cpp:macro> <cpp:value>((4&lt;&lt;8)|MAXMEMORY_FLAG_LRU|MAXMEMORY_FLAG_ALLKEYS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_ALLKEYS_LFU</name></cpp:macro> <cpp:value>((5&lt;&lt;8)|MAXMEMORY_FLAG_LFU|MAXMEMORY_FLAG_ALLKEYS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_ALLKEYS_RANDOM</name></cpp:macro> <cpp:value>((6&lt;&lt;8)|MAXMEMORY_FLAG_ALLKEYS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMEMORY_NO_EVICTION</name></cpp:macro> <cpp:value>(7&lt;&lt;8)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIT_SECONDS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIT_MILLISECONDS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTDOWN_NOFLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTDOWN_SAVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTDOWN_NOSAVE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTDOWN_NOW</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTDOWN_FORCE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_SLOWLOG</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_STATS</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_PROPAGATE_AOF</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_PROPAGATE_REPL</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_PROPAGATE</name></cpp:macro> <cpp:value>(CMD_CALL_PROPAGATE_AOF|CMD_CALL_PROPAGATE_REPL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_FULL</name></cpp:macro> <cpp:value>(CMD_CALL_SLOWLOG | CMD_CALL_STATS | CMD_CALL_PROPAGATE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CALL_FROM_MODULE</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPAGATE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPAGATE_AOF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPAGATE_REPL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>



<typedef>typedef <type><enum>enum <block>{
<decl><name>CLIENT_PAUSE_OFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CLIENT_PAUSE_WRITE</name></decl>,
<decl><name>CLIENT_PAUSE_ALL</name></decl>
}</block></enum></type> <name>pause_type</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>PAUSE_BY_CLIENT_COMMAND</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PAUSE_DURING_SHUTDOWN</name></decl>,
<decl><name>PAUSE_DURING_FAILOVER</name></decl>,
<decl><name>NUM_PAUSE_PURPOSES</name></decl>
}</block></enum></type> <name>pause_purpose</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>pause_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>pause_event</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>CLUSTER_ENDPOINT_TYPE_IP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CLUSTER_ENDPOINT_TYPE_HOSTNAME</name></decl>,
<decl><name>CLUSTER_ENDPOINT_TYPE_UNKNOWN_ENDPOINT</name></decl>
}</block></enum></type> <name>cluster_endpoint_type</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_CHILD_TYPE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_CHILD_TYPE_DISK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_CHILD_TYPE_SOCKET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_KEYSPACE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_KEYEVENT</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_GENERIC</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_STRING</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_LIST</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_HASH</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_ZSET</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_EXPIRED</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_EVICTED</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_STREAM</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_KEY_MISS</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_LOADED</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_MODULE</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_ALL</name></cpp:macro> <cpp:value>(NOTIFY_GENERIC | NOTIFY_STRING | NOTIFY_LIST | NOTIFY_SET | NOTIFY_HASH | NOTIFY_ZSET | NOTIFY_EXPIRED | NOTIFY_EVICTED | NOTIFY_STREAM | NOTIFY_MODULE)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>run_with_period</name><parameter_list>(<parameter><type><name>_ms_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((_ms_ &lt;= 1000/server.hz) || !(server.cronloops%((_ms_)/(1000/server.hz))))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>serverAssertWithInfo</name><parameter_list>(<parameter><type><name>_c</name></type></parameter>,<parameter><type><name>_o</name></type></parameter>,<parameter><type><name>_e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_e)?(void)0 : (_serverAssertWithInfo(_c,_o,#_e,__FILE__,__LINE__),redis_unreachable()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>serverAssert</name><parameter_list>(<parameter><type><name>_e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_e)?(void)0 : (_serverAssert(#_e,__FILE__,__LINE__),redis_unreachable()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>serverPanic</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_serverPanic(__FILE__,__LINE__,__VA_ARGS__),redis_unreachable()</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATENCY_HISTOGRAM_MIN_VALUE</name></cpp:macro> <cpp:value>1L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATENCY_HISTOGRAM_MAX_VALUE</name></cpp:macro> <cpp:value>1000000000L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATENCY_HISTOGRAM_PRECISION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUSY_MODULE_YIELD_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUSY_MODULE_YIELD_EVENTS</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUSY_MODULE_YIELD_CLIENTS</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_STRING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_LIST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_SET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ZSET</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_HASH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_MODULE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_STREAM</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_TYPE_ENCVER_BITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_TYPE_ENCVER_MASK</name></cpp:macro> <cpp:value>((1&lt;&lt;REDISMODULE_TYPE_ENCVER_BITS)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_TYPE_ENCVER</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(id &amp; REDISMODULE_TYPE_ENCVER_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_TYPE_SIGN</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id &amp; ~((uint64_t)REDISMODULE_TYPE_ENCVER_MASK)) &gt;&gt;REDISMODULE_TYPE_ENCVER_BITS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AUX_BEFORE_RDB</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_AUX_AFTER_RDB</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<struct_decl>struct <name>RedisModule</name>;</struct_decl>
<struct_decl>struct <name>RedisModuleIO</name>;</struct_decl>
<struct_decl>struct <name>RedisModuleDigest</name>;</struct_decl>
<struct_decl>struct <name>RedisModuleCtx</name>;</struct_decl>
<struct_decl>struct <name>moduleLoadQueueEntry</name>;</struct_decl>
<struct_decl>struct <name>redisObject</name>;</struct_decl>
<struct_decl>struct <name>RedisModuleDefragCtx</name>;</struct_decl>
<struct_decl>struct <name>RedisModuleInfoCtx</name>;</struct_decl>
<struct_decl>struct <name>RedisModuleKeyOptCtx</name>;</struct_decl>





<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>moduleTypeLoadFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleIO</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeSaveFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleIO</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>moduleTypeAuxLoadFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleIO</name></name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeAuxSaveFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleIO</name></name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeRewriteFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleIO</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeDigestFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleDigest</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>moduleTypeMemUsageFunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeFreeFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>moduleTypeFreeEffortFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeUnlinkFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>moduleTypeCopyFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>fromkey</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>tokey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>moduleTypeDefragFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleDefragCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleInfoFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleInfoCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_crash_report</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleDefragFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleDefragCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>moduleTypeMemUsageFunc2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleKeyOptCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeFreeFunc2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleKeyOptCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>moduleTypeFreeEffortFunc2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleKeyOptCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>moduleTypeUnlinkFunc2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleKeyOptCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>moduleTypeCopyFunc2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleKeyOptCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RedisModuleUserChangedFunc</name>) <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>client_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<typedef>typedef <type><struct>struct <name>RedisModuleType</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>RedisModule</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeLoadFunc</name></type> <name>rdb_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeSaveFunc</name></type> <name>rdb_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeRewriteFunc</name></type> <name>aof_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeMemUsageFunc</name></type> <name>mem_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeDigestFunc</name></type> <name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeFreeFunc</name></type> <name>free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeFreeEffortFunc</name></type> <name>free_effort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeUnlinkFunc</name></type> <name>unlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeCopyFunc</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeDefragFunc</name></type> <name>defrag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeAuxLoadFunc</name></type> <name>aux_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeAuxSaveFunc</name></type> <name>aux_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeMemUsageFunc2</name></type> <name>mem_usage2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeFreeEffortFunc2</name></type> <name>free_effort2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeUnlinkFunc2</name></type> <name>unlink2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleTypeCopyFunc2</name></type> <name>copy2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aux_save_triggers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>moduleType</name>;</typedef>
















<typedef>typedef <type><struct>struct <name>moduleValue</name> <block>{
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>moduleValue</name>;</typedef>


<struct>struct <name>RedisModule</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>usedby</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>using</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocked_clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleInfoFunc</name></type> <name>info_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleDefragFunc</name></type> <name>defrag_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>moduleLoadQueueEntry</name></name> <modifier>*</modifier></type><name>loadmod</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>RedisModule</name></name></type> <name>RedisModule</name>;</typedef>




<typedef>typedef <type><struct>struct <name>RedisModuleIO</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name> <modifier>*</modifier></type><name>rio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>RedisModuleCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbid</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleIO</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>moduleInitIOContext</name><parameter_list>(<parameter><type><name>iovar</name></type></parameter>,<parameter><type><name>mtype</name></type></parameter>,<parameter><type><name>rioptr</name></type></parameter>,<parameter><type><name>keyptr</name></type></parameter>,<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { iovar.rio = rioptr; iovar.type = mtype; iovar.bytes = 0; iovar.error = 0; iovar.ver = 0; iovar.key = keyptr; iovar.dbid = db; iovar.ctx = NULL; } while(0)</cpp:value></cpp:define>















<typedef>typedef <type><struct>struct <name>RedisModuleDigest</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>o</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbid</name></decl>;</decl_stmt>
}</block></struct></type> <name>RedisModuleDigest</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>moduleInitDigestContext</name><parameter_list>(<parameter><type><name>mdvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { memset(mdvar.o,0,sizeof(mdvar.o)); memset(mdvar.x,0,sizeof(mdvar.x)); } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_RAW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_INT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_HT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_ZIPMAP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_LINKEDLIST</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_ZIPLIST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_INTSET</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_SKIPLIST</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_EMBSTR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_QUICKLIST</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_STREAM</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_ENCODING_LISTPACK</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRU_BITS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRU_CLOCK_MAX</name></cpp:macro> <cpp:value>((1&lt;&lt;LRU_BITS)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRU_CLOCK_RESOLUTION</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_SHARED_REFCOUNT</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_STATIC_REFCOUNT</name></cpp:macro> <cpp:value>(INT_MAX-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_FIRST_SPECIAL_REFCOUNT</name></cpp:macro> <cpp:value>OBJ_STATIC_REFCOUNT</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>redisObject</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>encoding</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lru</name><range>:<expr><name>LRU_BITS</name></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block></struct></type> <name>robj</name>;</typedef>




<function_decl><type><name>char</name> <modifier>*</modifier></type><name>getObjectTypeName</name><parameter_list>(<parameter><decl><type><name>robj</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>initStaticStringObject</name><parameter_list>(<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { _var.refcount = OBJ_STATIC_REFCOUNT; _var.type = OBJ_STRING; _var.encoding = OBJ_ENCODING_RAW; _var.ptr = _ptr; } while(0)</cpp:value></cpp:define>






<struct_decl>struct <name>evictionPoolEntry</name>;</struct_decl>



<typedef>typedef <type><struct>struct <name>clientReplyBlock</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <name>used</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>clientReplyBlock</name>;</typedef>




















<typedef>typedef <type><struct>struct <name>replBufBlock</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <name>used</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>replBufBlock</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>clusterSlotToKeyMapping</name></name></type> <name>clusterSlotToKeyMapping</name>;</typedef>




<typedef>typedef <type><struct>struct <name>redisDb</name> <block>{
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>expires</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>blocking_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ready_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>watched_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>avg_ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>expires_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>defrag_later</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterSlotToKeyMapping</name> <modifier>*</modifier></type><name>slots_to_keys</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisDb</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>functionsLibCtx</name></name></type> <name>functionsLibCtx</name>;</typedef>






<typedef>typedef <type><struct>struct <name>rdbLoadingCtx</name> <block>{
<decl_stmt><decl><type><name>redisDb</name><modifier>*</modifier></type> <name>dbarray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>functions_lib_ctx</name></decl>;</decl_stmt>
}</block></struct></type><name>rdbLoadingCtx</name>;</typedef>


<typedef>typedef <type><struct>struct <name>multiCmd</name> <block>{
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argv_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
}</block></struct></type> <name>multiCmd</name>;</typedef>

<typedef>typedef <type><struct>struct <name>multiState</name> <block>{
<decl_stmt><decl><type><name>multiCmd</name> <modifier>*</modifier></type><name>commands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>cmd_inv_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>argv_len_sums</name></decl>;</decl_stmt>
}</block></struct></type> <name>multiState</name>;</typedef>



<typedef>typedef <type><struct>struct <name>blockingState</name> <block>{

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>timeout</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<struct>struct <name>blockPos</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>wherefrom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>whereto</name></decl>;</decl_stmt>
}</block> <decl><name>blockpos</name></decl>;</struct>




<decl_stmt><decl><type><name>size_t</name></type> <name>xread_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>xread_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>xread_consumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xread_group_noack</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>numreplicas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>reploffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>module_blocked_handle</name></decl>;</decl_stmt>


}</block></struct></type> <name>blockingState</name>;</typedef>












<typedef>typedef <type><struct>struct <name>readyList</name> <block>{
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>readyList</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_COMMAND_BITS_COUNT</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_FLAG_ENABLED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_FLAG_DISABLED</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_FLAG_NOPASS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_FLAG_SANITIZE_PAYLOAD</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_FLAG_SANITIZE_PAYLOAD_SKIP</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTOR_FLAG_ROOT</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTOR_FLAG_ALLKEYS</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTOR_FLAG_ALLCOMMANDS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTOR_FLAG_ALLCHANNELS</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>passwords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>selectors</name></decl>;</decl_stmt>


}</block></struct></type> <name>user</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_ID_AOF</name></cpp:macro> <cpp:value>(UINT64_MAX)</cpp:value></cpp:define>









<typedef>typedef <type><struct>struct <name>replBacklog</name> <block>{
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ref_repl_buf_node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>unindexed_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>blocks_index</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>histlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>replBacklog</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mem_usage_sum</name></decl>;</decl_stmt>
}</block></struct></type> <name>clientMemUsageBucket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>client</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>querybuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>qb_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>pending_querybuf</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>querybuf_peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argv_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>original_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>original_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>argv_len_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>, <modifier>*</modifier><name>lastcmd</name>;</decl_stmt>
<decl_stmt><decl><type><name>user</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>reqtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>multibulklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bulklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>reply_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sentlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>lastinteraction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>obuf_soft_limit_reached_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>authenticated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>replstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_start_cmd_stream_on_ack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repldbfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>repldboff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>repldbsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>replpreamble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>read_reploff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>reploff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_ack_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_ack_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_last_partial_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>psync_initial_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>replid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_listening_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slave_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_capa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multiState</name></type> <name>mstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>btype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blockingState</name></type> <name>bpop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>woff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>watched_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>pubsub_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>pubsub_patterns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>pubsubshard_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>peerid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sockname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>client_list_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>postponed_list_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>pending_read_list_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RedisModuleUserChangedFunc</name></type> <name>auth_callback</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>auth_callback_privdata</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>auth_module</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint64_t</name></type> <name>client_tracking_redirection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>client_tracking_prefixes</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>size_t</name></type> <name>last_memory_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_memory_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>last_memory_usage_on_bucket_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>mem_usage_bucket_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clientMemUsageBucket</name> <modifier>*</modifier></type><name>mem_usage_bucket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ref_repl_buf_node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ref_block_pos</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>bufpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_usable_size</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PROTO_REPLY_CHUNK_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>client</name>;</typedef>

<struct>struct <name>saveparam</name> <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>seconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changes</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>moduleLoadQueueEntry</name> <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sentinelLoadQueueEntry</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sentinelConfig</name> <block>{
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>pre_monitor_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>monitor_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>post_monitor_cfg</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sharedObjectsStruct</name> <block>{
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>crlf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ok</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>err</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>emptybulk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>czero</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cone</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pong</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>space</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>queued</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>null</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>nullarray</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>emptymap</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>emptyset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>emptyarray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wrongtypeerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nokeyerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>syntaxerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sameobjecterr</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>outofrangeerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>noscripterr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>loadingerr</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>slowevalerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slowscripterr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slowmoduleerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bgsaveerr</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>masterdownerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>roslaveerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>execaborterr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>noautherr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>noreplicaserr</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>busykeyerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oomerr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>plus</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>messagebulk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pmessagebulk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>subscribebulk</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>unsubscribebulk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psubscribebulk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>punsubscribebulk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>del</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>unlink</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>rpop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpush</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rpoplpush</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lmove</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>blmove</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zpopmin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zpopmax</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>emptyscan</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>multi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>exec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>right</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hset</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xgroup</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xclaim</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>script</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>replconf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eval</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>persist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>set</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pexpireat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pexpire</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>time</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pxat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>absttl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>retrycount</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>force</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>justid</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>lastid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ping</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>setid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>keepttl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>load</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>createconsumer</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>getack</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>special_asterick</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>special_equals</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>default_username</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>redacted</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>ssubscribebulk</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>sunsubscribebulk</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name><name>select</name><index>[<expr><name>PROTO_SHARED_SELECT_CMDS</name></expr>]</index></name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name><name>integers</name><index>[<expr><name>OBJ_SHARED_INTEGERS</name></expr>]</index></name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name><name>mbulkhdr</name><index>[<expr><name>OBJ_SHARED_BULKHDR_LEN</name></expr>]</index></name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name><name>bulkhdr</name><index>[<expr><name>OBJ_SHARED_BULKHDR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>minstring</name></decl>, <decl><type ref="prev"/><name>maxstring</name></decl>;</decl_stmt>
}</block>;</struct>


<typedef>typedef <type><struct>struct <name>zskiplistNode</name> <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>ele</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zskiplistNode</name></name> <modifier>*</modifier></type><name>backward</name></decl>;</decl_stmt>
<struct>struct <name>zskiplistLevel</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>zskiplistNode</name></name> <modifier>*</modifier></type><name>forward</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>span</name></decl>;</decl_stmt>
}</block> <decl><name><name>level</name><index>[]</index></name></decl>;</struct>
}</block></struct></type> <name>zskiplistNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>zskiplist</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>zskiplistNode</name></name> <modifier>*</modifier></type><name>header</name></decl>, <modifier>*</modifier><name>tail</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
}</block></struct></type> <name>zskiplist</name>;</typedef>

<typedef>typedef <type><struct>struct <name>zset</name> <block>{
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl>;</decl_stmt>
}</block></struct></type> <name>zset</name>;</typedef>

<typedef>typedef <type><struct>struct <name>clientBufferLimitsConfig</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>hard_limit_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>soft_limit_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>soft_limit_seconds</name></decl>;</decl_stmt>
}</block></struct></type> <name>clientBufferLimitsConfig</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>clientBufferLimitsConfig</name></type> <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>CLIENT_TYPE_OBUF_COUNT</name></expr>]</index></name></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct <name>redisOp</name> <block>{
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>, <name>dbid</name>, <name>target</name>;</decl_stmt>
}</block></struct></type> <name>redisOp</name>;</typedef>








<typedef>typedef <type><struct>struct <name>redisOpArray</name> <block>{
<decl_stmt><decl><type><name>redisOp</name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisOpArray</name>;</typedef>



<struct>struct <name>redisMemOverhead</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>peak_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>startup_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>repl_backlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clients_slaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clients_normal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cluster_links</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>aof_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lua_caches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>functions_caches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>overhead_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dataset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_per_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dataset_perc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>peak_perc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>total_frag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>total_frag_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>allocator_frag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>allocator_frag_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>allocator_rss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>allocator_rss_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rss_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rss_extra_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_dbs</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>dbid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>overhead_ht_main</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>overhead_ht_expires</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>overhead_ht_slot_to_keys</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>db</name></decl>;</struct>
}</block>;</struct>









<typedef>typedef <type><struct>struct <name>rdbSaveInfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>repl_stream_db</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>repl_id_is_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>repl_id</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>rdbSaveInfo</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_SAVE_INFO_INIT</name></cpp:macro> <cpp:value>{-1,0,"0000000000000000000000000000000000000000",-1}</cpp:value></cpp:define>

<struct>struct <name>malloc_stats</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>zmalloc_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>process_rss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>allocator_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>allocator_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>allocator_resident</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>socketFds</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><name>CONFIG_BINDADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>socketFds</name>;</typedef>





<typedef>typedef <type><struct>struct <name>redisTLSContextConfig</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_file_pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_cert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_key_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_key_file_pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dh_params_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ca_cert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ca_cert_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>protocols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ciphers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ciphersuites</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefer_server_ciphers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>session_caching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>session_cache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>session_cache_timeout</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisTLSContextConfig</name>;</typedef>




<typedef>typedef <type><enum>enum <block>{
<decl><name>AOF_FILE_TYPE_BASE</name> <init>= <expr><literal type="char">'b'</literal></expr></init></decl>,
<decl><name>AOF_FILE_TYPE_HIST</name> <init>= <expr><literal type="char">'h'</literal></expr></init></decl>,
<decl><name>AOF_FILE_TYPE_INCR</name> <init>= <expr><literal type="char">'i'</literal></expr></init></decl>,
}</block></enum></type> <name>aof_file_type</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>file_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>file_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aof_file_type</name></type> <name>file_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>aofInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>aofInfo</name> <modifier>*</modifier></type><name>base_aof_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>incr_aof_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>history_aof_list</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>curr_base_file_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>curr_incr_file_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name></decl>;</decl_stmt>

}</block></struct></type> <name>aofManifest</name>;</typedef>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>hz</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_TYPE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_TYPE_RDB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_TYPE_AOF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_TYPE_LDB</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_TYPE_MODULE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>childInfoType</name> <block>{
<decl><name>CHILD_INFO_TYPE_CURRENT_INFO</name></decl>,
<decl><name>CHILD_INFO_TYPE_AOF_COW_SIZE</name></decl>,
<decl><name>CHILD_INFO_TYPE_RDB_COW_SIZE</name></decl>,
<decl><name>CHILD_INFO_TYPE_MODULE_COW_SIZE</name></decl>
}</block></enum></type> <name>childInfoType</name>;</typedef>

<struct>struct <name>redisServer</name> <block>{

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>main_thread_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>configfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>executable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exec_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dynamic_hz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>config_hz</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mode_t</name></type> <name>umask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_fork_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>orig_commands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>unsigned</name> <name>int</name></type> <name>lruclock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>shutdown_asap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>shutdown_mstime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shutdown_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>activerehashing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_defrag_running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arch_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cronloops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>runid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sentinel_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>initial_memory_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>always_show_logo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>busy_module_yield_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>busy_module_yield_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>core_propagates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>propagate_no_multi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>module_ctx_nesting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ignore_warnings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>client_pause_in_transaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thp_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>page_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>moduleapi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>sharedapi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>loadmodule_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>module_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>child_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>child_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tls_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tcp_backlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>bindaddr</name><index>[<expr><name>CONFIG_BINDADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bindaddr_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bind_source_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unixsocket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>unixsocketperm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socketFds</name></type> <name>ipfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socketFds</name></type> <name>tlsfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sofd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socketFds</name></type> <name>cfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>clients_to_close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>clients_pending_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>clients_pending_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>slaves</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>monitors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>current_client</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>clientMemUsageBucket</name></type> <name><name>client_mem_usage_buckets</name><index>[<expr><name>CLIENT_MEM_USAGE_BUCKETS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>clients_timeout_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fixed_time_expire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_nested_call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>clients_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pause_type</name></type> <name>client_pause_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>postponed_clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>client_pause_end_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pause_event</name> <modifier>*</modifier></type><name><name>client_pause_per_purpose</name><index>[<expr><name>NUM_PAUSE_PURPOSES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>neterr</name><index>[<expr><name>ANET_ERR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>migrate_cached_sockets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>uint64_t</name></type> <name>next_client_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protected_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>io_threads_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>io_threads_do_reads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>io_threads_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>events_processed_while_blocked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable_protected_configs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable_debug_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable_module_cmd</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>loading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>async_loading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>loading_total_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>loading_rdb_used_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>loading_loaded_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>loading_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>loading_process_events_interval_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>stat_starttime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_numcommands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_numconnections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_expiredkeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>stat_expired_stale_perc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_expired_time_cap_reached_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_expire_cycle_time_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_evictedkeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_evictedclients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_total_eviction_exceeded_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>stat_last_eviction_exceeded_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_keyspace_hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_keyspace_misses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_active_defrag_hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_active_defrag_misses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_active_defrag_key_hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_active_defrag_key_misses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_active_defrag_scanned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_total_active_defrag_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>stat_last_active_defrag_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_peak_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_fork_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>stat_fork_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_total_forks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_rejected_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_sync_full</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_sync_partial_ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_sync_partial_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>slowlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>slowlog_entry_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>slowlog_log_slower_than</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>slowlog_max_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>malloc_stats</name></name></type> <name>cron_malloc_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>long</name> <name>long</name></type> <name>stat_net_input_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>long</name> <name>long</name></type> <name>stat_net_output_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_current_cow_peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_current_cow_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>stat_current_cow_updated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_current_save_keys_processed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_current_save_keys_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_rdb_cow_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_aof_cow_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_module_cow_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>stat_module_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>size_t</name></type> <name><name>stat_clients_type_memory</name><index>[<expr><name>CLIENT_TYPE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stat_cluster_links_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_unexpected_error_replies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_total_error_replies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_dump_payload_sanitizations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_io_reads_processed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_io_writes_processed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>long</name> <name>long</name></type> <name>stat_total_reads_processed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>long</name> <name>long</name></type> <name>stat_total_writes_processed</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>last_sample_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>last_sample_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>samples</name><index>[<expr><name>STATS_METRIC_SAMPLES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
}</block> <decl><name><name>inst_metric</name><index>[<expr><name>STATS_METRIC_COUNT</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>verbosity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxidletime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tcpkeepalive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_expire_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_expire_effort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_defrag_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sanitize_dump_payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_checksum_validation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jemalloc_bg_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>active_defrag_ignore_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_defrag_threshold_lower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_defrag_threshold_upper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_defrag_cycle_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_defrag_cycle_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>active_defrag_max_scan_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>client_max_querybuf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>supervised</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>supervised_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>daemonize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set_proc_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proc_title_template</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clientBufferLimitsConfig</name></type> <name><name>client_obuf_limits</name><index>[<expr><name>CLIENT_TYPE_OBUF_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pause_cron</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>latency_tracking_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>latency_tracking_info_percentiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>latency_tracking_info_percentiles_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aof_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_fsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aof_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aof_dirname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_no_fsync_on_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_rewrite_perc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>aof_rewrite_min_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>aof_rewrite_base_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>aof_current_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>aof_last_incr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>aof_fsync_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_flush_sleep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_rewrite_scheduled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>aof_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_selected_db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>aof_flush_postponed_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>aof_last_fsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>aof_rewrite_time_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>aof_rewrite_time_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>aof_cur_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_timestamp_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_lastbgrewrite_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>aof_delayed_fsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_rewrite_incremental_fsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_save_incremental_fsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_last_write_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_last_write_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_load_truncated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_use_rdb_preamble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>int</name></type> <name>aof_bio_fsync_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisAtomic</name> <name>int</name></type> <name>aof_bio_fsync_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aofManifest</name> <modifier>*</modifier></type><name>aof_manifest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_disable_auto_gc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dirty_before_bgsave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rdb_last_load_keys_expired</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rdb_last_load_keys_loaded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>saveparam</name></name> <modifier>*</modifier></type><name>saveparams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saveparamslen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rdb_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_compression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_del_sync_files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>lastsave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>lastbgsave_try</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>rdb_save_time_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>rdb_save_time_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_bgsave_scheduled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_child_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastbgsave_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stop_writes_on_bgsave_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_pipe_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rdb_child_exit_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier><modifier>*</modifier></type><name>rdb_pipe_conns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_pipe_numconns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_pipe_numconns_writing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rdb_pipe_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_pipe_bufflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_key_save_delay</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>key_load_delay</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name><name>child_info_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>child_info_nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>redisOpArray</name></type> <name>also_propagate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>replication_allowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syslog_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>syslog_ident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syslog_facility</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crashlog_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>memcheck_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_exit_on_panic</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>shutdown_timeout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>replid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>replid2</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>master_repl_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>second_replid_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slaveseldb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_ping_slave_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replBacklog</name> <modifier>*</modifier></type><name>repl_backlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_backlog_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>repl_backlog_time_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>repl_no_slaves_since</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repl_min_slaves_to_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_min_slaves_max_lag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_good_slaves_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_diskless_sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_diskless_load</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repl_diskless_sync_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_diskless_sync_max_replicas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>repl_buffer_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>repl_buffer_blocks</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>masteruser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>masterauth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>masterhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>masterport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>cached_master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_syncio_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>repl_transfer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>repl_transfer_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>repl_transfer_last_fsync_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>repl_transfer_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_transfer_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>repl_transfer_tmpfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>repl_transfer_lastio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_serve_stale_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_slave_ro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_slave_ignore_maxmemory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>repl_down_since</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_disable_tcp_nodelay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>replica_announced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slave_announce_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slave_announce_ip</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name></type> <name><name>master_replid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>master_initial_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repl_slave_lazy_flush</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>repl_scriptcache_dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>repl_scriptcache_fifo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>repl_scriptcache_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>clients_waiting_acks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>get_ack_from_slaves</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxclients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>maxmemory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>maxmemory_clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxmemory_policy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxmemory_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxmemory_eviction_tenacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lfu_log_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lfu_decay_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>proto_max_bulk_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>oom_score_adj_values</name><index>[<expr><name>CONFIG_OOM_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oom_score_adj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disable_thp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>blocked_clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>blocked_clients_by_type</name><index>[<expr><name>BLOCKED_NUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>unblocked_clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>ready_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tracking_clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tracking_table_max_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>tracking_pending_keys</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>sort_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sort_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sort_bypattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sort_store</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hash_max_listpack_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hash_max_listpack_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>set_max_intset_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>zset_max_listpack_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>zset_max_listpack_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hll_sparse_max_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stream_node_max_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stream_node_max_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_max_listpack_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list_compress_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>redisAtomic</name> <name>time_t</name></type> <name>unixtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timezone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>daylight_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>mstime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ustime_t</name></type> <name>ustime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blocking_op_nesting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>blocked_last_cron</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>pubsub_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>pubsub_patterns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>notify_keyspace_events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>pubsubshard_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cluster_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>cluster_node_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cluster_configfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>clusterState</name></name> <modifier>*</modifier></type><name>cluster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_migration_barrier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_allow_replica_migration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_slave_validity_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_require_full_coverage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cluster_slave_no_failover</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cluster_announce_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cluster_announce_hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_preferred_endpoint_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_announce_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_announce_tls_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_announce_bus_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_module_flags</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>cluster_allow_reads_when_down</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cluster_config_file_lock_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>cluster_link_sendbuf_limit_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_drop_packet_filter</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>script_caller</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>busy_reply_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>script_oom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>script_disable_deny_script</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lazyfree_lazy_eviction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lazyfree_lazy_expire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lazyfree_lazy_server_del</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lazyfree_lazy_user_del</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lazyfree_lazy_user_flush</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>latency_monitor_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>latency_events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>acllog_max_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>requirepass</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>acl_pubsub_default</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>watchdog_period</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>system_memory_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tls_cluster</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tls_replication</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tls_auth_clients</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisTLSContextConfig</name></type> <name>tls_ctx_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server_cpulist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bio_cpulist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aof_rewrite_cpulist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bgsave_cpulist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sentinelConfig</name></name> <modifier>*</modifier></type><name>sentinel_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_end_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_failover</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target_replica_host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_replica_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failover_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_allow_pubsubshard_when_down</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEYS_BUFFER</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>keyReference</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>keyReference</name></type> <name><name>keysbuf</name><index>[<expr><name>MAX_KEYS_BUFFER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keyReference</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numkeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>getKeysResult</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETKEYS_RESULT_INIT</name></cpp:macro> <cpp:value>{ {{0}}, NULL, 0, MAX_KEYS_BUFFER }</cpp:value></cpp:define>





















<typedef>typedef <type><enum>enum <block>{
<decl><name>KSPEC_BS_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>KSPEC_BS_UNKNOWN</name></decl>,
<decl><name>KSPEC_BS_INDEX</name></decl>,
<decl><name>KSPEC_BS_KEYWORD</name></decl>
}</block></enum></type> <name>kspec_bs_type</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>KSPEC_FK_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>KSPEC_FK_UNKNOWN</name></decl>,
<decl><name>KSPEC_FK_RANGE</name></decl>,
<decl><name>KSPEC_FK_KEYNUM</name></decl>
}</block></enum></type> <name>kspec_fk_type</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kspec_bs_type</name></type> <name>begin_search_type</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
}</block> <decl><name>index</name></decl>;</struct>
<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>startfrom</name></decl>;</decl_stmt>
}</block> <decl><name>keyword</name></decl>;</struct>
}</block> <decl><name>bs</name></decl>;</union>
<decl_stmt><decl><type><name>kspec_fk_type</name></type> <name>find_keys_type</name></decl>;</decl_stmt>
<union>union <block>{


<struct>struct <block>{



<decl_stmt><decl><type><name>int</name></type> <name>lastkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keystep</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
}</block> <decl><name>range</name></decl>;</struct>
<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>keynumidx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>firstkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keystep</name></decl>;</decl_stmt>
}</block> <decl><name>keynum</name></decl>;</struct>
}</block> <decl><name>fk</name></decl>;</union>
}</block></struct></type> <name>keySpec</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_KEY_SPECS_NUM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum <block>{
<decl><name>ARG_TYPE_STRING</name></decl>,
<decl><name>ARG_TYPE_INTEGER</name></decl>,
<decl><name>ARG_TYPE_DOUBLE</name></decl>,
<decl><name>ARG_TYPE_KEY</name></decl>,
<decl><name>ARG_TYPE_PATTERN</name></decl>,
<decl><name>ARG_TYPE_UNIX_TIME</name></decl>,
<decl><name>ARG_TYPE_PURE_TOKEN</name></decl>,
<decl><name>ARG_TYPE_ONEOF</name></decl>,
<decl><name>ARG_TYPE_BLOCK</name></decl>
}</block></enum></type> <name>redisCommandArgType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ARG_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ARG_OPTIONAL</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ARG_MULTIPLE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_ARG_MULTIPLE_TOKEN</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>redisCommandArg</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCommandArgType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_spec_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>since</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommandArg</name></name> <modifier>*</modifier></type><name>subargs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_args</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisCommandArg</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>RESP2_SIMPLE_STRING</name></decl>,
<decl><name>RESP2_ERROR</name></decl>,
<decl><name>RESP2_INTEGER</name></decl>,
<decl><name>RESP2_BULK_STRING</name></decl>,
<decl><name>RESP2_NULL_BULK_STRING</name></decl>,
<decl><name>RESP2_ARRAY</name></decl>,
<decl><name>RESP2_NULL_ARRAY</name></decl>,
}</block></enum></type> <name>redisCommandRESP2Type</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>RESP3_SIMPLE_STRING</name></decl>,
<decl><name>RESP3_ERROR</name></decl>,
<decl><name>RESP3_INTEGER</name></decl>,
<decl><name>RESP3_DOUBLE</name></decl>,
<decl><name>RESP3_BULK_STRING</name></decl>,
<decl><name>RESP3_ARRAY</name></decl>,
<decl><name>RESP3_MAP</name></decl>,
<decl><name>RESP3_SET</name></decl>,
<decl><name>RESP3_BOOL</name></decl>,
<decl><name>RESP3_NULL</name></decl>,
}</block></enum></type> <name>redisCommandRESP3Type</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>since</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>changes</name></decl>;</decl_stmt>
}</block></struct></type> <name>commandHistory</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>COMMAND_GROUP_GENERIC</name></decl>,
<decl><name>COMMAND_GROUP_STRING</name></decl>,
<decl><name>COMMAND_GROUP_LIST</name></decl>,
<decl><name>COMMAND_GROUP_SET</name></decl>,
<decl><name>COMMAND_GROUP_SORTED_SET</name></decl>,
<decl><name>COMMAND_GROUP_HASH</name></decl>,
<decl><name>COMMAND_GROUP_PUBSUB</name></decl>,
<decl><name>COMMAND_GROUP_TRANSACTIONS</name></decl>,
<decl><name>COMMAND_GROUP_CONNECTION</name></decl>,
<decl><name>COMMAND_GROUP_SERVER</name></decl>,
<decl><name>COMMAND_GROUP_SCRIPTING</name></decl>,
<decl><name>COMMAND_GROUP_HYPERLOGLOG</name></decl>,
<decl><name>COMMAND_GROUP_CLUSTER</name></decl>,
<decl><name>COMMAND_GROUP_SENTINEL</name></decl>,
<decl><name>COMMAND_GROUP_GEO</name></decl>,
<decl><name>COMMAND_GROUP_STREAM</name></decl>,
<decl><name>COMMAND_GROUP_BITMAP</name></decl>,
<decl><name>COMMAND_GROUP_MODULE</name></decl>,
}</block></enum></type> <name>redisCommandGroup</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>redisCommandProc</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>redisGetKeysProc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl></typedef>























































































<struct>struct <name>redisCommand</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>declared_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>complexity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>since</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doc_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replaced_by</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>deprecated_since</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCommandGroup</name></type> <name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>commandHistory</name> <modifier>*</modifier></type><name>history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisCommandProc</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>acl_categories</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keySpec</name></type> <name><name>key_specs_static</name><index>[<expr><name>STATIC_KEY_SPECS_NUM</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>redisGetKeysProc</name> <modifier>*</modifier></type><name>getkeys_proc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>subcommands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>redisCommandArg</name></name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>microseconds</name></decl>, <decl><type ref="prev"/><name>calls</name></decl>, <decl><type ref="prev"/><name>rejected_calls</name></decl>, <decl><type ref="prev"/><name>failed_calls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>sds</name></type> <name>fullname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>latency_histogram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keySpec</name> <modifier>*</modifier></type><name>key_specs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keySpec</name></type> <name>legacy_range_key_spec</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>num_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_tips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_specs_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_specs_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>subcommands_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>redisError</name> <block>{
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>redisFunctionSym</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pointer</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>_redisSortObject</name> <block>{
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>cmpobj</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>redisSortObject</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_redisSortOperation</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
}</block></struct></type> <name>redisSortOperation</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
}</block></struct></type> <name>listTypeIterator</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>listTypeIterator</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistEntry</name></type> <name>entry</name></decl>;</decl_stmt>
}</block></struct></type> <name>listTypeEntry</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
}</block></struct></type> <name>setTypeIterator</name>;</typedef>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fptr</name></decl>, <modifier>*</modifier><name>vptr</name>;</decl_stmt>

<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
}</block></struct></type> <name>hashTypeIterator</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_HASH_KEY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_HASH_VALUE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_THREADS_OP_IDLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_THREADS_OP_READ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_THREADS_OP_WRITE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>io_threads_op</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>redisServer</name></name></type> <name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>sharedObjectsStruct</name></name></type> <name>shared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>objectKeyPointerValueDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>objectKeyHeapPointerValueDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>setDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>zsetDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>dbDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name></type> <name>R_Zero</name></decl>, <decl><type ref="prev"/><name>R_PosInf</name></decl>, <decl><type ref="prev"/><name>R_NegInf</name></decl>, <decl><type ref="prev"/><name>R_Nan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>hashDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>replScriptCacheDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>dbExpiresDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>modulesDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dictType</name></type> <name>sdsReplyDictType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dict</name> <modifier>*</modifier></type><name>modules</name></decl>;</decl_stmt>






<function_decl><type><name>void</name></type> <name>populateCommandLegacyRangeSpec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>moduleInitModulesSystem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleInitModulesSystemLast</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>modulesCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleLoadFromQueue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleGetCommandKeysViaAPI</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>moduleType</name> <modifier>*</modifier></type><name>moduleTypeLookupModuleByID</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleTypeNameByID</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>moduleid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>moduleTypeModuleName</name><parameter_list>(<parameter><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleFreeContext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RedisModuleCtx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unblockClientFromModule</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleHandleBlockedClients</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleBlockedClientTimedOut</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>modulePipeReadable</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>moduleCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleAcquireGIL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleTryAcquireGIL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleReleaseGIL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleNotifyKeyspaceEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleCallCommandFilters</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ModuleForkDoneHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>TerminateModuleForkChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>child_pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>rdbSaveModulesAux</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleAllDatatypesHandleErrors</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleAllModulesHandleReplAsyncLoad</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>modulesCollectInfo</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_crash_report</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sections</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleFireServerEvent</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>processModuleLoadingProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_aof</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleTryServeClientBlockedOnKey</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleUnblockClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleBlockedClientMayTimeout</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleClientIsBlockedOnKeys</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleNotifyUserChanged</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleNotifyKeyUnlink</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>moduleGetFreeEffort</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>moduleGetMemUsage</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sample_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>moduleTypeDupOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>fromkey</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>tokey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>todb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleDefragValue</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleLateDefrag</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>endtime</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>moduleDefragGlobals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>moduleGetHandleByName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>modulename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>moduleIsModuleCommand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module_handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>long</name> <name>long</name></type> <name>ustime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>mstime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getRandomHexChars</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getRandomBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>crc64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>exitFromChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retcode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>redisPopcount</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisSetProcTitle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>validateProcTitleTemplate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redisCommunicateSystemd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sd_notify_msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisSetCpuAffinity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpulist</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>client</name> <modifier>*</modifier></type><name>createClient</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeClientAsync</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>logInvalidUseAndFreeClientAsync</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>beforeNextClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clearClientConnectionState</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeClientOriginalArgv</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sendReplyToClient</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>addReplyDeferredLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setDeferredArrayLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setDeferredMapLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setDeferredSetLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setDeferredAttributeLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setDeferredPushLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>processInputBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>acceptTcpHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>acceptTLSHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>acceptUnixHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>readQueryFromClient</name><parameter_list>(<parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>prepareClientToWrite</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyNull</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyNullArray</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyBool</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyVerbatim</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyProto</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddReplyFromClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyBulk</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyBulkCString</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyBulkCBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyBulkLongLong</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplySds</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyBulkSds</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setDeferredReplyBulkSds</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyErrorObject</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyOrErrorObject</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyErrorSds</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyError</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyErrorArity</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyErrorExpireTime</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyStatus</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyDouble</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyLongLongWithPrefix</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyBigNum</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyHumanLongDouble</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyLongLong</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>ll</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyArrayLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyMapLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplySetLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyAttributeLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyPushLen</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyHelp</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>help</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplySubcommandSyntaxError</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyLoadedModules</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>copyReplicaOutputBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addListRangeReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reverse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>sdsZmallocSize</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>getStringObjectSdsUsedMemory</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeClientReplyValue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dupClientReplyValue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>getClientPeerId</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>getClientSockName</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>catClientInfoString</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>getAllClientsInfoString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rewriteClientCommandVector</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rewriteClientCommandArgument</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replaceClientCommandVector</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redactClientCommandArgument</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>getClientOutputBufferMemoryUsage</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>getClientMemoryUsage</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>output_buffer_mem_usage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>freeClientsInAsyncFreeQueue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>closeClientOnOutputBufferLimitReached</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getClientType</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getClientTypeByName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>getClientTypeName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>class</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>flushSlavesOutputBuffers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>disconnectSlaves</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evictClients</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>listenToPort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>socketFds</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pauseClients</name><parameter_list>(<parameter><decl><type><name>pause_purpose</name></type> <name>purpose</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>pause_type</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unpauseClients</name><parameter_list>(<parameter><decl><type><name>pause_purpose</name></type> <name>purpose</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>areClientsPaused</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>checkClientPauseTimeoutAndReturnIfPaused</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unblockPostponedClients</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>processEventsWhileBlocked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>whileBlockedCron</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blockingOperationStarts</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blockingOperationEnds</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>handleClientsWithPendingWrites</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>handleClientsWithPendingWritesUsingThreads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>handleClientsWithPendingReadsUsingThreads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>stopThreadedIOIfNeeded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clientHasPendingReplies</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>islocalClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>updateClientMemUsage</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateClientMemUsageBucket</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unlinkClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>writeToClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>handler_installed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>linkClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>protectClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unprotectClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initThreadedIO</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>client</name> <modifier>*</modifier></type><name>lookupClientByID</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>authRequired</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clientInstallWriteHandler</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>addReplyErrorFormat</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>addReplyStatusFormat</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>addReplyErrorFormat</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyStatusFormat</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>void</name></type> <name>enableTracking</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>redirect_to</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numprefix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>disableTracking</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trackingRememberKeys</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trackingInvalidateKey</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bcast</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trackingScheduleKeyInvalidation</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>client_id</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trackingHandlePendingKeyInvalidations</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trackingInvalidateKeysOnFlush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeTrackingRadixTree</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeTrackingRadixTreeAsync</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trackingLimitUsedSlots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>trackingGetTotalItems</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>trackingGetTotalKeys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>trackingGetTotalPrefixes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trackingBroadcastInvalidationMessages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>checkPrefixCollisionsOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numprefix</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>listTypePush</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>listTypePop</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>listTypeLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>listTypeIterator</name> <modifier>*</modifier></type><name>listTypeInitIterator</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listTypeReleaseIterator</name><parameter_list>(<parameter><decl><type><name>listTypeIterator</name> <modifier>*</modifier></type><name>li</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listTypeSetIteratorDirection</name><parameter_list>(<parameter><decl><type><name>listTypeIterator</name> <modifier>*</modifier></type><name>li</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>listTypeNext</name><parameter_list>(<parameter><decl><type><name>listTypeIterator</name> <modifier>*</modifier></type><name>li</name></decl></parameter>, <parameter><decl><type><name>listTypeEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>listTypeGet</name><parameter_list>(<parameter><decl><type><name>listTypeEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listTypeInsert</name><parameter_list>(<parameter><decl><type><name>listTypeEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listTypeReplace</name><parameter_list>(<parameter><decl><type><name>listTypeEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>listTypeEqual</name><parameter_list>(<parameter><decl><type><name>listTypeEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listTypeDelete</name><parameter_list>(<parameter><decl><type><name>listTypeIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>listTypeEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>listTypeDup</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>listTypeDelRange</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unblockClientWaitingData</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>popGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>listElementsRemoved</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>deleted</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>unwatchAllKeys</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initClientMultiState</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeClientMultiState</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>queueMultiCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>multiStateMemOverhead</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>touchWatchedKey</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>isWatchedKeyExpired</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>touchAllWatchedKeysInDb</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>emptied</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>replaced_with</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>discardTransaction</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>flagTransaction</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>execCommandAbort</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>decrRefCount</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>decrRefCountVoid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>incrRefCount</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>makeObjectShared</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>resetRefCount</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeStringObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeListObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeSetObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeZsetObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeHashObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dismissObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dump_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createRawStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createEmbeddedStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>tryCreateRawStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>tryCreateStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>dupStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>isSdsRepresentableAsLongLong</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>llval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>isObjectRepresentableAsLongLong</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>llongval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>tryObjectEncoding</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>getDecodedObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>stringObjectLen</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createStringObjectFromLongLong</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createStringObjectFromLongLongForValue</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createStringObjectFromLongDouble</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>humanfriendly</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createQuicklistObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createSetObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createIntsetObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createHashObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createZsetObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createZsetListpackObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createStreamObject</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>createModuleObject</name><parameter_list>(<parameter><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getLongFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getPositiveLongFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getRangeLongFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>checkType</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getLongLongFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getDoubleFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getDoubleFromObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getLongLongFromObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getLongDoubleFromObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getLongDoubleFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getIntFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>strEncoding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>compareStringObjects</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>collateStringObjects</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>equalStringObjects</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>estimateObjectIdleTime</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>trimStringObjectIfNeeded</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdsEncodedObject</name><parameter_list>(<parameter><type><name>objptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(objptr-&gt;encoding == OBJ_ENCODING_RAW || objptr-&gt;encoding == OBJ_ENCODING_EMBSTR)</cpp:value></cpp:define>


<function_decl><type><name>ssize_t</name></type> <name>syncWrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>syncRead</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>syncReadLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>replicationFeedSlaves</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>slaves</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationFeedStreamFromMasterStream</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetReplicationBuffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>feedReplicationBuffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeReplicaReferencedReplBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationFeedMonitors</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>monitors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dictid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateSlavesWaitingBgsave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bgsaveerr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationStartPendingFork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationHandleMasterDisconnection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationCacheMaster</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resizeReplicationBacklog</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationSetMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationUnsetMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>refreshGoodSlavesCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>processClientsWaitingReplicas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unblockClientWaitingReplicas</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>replicationCountAcksByOffset</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationSendNewlineToMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>replicationGetSlaveOffset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>replicationGetSlaveName</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>getPsyncInitialOffset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>replicationSetupSlaveForFullResync</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>changeReplicationId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clearReplicationId2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>createReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicationCacheMasterUsingMyself</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>feedReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>incrementalTrimReplicationBacklog</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>blocks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>canFeedReplicaReplBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rebaseReplicationBuffer</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>base_repl_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>showLatestBacklog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rdbPipeReadHandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rdbPipeWriteHandlerConnRemoved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clearFailoverState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateFailoverStatus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>abortFailover</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getFailoverStateString</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>startLoadingFile</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>startLoading</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>loadingAbsProgress</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>loadingIncrProgress</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>stopLoading</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateLoadingFileName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>startSaving</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rdbflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>stopSaving</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>allPersistenceDisabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISK_ERROR_TYPE_AOF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISK_ERROR_TYPE_RDB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISK_ERROR_TYPE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>writeCommandsDeniedByDiskError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdb.h"</cpp:file></cpp:include>
<function_decl><type><name>void</name></type> <name>killRDBChild</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bg_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>flushAppendOnlyFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>feedAppendOnlyFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dictid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>aofRemoveTempFile</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>childpid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rewriteAppendOnlyFileBackground</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>loadAppendOnlyFiles</name><parameter_list>(<parameter><decl><type><name>aofManifest</name> <modifier>*</modifier></type><name>am</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>stopAppendOnly</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>startAppendOnly</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>backgroundRewriteDoneHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>aofReadDiffFromParent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>killAppendOnlyChild</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>restartAOFAfterSYNC</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>aofLoadManifestFromDisk</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>aofOpenIfNeededOnServerStart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>aofManifestFree</name><parameter_list>(<parameter><decl><type><name>aofManifest</name> <modifier>*</modifier></type><name>am</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>aofDelHistoryFiles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>aofRewriteLimited</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>openChildInfoPipe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>closeChildInfoPipe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sendChildInfoGeneric</name><parameter_list>(<parameter><decl><type><name>childInfoType</name></type> <name>info_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sendChildCowInfo</name><parameter_list>(<parameter><decl><type><name>childInfoType</name></type> <name>info_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sendChildInfo</name><parameter_list>(<parameter><decl><type><name>childInfoType</name></type> <name>info_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>receiveChildInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>redisFork</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hasActiveChildProcess</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetChildState</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>isMutuallyExclusiveChildType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>rax</name> <modifier>*</modifier></type><name>Users</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>user</name> <modifier>*</modifier></type><name>DefaultUser</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>ACLInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_DENIED_CMD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_DENIED_KEY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_DENIED_AUTH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_DENIED_CHANNEL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_LOG_CTX_TOPLEVEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_LOG_CTX_LUA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_LOG_CTX_MULTI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_LOG_CTX_MODULE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_READ_PERMISSION</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_WRITE_PERMISSION</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_ALL_PERMISSION</name></cpp:macro> <cpp:value>(ACL_READ_PERMISSION|ACL_WRITE_PERMISSION)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ACLCheckUserCredentials</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLAuthenticateUser</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>ACLGetCommandID</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>cmdname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ACLClearCommandID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>user</name> <modifier>*</modifier></type><name>ACLGetUserByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLUserCheckKeyPerm</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLUserCheckChannelPerm</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLCheckAllUserCommandPerm</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idxptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLCheckAllPerm</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idxptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLSetUser</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>oplen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>ACLGetCommandCategoryFlagByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLAppendUserForLoading</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc_err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ACLSetUserStringError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ACLLoadConfiguredUsers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>ACLDescribeUser</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ACLLoadUsersAtStartup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyCommandCategories</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>user</name> <modifier>*</modifier></type><name>ACLCreateUnlinkedUser</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ACLFreeUserAndKillClients</name><parameter_list>(<parameter><decl><type><name>user</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addACLLogEntry</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argpos</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>object</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ACLUpdateDefaultUserPassword</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>password</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_IN_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_IN_INCR</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_IN_NX</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_IN_XX</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_IN_GT</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_IN_LT</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_OUT_NOP</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_OUT_NAN</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_OUT_ADDED</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZADD_OUT_UPDATED</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>min</name></decl>, <name>max</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minex</name></decl>, <name>maxex</name>;</decl_stmt>
}</block></struct></type> <name>zrangespec</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>min</name></decl>, <name>max</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minex</name></decl>, <name>maxex</name>;</decl_stmt>
}</block></struct></type> <name>zlexrangespec</name>;</typedef>

<function_decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zslCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zslFree</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>zslInsert</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>ele</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zzlInsert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>ele</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zslDelete</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>ele</name></decl></parameter>, <parameter><decl><type><name>zskiplistNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>zslFirstInRange</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>zslLastInRange</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>zzlGetScore</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zzlNext</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>eptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zzlPrev</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>eptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zzlFirstInRange</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zzlLastInRange</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>zsetLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>zobj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zsetConvert</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>zobj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zsetConvertToListpackIfNeeded</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>zobj</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxelelen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totelelen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zsetScore</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>zobj</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>member</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>score</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>zslGetRank</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zsetAdd</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>zobj</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>ele</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_flags</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>newscore</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>zsetRank</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>zobj</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>ele</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reverse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zsetDel</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>zobj</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>ele</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>zsetDup</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>genericZpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>keyv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>emitkey</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_nested_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reply_nil_when_empty</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>deleted</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>lpGetObject</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zslValueGteMin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>zrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zslValueLteMax</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>zrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zslFreeLexRange</name><parameter_list>(<parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zslParseLexRange</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zzlFirstInLexRange</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zzlLastInLexRange</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>zslFirstInLexRange</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>zslLastInLexRange</name><parameter_list>(<parameter><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zzlLexValueGteMin</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zzlLexValueLteMax</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zslLexValueGteMin</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zslLexValueLteMax</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>zlexrangespec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>getMaxmemoryState</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>total</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>logical</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>tofree</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>freeMemoryGetNotCountedMemory</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>overMaxmemoryAfterAlloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>moremem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>processCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>processPendingCommandsAndResetClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setupSignalHandlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removeSignalHandlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>createSocketAcceptHandler</name><parameter_list>(<parameter><decl><type><name>socketFds</name> <modifier>*</modifier></type><name>sfd</name></decl></parameter>, <parameter><decl><type><name>aeFileProc</name> <modifier>*</modifier></type><name>accept_handler</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>changeListenPort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>socketFds</name> <modifier>*</modifier></type><name>sfd</name></decl></parameter>, <parameter><decl><type><name>aeFileProc</name> <modifier>*</modifier></type><name>accept_handler</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>changeBindAddr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupSubcommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>sub_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommand</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandBySdsLogic</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandBySds</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandByCStringLogic</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandByCString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandOrOriginal</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>call</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>alsoPropagate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>propagatePendingCommands</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisOpArrayInit</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>redisOpArrayFree</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>forceCommandPropagation</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>preventCommandPropagation</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>preventCommandAOF</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>preventCommandReplication</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slowlogPushCurrentCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ustime_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateCommandLatencyHistogram</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>latency_histogram</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>duration_hist</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>prepareForShutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replyToClientsBlockedOnShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>abortShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>afterCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>inNestedCall</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>_serverLog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>_serverLog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>serverLogRaw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>serverLogFromHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateDictResizePolicy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>htNeedsResize</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>populateCommandTable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetCommandTableStats</name><parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetErrorTableStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>adjustOpenFilesLimit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>incrementErrorCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fullerr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>closeListeningSockets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unlink_unix_socket</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateCachedTime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>update_daylight_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetServerStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>activeDefragCycle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>getLRUClock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>LRU_CLOCK</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evictPolicyToString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>redisMemOverhead</name></name> <modifier>*</modifier></type><name>getMemoryOverheadData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeMemoryOverheadData</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisMemOverhead</name></name> <modifier>*</modifier></type><name>mh</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkChildrenDone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>setOOMScoreAdj</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>process_class</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rejectCommandFormat</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>activeDefragAlloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>activeDefragStringOb</name><parameter_list>(<parameter><decl><type><name>robj</name><modifier>*</modifier></type> <name>ob</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>defragged</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dismissSds</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dismissMemory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_hint</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dismissMemoryInChild</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTART_SERVER_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTART_SERVER_GRACEFULLY</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTART_SERVER_CONFIG_REWRITE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>restartServer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>setTypeCreate</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>setTypeAdd</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>setTypeRemove</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>setTypeIsMember</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>setTypeIterator</name> <modifier>*</modifier></type><name>setTypeInitIterator</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setTypeReleaseIterator</name><parameter_list>(<parameter><decl><type><name>setTypeIterator</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>setTypeNext</name><parameter_list>(<parameter><decl><type><name>setTypeIterator</name> <modifier>*</modifier></type><name>si</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>sdsele</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>llele</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>setTypeNextObject</name><parameter_list>(<parameter><decl><type><name>setTypeIterator</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>setTypeRandomElement</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>setobj</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>sdsele</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>llele</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>setTypeRandomElements</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>aux_set</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>setTypeSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setTypeConvert</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>setTypeDup</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_SET_TAKE_FIELD</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_SET_TAKE_VALUE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_SET_COPY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>hashTypeConvert</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hashTypeTryConversion</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hashTypeExists</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hashTypeDelete</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>hashTypeLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hashTypeInitIterator</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>subject</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hashTypeReleaseIterator</name><parameter_list>(<parameter><decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hashTypeNext</name><parameter_list>(<parameter><decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hashTypeCurrentFromListpack</name><parameter_list>(<parameter><decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vstr</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>vlen</name></decl></parameter>,
<parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>vll</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>hashTypeCurrentFromHashTable</name><parameter_list>(<parameter><decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hashTypeCurrentObject</name><parameter_list>(<parameter><decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vstr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>vlen</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>vll</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>hashTypeCurrentObjectNewSds</name><parameter_list>(<parameter><decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>hashTypeLookupWriteOrCreate</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>hashTypeGetValueObject</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>field</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hashTypeSet</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>hashTypeDup</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>pubsubUnsubscribeAllChannels</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pubsubUnsubscribeShardAllChannels</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pubsubUnsubscribeShardChannels</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pubsubUnsubscribeAllPatterns</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>notify</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pubsubPublishMessage</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pubsubPublishMessageShard</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addReplyPubsubMessage</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>serverPubsubSubscriptionCount</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>serverPubsubShardSubscriptionCount</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>notifyKeyspaceEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>keyspaceEventsStringToFlags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>classes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>keyspaceEventsFlagsToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>loadServerConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>config_from_stdin</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>appendServerSaveParams</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>seconds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>changes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetServerSaveParams</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<struct_decl>struct <name>rewriteConfigState</name>;</struct_decl>
<function_decl><type><name>void</name></type> <name>rewriteConfigRewriteLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rewriteConfigMarkAsProcessed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rewriteConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_all</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initConfigValues</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>getConfigDebugInfo</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>allowProtectedAction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>removeExpire</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>deleteExpiredKeyAndPropagate</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>propagateDeletion</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lazy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>keyIsExpired</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>getExpire</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setExpire</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>checkAlreadyExpired</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyRead</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyWrite</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyReadOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyWriteOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyReadWithFlags</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>lookupKeyWriteWithFlags</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>objectCommandLookup</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>objectCommandLookupOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>objectSetLRUOrLFU</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>lfu_freq</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>lru_idle</name></decl></parameter>,
<parameter><decl><type><name>long</name> <name>long</name></type> <name>lru_clock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lru_multiplier</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_NOTOUCH</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_NONOTIFY</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_NOSTATS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_WRITE</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>dbAdd</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dbAddRDBLoad</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dbOverwrite</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETKEY_KEEPTTL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETKEY_NO_SIGNAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETKEY_ALREADY_EXIST</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETKEY_DOESNT_EXIST</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>setKey</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>dbRandomKey</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dbSyncDelete</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dbDelete</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>robj</name> <modifier>*</modifier></type><name>dbUnshareStringValue</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTYDB_NO_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTYDB_ASYNC</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTYDB_NOFUNCTIONS</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<function_decl><type><name>long</name> <name>long</name></type> <name>emptyData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>emptyDbStructure</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>dbarray</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>flushAllDataAndResetRDB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>long</name></type> <name>dbTotalServerKeyCount</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>redisDb</name> <modifier>*</modifier></type><name>initTempDb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>discardTempDb</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>tempDb</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>selectDb</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>signalModifiedKey</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>signalFlushedDb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>scanGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parseScanCursorOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dbAsyncDelete</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>emptyDbAsync</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>lazyfreeGetPendingObjectsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>lazyfreeGetFreedObjectsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lazyfreeResetStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeObjAsync</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeReplicationBacklogRefMemAsync</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_KEYSPEC_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_KEYSPEC_INCLUDE_CHANNELS</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_KEYSPEC_RETURN_PARTIAL</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>getKeysFromCommandWithSpecs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>keyReference</name> <modifier>*</modifier></type><name>getKeysPrepareResult</name><parameter_list>(<parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numkeys</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getKeysFromCommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>doesCommandHaveKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getKeysFreeResult</name><parameter_list>(<parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sintercardGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zunionInterDiffGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zunionInterDiffStoreGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>evalGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>functionGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sortGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sortROGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>migrateGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>georadiusGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xreadGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>zmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bzmpopGetKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>getKeysResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>crc16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>initSentinelConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initSentinel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelTimer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelHandleConfiguration</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>queueSentinelConfig</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenum</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>loadSentinelConfigFromQueue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelIsRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelCheckConfigFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelInfoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelPublishCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelRoleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>redis_check_rdb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rdbfilename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redis_check_rdb_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redis_check_aof_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>scriptingInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>setup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ldbRemoveChild</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbKillForkedSessions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ldbPendingChildren</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>luaCreateFunction</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaLdbLineHook</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeLuaScriptsAsync</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>lua_scripts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeFunctionsAsync</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ldbIsEnabled</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbLog</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbLogRedisReply</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sha1hex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>evalMemory</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>dict</name><modifier>*</modifier></type> <name>evalScriptsDict</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>evalScriptsMemory</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>processUnblockedClients</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blockClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>btype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unblockClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>queueClientForReprocessing</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replyToBlockedClientTimedOut</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>getTimeoutFromObjectOrReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>disconnectAllBlockedClients</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>handleClientsBlockedOnKeys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>signalKeyAsReady</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blockForKeys</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>btype</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numkeys</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>blockPos</name></name> <modifier>*</modifier></type><name>blockpos</name></decl></parameter>, <parameter><decl><type><name>streamID</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>updateStatsOnUnblock</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blocked_us</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>reply_us</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>addClientToTimeoutTable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removeClientFromTimeoutTable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>handleBlockedClientsTimeout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clientsCronHandleTimeout</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>now_ms</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>activeExpireCycle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>expireSlaveKeys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rememberSlaveKeyWithExpire</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>flushSlaveKeysWithExpireList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>getSlaveKeyWithExpireCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>evictionPoolAlloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFU_INIT_VAL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>LFUGetTimeInMinutes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint8_t</name></type> <name>LFULogIncr</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>LFUDecrAndReturn</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVICT_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVICT_RUNNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVICT_FAIL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>performEvictions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>startEvictionTimeProc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint64_t</name></type> <name>dictSdsHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>dictSdsCaseHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictSdsKeyCompare</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictSdsKeyCaseCompare</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictSdsDestructor</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dictSdsDup</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisGitSHA1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisGitDirty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>redisBuildId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisBuildIdString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>authCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pingCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>echoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandCountCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandListCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandInfoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandGetKeysCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandHelpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandDocsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setnxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setexCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>psetexCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getexCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getdelCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>delCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unlinkCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>existsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setbitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getbitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitfieldCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitfieldroCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setrangeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getrangeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>incrCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>decrCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>incrbyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>decrbyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>incrbyfloatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>selectCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>swapdbCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>randomkeyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>keysCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>scanCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dbsizeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lastsaveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>saveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bgsaveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bgrewriteaofCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>shutdownCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slowlogCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>copyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>renameCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>renamenxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lpushCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rpushCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lpushxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rpushxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>linsertCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lmpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>llenCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lindexCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lrangeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ltrimCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>typeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lsetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>saddCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sremCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>smoveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sismemberCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>smismemberCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>scardCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>spopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>srandmemberCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sinterCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sinterCardCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sinterstoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sunionCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sunionstoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sdiffCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sdiffstoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sscanCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>syncCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>flushdbCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>flushallCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sortCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sortroCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lremCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lposCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rpoplpushCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lmoveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>infoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mgetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>monitorCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>expireCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>expireatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pexpireCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pexpireatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getsetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ttlCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>touchCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pttlCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>expiretimeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pexpiretimeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>persistCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replicaofCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>roleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>debugCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>msetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>msetnxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zaddCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zincrbyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrangeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrangebyscoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrevrangebyscoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrangebylexCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrevrangebylexCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zcountCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zlexcountCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrevrangeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zcardCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zremCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zscoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zmscoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zremrangebyscoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zremrangebylexCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zpopminCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zpopmaxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zmpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bzpopminCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bzpopmaxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bzmpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrandmemberCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>multiCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>execCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>discardCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>brpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blmpopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>brpoplpushCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blmoveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>appendCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>strlenCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrankCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrevrankCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hsetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hsetnxCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hgetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hmgetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hdelCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hlenCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hstrlenCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zremrangebyrankCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zunionstoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zinterstoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zdiffstoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zunionCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zinterCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zinterCardCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zrangestoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zdiffCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>zscanCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hkeysCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hvalsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hgetallCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hexistsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hscanCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrandfieldCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>configSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>configGetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>configResetStatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>configRewriteCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>configHelpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hincrbyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hincrbyfloatCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>subscribeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unsubscribeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>psubscribeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>punsubscribeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>publishCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pubsubCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>spublishCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssubscribeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sunsubscribeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>watchCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>unwatchCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>restoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>migrateCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>askingCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>readonlyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>readwriteCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>verifyDumpPayload</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>rdbver_ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>objectCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>memoryCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clientCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>helloCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evalCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evalRoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evalShaCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evalShaRoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>scriptCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fcallCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fcallroCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionLoadCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionDeleteCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionKillCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionStatsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionListCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionHelpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionFlushCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionRestoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>functionDumpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>timeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitcountCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitposCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replconfCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>waitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>georadiusbymemberCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>georadiusbymemberroCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>georadiusCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>georadiusroCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>geoaddCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>geohashCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>geoposCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>geodistCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>geosearchCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>geosearchstoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pfselftestCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pfaddCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pfcountCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pfmergeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pfdebugCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>latencyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>moduleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>securityWarningCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xaddCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xrangeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xrevrangeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xlenCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xreadCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xgroupCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xsetidCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xackCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xpendingCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xclaimCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xautoclaimCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xinfoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xdelCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xtrimCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lolwutCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>aclCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lcsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>failoverCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(deprecated</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(deprecated</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(deprecated</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(deprecated</function_decl>))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>void</name></type> <name>_serverAssertWithInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>estr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_serverAssert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>estr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>_serverPanic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__ <parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>3<operator>,</operator> 4</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>_serverPanic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>serverLogObjectDebugInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sigsegvHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getSafeInfoString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>genRedisInfoString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>genModulesInfoString</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>applyWatchdogPeriod</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>watchdogScheduleSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>serverLogHexDump</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>memtest_preserving_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mixDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xorDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>catSubCommandFullname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sub_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commandAddSubcommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>subcommand</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>declared_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>populateCommandMovableKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>debugDelay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>usec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>killIOThreads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>killThreads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>makeThreadKillable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>swapMainDbWithTempDb</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>tempDb</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>serverLog</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (((level)&amp;0xff) &lt; server.verbosity) break;_serverLog(level, __VA_ARGS__);} while(0)</cpp:value></cpp:define>





<function_decl><type><name>void</name></type> <name>tlsInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tlsCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tlsConfigure</name><parameter_list>(<parameter><decl><type><name>redisTLSContextConfig</name> <modifier>*</modifier></type><name>ctx_config</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>isTlsConfigured</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisDebug</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("DEBUG %s:%d &gt; " fmt "\n", __FILE__, __LINE__, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>redisDebugMark</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("-- MARK %s:%d --\n", __FILE__, __LINE__)</cpp:value></cpp:define>


<function_decl><type><name>int</name></type> <name>iAmMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIFY_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIFY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRINGIFY_(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
