<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/functions.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomicvar.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>restorePolicy_Flush</name></decl>, <decl><name>restorePolicy_Append</name></decl>, <decl><name>restorePolicy_Replace</name></decl>
}</block></enum></type> <name>restorePolicy</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>engine_cache_memory</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>engineFunctionDispose</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>engineStatsDispose</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>engineLibraryDispose</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>functionsVerifyName</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>functionsLibEngineStats</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>n_lib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n_functions</name></decl>;</decl_stmt>
}</block></struct></type> <name>functionsLibEngineStats</name>;</typedef>

<struct>struct <name>functionsLibCtx</name> <block>{
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>libraries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>functions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cache_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>engines_stats</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>dictType</name></type> <name>engineDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>dictSdsDup</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictType</name></type> <name>functionDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>dictSdsDup</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictType</name></type> <name>engineStatsDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>dictSdsDup</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>engineStatsDispose</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictType</name></type> <name>libraryFunctionDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>dictSdsDup</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>engineFunctionDispose</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictType</name></type> <name>librariesDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>dictSdsDup</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>engineLibraryDispose</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>dict</name> <modifier>*</modifier></type><name>engines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>functionsLibCtx</name> <modifier>*</modifier></type><name>curr_functions_lib_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>functionMallocSize</name><parameter_list>(<parameter><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zmalloc_size</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr> ?</condition><then> <expr><call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <call><name><name>fi</name><operator>-&gt;</operator><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>get_function_memory_overhead</name></name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>function</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>libraryMallocSize</name><parameter_list>(<parameter><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>zmalloc_size</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr> ?</condition><then> <expr><call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>engineStatsDispose</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>functionsLibEngineStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>engineFunctionDispose</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>engine</name> <modifier>*</modifier></type><name>engine</name> <init>= <expr><name><name>fi</name><operator>-&gt;</operator><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>engine</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>engine</name><operator>-&gt;</operator><name>free_function</name></name><argument_list>(<argument><expr><name><name>engine</name><operator>-&gt;</operator><name>engine_ctx</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>engineLibraryFree</name><parameter_list>(<parameter><decl><type><name>functionLibInfo</name><modifier>*</modifier></type> <name>li</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>engineLibraryDispose</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>engineLibraryFree</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>functionsLibCtxClear</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>dictEmpty</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictEmpty</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>engines_stats</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionsLibEngineStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>n_functions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>n_lib</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>cache_memory</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>functionsLibCtxClearCurrent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>async</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>old_l_ctx</name> <init>= <expr><name>curr_functions_lib_ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>curr_functions_lib_ctx</name> <operator>=</operator> <call><name>functionsLibCtxCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeFunctionsAsync</name><argument_list>(<argument><expr><name>old_l_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>functionsLibCtxClear</name><argument_list>(<argument><expr><name>curr_functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>functionsLibCtxFree</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_lib_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>functionsLibCtxClear</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>functions_lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>functions_lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>functions_lib_ctx</name><operator>-&gt;</operator><name>engines_stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>functionsLibCtxSwapWithCurrent</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>new_lib_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>functionsLibCtxFree</name><argument_list>(<argument><expr><name>curr_functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_functions_lib_ctx</name> <operator>=</operator> <name>new_lib_ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>functionsLibCtxGetCurrent</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>curr_functions_lib_ctx</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>functionsLibCtx</name><modifier>*</modifier></type> <name>functionsLibCtxCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>functionsLibCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>libraries</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>librariesDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>functions</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>functionDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>engines_stats</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>engineStatsDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>engines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>engineInfo</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionsLibEngineStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>zcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>engines_stats</name></name></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>cache_memory</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>functionLibCreateFunction</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>f_flags</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>functionsVerifyName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Function names can only contain letters and numbers and must be at least one character long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Function already exists in the library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>fi</name> <operator>=</operator> <operator>(</operator><name>functionInfo</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>,
<expr><operator>.</operator><name>function</name> <operator>=</operator> <name>function</name></expr>,
<expr><operator>.</operator><name>li</name> <operator>=</operator> <name>li</name></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <name>desc</name></expr>,
<expr><operator>.</operator><name>f_flags</name> <operator>=</operator> <name>f_flags</name></expr>,
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>functionLibInfo</name><modifier>*</modifier></type> <name>engineLibraryCreate</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>engineInfo</name> <modifier>*</modifier></type><name>ei</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>li</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>li</name> <operator>=</operator> <operator>(</operator><name>functionLibInfo</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>functions</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>libraryFunctionDictType</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>ei</name> <operator>=</operator> <name>ei</name></expr>,
<expr><operator>.</operator><name>code</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>desc</name> <operator>=</operator> <name>desc</name> <operator>?</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>NULL</name></expr>,
}</block></expr>;</expr_stmt>
<return>return <expr><name>li</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libraryUnlink</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>, <parameter><decl><type><name>functionLibInfo</name><modifier>*</modifier></type> <name>li</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>cache_memory</name></name> <operator>-=</operator> <call><name>functionMallocSize</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>dictUnlink</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictFreeUnlinkedEntry</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>cache_memory</name></name> <operator>+=</operator> <call><name>libraryMallocSize</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>functionsLibEngineStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>engines_stats</name></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>n_lib</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>n_functions</name></name> <operator>-=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libraryLink</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>, <parameter><decl><type><name>functionLibInfo</name><modifier>*</modifier></type> <name>li</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>cache_memory</name></name> <operator>+=</operator> <call><name>functionMallocSize</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>cache_memory</name></name> <operator>+=</operator> <call><name>libraryMallocSize</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>functionsLibEngineStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>engines_stats</name></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>n_lib</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>n_functions</name></name> <operator>+=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>libraryJoin</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_lib_ctx_dst</name></decl></parameter>, <parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_lib_ctx_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>replace</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>C_ERR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>old_libraries_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>functions_lib_ctx_src</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>old_li</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>functions_lib_ctx_dst</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>old_li</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replace</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Library %s already exists"</literal></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_libraries_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_libraries_list</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name>old_libraries_list</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>engineLibraryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>libraryUnlink</name><argument_list>(<argument><expr><name>functions_lib_ctx_dst</name></expr></argument>, <argument><expr><name>old_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>old_libraries_list</name></expr></argument>, <argument><expr><name>old_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>functions_lib_ctx_src</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>functions_lib_ctx_dst</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Function %s already exists"</literal></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>functions_lib_ctx_src</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libraryLink</name><argument_list>(<argument><expr><name>functions_lib_ctx_dst</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetVal</name><argument_list>(<argument><expr><name><name>functions_lib_ctx_src</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>functionsLibCtxClear</name><argument_list>(<argument><expr><name>functions_lib_ctx_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_libraries_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>old_libraries_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_libraries_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>iter</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_libraries_list</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>old_libraries_list</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name>old_libraries_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libraryLink</name><argument_list>(<argument><expr><name>functions_lib_ctx_dst</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>old_libraries_list</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>old_libraries_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>functionsRegisterEngine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>engine_name</name></decl></parameter>, <parameter><decl><type><name>engine</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>engine_name_sds</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>engine_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name>engines</name></expr></argument>, <argument><expr><name>engine_name_sds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Same engine was registered twice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>engine_name_sds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>createClient</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>CLIENT_DENY_BLOCKING</name> <operator>|</operator> <name>CLIENT_SCRIPT</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>engineInfo</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ei</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ei</name> <operator>=</operator> <operator>(</operator><name>engineInfo</name> <operator>)</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>engine_name_sds</name></expr>, <expr><operator>.</operator><name>engine</name> <operator>=</operator> <name>engine</name></expr>, <expr><operator>.</operator><name>c</name> <operator>=</operator> <name>c</name></expr>,}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>engines</name></expr></argument>, <argument><expr><name>engine_name_sds</name></expr></argument>, <argument><expr><name>ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>engine_cache_memory</name> <operator>+=</operator> <call><name>zmalloc_size</name><argument_list>(<argument><expr><name>ei</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>zmalloc_size</name><argument_list>(<argument><expr><name>engine</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name><name>engine</name><operator>-&gt;</operator><name>get_engine_memory_overhead</name></name><argument_list>(<argument><expr><name><name>engine</name><operator>-&gt;</operator><name>engine_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>functionStatsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>scriptIsRunning</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>scriptIsEval</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowevalerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"running_script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>scriptIsRunning</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>scriptCurrFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>script_client</name> <init>= <expr><call><name>scriptGetCaller</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>script_client</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>script_client</name><operator>-&gt;</operator><name>argc</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>script_client</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>script_client</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"duration_ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>scriptRunDuration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"engines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>engines</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>engines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>engineInfo</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>functionsLibEngineStats</name> <modifier>*</modifier></type><name>e_stats</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>engines_stats</name></name></expr></argument>, <argument><expr><name><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"libraries_count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>e_stats</name><operator>-&gt;</operator><name>n_lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"functions_count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>e_stats</name><operator>-&gt;</operator><name>n_functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>functionListReplyFlags</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flagcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>scriptFlag</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name>scripts_flags_def</name></expr></init></decl>;</init> <condition><expr><name><name>flag</name><operator>-&gt;</operator><name>str</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>flag</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>f_flags</name></name> <operator>&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>flagcount</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flagcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>scriptFlag</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name>scripts_flags_def</name></expr></init></decl>;</init> <condition><expr><name><name>flag</name><operator>-&gt;</operator><name>str</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>flag</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>f_flags</name></name> <operator>&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>















<function><type><name>void</name></type> <name>functionListCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>with_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>library_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>next_arg</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>with_code</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>next_arg</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"withcode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>with_code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>library_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>next_arg</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"libraryname"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"library name argument was not given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>library_name</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyErrorSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unknown argument %s"</literal></expr></argument>, <argument><expr><name><name>next_arg</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></for>
<decl_stmt><decl><type><name>size_t</name></type> <name>reply_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>len_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>library_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_ptr</name> <operator>=</operator> <call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>library_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stringmatchlen</name><argument_list>(<argument><expr><name>library_name</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>library_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>reply_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>with_code</name></expr>?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"library_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>functions_iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>function_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>function_entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>functions_iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>function_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>functionListReplyFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>functions_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>with_code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"library_code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>len_ptr</name></expr></argument>, <argument><expr><name>reply_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>functionDeleteCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>function_name</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name><name>function_name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Library not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libraryUnlink</name><argument_list>(<argument><expr><name>curr_functions_lib_ctx</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>engineLibraryFree</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>functionKillCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>scriptKill</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fcallCommandGeneric</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ro</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>function_name</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>function_name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Function not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>engine</name> <modifier>*</modifier></type><name>engine</name> <init>= <expr><name><name>fi</name><operator>-&gt;</operator><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>engine</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>numkeys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numkeys</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Bad number of keys provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>numkeys</name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Number of keys can't be greater than number of args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numkeys</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Number of keys can't be negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>scriptRunCtx</name></type> <name>run_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>scriptPrepareForRun</name><argument_list>(<argument><expr><operator>&amp;</operator><name>run_ctx</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>li</name><operator>-&gt;</operator><name>ei</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>f_flags</name></name></expr></argument>, <argument><expr><name>ro</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>engine</name><operator>-&gt;</operator><name>call</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>run_ctx</name></expr></argument>, <argument><expr><name><name>engine</name><operator>-&gt;</operator><name>engine_ctx</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>function</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>numkeys</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>numkeys</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scriptResetRun</name><argument_list>(<argument><expr><operator>&amp;</operator><name>run_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>fcallCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fcallCommandGeneric</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>fcallroCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fcallCommandGeneric</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><name>void</name></type> <name>functionDumpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>payload</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rioInitWithBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rdbSaveFunctions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RDB_VERSION</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_VERSION</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>functionRestoreCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>restorePolicy</name></type> <name>restore_replicy</name> <init>= <expr><name>restorePolicy_Append</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>data</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rio</name></type> <name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>restore_policy_str</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>restore_policy_str</name></expr></argument>, <argument><expr><literal type="string">"append"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>restore_replicy</name> <operator>=</operator> <name>restorePolicy_Append</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>restore_policy_str</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>restore_replicy</name> <operator>=</operator> <name>restorePolicy_Replace</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>restore_policy_str</name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>restore_replicy</name> <operator>=</operator> <name>restorePolicy_Flush</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Wrong restore policy given, value should be either FLUSH, APPEND or REPLACE."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>rdbver</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>verifyDumpPayload</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdbver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"DUMP payload version or checksum are wrong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_lib_ctx</name> <init>= <expr><call><name>functionsLibCtxCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rioInitWithBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>data_len</name> <operator>-</operator> <name><name>payload</name><operator>.</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>rdbLoadType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"can not read data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>load_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>RDB_OPCODE_FUNCTION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"given type is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>load_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbFunctionLoad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name>rdbver</name></expr></argument>, <argument><expr><name>functions_lib_ctx</name></expr></argument>, <argument><expr><name>RDBFLAGS_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"failed loading the given functions payload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>load_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>restore_replicy</name> <operator>==</operator> <name>restorePolicy_Flush</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>functionsLibCtxSwapWithCurrent</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>functions_lib_ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>libraryJoin</name><argument_list>(<argument><expr><name>curr_functions_lib_ctx</name></expr></argument>, <argument><expr><name>functions_lib_ctx</name></expr></argument>, <argument><expr><name>restore_replicy</name> <operator>==</operator> <name>restorePolicy_Replace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>load_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>

<label><name>load_error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>functions_lib_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>functionsLibCtxFree</name><argument_list>(<argument><expr><name>functions_lib_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>functionFlushCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>async</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>async</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"async"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>async</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>async</name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_user_flush</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FUNCTION FLUSH only supports SYNC|ASYNC option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>functionsLibCtxClearCurrent</name><argument_list>(<argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>functionHelpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"LOAD &lt;ENGINE NAME&gt; &lt;LIBRARY NAME&gt; [REPLACE] [DESC &lt;LIBRARY DESCRIPTION&gt;] &lt;LIBRARY CODE&gt;"</literal></expr>,
<expr><literal type="string">" Create a new library with the given library name and code."</literal></expr>,
<expr><literal type="string">"DELETE &lt;LIBRARY NAME&gt;"</literal></expr>,
<expr><literal type="string">" Delete the given library."</literal></expr>,
<expr><literal type="string">"LIST [LIBRARYNAME PATTERN] [WITHCODE]"</literal></expr>,
<expr><literal type="string">" Return general information on all the libraries:"</literal></expr>,
<expr><literal type="string">" * Library name"</literal></expr>,
<expr><literal type="string">" * The engine used to run the Library"</literal></expr>,
<expr><literal type="string">" * Library description"</literal></expr>,
<expr><literal type="string">" * Functions list"</literal></expr>,
<expr><literal type="string">" * Library code (if WITHCODE is given)"</literal></expr>,
<expr><literal type="string">" It also possible to get only function that matches a pattern using LIBRARYNAME argument."</literal></expr>,
<expr><literal type="string">"STATS"</literal></expr>,
<expr><literal type="string">" Return information about the current function running:"</literal></expr>,
<expr><literal type="string">" * Function name"</literal></expr>,
<expr><literal type="string">" * Command used to run the function"</literal></expr>,
<expr><literal type="string">" * Duration in MS that the function is running"</literal></expr>,
<expr><literal type="string">" If no function is running, return nil"</literal></expr>,
<expr><literal type="string">" In addition, returns a list of available engines."</literal></expr>,
<expr><literal type="string">"KILL"</literal></expr>,
<expr><literal type="string">" Kill the current running function."</literal></expr>,
<expr><literal type="string">"FLUSH [ASYNC|SYNC]"</literal></expr>,
<expr><literal type="string">" Delete all the libraries."</literal></expr>,
<expr><literal type="string">" When called without the optional mode argument, the behavior is determined by the"</literal></expr>,
<expr><literal type="string">" lazyfree-lazy-user-flush configuration directive. Valid modes are:"</literal></expr>,
<expr><literal type="string">" * ASYNC: Asynchronously flush the libraries."</literal></expr>,
<expr><literal type="string">" * SYNC: Synchronously flush the libraries."</literal></expr>,
<expr><literal type="string">"DUMP"</literal></expr>,
<expr><literal type="string">" Returns a serialized payload representing the current libraries, can be restored using FUNCTION RESTORE command"</literal></expr>,
<expr><literal type="string">"RESTORE &lt;PAYLOAD&gt; [FLUSH|APPEND|REPLACE]"</literal></expr>,
<expr><literal type="string">" Restore the libraries represented by the given payload, it is possible to give a restore policy to"</literal></expr>,
<expr><literal type="string">" control how to handle existing libraries (default APPEND):"</literal></expr>,
<expr><literal type="string">" * FLUSH: delete all existing libraries."</literal></expr>,
<expr><literal type="string">" * APPEND: appends the restored libraries to the existing libraries. On collision, abort."</literal></expr>,
<expr><literal type="string">" * REPLACE: appends the restored libraries to the existing libraries, On collision, replace the old"</literal></expr>,
<expr><literal type="string">" libraries with the new libraries (notice that even on this option there is a chance of failure"</literal></expr>,
<expr><literal type="string">" in case of functions name collision with another library)."</literal></expr>,
<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>functionsVerifyName</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>curr_char</name> <init>= <expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr_char</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>curr_char</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>curr_char</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>curr_char</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>curr_char</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>curr_char</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>curr_char</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></for>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>functionsCreateWithLibraryCtx</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>lib_name</name></decl></parameter>,<parameter><decl><type><name>sds</name></type> <name>engine_name</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>replace</name></decl></parameter>, <parameter><decl><type><name>sds</name><modifier>*</modifier></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>lib_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>functionsVerifyName</name><argument_list>(<argument><expr><name>lib_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Library names can only contain letters and numbers and must be at least one character long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>engineInfo</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name>engines</name></expr></argument>, <argument><expr><name>engine_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ei</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Engine not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>engine</name> <modifier>*</modifier></type><name>engine</name> <init>= <expr><name><name>ei</name><operator>-&gt;</operator><name>engine</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>old_li</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>, <argument><expr><name>lib_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>old_li</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>replace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Library already exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_li</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libraryUnlink</name><argument_list>(<argument><expr><name>lib_ctx</name></expr></argument>, <argument><expr><name>old_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>functionLibInfo</name> <modifier>*</modifier></type><name>new_li</name> <init>= <expr><call><name>engineLibraryCreate</name><argument_list>(<argument><expr><name>lib_name</name></expr></argument>, <argument><expr><name>ei</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>engine</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><name><name>engine</name><operator>-&gt;</operator><name>engine_ctx</name></name></expr></argument>, <argument><expr><name>new_li</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>new_li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No functions registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>new_li</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>functionInfo</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Function %s already exists"</literal></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libraryLink</name><argument_list>(<argument><expr><name>lib_ctx</name></expr></argument>, <argument><expr><name>new_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_li</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>engineLibraryFree</name><argument_list>(<argument><expr><name>old_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>iter</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>engineLibraryFree</name><argument_list>(<argument><expr><name>new_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_li</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libraryLink</name><argument_list>(<argument><expr><name>lib_ctx</name></expr></argument>, <argument><expr><name>old_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>functionLoadCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>engine_name</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>library_name</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>replace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc_pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>argc_pos</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>next_arg</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>argc_pos</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>next_arg</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>next_arg</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc_pos</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Bad function description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>argc_pos</name><operator>++</operator></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Unknown option given: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>next_arg</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>argc_pos</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Function code is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>argc_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>functionsCreateWithLibraryCtx</name><argument_list>(<argument><expr><name><name>library_name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>engine_name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>replace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>curr_functions_lib_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name></type> <name>functionsMemory</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>engines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>engines_nemory</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>engineInfo</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>engine</name> <modifier>*</modifier></type><name>engine</name> <init>= <expr><name><name>ei</name><operator>-&gt;</operator><name>engine</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>engines_nemory</name> <operator>+=</operator> <call><name><name>engine</name><operator>-&gt;</operator><name>get_used_memory</name></name><argument_list>(<argument><expr><name><name>engine</name><operator>-&gt;</operator><name>engine_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>engines_nemory</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name></type> <name>functionsMemoryOverhead</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>memory_overhead</name> <init>= <expr><call><name>dictSize</name><argument_list>(<argument><expr><name>engines</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<call><name>dictSlots</name><argument_list>(<argument><expr><name>engines</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>memory_overhead</name> <operator>+=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<call><name>dictSlots</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>functionsLibCtx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_overhead</name> <operator>+=</operator> <name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>cache_memory</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>memory_overhead</name> <operator>+=</operator> <name>engine_cache_memory</name></expr>;</expr_stmt>

<return>return <expr><name>memory_overhead</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name></type> <name>functionsNum</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>functionsLibNum</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>dict</name><modifier>*</modifier></type> <name>functionsLibGet</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>curr_functions_lib_ctx</name><operator>-&gt;</operator><name>libraries</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>functionsLibCtxfunctionsLen</name><parameter_list>(<parameter><decl><type><name>functionsLibCtx</name> <modifier>*</modifier></type><name>functions_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>functions_ctx</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>functionsInit</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>engines</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>engineDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>luaEngineInitEngine</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>curr_functions_lib_ctx</name> <operator>=</operator> <call><name>functionsLibCtxCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
