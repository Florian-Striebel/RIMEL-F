<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/cluster.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLUSTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLUSTER_H</name></cpp:macro></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_SLOTS</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_FAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NAMELEN</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_PORT_INCR</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_FAIL_REPORT_VALIDITY_MULT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_FAIL_UNDO_TIME_MULT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_MF_TIMEOUT</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_MF_PAUSE_MULT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_SLAVE_MIGRATION_DELAY</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_CROSS_SLOT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_UNSTABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_ASK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_MOVED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_DOWN_STATE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_DOWN_UNBOUND</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REDIR_DOWN_RO_STATE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<struct_decl>struct <name>clusterNode</name>;</struct_decl>


<typedef>typedef <type><struct>struct <name>clusterLink</name> <block>{
<decl_stmt><decl><type><name>mstime_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>sndbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rcvbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rcvbuf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rcvbuf_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>clusterNode</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inbound</name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterLink</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_MASTER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_SLAVE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_PFAIL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_FAIL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_MYSELF</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_HANDSHAKE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_NOADDR</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_MEET</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_MIGRATE_TO</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_NOFAILOVER</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_NODE_NULL_NAME</name></cpp:macro> <cpp:value>"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeIsMaster</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;flags &amp; CLUSTER_NODE_MASTER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeIsSlave</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;flags &amp; CLUSTER_NODE_SLAVE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeInHandshake</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;flags &amp; CLUSTER_NODE_HANDSHAKE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeHasAddr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!((n)-&gt;flags &amp; CLUSTER_NODE_NOADDR))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeWithoutAddr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;flags &amp; CLUSTER_NODE_NOADDR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeTimedOut</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;flags &amp; CLUSTER_NODE_PFAIL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeFailed</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;flags &amp; CLUSTER_NODE_FAIL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nodeCantFailover</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;flags &amp; CLUSTER_NODE_NOFAILOVER)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_CANT_FAILOVER_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_CANT_FAILOVER_DATA_AGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_CANT_FAILOVER_WAITING_DELAY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_CANT_FAILOVER_EXPIRED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_CANT_FAILOVER_WAITING_VOTES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_CANT_FAILOVER_RELOG_PERIOD</name></cpp:macro> <cpp:value>(60*5)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_TODO_HANDLE_FAILOVER</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_TODO_UPDATE_STATE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_TODO_SAVE_CONFIG</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_TODO_FSYNC_CONFIG</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_TODO_HANDLE_MANUALFAILOVER</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_PING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_PONG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_MEET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_FAIL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_PUBLISH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_UPDATE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_MFSTART</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_MODULE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_TYPE_PUBLISHSHARD</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_MODULE_FLAG_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_MODULE_FLAG_NO_FAILOVER</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_MODULE_FLAG_NO_REDIRECTION</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>clusterNodeFailReport</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>clusterNode</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>time</name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterNodeFailReport</name>;</typedef>

<typedef>typedef <type><struct>struct <name>clusterNode</name> <block>{
<decl_stmt><decl><type><name>mstime_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>CLUSTER_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>configEpoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>slots</name><index>[<expr><name>CLUSTER_SLOTS</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>slots_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numslots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numslaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>clusterNode</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>slaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>clusterNode</name></name> <modifier>*</modifier></type><name>slaveof</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>mstime_t</name></type> <name>ping_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>pong_received</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>data_received</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>fail_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>voted_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>repl_offset_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>orphaned_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>repl_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterLink</name> <modifier>*</modifier></type><name>inbound_link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>fail_reports</name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterNode</name>;</typedef>



<typedef>typedef <type><struct>struct <name>slotToKeys</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
}</block></struct></type> <name>slotToKeys</name>;</typedef>


<struct>struct <name>clusterSlotToKeyMapping</name> <block>{
<decl_stmt><decl><type><name>slotToKeys</name></type> <name><name>by_slot</name><index>[<expr><name>CLUSTER_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>



<typedef>typedef <type><struct>struct <name>clusterDictEntryMetadata</name> <block>{
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterDictEntryMetadata</name>;</typedef>


<typedef>typedef <type><struct>struct <name>clusterState</name> <block>{
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>myself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>currentEpoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>nodes_black_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name><name>migrating_slots_to</name><index>[<expr><name>CLUSTER_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name><name>importing_slots_from</name><index>[<expr><name>CLUSTER_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name><name>slots</name><index>[<expr><name>CLUSTER_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>slots_to_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_auth_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failover_auth_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failover_auth_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failover_auth_rank</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>failover_auth_epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cant_failover_reason</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mstime_t</name></type> <name>mf_end</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>mf_slave</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mf_master_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mf_can_start</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>lastVoteEpoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo_before_sleep</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>stats_bus_messages_sent</name><index>[<expr><name>CLUSTERMSG_TYPE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>stats_bus_messages_received</name><index>[<expr><name>CLUSTERMSG_TYPE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stats_pfail_nodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>stat_cluster_links_buffer_limit_exceeded</name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterState</name>;</typedef>






<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>nodename</name><index>[<expr><name>CLUSTER_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ping_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pong_received</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>notused1</name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterMsgDataGossip</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>nodename</name><index>[<expr><name>CLUSTER_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterMsgDataFail</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>channel_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>message_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bulk_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterMsgDataPublish</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>configEpoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nodename</name><index>[<expr><name>CLUSTER_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>slots</name><index>[<expr><name>CLUSTER_SLOTS</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterMsgDataUpdate</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>module_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bulk_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterMsgModule</name>;</typedef>




<typedef>typedef <type><enum>enum <block>{
<decl><name>CLUSTERMSG_EXT_TYPE_HOSTNAME</name></decl>,
}</block></enum></type> <name>clusterMsgPingtypes</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIGHT_BYTE_ALIGN</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((size) + 7) / 8) * 8)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterMsgPingExtHostname</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>unused</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>clusterMsgPingExtHostname</name></type> <name>hostname</name></decl>;</decl_stmt>
}</block> <decl><name><name>ext</name><index>[]</index></name></decl>;</union>

}</block></struct></type> <name>clusterMsgPingExt</name>;</typedef>

<union>union <name>clusterMsgData</name> <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>clusterMsgDataGossip</name></type> <name><name>gossip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>



}</block> <decl><name>ping</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>clusterMsgDataFail</name></type> <name>about</name></decl>;</decl_stmt>
}</block> <decl><name>fail</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>clusterMsgDataPublish</name></type> <name>msg</name></decl>;</decl_stmt>
}</block> <decl><name>publish</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>clusterMsgDataUpdate</name></type> <name>nodecfg</name></decl>;</decl_stmt>
}</block> <decl><name>update</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>clusterMsgModule</name></type> <name>msg</name></decl>;</decl_stmt>
}</block> <decl><name>module</name></decl>;</struct>
}</block>;</union>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_PROTO_VER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>totlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>currentEpoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>configEpoch</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sender</name><index>[<expr><name>CLUSTER_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>myslots</name><index>[<expr><name>CLUSTER_SLOTS</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>slaveof</name><index>[<expr><name>CLUSTER_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>myip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>notused1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mflags</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>clusterMsgData</name></name></type> <name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>clusterMsg</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_MIN_LEN</name></cpp:macro> <cpp:value>(sizeof(clusterMsg)-sizeof(union clusterMsgData))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_FLAG0_PAUSED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_FLAG0_FORCEACK</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTERMSG_FLAG0_EXT_DATA</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>


<function_decl><type><name>void</name></type> <name>clusterInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterBeforeSleep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>getNodeByQuery</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>hashslot</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>clusterLookupNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterRedirectBlockedClientIfNeeded</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterRedirectClient</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashslot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>migrateCloseTimedoutSockets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>verifyClusterConfigWithData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>getClusterConnectionsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>clusterSendModuleMessageToTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>module_id</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterPropagatePublish</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterPropagatePublishShard</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>keyHashSlot</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToKeyAddEntry</name><parameter_list>(<parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToKeyDelEntry</name><parameter_list>(<parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToKeyReplaceEntry</name><parameter_list>(<parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToKeyInit</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToKeyFlush</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToKeyDestroy</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterUpdateMyselfFlags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterUpdateMyselfIp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToChannelAdd</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>channel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>slotToChannelDel</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>channel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clusterUpdateMyselfHostname</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
