<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/script_lua.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SCRIPT_LUA_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SCRIPT_LUA_H_</name></cpp:macro></cpp:define>



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lualib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTRY_RUN_CTX_NAME</name></cpp:macro> <cpp:value>"__RUN_CTX__"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTRY_SET_GLOBALS_PROTECTION_NAME</name></cpp:macro> <cpp:value>"__GLOBAL_PROTECTION__"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_API_NAME</name></cpp:macro> <cpp:value>"redis"</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>luaRegisterRedisAPI</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>lua</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>luaGetStringSds</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaEnableGlobalsProtection</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_eval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaRegisterGlobalProtectionFunction</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaSetGlobalProtection</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaRegisterLogFunction</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>lua</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaRegisterVersion</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>lua</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaPushError</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>luaRaiseError</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaSaveOnRegistry</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>lua</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name><modifier>*</modifier></type> <name>luaGetFromRegistry</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>lua</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaCallFunction</name><parameter_list>(<parameter><decl><type><name>scriptRunCtx</name><modifier>*</modifier></type> <name>r_ctx</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>robj</name><modifier>*</modifier><modifier>*</modifier></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>robj</name><modifier>*</modifier><modifier>*</modifier></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nargs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug_enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>luaMemory</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
