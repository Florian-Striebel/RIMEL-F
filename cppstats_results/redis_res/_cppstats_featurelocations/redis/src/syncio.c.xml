<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/syncio.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNCIO__RESOLUTION</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>





<function><type><name>ssize_t</name></type> <name>syncWrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwritten</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>remaining</name> <init>= <expr><name>timeout</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>wait</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>remaining</name> <operator>&gt;</operator> <name>SYNCIO__RESOLUTION</name><operator>)</operator></expr> ?</condition><then>
<expr><name>remaining</name></expr> </then><else>: <expr><name>SYNCIO__RESOLUTION</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>elapsed</name></decl>;</decl_stmt>



<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nwritten</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>aeWait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>,<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>timeout</name> <operator>-</operator> <name>elapsed</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>ssize_t</name></type> <name>syncRead</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>, <decl><type ref="prev"/><name>totread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>remaining</name> <init>= <expr><name>timeout</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>wait</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>remaining</name> <operator>&gt;</operator> <name>SYNCIO__RESOLUTION</name><operator>)</operator></expr> ?</condition><then>
<expr><name>remaining</name></expr> </then><else>: <expr><name>SYNCIO__RESOLUTION</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>elapsed</name></decl>;</decl_stmt>



<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totread</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>totread</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>aeWait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>,<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>timeout</name> <operator>-</operator> <name>elapsed</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>ssize_t</name></type> <name>syncReadLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syncRead</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>ptr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></function>
</unit>
