<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/crcspeed.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crcspeed.h"</cpp:file></cpp:include>


<function><type><name>void</name></type> <name>crcspeed64little_init</name><parameter_list>(<parameter><decl><type><name>crcfn64</name></type> <name>crcfn</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name><name>table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>v</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>crcfn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>crc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>crcspeed16little_init</name><parameter_list>(<parameter><decl><type><name>crcfn16</name></type> <name>crcfn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name><name>table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>crc</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>crcfn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>rev8</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xff00ff00ff00ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <name>m</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <name>m</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xffff0000ffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <name>m</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <name>m</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>|</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>crcspeed64big_init</name><parameter_list>(<parameter><decl><type><name>crcfn64</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name><name>big_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>crcspeed64little_init</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>big_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>big_table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>rev8</name><argument_list>(<argument><expr><name><name>big_table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>crcspeed16big_init</name><parameter_list>(<parameter><decl><type><name>crcfn16</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name><name>big_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>crcspeed16little_init</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>big_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>big_table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>rev8</name><argument_list>(<argument><expr><name><name>big_table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>uint64_t</name></type> <name>crcspeed64little</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name><name>little_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>crc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>next</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>little_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>^=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>little_table</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>crc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>little_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>crc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>crcspeed16little</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>little_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>crc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>next</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>little_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>next</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>little_table</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>little_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>little_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>crc</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>uint64_t</name></type> <name>crcspeed64big</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name><name>big_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>rev8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>next</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>big_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>^=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>big_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>crc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>big_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>rev8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint16_t</name></type> <name>crcspeed16big</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>big_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>crc_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc</name> <init>= <expr><name>crc_in</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>rev8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>next</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>big_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">56</literal> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>next</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>big_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">56</literal> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator>
<name><name>big_table</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>big_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">56</literal> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>*</operator><name>next</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>rev8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>uint64_t</name></type> <name>crcspeed64native</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name><name>table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr> ?</condition><then> <expr><call><name>crcspeed64little</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>crcspeed64big</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>crcspeed16native</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr> ?</condition><then> <expr><call><name>crcspeed16little</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>crcspeed16big</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>crcspeed64native_init</name><parameter_list>(<parameter><decl><type><name>crcfn64</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name><name>table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><ternary><condition><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr> ?</condition><then> <expr><call><name>crcspeed64little_init</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>crcspeed64big_init</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>crcspeed16native_init</name><parameter_list>(<parameter><decl><type><name>crcfn16</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name><name>table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><ternary><condition><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr> ?</condition><then> <expr><call><name>crcspeed16little_init</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>crcspeed16big_init</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
