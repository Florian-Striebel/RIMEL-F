<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/quicklist.h">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__QUICKLIST_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__QUICKLIST_H__</name></cpp:macro></cpp:define>











<typedef>typedef <type><struct>struct <name>quicklistNode</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>quicklistNode</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicklistNode</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>encoding</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>container</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>recompress</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>attempted_compress</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>extra</name> <range>: <expr><literal type="number">10</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>quicklistNode</name>;</typedef>






<typedef>typedef <type><struct>struct <name>quicklistLZF</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>compressed</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>quicklistLZF</name>;</typedef>









<typedef>typedef <type><struct>struct <name>quicklistBookmark</name> <block>{
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>quicklistBookmark</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UINTPTR_MAX</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QL_FILL_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QL_COMP_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QL_BM_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>UINTPTR_MAX</name> <operator>==</operator> <literal type="number">0xffffffffffffffff</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QL_FILL_BITS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QL_COMP_BITS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QL_BM_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> unknown arch bits count</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<typedef>typedef <type><struct>struct <name>quicklist</name> <block>{
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>fill</name> <range>: <expr><name>QL_FILL_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>compress</name> <range>: <expr><name>QL_COMP_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bookmark_count</name><range>: <expr><name>QL_BM_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistBookmark</name></type> <name><name>bookmarks</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>quicklist</name>;</typedef>

<typedef>typedef <type><struct>struct <name>quicklistIter</name> <block>{
<decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direction</name></decl>;</decl_stmt>
}</block></struct></type> <name>quicklistIter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>quicklistEntry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>longval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>quicklistEntry</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICKLIST_HEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICKLIST_TAIL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICKLIST_NODE_ENCODING_RAW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICKLIST_NODE_ENCODING_LZF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICKLIST_NOCOMPRESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICKLIST_NODE_CONTAINER_PLAIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICKLIST_NODE_CONTAINER_PACKED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QL_NODE_IS_PLAIN</name><parameter_list>(<parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((node)-&gt;container == QUICKLIST_NODE_CONTAINER_PLAIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quicklistNodeIsCompressed</name><parameter_list>(<parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((node)-&gt;encoding == QUICKLIST_NODE_ENCODING_LZF)</cpp:value></cpp:define>



<function_decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklistCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklistNew</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compress</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistSetCompressDepth</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistSetFill</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistSetOptions</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistRelease</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistPushHead</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistPushTail</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistPush</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistAppendListpack</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistAppendPlainNode</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistInsertAfter</name><parameter_list>(<parameter><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>quicklistEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistInsertBefore</name><parameter_list>(<parameter><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>quicklistEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistDelEntry</name><parameter_list>(<parameter><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>quicklistEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistReplaceEntry</name><parameter_list>(<parameter><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>quicklistEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistReplaceAtIndex</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistDelRange</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>stop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>quicklistGetIterator</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>quicklistGetIteratorAtIdx</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>quicklistGetIteratorEntryAtIdx</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>quicklistEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistNext</name><parameter_list>(<parameter><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>quicklistEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistSetDirection</name><parameter_list>(<parameter><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistReleaseIterator</name><parameter_list>(<parameter><decl><type><name>quicklistIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklistDup</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistRotate</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistPopCustom</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sz</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>sval</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>saver</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistPop</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>quicklist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sz</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>slong</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>quicklistCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>quicklist</name> <modifier>*</modifier></type><name>ql</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistCompare</name><parameter_list>(<parameter><decl><type><name>quicklistEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>p2_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>quicklistGetLzf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>quicklistNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistRepr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>quicklistBookmarkCreate</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier><modifier>*</modifier></type><name>ql_ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistBookmarkDelete</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>quicklistBookmarkFind</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>quicklistBookmarksClear</name><parameter_list>(<parameter><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>quicklistisSetPackedThreshold</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>quicklistTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_START_HEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_START_TAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
