<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/server.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"monotonic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"slowlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"latency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomicvar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mt19937-64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hdr_alloc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSCTL_KIPC_SOMAXCONN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSCTL_KERN_SOMAXCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name><name>struct</name> <name>sharedObjectsStruct</name></name></type> <name>shared</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>double</name></type> <name>R_Zero</name></decl>, <decl><type ref="prev"/><name>R_PosInf</name></decl>, <decl><type ref="prev"/><name>R_NegInf</name></decl>, <decl><type ref="prev"/><name>R_Nan</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>redisServer</name></name></type> <name>server</name></decl>;</decl_stmt>



<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isShutdownInitiated</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>isReadyToShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>finishShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replstateToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>replstate</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>nolocks_localtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>serverLogRaw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>syslogLevelMap</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>LOG_DEBUG</name></expr>, <expr><name>LOG_INFO</name></expr>, <expr><name>LOG_NOTICE</name></expr>, <expr><name>LOG_WARNING</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><literal type="string">".-*#"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rawmode</name> <init>= <expr><operator>(</operator><name>level</name> <operator>&amp;</operator> <name>LL_RAW</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_to_stdout</name> <init>= <expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <ternary><condition><expr><name>log_to_stdout</name></expr> ?</condition><then> <expr><name>stdout</name></expr> </then><else>: <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rawmode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>role_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>nolocks_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>,<argument><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>timezone</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>daylight_active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%d %b %Y %H:%M:%S."</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>off</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>off</name></expr></argument>,<argument><expr><literal type="string">"%03d"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>role_char</name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>pid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>role_char</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>role_char</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr> ?</condition><then> <expr><literal type="char">'S'</literal></expr></then><else>:<expr><literal type="char">'M'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%d:%c %s %c %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>role_char</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_to_stdout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name><name>syslogLevelMap</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>_serverLog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>LOG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>serverLogFromHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_to_stdout</name> <init>= <expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name> <operator>||</operator> <operator>(</operator><name>log_to_stdout</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>daemonize</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <ternary><condition><expr><name>log_to_stdout</name></expr> ?</condition><then> <expr><name>STDOUT_FILENO</name></expr> </then><else>:
<expr><call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>, <argument><expr><name>O_APPEND</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">":signal-handler ("</literal></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">") "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_to_stdout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>long</name> <name>long</name></type> <name>ustime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ust</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ust</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ust</name> <operator>+=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<return>return <expr><name>ust</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>mstime_t</name></type> <name>mstime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ustime</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>exitFromChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COVERAGE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>retcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>retcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>dictVanillaFree</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dictListDestructor</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><operator>(</operator><name>list</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dictSdsKeyCompare</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l1</name></decl>,<decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>dictSdsKeyCaseCompare</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dictObjectDestructor</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dictSdsDestructor</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>dictSdsDup</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sdsdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>sds</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dictObjKeyCompare</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o1</name> <init>= <expr><name>key1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o2</name> <init>= <expr><name>key2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dictSdsKeyCompare</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>o1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>o2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictObjHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictSdsHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictSdsCaseHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictGenCaseHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dictEncObjKeyCompare</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o1</name> <init>= <expr><operator>(</operator><name>robj</name><operator>*</operator><operator>)</operator> <name>key1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o2</name> <init>= <expr><operator>(</operator><name>robj</name><operator>*</operator><operator>)</operator> <name>key2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name> <operator>&amp;&amp;</operator>
<name><name>o2</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>o1</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name><name>o2</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <name>OBJ_STATIC_REFCOUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o2</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <name>OBJ_STATIC_REFCOUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o2</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>dictSdsKeyCompare</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name><name>o1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>o2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <name>OBJ_STATIC_REFCOUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o2</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <name>OBJ_STATIC_REFCOUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictEncObjHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>(</operator><name>robj</name><operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown string encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>dictExpandAllowed</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>moreMem</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>usedRatio</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>usedRatio</name> <operator>&lt;=</operator> <name>HASHTABLE_MAX_LOAD_FACTOR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>overMaxmemoryAfterAlloc</name><argument_list>(<argument><expr><name>moreMem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>dictEntryMetadataSize</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterDictEntryMetadata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name>dictType</name></type> <name>objectKeyPointerValueDictType</name> <init>= <expr><block>{
<expr><name>dictEncObjHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictEncObjKeyCompare</name></expr>,
<expr><name>dictObjectDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>dictType</name></type> <name>objectKeyHeapPointerValueDictType</name> <init>= <expr><block>{
<expr><name>dictEncObjHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictEncObjKeyCompare</name></expr>,
<expr><name>dictObjectDestructor</name></expr>,
<expr><name>dictVanillaFree</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>setDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>zsetDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>dbDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>dictObjectDestructor</name></expr>,
<expr><name>dictExpandAllowed</name></expr>,
<expr><name>dictEntryMetadataSize</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>dbExpiresDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictExpandAllowed</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>commandTableDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>hashDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>sdsReplyDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>dictType</name></type> <name>keylistDictType</name> <init>= <expr><block>{
<expr><name>dictObjHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictObjKeyCompare</name></expr>,
<expr><name>dictObjectDestructor</name></expr>,
<expr><name>dictListDestructor</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>dictType</name></type> <name>modulesDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>dictType</name></type> <name>migrateCacheDictType</name> <init>= <expr><block>{
<expr><name>dictSdsHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>dictType</name></type> <name>replScriptCacheDictType</name> <init>= <expr><block>{
<expr><name>dictSdsCaseHash</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dictSdsKeyCaseCompare</name></expr>,
<expr><name>dictSdsDestructor</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>htNeedsResize</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>used</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dictSlots</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>used</name><operator>*</operator><literal type="number">100</literal><operator>/</operator><name>size</name> <operator>&lt;</operator> <name>HASHTABLE_MIN_FILL</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>tryResizeHashTables</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>htNeedsResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>htNeedsResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>incrementallyRehash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictRehashMilliseconds</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dictRehashMilliseconds</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>updateDictResizePolicy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictEnableResize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dictDisableResize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strChildType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CHILD_TYPE_RDB</name></expr>:</case> <return>return <expr><literal type="string">"RDB"</literal></expr>;</return>
<case>case <expr><name>CHILD_TYPE_AOF</name></expr>:</case> <return>return <expr><literal type="string">"AOF"</literal></expr>;</return>
<case>case <expr><name>CHILD_TYPE_LDB</name></expr>:</case> <return>return <expr><literal type="string">"LDB"</literal></expr>;</return>
<case>case <expr><name>CHILD_TYPE_MODULE</name></expr>:</case> <return>return <expr><literal type="string">"MODULE"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>hasActiveChildProcess</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>server</name><operator>.</operator><name>child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetChildState</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>=</operator> <name>CHILD_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_updated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_module_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateDictResizePolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_FORK_CHILD</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_FORK_CHILD_DIED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>isMutuallyExclusiveChildType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>type</name> <operator>==</operator> <name>CHILD_TYPE_RDB</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CHILD_TYPE_AOF</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CHILD_TYPE_MODULE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>allPersistenceDisabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_OFF</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>trackInstantaneousMetric</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>current_reading</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_time</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ops</name> <init>= <expr><name>current_reading</name> <operator>-</operator>
<name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ops_sec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ops_sec</name> <operator>=</operator> <ternary><condition><expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>ops</name><operator>*</operator><literal type="number">1000</literal><operator>/</operator><name>t</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name><name>samples</name><index>[<expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>idx</name></expr>]</index></name> <operator>=</operator>
<name>ops_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>%=</operator> <name>STATS_METRIC_SAMPLES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_count</name> <operator>=</operator> <name>current_reading</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>long</name> <name>long</name></type> <name>getInstantaneousMetric</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>metric</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STATS_METRIC_SAMPLES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>sum</name> <operator>/</operator> <name>STATS_METRIC_SAMPLES</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>clientsCronResizeQueryBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>querybuf_size</name> <init>= <expr><call><name>sdsalloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>idletime</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>lastinteraction</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>sdsavail</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idletime</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name> <operator>=</operator> <call><name>sdsRemoveFreeSpace</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>querybuf_size</name> <operator>&gt;</operator> <name>PROTO_RESIZE_THRESHOLD</name> <operator>&amp;&amp;</operator> <name>querybuf_size</name><operator>/</operator><literal type="number">2</literal> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>size_t</name></type> <name>resize</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>resize</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>resize</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bulklen</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>resize</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>bulklen</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>resize</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bulklen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name> <operator>=</operator> <call><name>sdsResize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>, <argument><expr><name>resize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bulklen</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>bulklen</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bulklen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>pending_querybuf_size</name> <init>= <expr><call><name>sdsAllocSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>pending_querybuf_size</name> <operator>&gt;</operator> <name>LIMIT_PENDING_QUERYBUF</name> <operator>&amp;&amp;</operator>
<call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>pending_querybuf_size</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name> <operator>=</operator> <call><name>sdsRemoveFreeSpace</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>ClientsPeakMemInput</name><index>[<expr><name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>ClientsPeakMemOutput</name><index>[<expr><name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>clientsCronTrackExpansiveClients</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>time_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_usage</name> <init>= <expr><call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>argv_len_sum</name></name> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr> ?</condition><then> <expr><call><name>zmalloc_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_usage</name> <init>= <expr><call><name>getClientOutputBufferMemoryUsage</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>in_usage</name> <operator>&gt;</operator> <name><name>ClientsPeakMemInput</name><index>[<expr><name>time_idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ClientsPeakMemInput</name><index>[<expr><name>time_idx</name></expr>]</index></name> <operator>=</operator> <name>in_usage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_usage</name> <operator>&gt;</operator> <name><name>ClientsPeakMemOutput</name><index>[<expr><name>time_idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ClientsPeakMemOutput</name><index>[<expr><name>time_idx</name></expr>]</index></name> <operator>=</operator> <name>out_usage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>clientMemUsageBucket</name> <modifier>*</modifier></type><name>getMemUsageBucket</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_bits</name> <init>= <expr><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clz</name> <init>= <expr><ternary><condition><expr><name>mem</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>__builtin_clzl</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>size_in_bits</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bucket_idx</name> <init>= <expr><name>size_in_bits</name> <operator>-</operator> <name>clz</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bucket_idx</name> <operator>&gt;</operator> <name>CLIENT_MEM_USAGE_BUCKET_MAX_LOG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bucket_idx</name> <operator>=</operator> <name>CLIENT_MEM_USAGE_BUCKET_MAX_LOG</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bucket_idx</name> <operator>&lt;</operator> <name>CLIENT_MEM_USAGE_BUCKET_MIN_LOG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bucket_idx</name> <operator>=</operator> <name>CLIENT_MEM_USAGE_BUCKET_MIN_LOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bucket_idx</name> <operator>-=</operator> <name>CLIENT_MEM_USAGE_BUCKET_MIN_LOG</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>client_mem_usage_buckets</name><index>[<expr><name>bucket_idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>updateClientMemUsage</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mem</name> <init>= <expr><call><name>getClientMemoryUsage</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>getClientType</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>atomicDecr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_clients_type_memory</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>last_memory_type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>last_memory_usage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicIncr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_clients_type_memory</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_memory_usage</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_memory_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>io_threads_op</name> <operator>==</operator> <name>IO_THREADS_OP_IDLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateClientMemUsageBucket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>updateClientMemUsageBucket</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>io_threads_op</name> <operator>==</operator> <name>IO_THREADS_OP_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allow_eviction</name> <init>=
<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>last_memory_type</name></name> <operator>==</operator> <name>CLIENT_TYPE_NORMAL</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>last_memory_type</name></name> <operator>==</operator> <name>CLIENT_TYPE_PUBSUB</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_NO_EVICT</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name><operator>-&gt;</operator><name>mem_usage_sum</name></name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>last_memory_usage_on_bucket_update</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_eviction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>allow_eviction</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clientMemUsageBucket</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>getMemUsageBucket</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>last_memory_usage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>mem_usage_sum</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>last_memory_usage</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bucket</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket</name></name> <operator>=</operator> <name>bucket</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mem_usage_bucket_node</name></name> <operator>=</operator> <call><name>listLast</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_memory_usage_on_bucket_update</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>last_memory_usage</name></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>getExpansiveClientsInfo</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>in_usage</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_usage</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ClientsPeakMemInput</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ClientsPeakMemInput</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ClientsPeakMemOutput</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>ClientsPeakMemOutput</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>in_usage</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_usage</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
</block_content>}</block></function>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENTS_CRON_MIN_ITERATIONS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>clientsCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>numclients</name> <init>= <expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><name>numclients</name><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>iterations</name> <operator>&lt;</operator> <name>CLIENTS_CRON_MIN_ITERATIONS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>numclients</name> <operator>&lt;</operator> <name>CLIENTS_CRON_MIN_ITERATIONS</name><operator>)</operator></expr> ?</condition><then>
<expr><name>numclients</name></expr> </then><else>: <expr><name>CLIENTS_CRON_MIN_ITERATIONS</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>curr_peak_mem_usage_slot</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>%</operator> <name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr></init></decl>;</decl_stmt>











<decl_stmt><decl><type><name>int</name></type> <name>zeroidx</name> <init>= <expr><operator>(</operator><name>curr_peak_mem_usage_slot</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ClientsPeakMemInput</name><index>[<expr><name>zeroidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ClientsPeakMemOutput</name><index>[<expr><name>zeroidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>iterations</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>listRotateTailToHead</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>clientsCronHandleTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clientsCronResizeQueryBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clientsCronTrackExpansiveClients</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>curr_peak_mem_usage_slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>updateClientMemUsage</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>closeClientOnOutputBufferLimitReached</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>databasesCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_expire_enabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>iAmMaster</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>activeExpireCycle</name><argument_list>(<argument><expr><name>ACTIVE_EXPIRE_CYCLE_SLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>expireSlaveKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>activeDefragCycle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>resize_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>rehash_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbs_per_call</name> <init>= <expr><name>CRON_DBS_PER_CALL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>dbs_per_call</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dbs_per_call</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dbs_per_call</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>tryResizeHashTables</name><argument_list>(<argument><expr><name>resize_db</name> <operator>%</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resize_db</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>activerehashing</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dbs_per_call</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>work_done</name> <init>= <expr><call><name>incrementallyRehash</name><argument_list>(<argument><expr><name>rehash_db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>work_done</name></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rehash_db</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rehash_db</name> <operator>%=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>updateCachedTime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>update_daylight_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>ustime</name></name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>mstime</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>ustime</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>unixtime</name> <init>= <expr><name><name>server</name><operator>.</operator><name>mstime</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unixtime</name></name></expr></argument>, <argument><expr><name>unixtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>update_daylight_info</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ut</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ut</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>daylight_active</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkChildrenDone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>statloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statloc</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exitcode</name> <init>= <expr><ternary><condition><expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bysignal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bysignal</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>exitcode</name> <operator>==</operator> <name>SERVER_CHILD_NOERROR_RETVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bysignal</name> <operator>=</operator> <name>SIGUSR1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"waitpid() returned an error: %s. "</literal>
<literal type="string">"child_type: %s, child_pid = %d"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>strChildType</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>child_pid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>backgroundSaveDoneHandler</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_AOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>backgroundRewriteDoneHandler</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_MODULE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ModuleForkDoneHandler</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown child type %d for child pid %d"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>child_type</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>receiveChildInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>resetChildState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldbRemoveChild</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Warning, detected child with unmatched pid: %ld"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>replicationStartPendingFork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>cronUpdateMemoryStats</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <block>{<block_content>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name> <operator>=</operator> <call><name>zmalloc_get_rss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>zmalloc_used</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>zmalloc_get_allocator_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>lua_memory</name> <init>= <expr><call><name>evalMemory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name> <operator>-</operator> <name>lua_memory</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>zmalloc_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>




















<function><type><name>int</name></type> <name>serverCron</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>watchdogScheduleSignal</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>config_hz</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>dynamic_hz</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>server</name><operator>.</operator><name>hz</name></name> <operator>&gt;</operator>
<name>MAX_CLIENTS_PER_CLOCK_TICK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>&gt;</operator> <name>CONFIG_MAX_HZ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>CONFIG_MAX_HZ</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>pause_cron</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1000</literal><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_net_input_bytes</name></decl>, <decl><type ref="prev"/><name>stat_net_output_bytes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_input_bytes</name></name></expr></argument>, <argument><expr><name>stat_net_input_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>, <argument><expr><name>stat_net_output_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trackInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_COMMAND</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trackInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_INPUT</name></expr></argument>,
<argument><expr><name>stat_net_input_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trackInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_OUTPUT</name></expr></argument>,
<argument><expr><name>stat_net_output_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>












<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lruclock</name> <init>= <expr><call><name>getLRUClock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lruclock</name></name></expr></argument>,<argument><expr><name>lruclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cronUpdateMemoryStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isShutdownInitiated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>prepareForShutdown</name><argument_list>(<argument><expr><name>SHUTDOWN_NOFLAGS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isShutdownInitiated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>mstime</name></name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>shutdown_mstime</name></name> <operator>||</operator> <call><name>isReadyToShutdown</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finishShutdown</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>verbosity</name></name> <operator>&lt;=</operator> <name>LL_VERBOSE</name></expr>)</condition> <block>{<block_content>
<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">5000</literal></argument>)</argument_list></macro> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>used</name></decl>, <decl><type ref="prev"/><name>vkeys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dictSlots</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkeys</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>||</operator> <name>vkeys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,<argument><expr><literal type="string">"DB %d: %lld keys (%lld volatile) in %lld slots HT."</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>used</name></expr></argument>,<argument><expr><name>vkeys</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">5000</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%lu clients connected (%lu replicas), %zu bytes in use"</literal></expr></argument>,
<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call><operator>-</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clientsCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>databasesCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>aof_rewrite_scheduled</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>aofRewriteLimited</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rewriteAppendOnlyFileBackground</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>ldbPendingChildren</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>receiveChildInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checkChildrenDone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>saveparam</name></name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>server</name><operator>.</operator><name>saveparams</name></name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>&gt;=</operator> <name><name>sp</name><operator>-&gt;</operator><name>changes</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>&gt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>seconds</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>&gt;</operator>
<name>CONFIG_BGSAVE_RETRY_DELAY</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"%d changes in %d seconds. Saving..."</literal></expr></argument>,
<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>changes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbSaveBackground</name><argument_list>(<argument><expr><name>SLAVE_REQ_NONE</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>aof_current_size</name></name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>aofRewriteLimited</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>base</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name></expr> ?</condition><then>
<expr><name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>growth</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_current_size</name></name><operator>*</operator><literal type="number">100</literal><operator>/</operator><name>base</name><operator>)</operator> <operator>-</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>growth</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Starting automatic rewriting of AOF on %lld%% growth"</literal></expr></argument>,<argument><expr><name>growth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewriteAppendOnlyFileBackground</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>updateDictResizePolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_WAIT_REWRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>aof_flush_postponed_start</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_last_write_status</name></name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>checkClientPauseTimeoutAndReturnIfPaused</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>!=</operator> <name>NO_FAILOVER</name></expr>)</condition> <block>{<block_content>
<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>replicationCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>replicationCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>migrateCloseTimedoutSockets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>stopThreadedIOIfNeeded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>tracking_clients</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trackingLimitUsedSlots</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>&gt;</operator> <name>CONFIG_BGSAVE_RETRY_DELAY</name> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSaveBackground</name><argument_list>(<argument><expr><name>SLAVE_REQ_NONE</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>moduleCount</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>modulesCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>


<decl_stmt><decl><type><name>RedisModuleCronLoopV1</name></type> <name>ei</name> <init>= <expr><block>{<expr><name>REDISMODULE_CRON_LOOP_VERSION</name></expr>,<expr><name><name>server</name><operator>.</operator><name>hz</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_CRON_LOOP</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cronloops</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1000</literal><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>blockingOperationStarts</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>blocking_op_nesting</name></name><operator>++</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>blocked_last_cron</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>mstime</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockingOperationEnds</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>--</operator><name><name>server</name><operator>.</operator><name>blocking_op_nesting</name></name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>blocked_last_cron</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>whileBlockedCron</name><parameter_list>()</parameter_list> <block>{<block_content>





<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>blocked_last_cron</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>blocked_last_cron</name></name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>mstime</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mstime_t</name></type> <name>latency</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>latencyStartMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>long</name></type> <name>hz_ms</name> <init>= <expr><literal type="number">1000</literal><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>server</name><operator>.</operator><name>blocked_last_cron</name></name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>mstime</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>activeDefragCycle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>blocked_last_cron</name></name> <operator>+=</operator> <name>hz_ms</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cronloops</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cronUpdateMemoryStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>latencyEndMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"while-blocked-cron"</literal></expr></argument>,<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>prepareForShutdown</name><argument_list>(<argument><expr><name>SHUTDOWN_NOSAVE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"SIGTERM received but errors trying to shut down the server, check the logs for more information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sendGetackToReplicas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>shared</name><operator>.</operator><name>replconf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>shared</name><operator>.</operator><name>getack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>shared</name><operator>.</operator><name>special_asterick</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replicationFeedSlaves</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ProcessingEventsWhileBlocked</name></decl>;</decl_stmt>















<function><type><name>void</name></type> <name>beforeSleep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>zmalloc_used</name> <init>= <expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zmalloc_used</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <name>zmalloc_used</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>ProcessingEventsWhileBlocked</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>processed</name> <operator>+=</operator> <call><name>handleClientsWithPendingReadsUsingThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>processed</name> <operator>+=</operator> <call><name>tlsProcessPendingData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>processed</name> <operator>+=</operator> <call><name>handleClientsWithPendingWrites</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>processed</name> <operator>+=</operator> <call><name>freeClientsInAsyncFreeQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>events_processed_while_blocked</name></name> <operator>+=</operator> <name>processed</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>handleBlockedClientsTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>handleClientsWithPendingReadsUsingThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tlsProcessPendingData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>aeSetDontWait</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><call><name>tlsHasPendingData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterBeforeSleep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_expire_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>activeExpireCycle</name><argument_list>(<argument><expr><name>ACTIVE_EXPIRE_CYCLE_FAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>processClientsWaitingReplicas</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>moduleCount</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_EVENTLOOP</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_EVENTLOOP_BEFORE_SLEEP</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleHandleBlockedClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unblocked_clients</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>processUnblockedClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>get_ack_from_slaves</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>checkClientPauseTimeoutAndReturnIfPaused</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendGetackToReplicas</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>get_ack_from_slaves</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>updateFailoverStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>tracking_pending_keys</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>trackingBroadcastInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_WAIT_REWRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>handleClientsBlockedOnKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>handleClientsWithPendingWritesUsingThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>freeClientsInAsyncFreeQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>incrementalTrimReplicationBacklog</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><name>REPL_BACKLOG_TRIM_BLOCKS_PER_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>evictClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>moduleCount</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleReleaseGIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block></function>




<function><type><name>void</name></type> <name>afterSleep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ProcessingEventsWhileBlocked</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>moduleCount</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mstime_t</name></type> <name>latency</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>latencyStartMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleAcquireGIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_EVENTLOOP</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_EVENTLOOP_AFTER_SLEEP</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyEndMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"module-acquire-GIL"</literal></expr></argument>,<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>createSharedObjects</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>crlf</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>ok</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+OK\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptybulk</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"$0\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>czero</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">":0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>cone</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">":1\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptyarray</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>pong</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+PONG\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>queued</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+QUEUED\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptyscan</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*2\r\n$1\r\n0\r\n*0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>space</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>plus</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>wrongtypeerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-WRONGTYPE Operation against a key holding the wrong kind of value\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>err</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"-ERR\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nokeyerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-ERR no such key\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-ERR syntax error\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>sameobjecterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-ERR source and destination objects are the same\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>outofrangeerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-ERR index out of range\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>noscripterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-NOSCRIPT No matching script. Please use EVAL.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>loadingerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-LOADING Redis is loading the dataset in memory\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>slowevalerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-BUSY Redis is busy running a script. You can only call SCRIPT KILL or SHUTDOWN NOSAVE.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>slowscripterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-BUSY Redis is busy running a script. You can only call FUNCTION KILL or SHUTDOWN NOSAVE.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>slowmoduleerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-BUSY Redis is busy running a module command.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>masterdownerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>bgsaveerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-MISCONF Redis is configured to save RDB snapshots, but it's currently unable to persist to disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>roslaveerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-READONLY You can't write against a read only replica.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>noautherr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-NOAUTH Authentication required.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>oomerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-OOM command not allowed when used memory &gt; 'maxmemory'.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>execaborterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-EXECABORT Transaction discarded because of previous errors.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>noreplicaserr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-NOREPLICAS Not enough good replicas to write.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>busykeyerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
<argument><expr><literal type="string">"-BUSYKEY Target key name already exists.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>null</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>null</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>null</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"$-1\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>null</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"_\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nullarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nullarray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nullarray</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*-1\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nullarray</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"_\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptymap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptymap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptymap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptymap</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"%0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptyset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptyset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptyset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptyset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"~0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>PROTO_SHARED_SELECT_CMDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>dictid_str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dictid_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dictid_len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>dictid_str</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictid_str</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>select</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"*2\r\n$6\r\nSELECT\r\n$%d\r\n%s\r\n"</literal></expr></argument>,
<argument><expr><name>dictid_len</name></expr></argument>, <argument><expr><name>dictid_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>messagebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$7\r\nmessage\r\n"</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>pmessagebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$8\r\npmessage\r\n"</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>subscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$9\r\nsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>unsubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$11\r\nunsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>ssubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$10\r\nssubscribe\r\n"</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>sunsubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$12\r\nsunsubscribe\r\n"</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>psubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$10\r\npsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>punsubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$12\r\npunsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>del</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"DEL"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>unlink</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"UNLINK"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>rpop</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"RPOP"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>lpop</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LPOP"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>lpush</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LPUSH"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>rpoplpush</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"RPOPLPUSH"</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>lmove</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LMOVE"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>blmove</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"BLMOVE"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>zpopmin</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"ZPOPMIN"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>zpopmax</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"ZPOPMAX"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>multi</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"MULTI"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>exec</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"EXEC"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>hset</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"HSET"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>srem</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"SREM"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>xgroup</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"XGROUP"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>xclaim</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"XCLAIM"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>script</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"SCRIPT"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>replconf</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"REPLCONF"</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>pexpireat</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"PEXPIREAT"</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>pexpire</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"PEXPIRE"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>persist</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"PERSIST"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>set</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>eval</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"EVAL"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"left"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"right"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>pxat</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"PXAT"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>retrycount</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"RETRYCOUNT"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>force</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"FORCE"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>justid</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"JUSTID"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>lastid</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LASTID"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>default_username</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>ping</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"ping"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>setid</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"SETID"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>keepttl</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"KEEPTTL"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>absttl</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"ABSTTL"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>load</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LOAD"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>createconsumer</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"CREATECONSUMER"</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>getack</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"GETACK"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>special_asterick</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>special_equals</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>redacted</name></name> <operator>=</operator> <call><name>makeObjectShared</name><argument_list>(<argument><expr><call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"(redacted)"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>OBJ_SHARED_INTEGERS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>integers</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
<call><name>makeObjectShared</name><argument_list>(<argument><expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>integers</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>encoding</name> <operator>=</operator> <name>OBJ_ENCODING_INT</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>OBJ_SHARED_BULKHDR_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>mbulkhdr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"*%d\r\n"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>bulkhdr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"$%d\r\n"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>minstring</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"minstring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shared</name><operator>.</operator><name>maxstring</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"maxstring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initServerConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>default_bindaddr</name><index>[<expr><name>CONFIG_DEFAULT_BINDADDR_COUNT</name></expr>]</index></name> <init>= <expr><name>CONFIG_DEFAULT_BINDADDR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>initConfigValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>runid</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>runid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changeReplicationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearReplicationId2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_HZ</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <call><name>getTimeZone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>executable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>arch_bits</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_BINDADDR_COUNT</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CONFIG_DEFAULT_BINDADDR_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>default_bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>ipfd</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>tlsfd</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_expire_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>skip_checksum_validation</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>async_loading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_rdb_used_mem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>=</operator> <name>AOF_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_scheduled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_flush_sleep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_last_fsync</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_cur_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_bio_fsync_status</name></name></expr></argument>,<argument><expr><name>C_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_time_last</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_time_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_lastbgrewrite_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_delayed_fsync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_selected_db</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_flush_postponed_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_last_incr_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>blocked_clients</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>blocked_clients_by_type</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>blocked_clients_by_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_mstime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>=</operator> <name>CLUSTER_MODULE_FLAG_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>migrateCacheDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>next_client_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>page_size</name></name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>pause_cron</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">50.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">99.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">99.9</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lruclock</name> <init>= <expr><call><name>getLRUClock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lruclock</name></name></expr></argument>,<argument><expr><name>lruclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetServerSaveParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>,<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>hdrAllocFuncs</name></type> <name>hdrallocfn</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mallocFn</name> <operator>=</operator> <name>zmalloc</name></expr>,
<expr><operator>.</operator><name>callocFn</name> <operator>=</operator> <name>zcalloc_num</name></expr>,
<expr><operator>.</operator><name>reallocFn</name> <operator>=</operator> <name>zrealloc</name></expr>,
<expr><operator>.</operator><name>freeFn</name> <operator>=</operator> <name>zfree</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hdrSetAllocators</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdrallocfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>=</operator> <literal type="number">6379</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_initial_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_tmpfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_transfer_s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_syncio_timeout</name></name> <operator>=</operator> <name>CONFIG_REPL_SYNCIO_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_down_since</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_no_slaves_since</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_end_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>force_failover</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>target_replica_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>failover_state</name></name> <operator>=</operator> <name>NO_FAILOVER</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_OBUF_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CONFIG_OOM_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>oom_score_adj_values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>configOOMScoreAdjValuesDefaults</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>R_Zero</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>R_PosInf</name> <operator>=</operator> <literal type="number">1.0</literal><operator>/</operator><name>R_Zero</name></expr>;</expr_stmt>
<expr_stmt><expr><name>R_NegInf</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal><operator>/</operator><name>R_Zero</name></expr>;</expr_stmt>
<expr_stmt><expr><name>R_Nan</name> <operator>=</operator> <name>R_Zero</name><operator>/</operator><name>R_Zero</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>server</name><operator>.</operator><name>commands</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commandTableDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commandTableDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>populateCommandTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
















<function><type><name>int</name></type> <name>restartServer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>delay</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't restart: this process has no "</literal>
<literal type="string">"permissions to execute %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>RESTART_SERVER_CONFIG_REWRITE</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>&amp;&amp;</operator>
<call><name>rewriteConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't restart: configuration rewrite process "</literal>
<literal type="string">"failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>RESTART_SERVER_GRACEFULLY</name> <operator>&amp;&amp;</operator>
<call><name>prepareForShutdown</name><argument_list>(<argument><expr><name>SHUTDOWN_NOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't restart: error preparing for shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>+</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>delay</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>delay</name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>execve</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>exec_argv</name></name></expr></argument>,<argument><expr><name>environ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>setOOMScoreAdj</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>process_class</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>process_class</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>process_class</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr> ?</condition><then> <expr><name>CONFIG_OOM_REPLICA</name></expr> </then><else>: <expr><name>CONFIG_OOM_MASTER</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>process_class</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>process_class</name> <operator>&lt;</operator> <name>CONFIG_OOM_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROC_OOM_SCORE_ADJ</name></expr></argument>)</argument_list></call></expr></cpp:if>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>oom_score_adjusted_by_redis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>oom_score_adj_base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>oom_score_adj</name></name> <operator>!=</operator> <name>OOM_SCORE_ADJ_NO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oom_score_adjusted_by_redis</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oom_score_adjusted_by_redis</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/proc/self/oom_score_adj"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to read oom_score_adj: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oom_score_adj_base</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>oom_score_adj_values</name><index>[<expr><name>process_class</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>oom_score_adj</name></name> <operator>==</operator> <name>OOM_SCORE_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>oom_score_adj_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oom_score_adjusted_by_redis</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oom_score_adjusted_by_redis</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>oom_score_adj_base</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/proc/self/oom_score_adj"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to write oom_score_adj: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>C_ERR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>adjustOpenFilesLimit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rlim_t</name></type> <name>maxfiles</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxclients</name></name><operator>+</operator><name>CONFIG_MIN_RESERVED_FDS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>limit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Unable to obtain the current NOFILE limit (%s), assuming 1024 and setting the max clients configuration accordingly."</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <literal type="number">1024</literal><operator>-</operator><name>CONFIG_MIN_RESERVED_FDS</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>rlim_t</name></type> <name>oldlimit</name> <init>= <expr><name><name>limit</name><operator>.</operator><name>rlim_cur</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>oldlimit</name> <operator>&lt;</operator> <name>maxfiles</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rlim_t</name></type> <name>bestlimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>setrlimit_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>bestlimit</name> <operator>=</operator> <name>maxfiles</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>bestlimit</name> <operator>&gt;</operator> <name>oldlimit</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rlim_t</name></type> <name>decr_step</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>limit</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name>bestlimit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>limit</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name>bestlimit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>setrlimit_error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;</operator> <name>decr_step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bestlimit</name> <operator>=</operator> <name>oldlimit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bestlimit</name> <operator>-=</operator> <name>decr_step</name></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;</operator> <name>oldlimit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bestlimit</name> <operator>=</operator> <name>oldlimit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;</operator> <name>maxfiles</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_maxclients</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <name>bestlimit</name><operator>-</operator><name>CONFIG_MIN_RESERVED_FDS</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;=</operator> <name>CONFIG_MIN_RESERVED_FDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Your current 'ulimit -n' "</literal>
<literal type="string">"of %llu is not enough for the server to start. "</literal>
<literal type="string">"Please increase your open file limit to at least "</literal>
<literal type="string">"%llu. Exiting."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>oldlimit</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>maxfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"You requested maxclients of %d "</literal>
<literal type="string">"requiring at least %llu max file descriptors."</literal></expr></argument>,
<argument><expr><name>old_maxclients</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>maxfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Server can't set maximum open files "</literal>
<literal type="string">"to %llu because of OS error: %s."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>maxfiles</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>setrlimit_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Current maximum open files is %llu. "</literal>
<literal type="string">"maxclients has been reduced to %d to compensate for "</literal>
<literal type="string">"low ulimit. "</literal>
<literal type="string">"If you need higher maxclients increase 'ulimit -n'."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>bestlimit</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Increased maximum number of open files "</literal>
<literal type="string">"to %llu (it was originally set to %llu)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>maxfiles</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>oldlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>checkTcpBacklogSettings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROC_SOMAXCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/sys/net/core/somaxconn"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>somaxconn</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>somaxconn</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>somaxconn</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: The TCP backlog setting of %d cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of %d."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>, <argument><expr><name>somaxconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSCTL_KIPC_SOMAXCONN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>somaxconn</name></decl>, <decl><type ref="prev"/><name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_KERN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KERN_IPC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KIPC_SOMAXCONN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>somaxconn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>somaxconn</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>somaxconn</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: The TCP backlog setting of %d cannot be enforced because kern.ipc.somaxconn is set to the lower value of %d."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>, <argument><expr><name>somaxconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSCTL_KERN_SOMAXCONN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>somaxconn</name></decl>, <decl><type ref="prev"/><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_KERN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KERN_SOMAXCONN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>somaxconn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>somaxconn</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>somaxconn</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: The TCP backlog setting of %d cannot be enforced because kern.somaxconn is set to the lower value of %d."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>, <argument><expr><name>somaxconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOMAXCONN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>SOMAXCONN</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: The TCP backlog setting of %d cannot be enforced because SOMAXCONN is set to the lower value of %d."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>, <argument><expr><name>SOMAXCONN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>closeSocketListeners</name><parameter_list>(<parameter><decl><type><name>socketFds</name> <modifier>*</modifier></type><name>sfd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sfd</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>createSocketAcceptHandler</name><parameter_list>(<parameter><decl><type><name>socketFds</name> <modifier>*</modifier></type><name>sfd</name></decl></parameter>, <parameter><decl><type><name>aeFileProc</name> <modifier>*</modifier></type><name>accept_handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sfd</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>, <argument><expr><name>accept_handler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>j</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>listenToPort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>socketFds</name> <modifier>*</modifier></type><name>sfd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bindaddr</name> <init>= <expr><name><name>server</name><operator>.</operator><name>bindaddr</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_OK</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><name><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optional</name> <init>= <expr><operator>*</operator><name>addr</name> <operator>==</operator> <literal type="char">'-'</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>optional</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>addr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <call><name>anetTcp6Server</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <call><name>anetTcpServer</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>net_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Warning: Could not create server TCP listening socket %s:%d: %s"</literal></expr></argument>,
<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>net_errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name> <operator>&amp;&amp;</operator> <name>optional</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>net_errno</name> <operator>==</operator> <name>ENOPROTOOPT</name> <operator>||</operator> <name>net_errno</name> <operator>==</operator> <name>EPROTONOSUPPORT</name> <operator>||</operator>
<name>net_errno</name> <operator>==</operator> <name>ESOCKTNOSUPPORT</name> <operator>||</operator> <name>net_errno</name> <operator>==</operator> <name>EPFNOSUPPORT</name> <operator>||</operator>
<name>net_errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>closeSocketListeners</name><argument_list>(<argument><expr><name>sfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>anetCloexec</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name><index>[<expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>resetServerStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_numconnections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expiredkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expired_stale_perc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expired_time_cap_reached_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expire_cycle_time_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_evictedkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_evictedclients</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_total_eviction_exceeded_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_last_eviction_exceeded_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_misses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_hits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_misses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_hits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_misses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_total_active_defrag_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_total_forks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_rejected_conn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_full</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_io_reads_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_total_reads_processed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_io_writes_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_total_writes_processed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STATS_METRIC_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last_sample_time</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last_sample_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>samples</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>samples</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_input_bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_unexpected_error_replies</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_total_error_replies</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_dump_payload_sanitizations</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_delayed_fsync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lazyfreeResetStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>makeThreadKillable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_setcancelstate</name><argument_list>(<argument><expr><name>PTHREAD_CANCEL_ENABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_setcanceltype</name><argument_list>(<argument><expr><name>PTHREAD_CANCEL_ASYNCHRONOUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initServer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setupSignalHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>makeThreadKillable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name></expr></argument>, <argument><expr><name>LOG_PID</name> <operator>|</operator> <name>LOG_NDELAY</name> <operator>|</operator> <name>LOG_NOWAIT</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>syslog_facility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>aof_enabled</name></name></expr> ?</condition><then> <expr><name>AOF_ON</name></expr> </then><else>: <expr><name>AOF_OFF</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>config_hz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>in_fork_child</name></name> <operator>=</operator> <name>CHILD_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>main_thread_id</name></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>errors</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>fixed_time_expire</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>in_nested_call</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_index</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_to_close</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>slaves</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>monitors</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_pending_write</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_pending_read</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_timeout_table</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>replication_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>unblocked_clients</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>ready_keys</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>tracking_pending_keys</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>get_ack_from_slaves</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_pause_type</name></name> <operator>=</operator> <name>CLIENT_PAUSE_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_pause_end_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>client_pause_per_purpose</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>client_pause_per_purpose</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>postponed_clients</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>events_processed_while_blocked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>system_memory_size</name></name> <operator>=</operator> <call><name>zmalloc_get_memory_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>blocked_last_cron</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>blocking_op_nesting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>thp_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_drop_packet_filter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetReplicationBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>tls_port</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tls_replication</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tls_cluster</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>tlsConfigure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tls_ctx_config</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to configure TLS. Check logs for more info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_MEM_USAGE_BUCKETS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_mem_usage_buckets</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mem_usage_sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_mem_usage_buckets</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>clients</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>createSharedObjects</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adjustOpenFilesLimit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clk_msg</name> <init>= <expr><call><name>monotonicInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"monotonic clock: %s"</literal></expr></argument>, <argument><expr><name>clk_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>el</name></name> <operator>=</operator> <call><name>aeCreateEventLoop</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name><operator>+</operator><name>CONFIG_FDSET_INCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>el</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed creating the event loop. Error message: '%s'"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisDb</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>listenToPort</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed listening on port %u (TCP), aborting."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>tls_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>listenToPort</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tlsfd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed listening on port %u (TLS), aborting."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>=</operator> <call><name>anetUnixServer</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>unixsocketperm</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed opening Unix socket: %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>sofd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>anetCloexec</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sofd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>ipfd</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>tlsfd</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Configured to not listen anywhere, exiting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbExpiresDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires_cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>blocking_keys</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ready_keys</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>objectKeyPointerValueDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>watched_keys</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>avg_ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>defrag_later</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>slots_to_keys</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>defrag_later</name></expr></argument>,<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>sdsfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>evictionPoolAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>pubsub_channels</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>pubsub_patterns</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>pubsubshard_channels</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cronloops</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>in_script</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>in_exec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>=</operator> <name>BUSY_MODULE_YIELD_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>propagate_no_multi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>module_ctx_nesting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_pause_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>=</operator> <name>CHILD_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_conns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_numconns_writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_bufflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_nread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_buf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_last</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_expired</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_loaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetServerStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_starttime</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_updated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_rdb_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_aof_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_module_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_module_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_clients_type_memory</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_cluster_links_memory</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>zmalloc_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_last_write_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_last_write_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_good_slaves_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>aeCreateTimeEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>serverCron</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Can't create event loop timers."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>createSocketAcceptHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>, <argument><expr><name>acceptTcpHandler</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating TCP socket accept handler."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>createSocketAcceptHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tlsfd</name></name></expr></argument>, <argument><expr><name>acceptTLSHandler</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating TLS socket accept handler."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>sofd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>,
<argument><expr><name>acceptUnixHandler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating server.sofd file event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>module_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>,
<argument><expr><name>modulePipeReadable</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(
<argument><expr><literal type="string">"Error registering the readable event for the module pipe."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>aeSetBeforeSleepProc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name>beforeSleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeSetAfterSleepProc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name>afterSleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>arch_bits</name></name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Warning: 32 bit instance detected but no memory limit set. Setting 3 GB maxmemory limit with 'noeviction' policy now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>=</operator> <literal type="number">3072LL</literal><operator>*</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>=</operator> <name>MAXMEMORY_NO_EVICTION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>scriptingInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>functionsInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>slowlogInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyMonitorInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ACLUpdateDefaultUserPassword</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>applyWatchdogPeriod</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>InitServerLast</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bioInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>initThreadedIO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_jemalloc_bg_thread</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>jemalloc_bg_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>initial_memory_usage</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




























<function><type><name>void</name></type> <name>populateCommandLegacyRangeSpec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>begin_search_type</name> <operator>==</operator> <name>KSPEC_BS_INDEX</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>find_keys_type</name> <operator>==</operator> <name>KSPEC_FK_RANGE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstkey</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>lastkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_lastkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin_search_type</name> <operator>!=</operator> <name>KSPEC_BS_INDEX</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>find_keys_type</name> <operator>!=</operator> <name>KSPEC_FK_RANGE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_lastkey</name> <operator>&amp;&amp;</operator> <name>prev_lastkey</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>firstkey</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>firstkey</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastkey_abs_index</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lastkey_abs_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastkey_abs_index</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lastkey</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>lastkey</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>lastkey_abs_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>firstkey</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>firstkey</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>lastkey</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>begin_search_type</name></name> <operator>=</operator> <name>KSPEC_BS_INDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>firstkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>find_keys_type</name></name> <operator>=</operator> <name>KSPEC_FK_RANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name> <operator>=</operator> <ternary><condition><expr><name>lastkey</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>lastkey</name></expr> </then><else>: <expr><operator>(</operator><name>lastkey</name><operator>-</operator><name>firstkey</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sds</name></type> <name>catSubCommandFullname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sub_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s|%s"</literal></expr></argument>, <argument><expr><name>parent_name</name></expr></argument>, <argument><expr><name>sub_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>commandAddSubcommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>subcommand</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>declared_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subcommands_dict</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commandTableDictType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>subcommand</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcommand</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>ACLGetCommandID</name><argument_list>(<argument><expr><name><name>subcommand</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>declared_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subcommand</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>setImplicitACLCategories</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>|=</operator> <name>ACL_CATEGORY_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_READONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>|=</operator> <name>ACL_CATEGORY_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_ADMIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>|=</operator> <name>ACL_CATEGORY_ADMIN</name><operator>|</operator><name>ACL_CATEGORY_DANGEROUS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_PUBSUB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>|=</operator> <name>ACL_CATEGORY_PUBSUB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_FAST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>|=</operator> <name>ACL_CATEGORY_FAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_BLOCKING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>|=</operator> <name>ACL_CATEGORY_BLOCKING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>&amp;</operator> <name>ACL_CATEGORY_FAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>|=</operator> <name>ACL_CATEGORY_SLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>populateArgsStructure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommandArg</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>num_args</name></name> <operator>=</operator> <call><name>populateArgsStructure</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>subargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>populateCommandStructure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>key_specs</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>key_specs_static</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>key_specs_max</name></name> <operator>=</operator> <name>STATIC_KEY_SPECS_NUM</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>latency_histogram</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STATIC_KEY_SPECS_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin_search_type</name> <operator>==</operator> <name>KSPEC_BS_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>key_specs_num</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>history</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>num_history</name></name></expr>]</index></name><operator>.</operator><name>since</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>num_history</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tips</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>tips</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>num_tips</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>num_tips</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>num_args</name></name> <operator>=</operator> <call><name>populateArgsStructure</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>populateCommandLegacyRangeSpec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>populateCommandMovableKeys</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>ACLGetCommandID</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>subcommands</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>c</name><operator>-&gt;</operator><name>subcommands</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>declared_name</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>subcommands</name></name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>setImplicitACLCategories</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>fullname</name></name> <operator>=</operator> <call><name>catSubCommandFullname</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>declared_name</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>declared_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>populateCommandStructure</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commandAddSubcommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>declared_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>redisCommand</name></name></type> <name><name>redisCommandTable</name><index>[]</index></name></decl>;</decl_stmt>



<function><type><name>void</name></type> <name>populateCommandTable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>redisCommandTable</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>declared_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval1</name></decl>, <decl><type ref="prev"/><name>retval2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setImplicitACLCategories</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_SENTINEL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_ONLY_SENTINEL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>declared_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>populateCommandStructure</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval1</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>retval2</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval1</name> <operator>==</operator> <name>DICT_OK</name> <operator>&amp;&amp;</operator> <name>retval2</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetCommandTableStats</name><parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type> <name>commands</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator>struct <name>redisCommand</name> <operator>*</operator><operator>)</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>microseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rejected_calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>failed_calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>latency_histogram</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hdr_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>latency_histogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>latency_histogram</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetCommandTableStats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetErrorTableStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>errors</name></name></expr></argument>, <argument><expr><name>zfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>errors</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>redisOpArrayInit</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisOpArrayAppend</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>redisOp</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_capacity</name> <init>= <expr><name><name>oa</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name> <operator>&gt;=</operator> <name><name>oa</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_capacity</name> <operator>!=</operator> <name><name>oa</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisOp</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>oa</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>oa</name><operator>-&gt;</operator><name>ops</name></name><operator>+</operator><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisOpArrayFree</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while<condition>(<expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisOp</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>oa</name><operator>-&gt;</operator><name>ops</name></name><operator>+</operator><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisOpArrayInit</name><argument_list>(<argument><expr><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>isContainerCommandBySds</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>base_cmd</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_subcommands</name> <init>= <expr><name>base_cmd</name> <operator>&amp;&amp;</operator> <name><name>base_cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>has_subcommands</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupSubcommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>sub_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><name>sub_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandLogic</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>base_cmd</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_subcommands</name> <init>= <expr><name>base_cmd</name> <operator>&amp;&amp;</operator> <name><name>base_cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>has_subcommands</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>base_cmd</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>lookupSubcommand</name><argument_list>(<argument><expr><name>base_cmd</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommand</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>lookupCommandLogic</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandBySdsLogic</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>strings</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"|"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>strings</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>strings</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>robj</name></type> <name><name>objects</name><index>[<expr><name>argc</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>initStaticStringObject</name><argument_list>(<argument><expr><name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>strings</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommandLogic</name><argument_list>(<argument><expr><name>commands</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>strings</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandBySds</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>lookupCommandBySdsLogic</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandByCStringLogic</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>lookupCommandBySdsLogic</name><argument_list>(<argument><expr><name>commands</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandByCString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>lookupCommandByCStringLogic</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandOrOriginal</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter> ,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommandLogic</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>lookupCommandLogic</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shouldPropagate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>replication_allowed</name></name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>PROPAGATE_NONE</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&amp;</operator> <name>PROPAGATE_AOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&amp;</operator> <name>PROPAGATE_REPL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>||</operator> <call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>propagateNow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldPropagate</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name>areClientsPaused</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>client_pause_in_transaction</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name> <operator>&amp;&amp;</operator> <name>target</name> <operator>&amp;</operator> <name>PROPAGATE_AOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>feedAppendOnlyFile</name><argument_list>(<argument><expr><name>dbid</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&amp;</operator> <name>PROPAGATE_REPL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>replicationFeedSlaves</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>alsoPropagate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argvcopy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldPropagate</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argvcopy</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>argvcopy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>redisOpArrayAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>also_propagate</name></name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>,<argument><expr><name>argvcopy</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>forceCommandPropagation</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CMD_WRITE</name> <operator>|</operator> <name>CMD_MAY_REPLICATE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PROPAGATE_REPL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PROPAGATE_AOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>preventCommandPropagation</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PREVENT_PROP</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>preventCommandAOF</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PREVENT_AOF_PROP</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>preventCommandReplication</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PREVENT_REPL_PROP</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>slowlogPushCurrentCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ustime_t</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_SKIP_SLOWLOG</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>original_argv</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>original_argv</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>original_argv</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>original_argc</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>slowlogPushEntryIfNeeded</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>updateCommandLatencyHistogram</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>latency_histogram</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>duration_hist</name></decl></parameter>)</parameter_list><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>duration_hist</name> <operator>&lt;</operator> <name>LATENCY_HISTOGRAM_MIN_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration_hist</name><operator>=</operator><name>LATENCY_HISTOGRAM_MIN_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>duration_hist</name><operator>&gt;</operator><name>LATENCY_HISTOGRAM_MAX_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration_hist</name><operator>=</operator><name>LATENCY_HISTOGRAM_MAX_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>latency_histogram</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hdr_init</name><argument_list>(<argument><expr><name>LATENCY_HISTOGRAM_MIN_VALUE</name></expr></argument>,<argument><expr><name>LATENCY_HISTOGRAM_MAX_VALUE</name></expr></argument>,<argument><expr><name>LATENCY_HISTOGRAM_PRECISION</name></expr></argument>,<argument><expr><name>latency_histogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>hdr_record_value</name><argument_list>(<argument><expr><operator>*</operator><name>latency_histogram</name></expr></argument>,<argument><expr><name>duration_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>propagatePendingCommands</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>numops</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisOp</name> <modifier>*</modifier></type><name>rop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>multi_emitted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>numops</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>propagate_no_multi</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>multi_dbid</name> <init>= <expr><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>ops</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dbid</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>propagateNow</name><argument_list>(<argument><expr><name>multi_dbid</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>.</operator><name>multi</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_emitted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>numops</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rop</name> <operator>=</operator> <operator>&amp;</operator><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>ops</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>propagateNow</name><argument_list>(<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>,<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>multi_emitted</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exec_dbid</name> <init>= <expr><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>ops</name><index>[<expr><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>numops</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dbid</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>propagateNow</name><argument_list>(<argument><expr><name>exec_dbid</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>.</operator><name>exec</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redisOpArrayFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>also_propagate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






































<function><type><name>void</name></type> <name>call</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>call_timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>client_old_flags</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>real_cmd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>prev_err_count</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_FORCE_AOF</name><operator>|</operator><name>CLIENT_FORCE_REPL</name><operator>|</operator><name>CLIENT_PREVENT_PROP</name><operator>)</operator></expr>;</expr_stmt>










<decl_stmt><decl><type><name>int</name></type> <name>prev_core_propagates</name> <init>= <expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>core_propagates</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_FROM_MODULE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_err_count</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_total_error_replies</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>fixed_time_expire</name></name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>in_nested_call</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>elapsedStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>call_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>duration</name> <init>= <expr><call><name>elapsedUs</name><argument_list>(<argument><expr><name>call_timer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name><operator>-</operator><name>dirty</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dirty</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>in_nested_call</name></name><operator>--</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>stat_total_error_replies</name></name> <operator>-</operator> <name>prev_err_count</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>real_cmd</name><operator>-&gt;</operator><name>failed_calls</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_CLOSE_AFTER_COMMAND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_CLOSE_AFTER_COMMAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_CLOSE_AFTER_REPLY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CMD_CALL_SLOWLOG</name> <operator>|</operator> <name>CMD_CALL_STATS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SCRIPT</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>script_caller</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_REPL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>script_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_AOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>script_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_SLOWLOG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>latency_event</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>real_cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_FAST</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"fast-command"</literal></expr> </then><else>: <expr><literal type="string">"command"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><name>latency_event</name></expr></argument>,<argument><expr><name>duration</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_SLOWLOG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>slowlogPushCurrentCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>real_cmd</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CMD_SKIP_MONITOR</name><operator>|</operator><name>CMD_ADMIN</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>original_argv</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>original_argv</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>original_argv</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>original_argc</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>replicationFeedMonitors</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeClientOriginalArgv</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_STATS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>real_cmd</name><operator>-&gt;</operator><name>microseconds</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>real_cmd</name><operator>-&gt;</operator><name>calls</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>latency_tracking_enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>updateCommandLatencyHistogram</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>real_cmd</name><operator>-&gt;</operator><name>latency_histogram</name></name><operator>)</operator></expr></argument>, <argument><expr><name>duration</name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_PROPAGATE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PREVENT_PROP</name><operator>)</operator> <operator>!=</operator> <name>CLIENT_PREVENT_PROP</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>propagate_flags</name> <init>= <expr><name>PROPAGATE_NONE</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>dirty</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>propagate_flags</name> <operator>|=</operator> <operator>(</operator><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_REPL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>propagate_flags</name> <operator>|=</operator> <name>PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_AOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>propagate_flags</name> <operator>|=</operator> <name>PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PREVENT_REPL_PROP</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_PROPAGATE_REPL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>propagate_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PREVENT_AOF_PROP</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_PROPAGATE_AOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>propagate_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>propagate_flags</name> <operator>!=</operator> <name>PROPAGATE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>alsoPropagate</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name>propagate_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_FORCE_AOF</name><operator>|</operator><name>CLIENT_FORCE_REPL</name><operator>|</operator><name>CLIENT_PREVENT_PROP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>client_old_flags</name> <operator>&amp;</operator>
<operator>(</operator><name>CLIENT_FORCE_AOF</name><operator>|</operator><name>CLIENT_FORCE_REPL</name><operator>|</operator><name>CLIENT_PREVENT_PROP</name><operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_READONLY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>caller</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SCRIPT</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>script_caller</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>server</name><operator>.</operator><name>script_caller</name></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_TRACKING</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_TRACKING_BCAST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>trackingRememberKeys</name><argument_list>(<argument><expr><name>caller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>fixed_time_expire</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_err_count</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_total_error_replies</name></name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>zmalloc_used</name> <init>= <expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zmalloc_used</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <name>zmalloc_used</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>afterCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>in_exec</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>client_pause_in_transaction</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_pause_in_transaction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name> <operator>=</operator> <name>prev_core_propagates</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>rejectCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>rejected_calls</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>execCommandAbort</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rejectCommandFormat</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>rejected_calls</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><call><name>sdscatvprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sdsmapchars</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>execCommandAbort</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>addReplyErrorSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>afterCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>in_nested_call</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>core_propagates</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>propagatePendingCommands</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>trackingHandlePendingKeyInvalidations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>populateCommandMovableKeys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>movablekeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>movablekeys</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE_GETKEYS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>movablekeys</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin_search_type</name> <operator>!=</operator> <name>KSPEC_BS_INDEX</name> <operator>||</operator>
<name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>find_keys_type</name> <operator>!=</operator> <name>KSPEC_FK_RANGE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>movablekeys</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>movablekeys</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_MOVABLE_KEYS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>processCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>scriptIsTimedout</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><name><name>server</name><operator>.</operator><name>in_exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><name><name>server</name><operator>.</operator><name>in_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>moduleCallCommandFilters</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"host:"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"post"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>securityWarningCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>!=</operator> <name>BUSY_MODULE_YIELD_NONE</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>&amp;</operator> <name>BUSY_MODULE_YIELD_CLIENTS</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>BLOCKED_POSTPONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lastcmd</name></name> <operator>=</operator> <call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isContainerCommandBySds</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>sds</name></type> <name>cmd</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sdstoupper</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Unknown subcommand '%.128s'. Try %s HELP."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>args</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"'%.*s' "</literal></expr></argument>, <argument><expr><literal type="number">128</literal><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"unknown command '%s', with args beginning with: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>arity</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"wrong number of arguments for '%s' command"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_PROTECTED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>debugCommand</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>allowProtectedAction</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>enable_debug_cmd</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>moduleCommand</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>allowProtectedAction</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>enable_module_cmd</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"%s command not allowed. If the %s option is set to \"local\", "</literal>
<literal type="string">"you can run it from a local connection, otherwise you need to set this option "</literal>
<literal type="string">"in the configuration file, and then restart the server."</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>debugCommand</name></expr> ?</condition><then> <expr><literal type="string">"DEBUG"</literal></expr> </then><else>: <expr><literal type="string">"MODULE"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>debugCommand</name></expr> ?</condition><then> <expr><literal type="string">"enable-debug-command"</literal></expr> </then><else>: <expr><literal type="string">"enable-module-command"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_read_command</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_READONLY</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_flags</name></name> <operator>&amp;</operator> <name>CMD_READONLY</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_write_command</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_denyoom_command</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_DENYOOM</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_flags</name></name> <operator>&amp;</operator> <name>CMD_DENYOOM</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_denystale_command</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_STALE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_inv_flags</name></name> <operator>&amp;</operator> <name>CMD_STALE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_denyloading_command</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_LOADING</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_inv_flags</name></name> <operator>&amp;</operator> <name>CMD_LOADING</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_may_replicate_command</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CMD_WRITE</name> <operator>|</operator> <name>CMD_MAY_REPLICATE</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CMD_WRITE</name> <operator>|</operator> <name>CMD_MAY_REPLICATE</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_deny_async_loading_command</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_NO_ASYNC_LOADING</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mstate</name><operator>.</operator><name>cmd_flags</name></name> <operator>&amp;</operator> <name>CMD_NO_ASYNC_LOADING</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>authRequired</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_NO_AUTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>noautherr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_NO_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Command not allowed inside a transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>acl_errpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acl_retval</name> <init>= <expr><call><name>ACLCheckAllPerm</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>acl_errpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_retval</name> <operator>!=</operator> <name>ACL_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addACLLogEntry</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>acl_retval</name></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name><operator>)</operator></expr> ?</condition><then> <expr><name>ACL_LOG_CTX_MULTI</name></expr> </then><else>: <expr><name>ACL_LOG_CTX_TOPLEVEL</name></expr></else></ternary></expr></argument>,<argument><expr><name>acl_errpos</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>acl_retval</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_DENIED_CMD</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"-NOPERM this user has no permissions to run "</literal>
<literal type="string">"the '%s' command"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>ACL_DENIED_KEY</name></expr>:</case>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"-NOPERM this user has no permissions to access "</literal>
<literal type="string">"one of the keys used as arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_DENIED_CHANNEL</name></expr>:</case>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"-NOPERM this user has no permissions to access "</literal>
<literal type="string">"one of the channels used as arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"no permission"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SCRIPT</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>script_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>CMD_MOVABLE_KEYS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hashslot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>getNodeByQuery</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hashslot</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error_code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>discardTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>clusterRedirectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>hashslot</name></expr></argument>,<argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>rejected_calls</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>evictClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>scriptIsTimedout</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>out_of_memory</name> <init>= <expr><operator>(</operator><call><name>performEvictions</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EVICT_FAIL</name><operator>)</operator></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>trackingHandlePendingKeyInvalidations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reject_cmd_on_oom</name> <init>= <expr><name>is_denyoom_command</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>discardCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>quitCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>resetCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reject_cmd_on_oom</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_of_memory</name> <operator>&amp;&amp;</operator> <name>reject_cmd_on_oom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>oomerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>evalCommand</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>evalShaCommand</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>fcallCommand</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>fcallroCommand</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>script_oom</name></name> <operator>=</operator> <name>out_of_memory</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>tracking_clients</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>trackingLimitUsedSlots</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>deny_write_type</name> <init>= <expr><call><name>writeCommandsDeniedByDiskError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>deny_write_type</name> <operator>!=</operator> <name>DISK_ERROR_TYPE_NONE</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>is_write_command</name> <operator>||</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>pingCommand</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deny_write_type</name> <operator>==</operator> <name>DISK_ERROR_TYPE_RDB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>bgsaveerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"-MISCONF Errors writing to the AOF file: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_last_write_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name> <operator>&amp;&amp;</operator>
<name>is_write_command</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_good_slaves_count</name></name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>noreplicaserr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>is_write_command</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>roslaveerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PUBSUB</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>resp</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>pingCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>subscribeCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>ssubscribeCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>unsubscribeCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>sunsubscribeCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>psubscribeCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>punsubscribeCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>quitCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>resetCommand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><literal type="string">"Can't execute '%s': only (P|S)SUBSCRIBE / "</literal>
<literal type="string">"(P|S)UNSUBSCRIBE / PING / QUIT / RESET are allowed in this context"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>!=</operator> <name>REPL_STATE_CONNECTED</name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>is_denystale_command</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>masterdownerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>async_loading</name></name> <operator>&amp;&amp;</operator> <name>is_denyloading_command</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>loadingerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>async_loading</name></name> <operator>&amp;&amp;</operator> <name>is_deny_async_loading_command</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>loadingerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>scriptIsTimedout</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_ALLOW_BUSY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"-BUSY %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>busy_module_yield_reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>busy_module_yield_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowmoduleerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>scriptIsEval</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowevalerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowscripterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>is_may_replicate_command</name> <operator>||</operator> <name>is_write_command</name> <operator>||</operator> <name>is_read_command</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rejectCommandFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Replica can't interact with the keyspace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>client_pause_type</name></name> <operator>==</operator> <name>CLIENT_PAUSE_ALL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>client_pause_type</name></name> <operator>==</operator> <name>CLIENT_PAUSE_WRITE</name> <operator>&amp;&amp;</operator> <name>is_may_replicate_command</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>BLOCKED_POSTPONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>discardCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>multiCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>watchCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>quitCommand</name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>resetCommand</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>queueMultiCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>queued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>call</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>CMD_CALL_FULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>woff</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>ready_keys</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handleClientsBlockedOnKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>incrementErrorCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fullerr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisError</name></name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>errors</name></name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>fullerr</name></expr></argument>,<argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>errors</name></name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>fullerr</name></expr></argument>,<argument><expr><name>namelen</name></expr></argument>,<argument><expr><name>error</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>closeListeningSockets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unlink_unix_socket</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>ipfd</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>ipfd</name><operator>.</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>tlsfd</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>tlsfd</name><operator>.</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sofd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>cfd</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cfd</name><operator>.</operator><name>fd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unlink_unix_socket</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Removing the unix socket file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error removing the unix socket file: %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
























<function><type><name>int</name></type> <name>prepareForShutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isShutdownInitiated</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>SHUTDOWN_SAVE</name><operator>)</operator> <operator>|</operator> <name>SHUTDOWN_NOSAVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"User requested shutdown..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STOPPING=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SHUTDOWN_NOW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>shutdown_timeout</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>isReadyToShutdown</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_mstime</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>mstime</name></name> <operator>+</operator> <name><name>server</name><operator>.</operator><name>shutdown_timeout</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>areClientsPaused</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sendGetackToReplicas</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pauseClients</name><argument_list>(<argument><expr><name>PAUSE_DURING_SHUTDOWN</name></expr></argument>, <argument><expr><name>LLONG_MAX</name></expr></argument>, <argument><expr><name>CLIENT_PAUSE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Waiting for replicas before shutting down."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>finishShutdown</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isShutdownInitiated</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>server</name><operator>.</operator><name>shutdown_mstime</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>isReadyToShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>replica</name><operator>-&gt;</operator><name>repl_ack_off</name></name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cancelShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_mstime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>replyToClientsBlockedOnShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpauseClients</name><argument_list>(<argument><expr><name>PAUSE_DURING_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>abortShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isShutdownInitiated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cancelShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Shutdown manually aborted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>finishShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save</name> <init>= <expr><name><name>server</name><operator>.</operator><name>shutdown_flags</name></name> <operator>&amp;</operator> <name>SHUTDOWN_SAVE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nosave</name> <init>= <expr><name><name>server</name><operator>.</operator><name>shutdown_flags</name></name> <operator>&amp;</operator> <name>SHUTDOWN_NOSAVE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name><name>server</name><operator>.</operator><name>shutdown_flags</name></name> <operator>&amp;</operator> <name>SHUTDOWN_FORCE</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>listIter</name></type> <name>replicas_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>replicas_list_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_replicas</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_lagging_replicas</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replicas_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>replicas_list_node</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replicas_iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>replica</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>replicas_list_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num_replicas</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>replica</name><operator>-&gt;</operator><name>repl_ack_off</name></name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_lagging_replicas</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lag</name> <init>= <expr><ternary><condition><expr><name><name>replica</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_ONLINE</name></expr> ?</condition><then>
<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>replica</name><operator>-&gt;</operator><name>repl_ack_time</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Lagging replica %s reported offset %lld behind master, lag=%ld, state=%s."</literal></expr></argument>,
<argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>-</operator> <name><name>replica</name><operator>-&gt;</operator><name>repl_ack_off</name></name></expr></argument>,
<argument><expr><name>lag</name></expr></argument>,
<argument><expr><call><name>replstateToString</name><argument_list>(<argument><expr><name><name>replica</name><operator>-&gt;</operator><name>replstate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>num_replicas</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"%d of %d replicas are in sync when shutting down."</literal></expr></argument>,
<argument><expr><name>num_replicas</name> <operator>-</operator> <name>num_lagging_replicas</name></expr></argument>,
<argument><expr><name>num_replicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ldbKillForkedSessions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"There is a child saving an .rdb. Killing it!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>killRDBChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>rdbRemoveTempFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_MODULE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"There is a module fork child. Killing it!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TerminateModuleForkChild</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_AOF</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_WAIT_REWRITE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Writing initial AOF. Exit anyway."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Writing initial AOF, can't exit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"There is a child rewriting the AOF. Killing it!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>killAppendOnlyChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Calling fsync() on the AOF file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redis_fsync</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Fail to fsync the AOF file: %s."</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>nosave</name><operator>)</operator> <operator>||</operator> <name>save</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Saving the final RDB snapshot before exiting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=Saving the final RDB snapshot\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbSave</name><argument_list>(<argument><expr><name>SLAVE_REQ_NONE</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error trying to save the DB. Exit anyway."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error trying to save the DB, can't exit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=Error trying to save the DB, can't exit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_manifest</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>aofManifestFree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_manifest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_SHUTDOWN</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>daemonize</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>pidfile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Removing the pid file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>flushSlavesOutputBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>closeListeningSockets</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"%s is now ready to exit, bye bye..."</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"Sentinel"</literal></expr> </then><else>: <expr><literal type="string">"Redis"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Errors trying to shut down the server. Check the logs for more information."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>writeCommandsDeniedByDiskError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stop_writes_on_bgsave_err</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>==</operator> <name>C_ERR</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>DISK_ERROR_TYPE_RDB</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_last_write_status</name></name> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>DISK_ERROR_TYPE_AOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aof_bio_fsync_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_bio_fsync_status</name></name></expr></argument>,<argument><expr><name>aof_bio_fsync_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aof_bio_fsync_status</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_bio_fsync_errno</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_last_write_errno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DISK_ERROR_TYPE_AOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DISK_ERROR_TYPE_NONE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>pingCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorArity</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PUBSUB</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>resp</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>mbulkhdr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"pong"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>pong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>echoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>timeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>replyFlagNames</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>replyFlagNames</name>;</typedef>


<function><type><name>void</name></type> <name>addReplyCommandFlags</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>replyFlagNames</name> <modifier>*</modifier></type><name>replyFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>replyFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>replyFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>replyFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>replyFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>replyFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addReplyFlagsForCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>replyFlagNames</name></type> <name><name>flagNames</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>CMD_WRITE</name></expr>, <expr><literal type="string">"write"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_READONLY</name></expr>, <expr><literal type="string">"readonly"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_DENYOOM</name></expr>, <expr><literal type="string">"denyoom"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_MODULE</name></expr>, <expr><literal type="string">"module"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_ADMIN</name></expr>, <expr><literal type="string">"admin"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_PUBSUB</name></expr>, <expr><literal type="string">"pubsub"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_NOSCRIPT</name></expr>, <expr><literal type="string">"noscript"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_BLOCKING</name></expr>, <expr><literal type="string">"blocking"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_LOADING</name></expr>, <expr><literal type="string">"loading"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_STALE</name></expr>, <expr><literal type="string">"stale"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_SKIP_MONITOR</name></expr>, <expr><literal type="string">"skip_monitor"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_SKIP_SLOWLOG</name></expr>, <expr><literal type="string">"skip_slowlog"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_ASKING</name></expr>, <expr><literal type="string">"asking"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_FAST</name></expr>, <expr><literal type="string">"fast"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_NO_AUTH</name></expr>, <expr><literal type="string">"no_auth"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_MAY_REPLICATE</name></expr>, <expr><literal type="string">"may_replicate"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>CMD_NO_MANDATORY_KEYS</name></expr>, <expr><literal type="string">"no_mandatory_keys"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CMD_NO_ASYNC_LOADING</name></expr>, <expr><literal type="string">"no_async_loading"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_NO_MULTI</name></expr>, <expr><literal type="string">"no_multi"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_MOVABLE_KEYS</name></expr>, <expr><literal type="string">"movablekeys"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_ALLOW_BUSY</name></expr>, <expr><literal type="string">"allow_busy"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyCommandFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>flagNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addReplyDocFlagsForCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>replyFlagNames</name></type> <name><name>docFlagNames</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>CMD_DOC_DEPRECATED</name></expr>, <expr><literal type="string">"deprecated"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_DOC_SYSCMD</name></expr>, <expr><literal type="string">"syscmd"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyCommandFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>doc_flags</name></name></expr></argument>, <argument><expr><name>docFlagNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addReplyFlagsForKeyArgs</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>replyFlagNames</name></type> <name><name>docFlagNames</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>CMD_KEY_RO</name></expr>, <expr><literal type="string">"RO"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_RW</name></expr>, <expr><literal type="string">"RW"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_OW</name></expr>, <expr><literal type="string">"OW"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_RM</name></expr>, <expr><literal type="string">"RM"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_ACCESS</name></expr>, <expr><literal type="string">"access"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_UPDATE</name></expr>, <expr><literal type="string">"update"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_INSERT</name></expr>, <expr><literal type="string">"insert"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_DELETE</name></expr>, <expr><literal type="string">"delete"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_CHANNEL</name></expr>, <expr><literal type="string">"channel"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_KEY_INCOMPLETE</name></expr>, <expr><literal type="string">"incomplete"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyCommandFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>docFlagNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ARG_TYPE_STR</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"string"</literal></expr>,
<expr><literal type="string">"integer"</literal></expr>,
<expr><literal type="string">"double"</literal></expr>,
<expr><literal type="string">"key"</literal></expr>,
<expr><literal type="string">"pattern"</literal></expr>,
<expr><literal type="string">"unix-time"</literal></expr>,
<expr><literal type="string">"pure-token"</literal></expr>,
<expr><literal type="string">"oneof"</literal></expr>,
<expr><literal type="string">"block"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>addReplyFlagsForArg</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>replyFlagNames</name></type> <name><name>argFlagNames</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>CMD_ARG_OPTIONAL</name></expr>, <expr><literal type="string">"optional"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_ARG_MULTIPLE</name></expr>, <expr><literal type="string">"multiple"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CMD_ARG_MULTIPLE_TOKEN</name></expr>, <expr><literal type="string">"multiple_token"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyCommandFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>argFlagNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addReplyCommandArgList</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommandArg</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>num_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>num_args</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>maplen</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARG_TYPE_KEY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>summary</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>since</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARG_TYPE_ONEOF</name> <operator>||</operator> <name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARG_TYPE_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>maplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ARG_TYPE_STR</name><index>[<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARG_TYPE_KEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"key_spec_index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key_spec_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>token</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>summary</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"summary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>since</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"since"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>since</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyFlagsForArg</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARG_TYPE_ONEOF</name> <operator>||</operator> <name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARG_TYPE_BLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandArgList</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>subargs</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>num_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>RESP2_TYPE_STR</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"simple-string"</literal></expr>,
<expr><literal type="string">"error"</literal></expr>,
<expr><literal type="string">"integer"</literal></expr>,
<expr><literal type="string">"bulk-string"</literal></expr>,
<expr><literal type="string">"null-bulk-string"</literal></expr>,
<expr><literal type="string">"array"</literal></expr>,
<expr><literal type="string">"null-array"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>RESP3_TYPE_STR</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"simple-string"</literal></expr>,
<expr><literal type="string">"error"</literal></expr>,
<expr><literal type="string">"integer"</literal></expr>,
<expr><literal type="string">"double"</literal></expr>,
<expr><literal type="string">"bulk-string"</literal></expr>,
<expr><literal type="string">"array"</literal></expr>,
<expr><literal type="string">"map"</literal></expr>,
<expr><literal type="string">"set"</literal></expr>,
<expr><literal type="string">"bool"</literal></expr>,
<expr><literal type="string">"null"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>addReplyCommandHistory</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>num_history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>cmd</name><operator>-&gt;</operator><name>num_history</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>since</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addReplyCommandTips</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>num_tips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>cmd</name><operator>-&gt;</operator><name>num_tips</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>tips</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addReplyCommandKeySpecs</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyFlagsForKeyArgs</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"begin_search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin_search_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KSPEC_BS_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"spec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KSPEC_BS_INDEX</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"spec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KSPEC_BS_KEYWORD</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"spec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"startfrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bs</name><operator>.</operator><name>keyword</name><operator>.</operator><name>startfrom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid begin_search key spec type %d"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin_search_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"find_keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>find_keys_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KSPEC_FK_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"spec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KSPEC_FK_RANGE</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"spec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"lastkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"keystep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KSPEC_FK_KEYNUM</name></expr>:</case>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"keynum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"spec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"keynumidx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>keynumidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"firstkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>firstkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"keystep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fk</name><operator>.</operator><name>keynum</name><operator>.</operator><name>keystep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid find_keys key spec type %d"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>key_specs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin_search_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>addReplyCommandSubCommands</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>reply_function</name>)<parameter_list>(<parameter><decl><type><name>client</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_map</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplySetLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_map</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><operator>(</operator>struct <name>redisCommand</name> <operator>*</operator><operator>)</operator><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>use_map</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reply_function</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>COMMAND_GROUP_STR</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"generic"</literal></expr>,
<expr><literal type="string">"string"</literal></expr>,
<expr><literal type="string">"list"</literal></expr>,
<expr><literal type="string">"set"</literal></expr>,
<expr><literal type="string">"sorted-set"</literal></expr>,
<expr><literal type="string">"hash"</literal></expr>,
<expr><literal type="string">"pubsub"</literal></expr>,
<expr><literal type="string">"transactions"</literal></expr>,
<expr><literal type="string">"connection"</literal></expr>,
<expr><literal type="string">"server"</literal></expr>,
<expr><literal type="string">"scripting"</literal></expr>,
<expr><literal type="string">"hyperloglog"</literal></expr>,
<expr><literal type="string">"cluster"</literal></expr>,
<expr><literal type="string">"sentinel"</literal></expr>,
<expr><literal type="string">"geo"</literal></expr>,
<expr><literal type="string">"stream"</literal></expr>,
<expr><literal type="string">"bitmap"</literal></expr>,
<expr><literal type="string">"module"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>addReplyCommandInfo</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyNull</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>firstkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lastkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>keystep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>begin_search_type</name></name> <operator>!=</operator> <name>KSPEC_BS_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>firstkey</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>bs</name><operator>.</operator><name>index</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastkey</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>lastkey</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lastkey</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastkey</name> <operator>+=</operator> <name>firstkey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>keystep</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>legacy_range_key_spec</name><operator>.</operator><name>fk</name><operator>.</operator><name>range</name><operator>.</operator><name>keystep</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyFlagsForCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>firstkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>lastkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>keystep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandCategories</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandTips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandKeySpecs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandSubCommands</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>addReplyCommandInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>addReplyCommandDocs</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>maplen</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>complexity</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>doc_flags</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>deprecated_since</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>replaced_by</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maplen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>maplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"summary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"since"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>since</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>COMMAND_GROUP_STR</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>group</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>complexity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"complexity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>complexity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>doc_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"doc_flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyDocFlagsForCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>deprecated_since</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"deprecated_since"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>deprecated_since</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>replaced_by</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"replaced_by"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>replaced_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>history</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandHistory</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandArgList</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>num_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"subcommands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandSubCommands</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>addReplyCommandDocs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>getKeysSubcommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getKeysResult</name></type> <name>result</name> <init>= <expr><name>GETKEYS_RESULT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid command specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>key_specs_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The command has no key arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <operator>-</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid number of arguments specified for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getKeysFromCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_NO_MANDATORY_KEYS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid arguments specified for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>result</name><operator>.</operator><name>numkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>result</name><operator>.</operator><name>numkeys</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>result</name><operator>.</operator><name>keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>getKeysFreeResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyCommandInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandCountCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{
<decl><name>COMMAND_LIST_FILTER_MODULE</name></decl>,
<decl><name>COMMAND_LIST_FILTER_ACLCAT</name></decl>,
<decl><name>COMMAND_LIST_FILTER_PATTERN</name></decl>,
}</block></enum></type> <name>commandListFilterType</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>commandListFilterType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>arg</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>aclcat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>module_handle</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
}</block> <decl><name>cache</name></decl>;</struct>
}</block></struct></type> <name>commandListFilter</name>;</typedef>

<function><type><name>int</name></type> <name>shouldFilterFromCommandList</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>commandListFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>(</operator><name>COMMAND_LIST_FILTER_MODULE</name><operator>)</operator></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>u</name><operator>.</operator><name>module_handle</name></name> <operator>=</operator> <call><name>moduleGetHandleByName</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>!</operator><call><name>moduleIsModuleCommand</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>u</name><operator>.</operator><name>module_handle</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><operator>(</operator><name>COMMAND_LIST_FILTER_ACLCAT</name><operator>)</operator></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>u</name><operator>.</operator><name>aclcat</name></name> <operator>=</operator> <call><name>ACLGetCommandCategoryFlagByName</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cat</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>u</name><operator>.</operator><name>aclcat</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>acl_categories</name></name> <operator>&amp;</operator> <name>cat</name><operator>)</operator><operator>)</operator></expr>;</return>
<break>break;</break>
</block_content>}</block>
<case>case <expr><operator>(</operator><name>COMMAND_LIST_FILTER_PATTERN</name><operator>)</operator></expr>:</case>
<return>return <expr><operator>!</operator><call><name>stringmatchlen</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Invalid filter type %d"</literal></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandListWithFilter</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>commandListFilter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numcmds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldFilterFromCommandList</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>numcmds</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>commandListWithFilter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>numcmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandListWithoutFilter</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numcmds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>numcmds</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>commandListWithoutFilter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>, <argument><expr><name>numcmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandListCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>commandListFilter</name></type> <name>filter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>moreargs</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>,<argument><expr><literal type="string">"filterby"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filtertype</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>filtertype</name></expr></argument>,<argument><expr><literal type="string">"module"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_LIST_FILTER_MODULE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>filtertype</name></expr></argument>,<argument><expr><literal type="string">"aclcat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_LIST_FILTER_ACLCAT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>filtertype</name></expr></argument>,<argument><expr><literal type="string">"pattern"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_LIST_FILTER_PATTERN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>got_filter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>numcmds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>got_filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>commandListWithFilter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numcmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>commandListWithoutFilter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numcmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>setDeferredArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>replylen</name></expr></argument>,<argument><expr><name>numcmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandInfoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyCommandInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>addReplyArrayLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyCommandInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>lookupCommandBySds</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandDocsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandDocs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>numcmds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addReplyDeferredLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommandBySds</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyCommandDocs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numcmds</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setDeferredMapLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>replylen</name></expr></argument>,<argument><expr><name>numcmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandGetKeysCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>getKeysSubcommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>commandHelpCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"(no subcommand)"</literal></expr>,
<expr><literal type="string">" Return details about all Redis commands."</literal></expr>,
<expr><literal type="string">"COUNT"</literal></expr>,
<expr><literal type="string">" Return the total number of commands in this Redis server."</literal></expr>,
<expr><literal type="string">"LIST"</literal></expr>,
<expr><literal type="string">" Return a list of all commands in this Redis server."</literal></expr>,
<expr><literal type="string">"INFO [&lt;command-name&gt; ...]"</literal></expr>,
<expr><literal type="string">" Return details about multiple Redis commands."</literal></expr>,
<expr><literal type="string">" If no command names are given, documentation details for all"</literal></expr>,
<expr><literal type="string">" commands are returned."</literal></expr>,
<expr><literal type="string">"DOCS [&lt;command-name&gt; ...]"</literal></expr>,
<expr><literal type="string">" Return documentation details about multiple Redis commands."</literal></expr>,
<expr><literal type="string">" If no command names are given, documentation details for all"</literal></expr>,
<expr><literal type="string">" commands are returned."</literal></expr>,
<expr><literal type="string">"GETKEYS &lt;full-command&gt;"</literal></expr>,
<expr><literal type="string">" Return the keys from a full Redis command."</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>bytesToHuman</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%lluB"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fK"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fM"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fG"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fT"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fP"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%lluB"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>sds</name></type> <name>fillPercentileDistributionLatencies</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>histogram_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hdr_histogram</name></name><modifier>*</modifier></type> <name>histogram</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"latency_percentiles_usec_%s:"</literal></expr></argument>,<argument><expr><name>histogram_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>trimDoubleString</name><argument_list>(<argument><expr><name>fbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"p%s=%.3f"</literal></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>hdr_value_at_percentile</name><argument_list>(<argument><expr><name>histogram</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>latency_tracking_info_percentiles_len</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replstateToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>replstate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>replstate</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>:</case>
<case>case <expr><name>SLAVE_STATE_WAIT_BGSAVE_END</name></expr>:</case>
<return>return <expr><literal type="string">"wait_bgsave"</literal></expr>;</return>
<case>case <expr><name>SLAVE_STATE_SEND_BULK</name></expr>:</case>
<return>return <expr><literal type="string">"send_bulk"</literal></expr>;</return>
<case>case <expr><name>SLAVE_STATE_ONLINE</name></expr>:</case>
<return>return <expr><literal type="string">"online"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>unsafe_info_chars</name><index>[]</index></name> <init>= <expr><literal type="string">"#:\n\r"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>unsafe_info_chars_substs</name><index>[]</index></name> <init>= <expr><literal type="string">"____"</literal></expr></init></decl>;</decl_stmt>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getSafeInfoString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mempbrk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>unsafe_info_chars</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsafe_info_chars</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><operator>*</operator><name>tmp</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><call><name>memmapchars</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>unsafe_info_chars</name></expr></argument>, <argument><expr><name>unsafe_info_chars_substs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsafe_info_chars</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sds</name></type> <name>genRedisInfoStringCommandStats</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpsafe</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator>struct <name>redisCommand</name> <operator>*</operator><operator>)</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>calls</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>failed_calls</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>rejected_calls</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"cmdstat_%s:calls=%lld,usec=%lld,usec_per_call=%.2f"</literal>
<literal type="string">",rejected_calls=%lld,failed_calls=%lld\r\n"</literal></expr></argument>,
<argument><expr><call><name>getSafeInfoString</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsafe</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>calls</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>microseconds</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>microseconds</name></name><operator>/</operator><name><name>c</name><operator>-&gt;</operator><name>calls</name></name><operator>)</operator></expr></else></ternary></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>rejected_calls</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>failed_calls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpsafe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>tmpsafe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>genRedisInfoStringCommandStats</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sds</name></type> <name>genRedisInfoStringLatencyStats</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpsafe</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator>struct <name>redisCommand</name> <operator>*</operator><operator>)</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>latency_histogram</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>fillPercentileDistributionLatencies</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><call><name>getSafeInfoString</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsafe</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>latency_histogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpsafe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>tmpsafe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>genRedisInfoStringLatencyStats</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>subcommands_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>sds</name></type> <name>genRedisInfoString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>uptime</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>stat_starttime</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>defsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>everything</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>modules</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>allsections</name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>defsections</name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>everything</name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"everything"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>modules</name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"modules"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>everything</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>allsections</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>call_uname</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>utsname</name></name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>supervised</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"cluster"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"sentinel"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"standalone"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_UPSTART</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>supervised</name> <operator>=</operator> <literal type="string">"upstart"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>supervised</name> <operator>=</operator> <literal type="string">"systemd"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>supervised</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>supervised</name> <operator>=</operator> <literal type="string">"no"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>call_uname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>call_uname</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lruclock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lruclock</name></name></expr></argument>,<argument><expr><name>lruclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Server\r\n"</literal>
<literal type="string">"redis_version:%s\r\n"</literal>
<literal type="string">"redis_git_sha1:%s\r\n"</literal>
<literal type="string">"redis_git_dirty:%i\r\n"</literal>
<literal type="string">"redis_build_id:%s\r\n"</literal>
<literal type="string">"redis_mode:%s\r\n"</literal>
<literal type="string">"os:%s %s %s\r\n"</literal>
<literal type="string">"arch_bits:%i\r\n"</literal>
<literal type="string">"multiplexing_api:%s\r\n"</literal>
<literal type="string">"atomicvar_api:%s\r\n"</literal>
<literal type="string">"gcc_version:%i.%i.%i\r\n"</literal>
<literal type="string">"process_id:%I\r\n"</literal>
<literal type="string">"process_supervised:%s\r\n"</literal>
<literal type="string">"run_id:%s\r\n"</literal>
<literal type="string">"tcp_port:%i\r\n"</literal>
<literal type="string">"server_time_usec:%I\r\n"</literal>
<literal type="string">"uptime_in_seconds:%I\r\n"</literal>
<literal type="string">"uptime_in_days:%I\r\n"</literal>
<literal type="string">"hz:%i\r\n"</literal>
<literal type="string">"configured_hz:%i\r\n"</literal>
<literal type="string">"lru_clock:%u\r\n"</literal>
<literal type="string">"executable:%s\r\n"</literal>
<literal type="string">"config_file:%s\r\n"</literal>
<literal type="string">"io_threads_active:%i\r\n"</literal></expr></argument>,
<argument><expr><name>REDIS_VERSION</name></expr></argument>,
<argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>redisBuildIdString</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>mode</name></expr></argument>,
<argument><expr><name><name>name</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>machine</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>arch_bits</name></name></expr></argument>,
<argument><expr><call><name>aeGetApiName</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>REDIS_ATOMIC_API</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>__GNUC__</name></expr></argument>,<argument><expr><name>__GNUC_MINOR__</name></expr></argument>,<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>supervised</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>runid</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>ustime</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>uptime</name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>uptime</name><operator>/</operator><operator>(</operator><literal type="number">3600</literal><operator>*</operator><literal type="number">24</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>hz</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name></expr></argument>,
<argument><expr><name>lruclock</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>io_threads_active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isShutdownInitiated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"shutdown_in_milliseconds:%I\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>shutdown_mstime</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>mstime</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"clients"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxin</name></decl>, <decl><type ref="prev"/><name>maxout</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getExpansiveClientsInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxin</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>maxout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Clients\r\n"</literal>
<literal type="string">"connected_clients:%lu\r\n"</literal>
<literal type="string">"cluster_connections:%lu\r\n"</literal>
<literal type="string">"maxclients:%u\r\n"</literal>
<literal type="string">"client_recent_max_input_buffer:%zu\r\n"</literal>
<literal type="string">"client_recent_max_output_buffer:%zu\r\n"</literal>
<literal type="string">"blocked_clients:%d\r\n"</literal>
<literal type="string">"tracking_clients:%d\r\n"</literal>
<literal type="string">"clients_in_timeout_table:%llu\r\n"</literal></expr></argument>,
<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call><operator>-</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getClusterConnectionsCount</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>,
<argument><expr><name>maxin</name></expr></argument>, <argument><expr><name>maxout</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>blocked_clients</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>tracking_clients</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_timeout_table</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>peak_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>total_system_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>used_memory_lua_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>used_memory_vm_total_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>used_memory_scripts_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>used_memory_rss_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>maxmemory_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>zmalloc_used</name> <init>= <expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_system_mem</name> <init>= <expr><name><name>server</name><operator>.</operator><name>system_memory_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evict_policy</name> <init>= <expr><call><name>evictPolicyToString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>memory_lua</name> <init>= <expr><call><name>evalMemory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>memory_functions</name> <init>= <expr><call><name>functionsMemory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisMemOverhead</name></name> <modifier>*</modifier></type><name>mh</name> <init>= <expr><call><name>getMemoryOverheadData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>zmalloc_used</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <name>zmalloc_used</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>hmem</name></expr></argument>,<argument><expr><name>zmalloc_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>peak_hmem</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>total_system_hmem</name></expr></argument>,<argument><expr><name>total_system_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>used_memory_lua_hmem</name></expr></argument>,<argument><expr><name>memory_lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>used_memory_vm_total_hmem</name></expr></argument>,<argument><expr><name>memory_functions</name> <operator>+</operator> <name>memory_lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>used_memory_scripts_hmem</name></expr></argument>,<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>lua_caches</name></name> <operator>+</operator> <name><name>mh</name><operator>-&gt;</operator><name>functions_caches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>used_memory_rss_hmem</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>maxmemory_hmem</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Memory\r\n"</literal>
<literal type="string">"used_memory:%zu\r\n"</literal>
<literal type="string">"used_memory_human:%s\r\n"</literal>
<literal type="string">"used_memory_rss:%zu\r\n"</literal>
<literal type="string">"used_memory_rss_human:%s\r\n"</literal>
<literal type="string">"used_memory_peak:%zu\r\n"</literal>
<literal type="string">"used_memory_peak_human:%s\r\n"</literal>
<literal type="string">"used_memory_peak_perc:%.2f%%\r\n"</literal>
<literal type="string">"used_memory_overhead:%zu\r\n"</literal>
<literal type="string">"used_memory_startup:%zu\r\n"</literal>
<literal type="string">"used_memory_dataset:%zu\r\n"</literal>
<literal type="string">"used_memory_dataset_perc:%.2f%%\r\n"</literal>
<literal type="string">"allocator_allocated:%zu\r\n"</literal>
<literal type="string">"allocator_active:%zu\r\n"</literal>
<literal type="string">"allocator_resident:%zu\r\n"</literal>
<literal type="string">"total_system_memory:%lu\r\n"</literal>
<literal type="string">"total_system_memory_human:%s\r\n"</literal>
<literal type="string">"used_memory_lua:%lld\r\n"</literal>
<literal type="string">"used_memory_vm_eval:%lld\r\n"</literal>
<literal type="string">"used_memory_lua_human:%s\r\n"</literal>
<literal type="string">"used_memory_scripts_eval:%lld\r\n"</literal>
<literal type="string">"number_of_cached_scripts:%lu\r\n"</literal>
<literal type="string">"number_of_functions:%lu\r\n"</literal>
<literal type="string">"number_of_libraries:%lu\r\n"</literal>
<literal type="string">"used_memory_vm_functions:%lld\r\n"</literal>
<literal type="string">"used_memory_vm_total:%lld\r\n"</literal>
<literal type="string">"used_memory_vm_total_human:%s\r\n"</literal>
<literal type="string">"used_memory_functions:%lld\r\n"</literal>
<literal type="string">"used_memory_scripts:%lld\r\n"</literal>
<literal type="string">"used_memory_scripts_human:%s\r\n"</literal>
<literal type="string">"maxmemory:%lld\r\n"</literal>
<literal type="string">"maxmemory_human:%s\r\n"</literal>
<literal type="string">"maxmemory_policy:%s\r\n"</literal>
<literal type="string">"allocator_frag_ratio:%.2f\r\n"</literal>
<literal type="string">"allocator_frag_bytes:%zu\r\n"</literal>
<literal type="string">"allocator_rss_ratio:%.2f\r\n"</literal>
<literal type="string">"allocator_rss_bytes:%zd\r\n"</literal>
<literal type="string">"rss_overhead_ratio:%.2f\r\n"</literal>
<literal type="string">"rss_overhead_bytes:%zd\r\n"</literal>
<literal type="string">"mem_fragmentation_ratio:%.2f\r\n"</literal>
<literal type="string">"mem_fragmentation_bytes:%zd\r\n"</literal>
<literal type="string">"mem_not_counted_for_evict:%zu\r\n"</literal>
<literal type="string">"mem_replication_backlog:%zu\r\n"</literal>
<literal type="string">"mem_total_replication_buffers:%zu\r\n"</literal>
<literal type="string">"mem_clients_slaves:%zu\r\n"</literal>
<literal type="string">"mem_clients_normal:%zu\r\n"</literal>
<literal type="string">"mem_cluster_links:%zu\r\n"</literal>
<literal type="string">"mem_aof_buffer:%zu\r\n"</literal>
<literal type="string">"mem_allocator:%s\r\n"</literal>
<literal type="string">"active_defrag_running:%d\r\n"</literal>
<literal type="string">"lazyfree_pending_objects:%zu\r\n"</literal>
<literal type="string">"lazyfreed_objects:%zu\r\n"</literal></expr></argument>,
<argument><expr><name>zmalloc_used</name></expr></argument>,
<argument><expr><name>hmem</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name></expr></argument>,
<argument><expr><name>used_memory_rss_hmem</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr></argument>,
<argument><expr><name>peak_hmem</name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>peak_perc</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>overhead_total</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>startup_allocated</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>dataset</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>dataset_perc</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>total_system_mem</name></expr></argument>,
<argument><expr><name>total_system_hmem</name></expr></argument>,
<argument><expr><name>memory_lua</name></expr></argument>,
<argument><expr><name>memory_lua</name></expr></argument>,
<argument><expr><name>used_memory_lua_hmem</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>mh</name><operator>-&gt;</operator><name>lua_caches</name></name></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><call><name>evalScriptsDict</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>functionsNum</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>functionsLibNum</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>memory_functions</name></expr></argument>,
<argument><expr><name>memory_functions</name> <operator>+</operator> <name>memory_lua</name></expr></argument>,
<argument><expr><name>used_memory_vm_total_hmem</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>mh</name><operator>-&gt;</operator><name>functions_caches</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>mh</name><operator>-&gt;</operator><name>lua_caches</name></name> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>mh</name><operator>-&gt;</operator><name>functions_caches</name></name></expr></argument>,
<argument><expr><name>used_memory_scripts_hmem</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>,
<argument><expr><name>maxmemory_hmem</name></expr></argument>,
<argument><expr><name>evict_policy</name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>allocator_frag</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>allocator_frag_bytes</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>allocator_rss</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>allocator_rss_bytes</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>rss_extra</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>rss_extra_bytes</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>total_frag</name></name></expr></argument>,



<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>total_frag_bytes</name></name></expr></argument>,
<argument><expr><call><name>freeMemoryGetNotCountedMemory</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>repl_backlog</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_mem</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>clients_slaves</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>clients_normal</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>cluster_links</name></name></expr></argument>,
<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>aof_buffer</name></name></expr></argument>,
<argument><expr><name>ZMALLOC_LIB</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name></expr></argument>,
<argument><expr><call><name>lazyfreeGetPendingObjectsCount</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>lazyfreeGetFreedObjectsCount</name><argument_list>()</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeMemoryOverheadData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"persistence"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fork_perc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_module_progress</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fork_perc</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>stat_module_progress</name></name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_total</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fork_perc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>server</name><operator>.</operator><name>stat_current_save_keys_processed</name></name> <operator>/</operator> <name><name>server</name><operator>.</operator><name>stat_current_save_keys_total</name></name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aof_bio_fsync_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_bio_fsync_status</name></name></expr></argument>,<argument><expr><name>aof_bio_fsync_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Persistence\r\n"</literal>
<literal type="string">"loading:%d\r\n"</literal>
<literal type="string">"async_loading:%d\r\n"</literal>
<literal type="string">"current_cow_peak:%zu\r\n"</literal>
<literal type="string">"current_cow_size:%zu\r\n"</literal>
<literal type="string">"current_cow_size_age:%lu\r\n"</literal>
<literal type="string">"current_fork_perc:%.2f\r\n"</literal>
<literal type="string">"current_save_keys_processed:%zu\r\n"</literal>
<literal type="string">"current_save_keys_total:%zu\r\n"</literal>
<literal type="string">"rdb_changes_since_last_save:%lld\r\n"</literal>
<literal type="string">"rdb_bgsave_in_progress:%d\r\n"</literal>
<literal type="string">"rdb_last_save_time:%jd\r\n"</literal>
<literal type="string">"rdb_last_bgsave_status:%s\r\n"</literal>
<literal type="string">"rdb_last_bgsave_time_sec:%jd\r\n"</literal>
<literal type="string">"rdb_current_bgsave_time_sec:%jd\r\n"</literal>
<literal type="string">"rdb_last_cow_size:%zu\r\n"</literal>
<literal type="string">"rdb_last_load_keys_expired:%lld\r\n"</literal>
<literal type="string">"rdb_last_load_keys_loaded:%lld\r\n"</literal>
<literal type="string">"aof_enabled:%d\r\n"</literal>
<literal type="string">"aof_rewrite_in_progress:%d\r\n"</literal>
<literal type="string">"aof_rewrite_scheduled:%d\r\n"</literal>
<literal type="string">"aof_last_rewrite_time_sec:%jd\r\n"</literal>
<literal type="string">"aof_current_rewrite_time_sec:%jd\r\n"</literal>
<literal type="string">"aof_last_bgrewrite_status:%s\r\n"</literal>
<literal type="string">"aof_last_write_status:%s\r\n"</literal>
<literal type="string">"aof_last_cow_size:%zu\r\n"</literal>
<literal type="string">"module_fork_in_progress:%d\r\n"</literal>
<literal type="string">"module_fork_last_cow_size:%zu\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>async_loading</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>server</name><operator>.</operator><name>async_loading</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_bytes</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_updated</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>elapsedMs</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_updated</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>fork_perc</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_processed</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_total</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>dirty</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_RDB</name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>lastsave</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"ok"</literal></expr> </then><else>: <expr><literal type="string">"err"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>rdb_save_time_last</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>!=</operator> <name>CHILD_TYPE_RDB</name><operator>)</operator></expr> ?</condition><then>
<expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_rdb_cow_bytes</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_expired</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>rdb_last_load_keys_loaded</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_AOF</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_scheduled</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>aof_rewrite_time_last</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>!=</operator> <name>CHILD_TYPE_AOF</name><operator>)</operator></expr> ?</condition><then>
<expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>aof_rewrite_time_start</name></name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_lastbgrewrite_status</name></name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"ok"</literal></expr> </then><else>: <expr><literal type="string">"err"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_last_write_status</name></name> <operator>==</operator> <name>C_OK</name> <operator>&amp;&amp;</operator>
<name>aof_bio_fsync_status</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"ok"</literal></expr> </then><else>: <expr><literal type="string">"err"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_aof_cow_bytes</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>==</operator> <name>CHILD_TYPE_MODULE</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_module_cow_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"aof_current_size:%lld\r\n"</literal>
<literal type="string">"aof_base_size:%lld\r\n"</literal>
<literal type="string">"aof_pending_rewrite:%d\r\n"</literal>
<literal type="string">"aof_buffer_length:%zu\r\n"</literal>
<literal type="string">"aof_pending_bio_fsync:%llu\r\n"</literal>
<literal type="string">"aof_delayed_fsync:%lu\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>aof_current_size</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_scheduled</name></name></expr></argument>,
<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_buf</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>bioPendingJobsOfType</name><argument_list>(<argument><expr><name>BIO_AOF_FSYNC</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>aof_delayed_fsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>perc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>eta</name></decl>, <decl><type ref="prev"/><name>elapsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>remaining_bytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>/</operator> <name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining_bytes</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>server</name><operator>.</operator><name>loading_rdb_used_mem</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>/</operator> <name><name>server</name><operator>.</operator><name>loading_rdb_used_mem</name></name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining_bytes</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>loading_rdb_used_mem</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>perc</name> <operator>&gt;</operator> <literal type="number">99.99</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>perc</name> <operator>=</operator> <literal type="number">99.99</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>remaining_bytes</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>remaining_bytes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>loading_start_time</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>eta</name> <operator>=</operator> <operator>(</operator><name>elapsed</name><operator>*</operator><name>remaining_bytes</name><operator>)</operator><operator>/</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"loading_start_time:%jd\r\n"</literal>
<literal type="string">"loading_total_bytes:%llu\r\n"</literal>
<literal type="string">"loading_rdb_used_mem:%llu\r\n"</literal>
<literal type="string">"loading_loaded_bytes:%llu\r\n"</literal>
<literal type="string">"loading_loaded_perc:%.2f\r\n"</literal>
<literal type="string">"loading_eta_seconds:%jd\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>loading_start_time</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>loading_rdb_used_mem</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name></expr></argument>,
<argument><expr><name>perc</name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>eta</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"stats"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_total_reads_processed</name></decl>, <decl><type ref="prev"/><name>stat_total_writes_processed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>stat_net_input_bytes</name></decl>, <decl><type ref="prev"/><name>stat_net_output_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>current_eviction_exceeded_time</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>stat_last_eviction_exceeded_time</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>elapsedUs</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_last_eviction_exceeded_time</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>current_active_defrag_time</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>elapsedUs</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_last_active_defrag_time</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_total_reads_processed</name></name></expr></argument>, <argument><expr><name>stat_total_reads_processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_total_writes_processed</name></name></expr></argument>, <argument><expr><name>stat_total_writes_processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_input_bytes</name></name></expr></argument>, <argument><expr><name>stat_net_input_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>, <argument><expr><name>stat_net_output_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Stats\r\n"</literal>
<literal type="string">"total_connections_received:%lld\r\n"</literal>
<literal type="string">"total_commands_processed:%lld\r\n"</literal>
<literal type="string">"instantaneous_ops_per_sec:%lld\r\n"</literal>
<literal type="string">"total_net_input_bytes:%lld\r\n"</literal>
<literal type="string">"total_net_output_bytes:%lld\r\n"</literal>
<literal type="string">"instantaneous_input_kbps:%.2f\r\n"</literal>
<literal type="string">"instantaneous_output_kbps:%.2f\r\n"</literal>
<literal type="string">"rejected_connections:%lld\r\n"</literal>
<literal type="string">"sync_full:%lld\r\n"</literal>
<literal type="string">"sync_partial_ok:%lld\r\n"</literal>
<literal type="string">"sync_partial_err:%lld\r\n"</literal>
<literal type="string">"expired_keys:%lld\r\n"</literal>
<literal type="string">"expired_stale_perc:%.2f\r\n"</literal>
<literal type="string">"expired_time_cap_reached_count:%lld\r\n"</literal>
<literal type="string">"expire_cycle_cpu_milliseconds:%lld\r\n"</literal>
<literal type="string">"evicted_keys:%lld\r\n"</literal>
<literal type="string">"evicted_clients:%lld\r\n"</literal>
<literal type="string">"total_eviction_exceeded_time:%lld\r\n"</literal>
<literal type="string">"current_eviction_exceeded_time:%lld\r\n"</literal>
<literal type="string">"keyspace_hits:%lld\r\n"</literal>
<literal type="string">"keyspace_misses:%lld\r\n"</literal>
<literal type="string">"pubsub_channels:%ld\r\n"</literal>
<literal type="string">"pubsub_patterns:%lu\r\n"</literal>
<literal type="string">"latest_fork_usec:%lld\r\n"</literal>
<literal type="string">"total_forks:%lld\r\n"</literal>
<literal type="string">"migrate_cached_sockets:%ld\r\n"</literal>
<literal type="string">"slave_expires_tracked_keys:%zu\r\n"</literal>
<literal type="string">"active_defrag_hits:%lld\r\n"</literal>
<literal type="string">"active_defrag_misses:%lld\r\n"</literal>
<literal type="string">"active_defrag_key_hits:%lld\r\n"</literal>
<literal type="string">"active_defrag_key_misses:%lld\r\n"</literal>
<literal type="string">"total_active_defrag_time:%lld\r\n"</literal>
<literal type="string">"current_active_defrag_time:%lld\r\n"</literal>
<literal type="string">"tracking_total_keys:%lld\r\n"</literal>
<literal type="string">"tracking_total_items:%lld\r\n"</literal>
<literal type="string">"tracking_total_prefixes:%lld\r\n"</literal>
<literal type="string">"unexpected_error_replies:%lld\r\n"</literal>
<literal type="string">"total_error_replies:%lld\r\n"</literal>
<literal type="string">"dump_payload_sanitizations:%lld\r\n"</literal>
<literal type="string">"total_reads_processed:%lld\r\n"</literal>
<literal type="string">"total_writes_processed:%lld\r\n"</literal>
<literal type="string">"io_threaded_reads_processed:%lld\r\n"</literal>
<literal type="string">"io_threaded_writes_processed:%lld\r\n"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_numconnections</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name></expr></argument>,
<argument><expr><call><name>getInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_COMMAND</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stat_net_input_bytes</name></expr></argument>,
<argument><expr><name>stat_net_output_bytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name>getInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_INPUT</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1024</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name>getInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_OUTPUT</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1024</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_rejected_conn</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_sync_full</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_ok</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_err</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_expiredkeys</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_expired_stale_perc</name></name><operator>*</operator><literal type="number">100</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_expired_time_cap_reached_count</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_expire_cycle_time_used</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_evictedkeys</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_evictedclients</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>stat_total_eviction_exceeded_time</name></name> <operator>+</operator> <name>current_eviction_exceeded_time</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><name>current_eviction_exceeded_time</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_hits</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_misses</name></name></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pubsub_channels</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pubsub_patterns</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_total_forks</name></name></expr></argument>,
<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getSlaveKeyWithExpireCount</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_misses</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_hits</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_misses</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>stat_total_active_defrag_time</name></name> <operator>+</operator> <name>current_active_defrag_time</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><name>current_active_defrag_time</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>trackingGetTotalKeys</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>trackingGetTotalItems</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>trackingGetTotalPrefixes</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_unexpected_error_replies</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_total_error_replies</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_dump_payload_sanitizations</name></name></expr></argument>,
<argument><expr><name>stat_total_reads_processed</name></expr></argument>,
<argument><expr><name>stat_total_writes_processed</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_io_reads_processed</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>stat_io_writes_processed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"replication"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Replication\r\n"</literal>
<literal type="string">"role:%s\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"master"</literal></expr> </then><else>: <expr><literal type="string">"slave"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>slave_repl_offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>slave_read_repl_offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slave_repl_offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slave_read_repl_offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>read_reploff</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slave_repl_offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slave_read_repl_offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>read_reploff</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"master_host:%s\r\n"</literal>
<literal type="string">"master_port:%d\r\n"</literal>
<literal type="string">"master_link_status:%s\r\n"</literal>
<literal type="string">"master_last_io_seconds_ago:%d\r\n"</literal>
<literal type="string">"master_sync_in_progress:%d\r\n"</literal>
<literal type="string">"slave_read_repl_offset:%lld\r\n"</literal>
<literal type="string">"slave_repl_offset:%lld\r\n"</literal></expr></argument>
,<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"up"</literal></expr> </then><else>: <expr><literal type="string">"down"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr> ?</condition><then>
<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>lastinteraction</name></name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr></argument>,
<argument><expr><name>slave_read_repl_offset</name></expr></argument>,
<argument><expr><name>slave_repl_offset</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>perc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name> <operator>/</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"master_sync_total_bytes:%lld\r\n"</literal>
<literal type="string">"master_sync_read_bytes:%lld\r\n"</literal>
<literal type="string">"master_sync_left_bytes:%lld\r\n"</literal>
<literal type="string">"master_sync_perc:%.2f\r\n"</literal>
<literal type="string">"master_sync_last_io_seconds_ago:%d\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>(</operator><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>perc</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name><operator>)</operator></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>!=</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"master_link_down_since_seconds:%jd\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>repl_down_since</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>intmax_t</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>repl_down_since</name></name><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"slave_priority:%d\r\n"</literal>
<literal type="string">"slave_read_only:%d\r\n"</literal>
<literal type="string">"replica_announced:%d\r\n"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>replica_announced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"connected_slaves:%lu\r\n"</literal></expr></argument>,
<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"min_slaves_good_slaves:%d\r\n"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_good_slaves_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>slaveid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slaveip</name> <init>= <expr><name><name>slave</name><operator>-&gt;</operator><name>slave_addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slaveip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>connPeerToString</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slaveip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>replstateToString</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_ONLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lag</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>repl_ack_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"slave%d:ip=%s,port=%d,state=%s,"</literal>
<literal type="string">"offset=%lld,lag=%ld\r\n"</literal></expr></argument>,
<argument><expr><name>slaveid</name></expr></argument>,<argument><expr><name>slaveip</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>slave_listening_port</name></name></expr></argument>,<argument><expr><name>state</name></expr></argument>,
<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>repl_ack_off</name></name></expr></argument>, <argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slaveid</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"master_failover_state:%s\r\n"</literal>
<literal type="string">"master_replid:%s\r\n"</literal>
<literal type="string">"master_replid2:%s\r\n"</literal>
<literal type="string">"master_repl_offset:%lld\r\n"</literal>
<literal type="string">"second_repl_offset:%lld\r\n"</literal>
<literal type="string">"repl_backlog_active:%d\r\n"</literal>
<literal type="string">"repl_backlog_size:%lld\r\n"</literal>
<literal type="string">"repl_backlog_first_byte_offset:%lld\r\n"</literal>
<literal type="string">"repl_backlog_histlen:%lld\r\n"</literal></expr></argument>,
<argument><expr><call><name>getFailoverStateString</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>self_ru</name></decl>, <decl><type ref="prev"/><name>c_ru</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_SELF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>self_ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#CPU\r\n"</literal>
<literal type="string">"used_cpu_sys:%ld.%06ld\r\n"</literal>
<literal type="string">"used_cpu_user:%ld.%06ld\r\n"</literal>
<literal type="string">"used_cpu_sys_children:%ld.%06ld\r\n"</literal>
<literal type="string">"used_cpu_user_children:%ld.%06ld\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUSAGE_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>m_ru</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_THREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"used_cpu_sys_main_thread:%ld.%06ld\r\n"</literal>
<literal type="string">"used_cpu_user_main_thread:%ld.%06ld\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>m_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>m_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>m_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>m_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"modules"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"#Modules\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>genModulesInfoString</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"commandstats"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"#Commandstats\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>genRedisInfoStringCommandStats</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"errorstats"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"#Errorstats\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>redisError</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpsafe</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator>struct <name>redisError</name> <operator>*</operator><operator>)</operator> <name><name>ri</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"errorstat_%.*s:count=%lld\r\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><call><name>getSafeInfoString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsafe</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpsafe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>tmpsafe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"latencystats"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"#Latencystats\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>latency_tracking_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>genRedisInfoStringLatencyStats</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"cluster"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"#Cluster\r\n"</literal>
<literal type="string">"cluster_enabled:%d\r\n"</literal></expr></argument>,
<argument><expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"keyspace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"#Keyspace\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>keys</name></decl>, <decl><type ref="prev"/><name>vkeys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vkeys</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keys</name> <operator>||</operator> <name>vkeys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><literal type="string">"db%d:keys=%lld,expires=%lld,avg_ttl=%lld\r\n"</literal></expr></argument>,
<argument><expr><name>j</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>vkeys</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>avg_ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>everything</name> <operator>||</operator> <name>modules</name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>allsections</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defsections</name> <operator>&amp;&amp;</operator> <name>sections</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>modulesCollectInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>everything</name> <operator>||</operator> <name>modules</name></expr> ?</condition><then> <expr><name>NULL</name></expr></then><else>: <expr><name>section</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>infoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sentinelInfoCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addReplyErrorObject</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>genRedisInfoString</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addReplyVerbatim</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>info</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monitorCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_DENY_BLOCKING</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"MONITOR isn't allowed for DENY BLOCKING client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>CLIENT_SLAVE</name><operator>|</operator><name>CLIENT_MONITOR</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>checkIgnoreWarning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>warning</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>sdssplitargs</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>ignore_warnings</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>linuxOvercommitMemoryValue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/sys/vm/overcommit_memory"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>linuxMemoryWarnings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>linuxOvercommitMemoryValue</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>THPIsEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>thp_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>THPDisable</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>thp_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo madvise &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to 'madvise' or 'never')."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm64__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type> <name>smapsGetSharedDirty</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>in_mapping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/self/smaps"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lx-%lx"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_mapping</name> <operator>=</operator> <name>from</name> <operator>&lt;=</operator> <name>addr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>to</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_mapping</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Shared_Dirty:"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%*s %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>linuxMadvFreeForkBugCheck</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bug_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>page_size</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>map_size</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>page_size</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>map_size</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_ANONYMOUS</name> <operator>|</operator> <name>MAP_PRIVATE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to mmap(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>page_size</name></expr>;</expr_stmt>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mprotect</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to mprotect(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bug_found</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>volatile</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MADV_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MADV_FREE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>madvise</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>, <argument><expr><name>MADV_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to madvise(): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bug_found</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>volatile</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>anetPipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to create pipe: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bug_found</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to fork: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bug_found</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>pid</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smapsGetSharedDirty</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bug_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bug_found</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bug_found</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bug_found</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to write to parent: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bug_found</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bug_found</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to read from child: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bug_found</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>map_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bug_found</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>createPidFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>CONFIG_DEFAULT_PID_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>daemonize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fork</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <name>STDERR_FILENO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Redis server v=%s sha=%s:%d malloc=%s bits=%d build=%llx\n"</literal></expr></argument>,
<argument><expr><name>REDIS_VERSION</name></expr></argument>,
<argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>ZMALLOC_LIB</name></expr></argument>,
<argument><expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>redisBuildId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Usage: ./redis-server [/path/to/redis.conf] [options] [-]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server - (read config from stdin)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server -v or --version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server -h or --help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server --test-memory &lt;megabytes&gt;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Examples:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server (run the server with default conf)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server /etc/redis/6379.conf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server --port 7777\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server --port 7777 --replicaof 127.0.0.1 8888\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server /etc/myredis.conf --loglevel verbose -\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server /etc/myredis.conf --loglevel verbose\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sentinel mode:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" ./redis-server /etc/sentinel.conf --sentinel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisAsciiArt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asciilogo.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"cluster"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"sentinel"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"standalone"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>show_logo</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>!</operator><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name> <operator>&amp;&amp;</operator>
<name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<name><name>server</name><operator>.</operator><name>always_show_logo</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>show_logo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Running mode=%s, port=%d."</literal></expr></argument>,
<argument><expr><name>mode</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></else></ternary></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">16</literal></expr></argument>,<argument><expr><name>ascii_logo</name></expr></argument>,
<argument><expr><name>REDIS_VERSION</name></expr></argument>,
<argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"64"</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>mode</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_NOTICE</name><operator>|</operator><name>LL_RAW</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>changeBindAddr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>closeSocketListeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closeSocketListeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tlsfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>listenToPort</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>tls_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>listenToPort</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tlsfd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>closeSocketListeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closeSocketListeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tlsfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>createSocketAcceptHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>, <argument><expr><name>acceptTcpHandler</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating TCP socket accept handler."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>createSocketAcceptHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tlsfd</name></name></expr></argument>, <argument><expr><name>acceptTLSHandler</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating TLS socket accept handler."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>set_proc_title</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>changeListenPort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>socketFds</name> <modifier>*</modifier></type><name>sfd</name></decl></parameter>, <parameter><decl><type><name>aeFileProc</name> <modifier>*</modifier></type><name>accept_handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>socketFds</name></type> <name>new_sfd</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>closeSocketListeners</name><argument_list>(<argument><expr><name>sfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>set_proc_title</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>listenToPort</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_sfd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>createSocketAcceptHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_sfd</name></expr></argument>, <argument><expr><name>accept_handler</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>closeSocketListeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_sfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>new_sfd</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>new_sfd</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>new_sfd</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>set_proc_title</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sigShutdownHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SIGINT</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Received SIGINT scheduling shutdown..."</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGTERM</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Received SIGTERM scheduling shutdown..."</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Received shutdown signal, scheduling shutdown..."</literal></expr>;</expr_stmt>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>





<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>&amp;&amp;</operator> <name>sig</name> <operator>==</operator> <name>SIGINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"You insist... exiting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdbRemoveTempFile</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Received shutdown signal during loading, scheduling shutdown."</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setupSignalHandlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sigShutdownHandler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_NODEFER</name> <operator>|</operator> <name>SA_RESETHAND</name> <operator>|</operator> <name>SA_SIGINFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_sigaction</name></name> <operator>=</operator> <name>sigsegvHandler</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>server</name><operator>.</operator><name>crashlog_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGBUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGABRT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>removeSignalHandlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_NODEFER</name> <operator>|</operator> <name>SA_RESETHAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGBUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGABRT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>sigKillChildHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>in_fork_child</name></name> <operator>==</operator> <name>CHILD_TYPE_MODULE</name></expr>?</condition><then> <expr><name>LL_VERBOSE</name></expr></then><else>: <expr><name>LL_WARNING</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"Received SIGUSR1 in child, exiting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><name>SERVER_CHILD_NOERROR_RETVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setupChildSignalHandlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sigKillChildHandler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>closeChildUnusedResourceAfterFork</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>closeListeningSockets</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>cluster_config_file_lock_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster_config_file_lock_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>redisFork</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>purpose</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isMutuallyExclusiveChildType</name><argument_list>(<argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasActiveChildProcess</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>openChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>childpid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name> <init>= <expr><call><name>ustime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>childpid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name><name>server</name><operator>.</operator><name>in_fork_child</name></name> <operator>=</operator> <name>purpose</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setupChildSignalHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setOOMScoreAdj</name><argument_list>(<argument><expr><name>CONFIG_OOM_BGCHILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dismissMemoryInChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closeChildUnusedResourceAfterFork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fork_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isMutuallyExclusiveChildType</name><argument_list>(<argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>fork_errno</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_total_forks</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_rate</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"fork"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><call><name>isMutuallyExclusiveChildType</name><argument_list>(<argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_pid</name></name> <operator>=</operator> <name>childpid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_type</name></name> <operator>=</operator> <name>purpose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_peak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_cow_updated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_module_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_current_save_keys_total</name></name> <operator>=</operator> <call><name>dbTotalServerKeyCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>updateDictResizePolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleFireServerEvent</name><argument_list>(<argument><expr><name>REDISMODULE_EVENT_FORK_CHILD</name></expr></argument>,
<argument><expr><name>REDISMODULE_SUBEVENT_FORK_CHILD_BORN</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>childpid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sendChildCowInfo</name><parameter_list>(<parameter><decl><type><name>childInfoType</name></type> <name>info_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sendChildInfoGeneric</name><argument_list>(<argument><expr><name>info_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sendChildInfo</name><parameter_list>(<parameter><decl><type><name>childInfoType</name></type> <name>info_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>sendChildInfoGeneric</name><argument_list>(<argument><expr><name>info_type</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>dismissMemory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_hint</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>size_hint</name> <operator>&amp;&amp;</operator> <name>size_hint</name> <operator>&lt;=</operator> <name><name>server</name><operator>.</operator><name>page_size</name></name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>zmadvise_dontneed</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>dismissClientMemory</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>dismissSds</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dismissSds</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argv_len_sum</name></name><operator>/</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>page_size</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dismissObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dismissMemory</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>reply_bytes</name></name><operator>/</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>page_size</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>clientReplyBlock</name> <modifier>*</modifier></type><name>bulk</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>bulk</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dismissMemory</name><argument_list>(<argument><expr><name>bulk</name></expr></argument>, <argument><expr><name><name>bulk</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dismissMemory</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>dismissMemoryInChild</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>thp_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JEMALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_buffer_blocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>replBufBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dismissMemory</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dismissClientMemory</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>memtest</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>megabytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>int</name></type> <name>checkForSentinelMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>exec_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>exec_name</name></expr></argument>,<argument><expr><literal type="string">"redis-sentinel"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--sentinel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>loadDataFromDisk</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>start</name> <init>= <expr><call><name>ustime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>loadAppendOnlyFiles</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_manifest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AOF_FAILED</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AOF_OPEN_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name> <init>= <expr><name>RDB_SAVE_INFO_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdb_flags</name> <init>= <expr><name>RDBFLAGS_NONE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>iAmMaster</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>createReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdb_flags</name> <operator>|=</operator> <name>RDBFLAGS_FEED_REPL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rdbLoad</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>,<argument><expr><name>rdb_flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"DB loaded from disk: %.3f seconds"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name><operator>)</operator><operator>/</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rsi</name><operator>.</operator><name>repl_id_is_set</name></name> <operator>&amp;&amp;</operator>
<name><name>rsi</name><operator>.</operator><name>repl_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>



<name><name>rsi</name><operator>.</operator><name>repl_stream_db</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iAmMaster</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,<argument><expr><name><name>rsi</name><operator>.</operator><name>repl_id</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>=</operator> <name><name>rsi</name><operator>.</operator><name>repl_offset</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>replicationCacheMasterUsingMyself</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr></argument>,<argument><expr><name><name>rsi</name><operator>.</operator><name>repl_stream_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>,<argument><expr><name><name>rsi</name><operator>.</operator><name>repl_id</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name> <operator>=</operator> <name><name>rsi</name><operator>.</operator><name>repl_offset</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>+=</operator> <name><name>rsi</name><operator>.</operator><name>repl_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>-</operator>
<name><name>server</name><operator>.</operator><name>repl_backlog</name><operator>-&gt;</operator><name>histlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rebaseReplicationBuffer</name><argument_list>(<argument><expr><name><name>rsi</name><operator>.</operator><name>repl_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_no_slaves_since</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Fatal error loading the DB: %s. Exiting."</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeReplicationBacklog</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisOutOfMemoryHandler</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>allocation_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Out Of Memory allocating %zu bytes!"</literal></expr></argument>,
<argument><expr><name>allocation_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Redis aborting for OUT OF MEMORY. Allocating %zu bytes!"</literal></expr></argument>,
<argument><expr><name>allocation_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>sds</name></type> <name>redisProcTitleGetVariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sds</name></type> <name>varname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"listen-addr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tls_port</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unixsocket:%s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"server-mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[cluster]"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[sentinel]"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"config-file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"tls-port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tls_port</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"unixsocket"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>sds</name></type> <name>expandProcTitleTemplate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>res</name> <init>= <expr><call><name>sdstemplate</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>redisProcTitleGetVariable</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>sdstrim</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>validateProcTitleTemplate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>res</name> <init>= <expr><call><name>expandProcTitleTemplate</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisSetProcTitle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SETPROCTITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>title</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>proc_title</name> <init>= <expr><call><name>expandProcTitleTemplate</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>proc_title_template</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc_title</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setproctitle</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>proc_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>proc_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisSetCpuAffinity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpulist</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SETCPUAFFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setcpuaffinity</name><argument_list>(<argument><expr><name>cpulist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>cpulist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>redisCommunicateSystemd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sd_notify_msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSYSTEMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sd_notify</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sd_notify_msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"systemd supervision error: NOTIFY_SOCKET not found!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"systemd supervision error: sd_notify: %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sd_notify_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>redisSupervisedUpstart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upstart_job</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"UPSTART_JOB"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>upstart_job</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"upstart supervision requested, but UPSTART_JOB not found!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"supervised by upstart, will stop to signal readiness."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"UPSTART_JOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>redisSupervisedSystemd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSYSTEMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"systemd supervision requested or auto-detected, but Redis is compiled without libsystemd support!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=Redis is loading...\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
<argument><expr><literal type="string">"Supervised by systemd. Please make sure you set appropriate values for TimeoutStartSec and TimeoutStopSec in your service unit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisIsSupervised</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SUPERVISED_AUTODETECT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"UPSTART_JOB"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Upstart supervision detected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SUPERVISED_UPSTART</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"NOTIFY_SOCKET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Systemd supervision detected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SUPERVISED_SYSTEMD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SUPERVISED_UPSTART</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisSupervisedUpstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SUPERVISED_SYSTEMD</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisSupervisedSystemd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iAmMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>!</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <call><name>nodeIsMaster</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testhelp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>__failed_tests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>__test_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<typedef>typedef <function_decl><type><name>int</name></type> <name>redisTestProc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>redisTest</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>redisTestProc</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failed</name></decl>;</decl_stmt>
}</block> <decl><name><name>redisTests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"ziplist"</literal></expr>, <expr><name>ziplistTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"quicklist"</literal></expr>, <expr><name>quicklistTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"intset"</literal></expr>, <expr><name>intsetTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"zipmap"</literal></expr>, <expr><name>zipmapTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sha1test"</literal></expr>, <expr><name>sha1Test</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"util"</literal></expr>, <expr><name>utilTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"endianconv"</literal></expr>, <expr><name>endianconvTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"crc64"</literal></expr>, <expr><name>crc64Test</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"zmalloc"</literal></expr>, <expr><name>zmalloc_test</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sds"</literal></expr>, <expr><name>sdsTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dict"</literal></expr>, <expr><name>dictTest</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"listpack"</literal></expr>, <expr><name>listpackTest</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><name>redisTestProc</name> <modifier>*</modifier></type><name>getTestProcByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numtests</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisTests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>redisTest</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numtests</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name><name>redisTests</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>redisTests</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>proc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>config_from_stdin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--accurate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDIS_TEST_ACCURATE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--large-memory"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REDIS_TEST_LARGE_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numtests</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisTests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>redisTest</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numtests</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>redisTests</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>failed</name> <operator>=</operator> <operator>(</operator><name><name>redisTests</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>proc</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>int</name></type> <name>failed_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numtests</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>redisTests</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>failed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failed_num</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[failed] Test - %s\n"</literal></expr></argument>, <argument><expr><name><name>redisTests</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[ok] Test - %s\n"</literal></expr></argument>, <argument><expr><name><name>redisTests</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d tests, %d passed, %d failed\n"</literal></expr></argument>, <argument><expr><name>numtests</name></expr></argument>,
<argument><expr><name>numtests</name><operator>-</operator><name>failed_num</name></expr></argument>, <argument><expr><name>failed_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>failed_num</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>redisTestProc</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>getTestProcByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>proc</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INIT_SETPROCTITLE_REPLACEMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>spt_init</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_COLLATE</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zmalloc_set_oom_handler</name><argument_list>(<argument><expr><name>redisOutOfMemoryHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>^</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>srandom</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>^</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_genrand64</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>^</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>crc64_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>umask</name></name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hashseed</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getRandomBytes</name><argument_list>(<argument><expr><name>hashseed</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hashseed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dictSetHashFunctionSeed</name><argument_list>(<argument><expr><name>hashseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exec_name</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exec_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>exec_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name> <operator>=</operator> <call><name>checkForSentinelMode</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>exec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>initServerConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>moduleInitModulesSystem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tlsInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>server</name><operator>.</operator><name>executable</name></name> <operator>=</operator> <call><name>getAbsolutePath</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>argc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>initSentinelConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>initSentinel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>exec_name</name></expr></argument>,<argument><expr><literal type="string">"redis-check-rdb"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redis_check_rdb_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>exec_name</name></expr></argument>,<argument><expr><literal type="string">"redis-check-aof"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redis_check_aof_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>options</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--test-memory"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memtest</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Please specify the amount of memory to test in megabytes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Example: ./redis-server --test-memory 4096\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>=</operator> <call><name>getAbsolutePath</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>j</name> <operator>==</operator> <name>argc</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config_from_stdin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>




<if type="elseif">else if <condition>(<expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>loadServerConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>, <argument><expr><name>config_from_stdin</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>loadSentinelConfigFromQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelCheckConfigFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>supervised</name></name> <operator>=</operator> <call><name>redisIsSupervised</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>background</name> <init>= <expr><name><name>server</name><operator>.</operator><name>daemonize</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>supervised</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>background</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>daemonize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Redis version=%s, bits=%d, commit=%s, modified=%d, pid=%d, just started"</literal></expr></argument>,
<argument><expr><name>REDIS_VERSION</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: no config file specified, using the default config. In order to specify a config file use %s /path/to/redis.conf"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Configuration loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>initServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>background</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>pidfile</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>createPidFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>set_proc_title</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redisAsciiArt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checkTcpBacklogSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Server initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>linuxMemoryWarnings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__arm64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>linuxMadvFreeForkBugCheck</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING Your kernel has a bug that could lead to data corruption during background save. "</literal>
<literal type="string">"Please upgrade to the latest stable kernel."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to test the kernel for a bug that could lead to data corruption during background save. "</literal>
<literal type="string">"Your system could be affected, please report this error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIgnoreWarning</name><argument_list>(<argument><expr><literal type="string">"ARM64-COW-BUG"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Redis will now exit to prevent data corruption. "</literal>
<literal type="string">"Note that it is possible to suppress this warning by setting the following config: ignore-warnings ARM64-COW-BUG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>moduleInitModulesSystemLast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>moduleLoadFromQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACLLoadUsersAtStartup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitServerLast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aofLoadManifestFromDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>loadDataFromDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aofOpenIfNeededOnServerStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aofDelHistoryFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>verifyClusterConfigWithData</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"You can't have keys in a DB different than DB 0 when in "</literal>
<literal type="string">"Cluster mode. Exiting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>ipfd</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>tlsfd</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Ready to accept connections"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"The server is now ready to accept connections at %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=Ready to accept connections\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=Ready to accept connections in read-only mode. Waiting for MASTER &lt;-&gt; REPLICA sync\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"READY=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ACLLoadUsersAtStartup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitServerLast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sentinelIsRunning</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"STATUS=Ready to accept connections\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redisCommunicateSystemd</name><argument_list>(<argument><expr><literal type="string">"READY=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: You specified a maxmemory value that is less than 1MB (current value is %llu bytes). Are you sure this is what you really want?"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redisSetCpuAffinity</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>server_cpulist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setOOMScoreAdj</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aeMain</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aeDeleteEventLoop</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
