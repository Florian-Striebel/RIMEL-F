<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/lolwut5.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lolwut.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>lwTranslatePixelsGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>byte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0x2800</literal> <operator>+</operator> <name>byte</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>lwCanvas</name> <modifier>*</modifier></type><name>lwDrawSchotter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>console_cols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>squares_per_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>squares_per_col</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>canvas_width</name> <init>= <expr><name>console_cols</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><ternary><condition><expr><name>canvas_width</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>square_side</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>canvas_width</name><operator>-</operator><name>padding</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>squares_per_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canvas_height</name> <init>= <expr><name>square_side</name> <operator>*</operator> <name>squares_per_col</name> <operator>+</operator> <name>padding</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name> <init>= <expr><call><name>lwCreateCanvas</name><argument_list>(<argument><expr><name>canvas_width</name></expr></argument>, <argument><expr><name>canvas_height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>squares_per_col</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>squares_per_row</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><name>x</name> <operator>*</operator> <name>square_side</name> <operator>+</operator> <name>square_side</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>padding</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><name>y</name> <operator>*</operator> <name>square_side</name> <operator>+</operator> <name>square_side</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>padding</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>RAND_MAX</name> <operator>/</operator> <name>squares_per_col</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>RAND_MAX</name> <operator>/</operator> <name>squares_per_col</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>RAND_MAX</name> <operator>/</operator> <name>squares_per_col</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>-</operator><name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>-</operator><name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r3</name> <operator>=</operator> <operator>-</operator><name>r3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sx</name> <operator>+=</operator> <name>r2</name><operator>*</operator><name>square_side</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>+=</operator> <name>r3</name><operator>*</operator><name>square_side</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lwDrawSquare</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><name>square_side</name></expr></argument>,<argument><expr><name>angle</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>canvas</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>sds</name></type> <name>renderCanvas</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>text</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>unicode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lwTranslatePixelsGroup</name><argument_list>(<argument><expr><name>byte</name></expr></argument>,<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>,<argument><expr><name>unicode</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>text</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>lolwut5Command</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>cols</name> <init>= <expr><literal type="number">66</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>squares_per_row</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>squares_per_col</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>squares_per_row</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>squares_per_col</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>squares_per_row</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_row</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>squares_per_row</name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_row</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>squares_per_col</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>squares_per_col</name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_col</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name> <init>= <expr><call><name>lwDrawSchotter</name><argument_list>(<argument><expr><name>cols</name></expr></argument>,<argument><expr><name>squares_per_row</name></expr></argument>,<argument><expr><name>squares_per_col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>rendered</name> <init>= <expr><call><name>renderCanvas</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,
<argument><expr><literal type="string">"\nGeorg Nees - schotter, plotter on paper, 1968. Redis ver. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyVerbatim</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>rendered</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lwFreeCanvas</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
