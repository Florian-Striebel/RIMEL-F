<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/monotonic.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MONOTONIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MONOTONIC_H</name></cpp:macro></cpp:define>











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>





<typedef>typedef <type><name>uint64_t</name></type> <name>monotime</name>;</typedef>


<function_decl><type><specifier>extern</specifier> <name>monotime</name></type> (<modifier>*</modifier><name>getMonotonicUs</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>monotonicInit</name><parameter_list>()</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>elapsedStart</name><parameter_list>(<parameter><decl><type><name>monotime</name> <modifier>*</modifier></type><name>start_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>start_time</name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>elapsedUs</name><parameter_list>(<parameter><decl><type><name>monotime</name></type> <name>start_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getMonotonicUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start_time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>elapsedMs</name><parameter_list>(<parameter><decl><type><name>monotime</name></type> <name>start_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>elapsedUs</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
