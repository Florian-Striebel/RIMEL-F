<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/ae.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"anet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redisassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EVPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_evport.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_epoll.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_kqueue.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_select.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>aeCreateEventLoop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>monotonicInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eventLoop</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eventLoop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFileEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFiredEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name> <operator>=</operator> <name>setsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventNextId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aeApiCreate</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AE_NONE</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>eventLoop</name></expr>;</return>

<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>eventLoop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>aeGetSetSize</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>aeSetDontWait</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noWait</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>noWait</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AE_DONT_WAIT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_DONT_WAIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>aeResizeSetSize</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>setsize</name> <operator>==</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&gt;=</operator> <name>setsize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aeApiResize</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>setsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFileEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFiredEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name> <operator>=</operator> <name>setsize</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AE_NONE</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>AE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeDeleteEventLoop</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>aeApiFree</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>next_te</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>te</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>te</name> <operator>=</operator> <name>next_te</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeStop</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aeCreateFileEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>,
<parameter><decl><type><name>aeFileProc</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>AE_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aeApiAddEvent</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name> <operator>=</operator> <name>clientData</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>AE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeDeleteFileEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>AE_BARRIER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aeApiDelEvent</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>AE_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>!=</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>aeGetFileClientData</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aeGetFileEvents</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>aeCreateTimeEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>milliseconds</name></decl></parameter>,
<parameter><decl><type><name>aeTimeProc</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>,
<parameter><decl><type><name>aeEventFinalizerProc</name> <modifier>*</modifier></type><name>finalizerProc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>id</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventNextId</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>

<expr_stmt><expr><name>te</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>te</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>te</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call> <operator>+</operator> <name>milliseconds</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>timeProc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>finalizerProc</name></name> <operator>=</operator> <name>finalizerProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>clientData</name></name> <operator>=</operator> <name>clientData</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>te</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name> <operator>=</operator> <name>te</name></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aeDeleteTimeEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>AE_DELETED_EVENT_ID</name></expr>;</expr_stmt>
<return>return <expr><name>AE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>AE_ERR</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>usUntilEarliestTimer</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>te</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>earliest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>earliest</name> <operator>||</operator> <name><name>te</name><operator>-&gt;</operator><name>when</name></name> <operator>&lt;</operator> <name><name>earliest</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>earliest</name> <operator>=</operator> <name>te</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>monotime</name></type> <name>now</name> <init>= <expr><call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>now</name> <operator>&gt;=</operator> <name><name>earliest</name><operator>-&gt;</operator><name>when</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>earliest</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name>now</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>processTimeEvents</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>maxId</name></decl>;</decl_stmt>

<expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxId</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventNextId</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>monotime</name></type> <name>now</name> <init>= <expr><call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>id</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AE_DELETED_EVENT_ID</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>te</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>finalizerProc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>te</name><operator>-&gt;</operator><name>finalizerProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>te</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name>maxId</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>when</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>te</name><operator>-&gt;</operator><name>timeProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>getMonotonicUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>AE_NOMORE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <name>retval</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>AE_DELETED_EVENT_ID</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>processed</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>aeProcessEvents</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>numevents</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_FILE_EVENTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_DONT_WAIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>usUntilTimer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_DONT_WAIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>usUntilTimer</name> <operator>=</operator> <call><name>usUntilEarliestTimer</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>usUntilTimer</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>usUntilTimer</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>usUntilTimer</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AE_DONT_WAIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tvp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AE_DONT_WAIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>AE_CALL_BEFORE_SLEEP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>numevents</name> <operator>=</operator> <call><name>aeApiPoll</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>tvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>AE_CALL_AFTER_SLEEP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numevents</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fired</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>












<decl_stmt><decl><type><name>int</name></type> <name>invert</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>AE_BARRIER</name></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>invert</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>,<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fired</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fired</name> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>,<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fired</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>invert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>fired</name> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>,<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fired</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>processed</name> <operator>+=</operator> <call><name>processTimeEvents</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>processed</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>aeWait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLHUP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retmask</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeMain</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>aeProcessEvents</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>AE_ALL_EVENTS</name><operator>|</operator>
<name>AE_CALL_BEFORE_SLEEP</name><operator>|</operator>
<name>AE_CALL_AFTER_SLEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>aeGetApiName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>aeApiName</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeSetBeforeSleepProc</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>aeBeforeSleepProc</name> <modifier>*</modifier></type><name>beforesleep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name> <operator>=</operator> <name>beforesleep</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeSetAfterSleepProc</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>aeBeforeSleepProc</name> <modifier>*</modifier></type><name>aftersleep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name> <operator>=</operator> <name>aftersleep</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
