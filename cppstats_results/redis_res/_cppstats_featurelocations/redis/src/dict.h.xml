<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/dict.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DICT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DICT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mt19937-64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_ERR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>dictEntry</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>s64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
}</block> <decl><name>v</name></decl>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>dictEntry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>metadata</name><index>[]</index></name></decl>;</decl_stmt>


}</block></struct></type> <name>dictEntry</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>dict</name></name></type> <name>dict</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dictType</name> <block>{
<function_decl><type><name>uint64_t</name></type> (<modifier>*</modifier><name>hashFunction</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>keyDup</name>)<parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>valDup</name>)<parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>keyCompare</name>)<parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>keyDestructor</name>)<parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>valDestructor</name>)<parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>expandAllowed</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>moreMem</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>usedRatio</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>dictEntryMetadataBytes</name>)<parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>dictType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTHT_SIZE</name><parameter_list>(<parameter><type><name>exp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((exp) == -1 ? 0 : (unsigned long)1&lt;&lt;(exp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTHT_SIZE_MASK</name><parameter_list>(<parameter><type><name>exp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((exp) == -1 ? 0 : (DICTHT_SIZE(exp))-1)</cpp:value></cpp:define>

<struct>struct <name>dict</name> <block>{
<decl_stmt><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name><name>ht_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>ht_used</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>rehashidx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name>pauserehash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name><name>ht_size_exp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





<typedef>typedef <type><struct>struct <name>dictIterator</name> <block>{
<decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>table</name></decl>, <name>safe</name>;</decl_stmt>
<decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl>, <modifier>*</modifier><name>nextEntry</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>fingerprint</name></decl>;</decl_stmt>
}</block></struct></type> <name>dictIterator</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>dictScanFunction</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>dictScanBucketFunction</name>)<parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>bucketref</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_HT_INITIAL_EXP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_HT_INITIAL_SIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;(DICT_HT_INITIAL_EXP))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictFreeVal</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((d)-&gt;type-&gt;valDestructor) (d)-&gt;type-&gt;valDestructor((d), (entry)-&gt;v.val)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSetVal</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>_val_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((d)-&gt;type-&gt;valDup) (entry)-&gt;v.val = (d)-&gt;type-&gt;valDup((d), _val_); else (entry)-&gt;v.val = (_val_); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSetSignedIntegerVal</name><parameter_list>(<parameter><type><name>entry</name></type></parameter>, <parameter><type><name>_val_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (entry)-&gt;v.s64 = _val_; } while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSetUnsignedIntegerVal</name><parameter_list>(<parameter><type><name>entry</name></type></parameter>, <parameter><type><name>_val_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (entry)-&gt;v.u64 = _val_; } while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSetDoubleVal</name><parameter_list>(<parameter><type><name>entry</name></type></parameter>, <parameter><type><name>_val_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (entry)-&gt;v.d = _val_; } while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictFreeKey</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((d)-&gt;type-&gt;keyDestructor) (d)-&gt;type-&gt;keyDestructor((d), (entry)-&gt;key)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSetKey</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>_key_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((d)-&gt;type-&gt;keyDup) (entry)-&gt;key = (d)-&gt;type-&gt;keyDup((d), _key_); else (entry)-&gt;key = (_key_); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictCompareKeys</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>key1</name></type></parameter>, <parameter><type><name>key2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((d)-&gt;type-&gt;keyCompare) ? (d)-&gt;type-&gt;keyCompare((d), key1, key2) : (key1) == (key2))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictMetadata</name><parameter_list>(<parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(entry)-&gt;metadata)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictMetadataSize</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d)-&gt;type-&gt;dictEntryMetadataBytes ? (d)-&gt;type-&gt;dictEntryMetadataBytes(d) : 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictHashKey</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)-&gt;type-&gt;hashFunction(key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictGetKey</name><parameter_list>(<parameter><type><name>he</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((he)-&gt;key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictGetVal</name><parameter_list>(<parameter><type><name>he</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((he)-&gt;v.val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictGetSignedIntegerVal</name><parameter_list>(<parameter><type><name>he</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((he)-&gt;v.s64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictGetUnsignedIntegerVal</name><parameter_list>(<parameter><type><name>he</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((he)-&gt;v.u64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictGetDoubleVal</name><parameter_list>(<parameter><type><name>he</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((he)-&gt;v.d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSlots</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DICTHT_SIZE((d)-&gt;ht_size_exp[0])+DICTHT_SIZE((d)-&gt;ht_size_exp[1]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictSize</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d)-&gt;ht_used[0]+(d)-&gt;ht_used[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictIsRehashing</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d)-&gt;rehashidx != -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictPauseRehashing</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)-&gt;pauserehash++</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dictResumeRehashing</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)-&gt;pauserehash--</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ULONG_MAX</name> <operator>&gt;=</operator> <literal type="number">0xffffffffffffffff</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomULong</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((unsigned long) genrand64_int64())</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomULong</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>random()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>dict</name> <modifier>*</modifier></type><name>dictCreate</name><parameter_list>(<parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictExpand</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictTryExpand</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictAdd</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictAddRaw</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>existing</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictAddOrFind</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictReplace</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictDelete</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictUnlink</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictFreeUnlinkedEntry</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictRelease</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier></type> <name>dictFind</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dictFetchValue</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictResize</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>dictGetIterator</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>dictGetSafeIterator</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictNext</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictReleaseIterator</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictGetRandomKey</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>dictGetFairRandomKey</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>dictGetSomeKeys</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>des</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictGetStats</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>dictGenHashFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>dictGenCaseHashFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictEmpty</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<name>callback</name>)<parameter_list>(<parameter><decl><type><name>dict</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictEnableResize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictDisableResize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictRehash</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictRehashMilliseconds</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dictSetHashFunctionSeed</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dictGetHashFunctionSeed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>dictScan</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>dictScanFunction</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>dictScanBucketFunction</name> <modifier>*</modifier></type><name>bucketfn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>dictGetHash</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dictEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>dictFindEntryRefByPtrAndHash</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>oldptr</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDIS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>dictTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
