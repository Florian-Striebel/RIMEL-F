<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/resp_parser.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SRC_RESP_PARSER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_RESP_PARSER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>ReplyParser</name></name></type> <name>ReplyParser</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ReplyParserCallbacks</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>null_array_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>null_bulk_string_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>bulk_string_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>error_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>simple_str_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>long_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>array_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ReplyParser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ReplyParser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>map_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ReplyParser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>bool_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>double_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>big_number_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>verbatim_string_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>attribute_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ReplyParser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>null_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>proto_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>error</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ReplyParserCallbacks</name>;</typedef>

<struct>struct <name>ReplyParser</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curr_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReplyParserCallbacks</name></type> <name>callbacks</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>parseReply</name><parameter_list>(<parameter><decl><type><name>ReplyParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
