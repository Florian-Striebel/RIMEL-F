<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/rio.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__REDIS_RIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__REDIS_RIO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIO_FLAG_READ_ERROR</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIO_FLAG_WRITE_ERROR</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<struct>struct <name>_rio</name> <block>{



<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>read</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_rio</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_rio</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> (<modifier>*</modifier><name>tell</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_rio</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>flush</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_rio</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>update_cksum</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_rio</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>cksum</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>processed_bytes</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>max_processing_chunk</name></decl>;</decl_stmt>


<union>union <block>{

<struct>struct <block>{
<decl_stmt><decl><type><name>sds</name></type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>pos</name></decl>;</decl_stmt>
}</block> <decl><name>buffer</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>buffered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>autosync</name></decl>;</decl_stmt>
}</block> <decl><name>file</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_so_far</name></decl>;</decl_stmt>
}</block> <decl><name>conn</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sds</name></type> <name>buf</name></decl>;</decl_stmt>
}</block> <decl><name>fd</name></decl>;</struct>
}</block> <decl><name>io</name></decl>;</union>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>_rio</name></name></type> <name>rio</name>;</typedef>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>rioWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RIO_FLAG_WRITE_ERROR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_write</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>max_processing_chunk</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>max_processing_chunk</name></name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>max_processing_chunk</name></name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>update_cksum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>update_cksum</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>bytes_to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>bytes_to_write</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RIO_FLAG_WRITE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>bytes_to_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>bytes_to_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name> <operator>+=</operator> <name>bytes_to_write</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>rioRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RIO_FLAG_READ_ERROR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_read</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>max_processing_chunk</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>max_processing_chunk</name></name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>max_processing_chunk</name></name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>bytes_to_read</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RIO_FLAG_READ_ERROR</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>update_cksum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>update_cksum</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>bytes_to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>bytes_to_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>bytes_to_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name> <operator>+=</operator> <name>bytes_to_read</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>off_t</name></type> <name>rioTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>r</name><operator>-&gt;</operator><name>tell</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rioFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>r</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rioGetReadError</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RIO_FLAG_READ_ERROR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rioGetWriteError</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RIO_FLAG_WRITE_ERROR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rioClearErrors</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>RIO_FLAG_READ_ERROR</name><operator>|</operator><name>RIO_FLAG_WRITE_ERROR</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>rioInitWithFile</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rioInitWithBuffer</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rioInitWithConn</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>read_limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rioInitWithFd</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rioFreeFd</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rioFreeConn</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>sds</name><modifier>*</modifier></type> <name>out_remainingBufferedData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>rioWriteBulkCount</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>rioWriteBulkString</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>rioWriteBulkLongLong</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>rioWriteBulkDouble</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>redisObject</name>;</struct_decl>
<function_decl><type><name>int</name></type> <name>rioWriteBulkObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisObject</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rioGenericUpdateChecksum</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rioSetAutoSync</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
