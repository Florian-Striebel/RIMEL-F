<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/redis_res/_cppstats_featurelocations/redis/src/lolwut.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lolwut.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>lolwut5Command</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lolwut6Command</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>lolwutUnstableCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>sds</name></type> <name>rendered</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Redis ver. "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addReplyVerbatim</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>rendered</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>lolwutCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>REDIS_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>verstr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>ver</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>verstr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>verstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%u.0.0"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>verstr</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'5'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'4'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lolwut5Command</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'6'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'5'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lolwut6Command</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lolwutUnstableCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>verstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>lwCanvas</name> <modifier>*</modifier></type><name>lwCreateCanvas</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bgcolor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>canvas</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name></name></expr></argument>,<argument><expr><name>bgcolor</name></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>canvas</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>lwFreeCanvas</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>lwDrawPixel</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>lwGetPixel</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>lwDrawLine</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>x2</name><operator>-</operator><name>x1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>y2</name><operator>-</operator><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x1</name> <operator>&lt;</operator> <name>x2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>y1</name> <operator>&lt;</operator> <name>y2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>dx</name><operator>-</operator><name>dy</name></expr></init></decl>, <decl><type ref="prev"/><name>e2</name></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lwDrawPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>==</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>==</operator> <name>y2</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>err</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator> <operator>-</operator><name>dy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&lt;</operator> <name>dx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




















<function><type><name>void</name></type> <name>lwDrawSquare</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>px</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>py</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>





<expr_stmt><expr><name>size</name> <operator>/=</operator> <literal type="number">1.4142135623</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>k</name> <init>= <expr><name>M_PI</name><operator>/</operator><literal type="number">4</literal> <operator>+</operator> <name>angle</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>px</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>size</name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>py</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>size</name> <operator>+</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>M_PI</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lwDrawLine</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name><name>px</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>py</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>px</name><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>py</name><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
